(()=>{"use strict";var e={190:(e,t)=>{function a(e){const t=new Map;return function(...a){if(t.has(a))return t.get(a);const n=e(a);return t.set(a,n),n}}Object.defineProperty(t,"__esModule",{value:!0}),t.updateMap=t.getNumberSuffix=t.getEnumIterator=t.getEnumLength=t.memoize=t.EQ=t.waitForFinalEvent=void 0,t.waitForFinalEvent=function(){const e={};return function(t,a,n){n||(n="Don't call this twice without a uniqueId"),e[n]&&clearTimeout(e[n]),e[n]=setTimeout(t,a)}}(),t.EQ=function(e,t){return Math.abs(e-t)<1e-5},t.memoize=a,t.getEnumLength=a((function(e){return Object.keys(e).length/2})),t.getEnumIterator=a((function*(e){for(let t in e[0])isNaN(Number(t))||(yield Number(t))})),t.getNumberSuffix=function(e){if(e<0)throw new Error("Suffixes not supported for negative numbers");return e%10==1?11==e?"th":"st":e%10==2?12==e?"th":"nd":e%10==3?13==e?"th":"rd":"th"},t.updateMap=function(e,t,a){e.set(t,(e.has(t)?e.get(t):0)+a)}},9758:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupGraphNav=void 0;const n=a(1501);t.setupGraphNav=function(){$("#graph_labels").on("click",".graph_label",(function(){if($(this).hasClass("selected"))return;const e=$("#side_banner"),t=new n.SidePanel(e);$(".graph_label").removeClass("selected"),$(this).addClass("selected"),$(".graph_area").hide(),$(`#${$(this).data("graphId")}`).show(),t.reset()}))}},7075:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupNav=void 0;const a=new Map([["charIdx",['<i class="fa-solid fa-address-book"></i>']],["material",['<i class="fa-solid fa-globe-stand"></i>']],["shards",['<i class="fa-duotone fa-solar-system"></i>']],["history",['<i class="fa-regular fa-timeline-arrow"></i>']],["rules",['<i class="fa-solid fa-gavel"></i>']],["interactions",['<i class="fa-duotone fa-user-secret"></i>']],["beastiary",['<i class="fa-solid fa-swords"></i>']]]);t.setupNav=function(){const e=$("#page_nav");$(".page").each((function(){const t=$(this).data("navId");e.append(`<div class="page_nav_link" data-nav-to="${t}">\n                ${a.get(t)}${$(this).find(".page_header").text()}\n            </div>`)})),e.append("<div class='space_filler'></div>"),e.on("click",".page_nav_link",(function(){const e=$(this).data("navTo");$(`.page[data-nav-id='${e}']`)[0].scrollIntoView({behavior:"smooth"})}))}},6967:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseUniqueDOMGenerator=void 0,t.BaseUniqueDOMGenerator=class{get $element(){const e=$(`#${this.id}`);return 0==e.length?null:e}refreshRenderedElement(){const e=this.$element;null!=e&&this.doRefreshRenderedElement(e)}doRefreshRenderedElement(e){}}},4982:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.T_NOW=t.GameTimestamp=void 0;const n=a(190);class i{constructor(e=0,t=0,a=0,n=0,i=0,s=0){this.year=e,this.day=t,this.hour=a,this.minute=n,this.second=i,this.ms=s}static fromDays(e){return new i(0,e)}get totalMillis(){return this.ms+1e3*(this.second+60*(this.minute+60*(this.hour+24*(this.day+100*this.year))))}get totalDays(){return this.day+100*this.year}generateDOMString(){const e=this.year+Math.floor(this.day/100),t=this.day%100+Math.floor(this.hour/24),a=this.hour%24+Math.floor(this.minute/60),i=this.minute%60+Math.floor(this.second/60),s=String(a).padStart(2,"0"),o=String(i).padStart(2,"0");return`${t}<sup>${(0,n.getNumberSuffix)(t)}</sup> of Year ${e}, ${s}:${o}`}}t.GameTimestamp=i,i.DAY=864e5,t.T_NOW=new i(0,6,12,15)},8547:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCards=t.Card=void 0;const n=a(190);class i{static loadFromDOM(){i.$commonCentralView=$("#character_idx .central_view"),i.$tokenSpace=$("#tokens"),i.$commonCentralView.on("click",".token_selector",(function(){const e=$(this).parent().siblings(".tokens");e.children().hide(),e.children(`[data-token='${$(this).data("token")}']`).show()})),this.$floatingCard=$("#floating_card"),this.$cardGraveyard=$("#card_graveyard"),this.snapWindowDimensions(),$(window).resize((()=>{(0,n.waitForFinalEvent)((()=>{this.snapWindowDimensions()}),500,"Indexible.loadFromDOM")}))}static verbose(e){return`<span class="verbose">${e}</span>`}static link(e,t){return`<span class="card_link" data-index-key="${e}">${t}</span>`}static snapWindowDimensions(){const e=$(window);this.viewportHeightInPx=e.height(),this.viewportWidthInPx=e.width()}static revealFloatingCard(){this.$floatingCard.show(),this.floatingCardWidth=this.$floatingCard.width(),this.floatingCardHeight=this.$floatingCard.height()}static hideFloatingCard(){this.$floatingCard.hide()}static moveFloatingCard(e,t){const a=e+this.floatingCardWidth+24<this.viewportWidthInPx,n=e>this.floatingCardWidth+24,i=t+this.floatingCardHeight+24<this.viewportHeightInPx,s=t>this.floatingCardHeight+24;a?i?this.$floatingCard.css({top:t+12,left:e+12}):s?this.$floatingCard.css({top:t-12-this.floatingCardHeight,left:e+12}):this.$floatingCard.hide():n?i?this.$floatingCard.css({top:t+12,left:e-12-this.floatingCardWidth}):s?this.$floatingCard.css({top:t-12-this.floatingCardHeight,left:e-12-this.floatingCardWidth}):this.$floatingCard.hide():this.$floatingCard.hide()}static getIndexible(e){return this.Index.get(e)}static showCardFullSize(e){i.$commonCentralView.children().hide();const t=e.getCardIndex(),a=i.$commonCentralView.children(`[data-index-key='${t}']`);if(a.length>0)a.show();else{const t=$(e.generateCard(!1));i.$commonCentralView.append(t),t.show()}}static showCardFloating(e){i.$floatingCard.children().hide();const t=e.getCardIndex(),a=i.$floatingCard.children(`[data-index-key='${t}']`);if(a.length>0)a.show();else{const t=$(e.generateCard(!0));t.addClass("floating"),i.$floatingCard.append(t),t.show()}}static register(e){i.Index.set(e.getCardIndex(),e)}}t.Card=i,i.$commonCentralView=null,i.$tokenSpace=null,i.Index=new Map,t.setupCards=function(){i.loadFromDOM();const e=$("#tokens");e.on("mouseenter",".token",(function(e){const t=$(this).data("indexKey"),a=i.getIndexible(t);i.showCardFloating(a),i.revealFloatingCard(),i.moveFloatingCard(e.clientX,e.clientY)})),e.on("mouseleave",".token",(function(){i.hideFloatingCard()})),e.on("mousemove",".token",(function(e){i.moveFloatingCard(e.clientX,e.clientY)})),e.on("click",".token",(function(){i.hideFloatingCard();const e=$(this).data("indexKey"),t=i.getIndexible(e);i.showCardFullSize(t)}));const t=$(".page");t.on("mouseenter",".card_link",(function(e){const t=$(this).data("indexKey"),a=i.getIndexible(t);i.showCardFloating(a),i.revealFloatingCard(),i.moveFloatingCard(e.clientX,e.clientY)})),t.on("mouseleave",".card_link",(function(){i.hideFloatingCard()})),t.on("mousemove",".card_link",(function(e){i.moveFloatingCard(e.clientX,e.clientY)})),t.on("click",".card_link",(function(){i.hideFloatingCard();const e=$(this).data("indexKey"),t=i.getIndexible(e);i.showCardFullSize(t)}))}},2656:(e,t)=>{var a,n;Object.defineProperty(t,"__esModule",{value:!0}),t.Rating=t.Rarity=void 0,(n=t.Rarity||(t.Rarity={}))[n.Black=0]="Black",n[n.Common=1]="Common",n[n.Uncommon=2]="Uncommon",n[n.Rare=3]="Rare",n[n.Epic=4]="Epic",n[n.Legendary=5]="Legendary",n[n.Artefact=6]="Artefact",(a=t.Rating||(t.Rating={}))[a.F=0]="F",a[a.E=1]="E",a[a.D=2]="D",a[a.C=3]="C",a[a.B=4]="B",a[a.A=5]="A",a[a.S=6]="S",a[a.SS=7]="SS",a[a.SSS=8]="SSS"},5480:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Shown=t.Vague=t.Hinted=t.Hidden=t.VisibilityLevel=t.Era=t.CSkill=t.CRValue=t.Prof=t.StatValue=t.E=t.Activation=t.ClassHitDice=t.Condition=t.DamageType=t.AdventurerClass=t.Speed=t.StatForSkill=t.DSkill=t.SizeToDice=t.CreatureSize=t.senseStr=t.Sense=t.ProficiencyLevel=t.DStat=void 0;const n=a(5947);var i,s,o,r,l,d,c,h,p,u,m,g,f;!function(e){e[e.Str=0]="Str",e[e.Dex=1]="Dex",e[e.Con=2]="Con",e[e.Int=3]="Int",e[e.Wis=4]="Wis",e[e.Cha=5]="Cha"}(i=t.DStat||(t.DStat={})),function(e){e[e.None=0]="None",e[e.Half=1]="Half",e[e.Prof=2]="Prof",e[e.Expert=3]="Expert"}(s=t.ProficiencyLevel||(t.ProficiencyLevel={})),function(e){e[e.Darkvision=0]="Darkvision",e[e.BlindSight=1]="BlindSight",e[e.TremorSense=2]="TremorSense",e[e.TrueSight=3]="TrueSight",e[e.DevilSight=4]="DevilSight",e[e._NonStandard=5]="_NonStandard",e[e.SteelSight=6]="SteelSight"}(o=t.Sense||(t.Sense={})),t.senseStr=new Map([[o.Darkvision,"Darkvision"],[o.BlindSight,"Blindsight"],[o.TremorSense,"Tremor Sense"],[o.TrueSight,"Truesight"],[o.DevilSight,"Devil's Sight"],[o.SteelSight,"Steelsight"]]),function(e){e[e.Tiny=0]="Tiny",e[e.Small=1]="Small",e[e.Medium=2]="Medium",e[e.Large=3]="Large",e[e.Huge=4]="Huge",e[e.Gargantuan=5]="Gargantuan",e[e._NonStandard=6]="_NonStandard",e[e.Cosmic=7]="Cosmic"}(r=t.CreatureSize||(t.CreatureSize={})),t.SizeToDice=new Map([[r.Tiny,n.D4],[r.Small,n.D6],[r.Medium,n.D8],[r.Large,n.D10],[r.Huge,n.D12],[r.Gargantuan,n.D20],[r.Cosmic,n.D100]]),function(e){e[e.Acrobatics=0]="Acrobatics",e[e.AnimalHandling=1]="AnimalHandling",e[e.Arcana=2]="Arcana",e[e.Athletics=3]="Athletics",e[e.Deception=4]="Deception",e[e.History=5]="History",e[e.Insight=6]="Insight",e[e.Intimidation=7]="Intimidation",e[e.Investigation=8]="Investigation",e[e.Medicine=9]="Medicine",e[e.Nature=10]="Nature",e[e.Perception=11]="Perception",e[e.Performance=12]="Performance",e[e.Persuasion=13]="Persuasion",e[e.Religion=14]="Religion",e[e.SlightOfHand=15]="SlightOfHand",e[e.Stealth=16]="Stealth",e[e.Survival=17]="Survival",e[e._ALL=18]="_ALL",e[e._NonStandard=19]="_NonStandard",e[e.Honor=20]="Honor"}(l=t.DSkill||(t.DSkill={})),t.StatForSkill=new Map([[l.Acrobatics,i.Dex],[l.AnimalHandling,i.Wis],[l.Arcana,i.Int],[l.Athletics,i.Str],[l.Deception,i.Cha],[l.History,i.Int],[l.Insight,i.Wis],[l.Intimidation,i.Cha],[l.Investigation,i.Int],[l.Medicine,i.Wis],[l.Nature,i.Int],[l.Perception,i.Wis],[l.Performance,i.Cha],[l.Persuasion,i.Cha],[l.Religion,i.Int],[l.SlightOfHand,i.Dex],[l.Stealth,i.Dex],[l.Survival,i.Wis],[l.Honor,i.Cha]]),(m=t.Speed||(t.Speed={}))[m.Walking=0]="Walking",m[m.Swimming=1]="Swimming",m[m.Flying=2]="Flying",m[m.Climbing=3]="Climbing",m[m.Burrowing=4]="Burrowing",m[m._NonStandard=5]="_NonStandard",function(e){e[e.Artificer=0]="Artificer",e[e.Barbarian=1]="Barbarian",e[e.Bard=2]="Bard",e[e.Cleric=3]="Cleric",e[e.Druid=4]="Druid",e[e.Fighter=5]="Fighter",e[e.Monk=6]="Monk",e[e.Paladin=7]="Paladin",e[e.Ranger=8]="Ranger",e[e.Rogue=9]="Rogue",e[e.Sorcerer=10]="Sorcerer",e[e.Warlock=11]="Warlock",e[e.Wizard=12]="Wizard"}(d=t.AdventurerClass||(t.AdventurerClass={})),(u=t.DamageType||(t.DamageType={}))[u.Acid=0]="Acid",u[u.Bludgeoning=1]="Bludgeoning",u[u.Cold=2]="Cold",u[u.Fire=3]="Fire",u[u.Force=4]="Force",u[u.Lightning=5]="Lightning",u[u.Necrotic=6]="Necrotic",u[u.Piercing=7]="Piercing",u[u.Poison=8]="Poison",u[u.Psychic=9]="Psychic",u[u.Radiant=10]="Radiant",u[u.Slashing=11]="Slashing",u[u.Thunder=12]="Thunder",u[u.Physical=13]="Physical",u[u.All=14]="All",u[u._NonStandard=15]="_NonStandard",u[u.Biochemical=16]="Biochemical",u[u.Corrosion=17]="Corrosion",u[u.Neural=18]="Neural",u[u.Hellfire=19]="Hellfire",(p=t.Condition||(t.Condition={}))[p.Blinded=0]="Blinded",p[p.Charmed=1]="Charmed",p[p.Deafened=2]="Deafened",p[p.Frightened=3]="Frightened",p[p.Grappled=4]="Grappled",p[p.Incapacitated=5]="Incapacitated",p[p.Invisible=6]="Invisible",p[p.Paralyzed=7]="Paralyzed",p[p.Petrified=8]="Petrified",p[p.Poisoned=9]="Poisoned",p[p.Prone=10]="Prone",p[p.Restrained=11]="Restrained",p[p.Stunned=12]="Stunned",p[p.Unconscious=13]="Unconscious",p[p.Exhaustion=14]="Exhaustion",p[p._NonStandard=15]="_NonStandard",p[p.Fragile=16]="Fragile",p[p.Silenced=17]="Silenced",t.ClassHitDice=new Map([[d.Artificer,n.D8],[d.Barbarian,n.D12],[d.Bard,n.D8],[d.Cleric,n.D8],[d.Druid,n.D8],[d.Fighter,n.D10],[d.Monk,n.D8],[d.Paladin,n.D10],[d.Ranger,n.D10],[d.Rogue,n.D8],[d.Sorcerer,n.D6],[d.Warlock,n.D8],[d.Wizard,n.D6]]),(h=t.Activation||(t.Activation={}))[h.Action=0]="Action",h[h.BonusAction=1]="BonusAction",h[h.Reaction=2]="Reaction",h[h.Special=3]="Special",h[h.LegendaryAction=4]="LegendaryAction",h[h.MythicAction=5]="MythicAction",h[h.LairAction=6]="LairAction",h[h._NonStandard=7]="_NonStandard",t.E=function e(t){if(t instanceof Map){let a=0;for(const[n,i]of t.entries())a+=i*e(n);return a}return(t.sides+1)/2};class v{constructor(e){this.val=Math.round(Math.min(30,Math.max(0,e)))}adjustStat(e){this.val=Math.round(Math.min(30,Math.max(0,this.val+e)))}get stat(){return this.val}get mod(){return v.mod(this.val)}static mod(e){return Math.floor(e/2)-5}}t.StatValue=v;class y{constructor(e){this.val=e}static get(e){if(this.instances.has(e))return this.instances.get(e);if(e<2||e>10)throw new Error("reasonable prof bonus levels crossed");if(!Number.isInteger(e))throw new Error("Can only have integral proficiencies");const t=new y(e);return this.instances.set(e,t),t}mod(e=s.Prof){if(e==s.None)return 0;if(e==s.Half)return Math.floor(this.val/2);if(e==s.Prof)return this.val;if(e==s.Expert)return 2*this.val;throw new Error("Prof level unknown")}}t.Prof=y,y.instances=new Map,t.CRValue=class{constructor(e,t=null){this.profOverride=t,this.val=Math.round(Math.min(30,Math.max(0,e)))}get cr(){return this.val}get prof(){return null!=this.profOverride?this.profOverride:y.get(Math.ceil(Math.max(1,this.val)/4)+1)}compareToStats(){throw new Error("Not implemented.")}},(f=t.CSkill||(t.CSkill={}))[f.Accounting=0]="Accounting",f[f.Anthropology=1]="Anthropology",f[f.Appraise=2]="Appraise",f[f.Archaeology=3]="Archaeology",f[f.Artillery=4]="Artillery",f[f.Charm=5]="Charm",f[f.ComputerUse=6]="ComputerUse",f[f.Demolitions=7]="Demolitions",f[f.Disguise=8]="Disguise",f[f.Diving=9]="Diving",f[f.DriveAuto=10]="DriveAuto",f[f.ElectricalRepair=11]="ElectricalRepair",f[f.Electronics=12]="Electronics",f[f.FirstAid=13]="FirstAid",f[f.Hypnosis=14]="Hypnosis",f[f.Law=15]="Law",f[f.LibraryUse=16]="LibraryUse",f[f.Locksmith=17]="Locksmith",f[f.MechanicalRepair=18]="MechanicalRepair",f[f.ModernMedicine=19]="ModernMedicine",f[f.NaturalWorld=20]="NaturalWorld",f[f.Navigate=21]="Navigate",f[f.Occult=22]="Occult",f[f.OperateHeavyMachinery=23]="OperateHeavyMachinery",f[f.Psychoanalysis=24]="Psychoanalysis",f[f.ReadLips=25]="ReadLips",f[f.Ride=26]="Ride",f[f.Throw=27]="Throw",f[f.Acting=28]="Acting",f[f.Calligraphy=29]="Calligraphy",f[f.Carpentry=30]="Carpentry",f[f.Cooking=31]="Cooking",f[f.Dancing=32]="Dancing",f[f.FineArt=33]="FineArt",f[f.Forgery=34]="Forgery",f[f.Writing=35]="Writing",f[f.Singing=36]="Singing",f[f.Painting=37]="Painting",f[f.Photography=38]="Photography",f[f.Sculpting=39]="Sculpting",f[f.Chainsaw=40]="Chainsaw",f[f.HeavyWeapons=41]="HeavyWeapons",f[f.Flamethrower=42]="Flamethrower",f[f.MachineGun=43]="MachineGun",f[f.SubmachineGun=44]="SubmachineGun",f[f.Aircraft=45]="Aircraft",f[f.Boat=46]="Boat",f[f.Astronomy=47]="Astronomy",f[f.Biology=48]="Biology",f[f.Botany=49]="Botany",f[f.Chemistry=50]="Chemistry",f[f.Cryptography=51]="Cryptography",f[f.Engineering=52]="Engineering",f[f.Forensics=53]="Forensics",f[f.Geology=54]="Geology",f[f.Mathematics=55]="Mathematics",f[f.Meteorology=56]="Meteorology",f[f.Pharmacy=57]="Pharmacy",f[f.Physics=58]="Physics",f[f.Zoology=59]="Zoology",(g=t.Era||(t.Era={}))[g.Future=0]="Future",g[g.Information=1]="Information",g[g.Atomic=2]="Atomic",g[g.Modern=3]="Modern",g[g.Industrial=4]="Industrial",g[g.Renaissance=5]="Renaissance",g[g.Medieval=6]="Medieval",g[g.Classical=7]="Classical",g[g.Ancient=8]="Ancient",g[g.Timeless=9]="Timeless",function(e){e[e.Hidden=0]="Hidden",e[e.Hinted=1]="Hinted",e[e.Vague=2]="Vague",e[e.Shown=3]="Shown"}(c=t.VisibilityLevel||(t.VisibilityLevel={})),t.Hidden=c.Hidden,t.Hinted=c.Hinted,t.Vague=c.Vague,t.Shown=c.Shown},4035:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.setupCountries=void 0,function(e){e[e["Ghost Town"]=0]="Ghost Town",e[e.Ruins=1]="Ruins",e[e.Undefended=2]="Undefended",e[e.Open=3]="Open",e[e.Walled=4]="Walled",e[e.Fortified=5]="Fortified",e[e.Impregnable=6]="Impregnable",e[e.Sprawling=7]="Sprawling",e[e.Organized=8]="Organized",e[e["Space Crunch"]=9]="Space Crunch",e[e.Cluttered=10]="Cluttered",e[e["Merchant Guilds"]=11]="Merchant Guilds",e[e["Central Market"]=12]="Central Market",e[e["Commercial Hub"]=13]="Commercial Hub",e[e["Trade Hotspot"]=14]="Trade Hotspot",e[e["Academic Focus"]=15]="Academic Focus",e[e["Research Centre"]=16]="Research Centre",e[e["Craftsman's Guilds"]=17]="Craftsman's Guilds",e[e["Industrial Zone"]=18]="Industrial Zone",e[e["Mining Ops"]=19]="Mining Ops",e[e["Mafia Control"]=20]="Mafia Control",e[e.Lawless=21]="Lawless",e[e["Efficient Police"]=22]="Efficient Police",e[e["Military Curfew"]=23]="Military Curfew",e[e.Unhygienic=24]="Unhygienic",e[e["Sewage System"]=25]="Sewage System",e[e["Fresh Water"]=26]="Fresh Water",e[e["Performing Artists"]=27]="Performing Artists",e[e["Cultural Hub"]=28]="Cultural Hub",e[e["Tourist Hotspot"]=29]="Tourist Hotspot",e[e.Slums=30]="Slums",e[e.Underground=31]="Underground",e[e.Underworld=32]="Underworld",e[e["Organized Crime"]=33]="Organized Crime",e[e.Harbor=34]="Harbor",e[e.Seaport=35]="Seaport",e[e.Greens=36]="Greens",e[e["Entertainment Infra"]=37]="Entertainment Infra",e[e["Medical Infra"]=38]="Medical Infra",e[e.Charming=39]="Charming",e[e.Breathtaking=40]="Breathtaking",e[e["Mage Presence"]=41]="Mage Presence",e[e["Holy Sites"]=42]="Holy Sites"}(a||(a={}));class n{constructor(e){if(this.$myName=null,this.$myDesc=null,null===n.$countryNames)throw new Error("Static elements not loaded");if(this.planet=e.planet,this.name=e.name,this.fullName=e.fullName,this.capital=e.capital,this.leader=e.leader,this.government=e.government,this.population=e.population,this.primaryCulture=e.primaryCulture,this.area=e.area,this.capitalPopulation=e.capitalPopulation,this.capitalTemperature=e.capitalTemperature,this.capitalElevation=e.capitalElevation,this.races=e.races,this.exoticRaces=e.exoticRaces,this.exclusiveRaces=e.exclusiveRaces,this.description=e.description,this.tags=e.tags,this.capitalTags=e.capitalTags,this.capitalSummary=e.capitalSummary,this.leaderDescription=e.leaderDescription,this.index=`${this.planet}|${this.name}`,n.countriesIndex.has(this.index))throw new Error("Duplicate country");n.countriesIndex.set(this.index,this),this.$myName=$(`<div class='country_name' data-index-key='${this.index}'>${this.name}</div>`),this.$myName.appendTo(n.$countryNames),this.$myDesc=this.generateDOM(),this.$myDesc.hide().appendTo(n.$countryDesc)}static loadStaticElements(){this.$countryNames=$(".country_names"),this.$countryDesc=$(".country_desc"),this.$countryNames.on("click",".country_name:not(.active)",(function(){const e=$(this).data("indexKey");n.countriesIndex.get(e).showCountry()}))}showCountry(){n.$countryDesc.children().hide(),n.$countryNames.children().removeClass("active"),this.$myName.addClass("active"),this.$myDesc.show()}generateDOM(){return $(`\n        <div class="country">\n            <div class="country_data country_card">\n                 <h5>Country</h5>\n                 <table>\n                    <tbody>\n                        <tr><td>Planet</td><td>${this.planet}</td></tr>\n                        <tr><td>Name</td><td>${this.fullName}</td></tr>\n                        <tr><td>Area</td><td>${this.area}K km<sup>2</sup></td></tr>\n                        <tr><td>Population</td><td>${this.population}</td></tr>\n                        <tr><td>Government</td><td>${this.government}</td></tr>\n                        <tr><td>Culture</td><td>${this.primaryCulture}</td></tr>\n                    </tbody>\n                </table>\n                <div class="tags">${this.tags.map((e=>`<span class="tag">${e}</span>`)).join("")}</div>\n            </div>\n            <div class="capital_data country_card">\n                <h5>Capital</h5>\n                <table>\n                    <tbody>\n                        <tr><td>Name</td><td>${this.capital}</td></tr>\n                        <tr><td>Population</td><td>${this.capitalPopulation}</td></tr>\n                        <tr><td>Elevation</td><td>${this.capitalElevation}</td></tr>\n                        <tr><td>Temperature</td><td>${this.capitalTemperature}</td></tr>\n                    </tbody>\n                </table>\n                <div class="tags">${Array.from(this.capitalTags,(([e,t])=>`<span class="tag leveled t${t}">${a[e]}</span>`)).join("")}\n                </div>\n            </div>\n            <div class="leader_data country_card">\n                <h5>Leader</h5>\n                <table>\n                    <tbody>\n                        <tr><td>Name</td><td>${this.leader?this.leader:"None"} \n                    </tbody>\n                </table>\n                <div class="card_info">${this.leaderDescription}</div>\n            </div>\n            <div class="desc">\n                ${this.description}\n                <h5>About the Capital</h5>\n                <div class="capital_info">${this.capitalSummary}</div>\n                <h5>Racial Spread</h5>\n                <div class="racial_info">\n                    <div>Mainly inhabited by ${this.races.size>0?Array.from(this.races,(([e,t])=>`${e} (${Math.round(100*t)/100}%)`)).join(", "):"?"}.</div>\n                    ${Array.isArray(this.exoticRaces)&&this.exoticRaces.length?`<div>${this.exoticRaces.join(", ")} can notably be found here.</div>`:""}\n                    ${Array.isArray(this.exclusiveRaces)&&this.exclusiveRaces.length?`<div>${this.exclusiveRaces.join(", ")} only come from here.</div>`:""}\n                </div>\n            </div>\n        </div>`)}}n.countriesIndex=new Map,n.$countryNames=null,n.$countryDesc=null,t.setupCountries=function(){n.loadStaticElements(),new n({planet:"Terra Prima",name:"Veteres",fullName:"Regnum Veteres",capital:"Ortus",area:106,population:"2.6M",government:"Emperor / Senate",primaryCulture:"Roma",leader:"Rex Augustus IV",tags:[],races:new Map([["Humans",60.8],["Half-Elves",30.5],["Elves",8.7]]),exoticRaces:["Aasimars","Eladrin","Vampires"],exclusiveRaces:[],capitalPopulation:"218K",capitalElevation:"4.2m",capitalTemperature:"8&#8451;",capitalTags:new Map([[a.Organized,6],[a["Sewage System"],6],[a["Tourist Hotspot"],5],[a["Entertainment Infra"],5],[a["Trade Hotspot"],4],[a.Seaport,4],[a["Fresh Water"],4],[a.Sprawling,3],[a["Efficient Police"],3],[a.Charming,3],[a["Academic Focus"],3],[a["Craftsman's Guilds"],2],[a.Walled,2],[a.Greens,2],[a["Medical Infra"],1],[a.Slums,1]]),capitalSummary:"\n                The city where modern civilization is began following the darkness. A city that has seen all. Earliest remaining \n                written records of all sentient races and cultures can be traced here. For a long time, this was the \n                capital of an empire that sprawled the world, and even now remains the single most important city of all.\n                What secrets do its archives hold?",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Rycerz",fullName:"Holy Empire of Rycerz",capital:"Kiragg",area:114,population:"6.9M",government:"Feudal Empire",primaryCulture:"Pegaz",leader:"Sir Enciodas Silverash",tags:[],races:new Map([["Humans",56],["Shifters[Equines]",25],["Half-Orcs",10],["DragonBorn",3],["Dwarves",3],["Half-Elves",2],["Elves",1]]),exoticRaces:["Orcs","Earth Genasi"],exclusiveRaces:["Centaurs"],capitalPopulation:"307K",capitalElevation:"5480m",capitalTemperature:"-24&#8451;",capitalTags:new Map([[a.Impregnable,6],[a.Breathtaking,6],[a["Holy Sites"],5],[a["Mining Ops"],4],[a.Organized,3],[a["Fresh Water"],3],[a["Sewage System"],3],[a["Industrial Zone"],3],[a["Mage Presence"],3],[a["Space Crunch"],2],[a["Tourist Hotspot"],2],[a["Research Centre"],2],[a["Organized Crime"],2],[a["Efficient Police"],1],[a["Medical Infra"],1],[a.Underground,1]]),capitalSummary:"\n                Rumoured to have been made by a Goddess, this city, 'purchased' by Rycerz in the times past, is a vast \n                cave system within one of the worlds topmost peaks. Other than rather low atmospheric pressure, the\n                caves, beyond all reason, are perfect for life. Hot springs provide fresh water and maintain temperature\n                while certain bluish crystals provide light strangely like that of the sun.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Ursus",fullName:"Eternal Tsardom of Ursus",capital:"Ivangrad",area:241,population:"3.1M",government:"Tsardom",primaryCulture:"Rus",leader:"Tsar Ivanovich Kashchey",tags:[],races:new Map([["Humans",60],["Shifters[Ursine]",36],["Dwarves",2],["Tieflings",1],["DragonBorn",1]]),exoticRaces:["Goliaths","Demons","Minotaurs","Hobgoblins","Yuan-ti"],exclusiveRaces:["Bugbears"],capitalPopulation:"121K",capitalElevation:"202m",capitalTemperature:"-3&#8451;",capitalTags:new Map([[a["Military Curfew"],6],[a["Organized Crime"],4],[a.Underworld,4],[a["Fresh Water"],3],[a["Academic Focus"],3],[a["Mage Presence"],3],[a["Cultural Hub"],3],[a.Fortified,2],[a.Organized,2],[a["Sewage System"],1],[a.Greens,1],[a.Slums,1]]),capitalSummary:"\n                A dangerous city at the centre of a dangerous country. At its very centre sits a dynasty that predates \n                the very empire, rumoured to be the soul of Ursus itself. Military forces crush dissenters and criminals \n                alike with an iron hand. Right underneath their gazes crime lords operating throughout Terra flourish. \n                And yet, this tyranny is home to many a genius incomparable...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Farando",fullName:"Farando Shogunate",capital:"Setsujoku",area:68,population:"2.9M",government:"Shogunate",primaryCulture:"Minami",leader:"Meijin Souya",tags:[],races:new Map([["Humans",79],["Halflings",8],["Half-Elves",7],["Dwarves",4],["Elves",2]]),exoticRaces:["Tritons","Air genasi","Githyanki","Kenku","Tabaxi","Sea Elves","Oni"],exclusiveRaces:[],capitalPopulation:"284K",capitalElevation:"9.7m",capitalTemperature:"0&#8451;",capitalTags:new Map([[a.Fortified,5],[a["Mage Presence"],4],[a["Industrial Zone"],4],[a["Commercial Hub"],3],[a["Cultural Hub"],3],[a["Academic Focus"],3],[a["Efficient Police"],2],[a.Organized,2],[a.Charming,2],[a["Medical Infra"],2],[a["Holy Sites"],2],[a.Greens,2],[a["Mafia Control"],1],[a["Sewage System"],1],[a["Fresh Water"],1]]),capitalSummary:"\n                A city that would not die, there was a time when this one city was all that the now-mighty empire had. \n                With the land burning, barbarians at the gates, the first Meijin took command. His will became the city's\n                will - a will of survival, of vengeance. Countless generations have passed since then and the capital has\n                thrived in more ways than one, but even now the people here view the arrival of the mists with reverence...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Sadhvastan",fullName:"Sadhvarajya",capital:"Nagasyaranya",area:62,population:"3.2M",government:"Raj",primaryCulture:"Vedic",leader:"Raja Devavrata",tags:[],races:new Map([["Humans",55],["Shifters[Serpentine]",21],["Shifters[Feline]",15],["Yuan-ti",6],["Aarakocra",2],["Elves",1]]),exoticRaces:["Aasimars","Goblins","Harengon","Githyanki","Kenku","Tortles"],exclusiveRaces:["Loxodon","Githzerai","Leonin"],capitalPopulation:"165K",capitalElevation:"56m",capitalTemperature:"9&#8451;",capitalTags:new Map([[a.Breathtaking,5],[a["Holy Sites"],5],[a.Greens,4],[a["Mage Presence"],4],[a["Craftsman's Guilds"],3],[a["Central Market"],2],[a["Cultural Hub"],2],[a.Slums,2],[a.Open,2],[a["Academic Focus"],2],[a["Medical Infra"],1],[a.Cluttered,1],[a["Fresh Water"],1]]),capitalSummary:"\n                 A city that embodies the free, untamed spirit of the forest. In a world that rapidly changes, this \n                 remains the only mega-city where not a single piece of concrete or steel has gone into the infrastructure.\n                 Buried deep within inaccessible woods, every single building is made from trees, several still alive. \n                 Rumours are that a titanic serpent unseen to man guards and provides shelter to it till this date.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Stahlern",fullName:"Stahlern Imperium",capital:"Julsburg",area:93,population:"4.1M",government:"Reich",primaryCulture:"Hexenfurst",leader:"Kaiser Alexander Siegfried Von Lohengramm",tags:[],races:new Map([["Humans",85],["Dwarves",5],["Half-Elves",7],["Elves",2],["Gnomes",1]]),exoticRaces:["Deep Gnomes","Duergar","Drow","Earth Genasi"],exclusiveRaces:["Warforged"],capitalPopulation:"120K",capitalElevation:"28m",capitalTemperature:"3&#8451;",capitalTags:new Map([[a["Industrial Zone"],6],[a["Mining Ops"],6],[a.Seaport,5],[a["Trade Hotspot"],4],[a["Efficient Police"],4],[a["Academic Focus"],4],[a.Organized,3],[a["Sewage System"],3],[a["Medical Infra"],3],[a.Walled,2]]),capitalSummary:"\n                A heart of steel that pumps a lifeblood of coal and iron throughout the Imperium and outside and the\n                one of the only two places where a ton of copper is cheaper than a ton of apples. Massive factories \n                extract resources at an unbelievable rate, with highly organized industries consuming them to produce\n                components and machines with supernatural efficiency. An uber-efficient police denies any possibility\n                of crime in this steampunk city with their uncanny amount of intel.\n            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Naiyumi",fullName:"Most Serene Republic of Naiyumi",capital:"Gugong",area:117,population:"6.0M",government:"'Republic'",primaryCulture:"Yan",leader:"Captain Yang Wenli",tags:[],races:new Map([["Humans",67],["Halflings",13],["Gnomes",12],["HalfElves",5],["DragonBorn",2],["Elves",1]]),exoticRaces:["Satyr","Owlin","Lizardfolk","Tabaxi","Shifters","Changelings"],exclusiveRaces:[],capitalPopulation:"74K",capitalElevation:"4.2m",capitalTemperature:"22&#8451;",capitalTags:new Map([[a["Military Curfew"],5],[a.Breathtaking,5],[a["Tourist Hotspot"],4],[a.Fortified,3],[a["Academic Focus"],2],[a["Holy Sites"],2],[a.Greens,2],[a["Space Crunch"],1],[a.Cluttered,1]]),capitalSummary:"\n                Rumoured to be the most serene place on Terra and easily the one with the highest per-capita assets, \n                only the most influential or the most loyal of Naiyumi are allowed into this forbidden city. Historically,\n                leaders across generations have cocooned themselves in this secure paradise to shut themselves off to the \n                disturbing realities of the world outside. Word is, that under the current regime, this won't remain \n                capital for long.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Celatum",fullName:"United Provinces of Celatum",capital:"Emberston",area:109,population:"3.2M",government:"Kingdom / Serfdom",primaryCulture:"Neo-Anglo",leader:"Queen Argela",tags:[],races:new Map([["Humans",65],["DragonBorn",15],["Halflings",13],["Half-Orcs",4],["Gnomes",3]]),exoticRaces:["Changelings","Firbolgs","Harengons","Satyrs","Orcs","Vampires"],exclusiveRaces:[],capitalPopulation:"142K",capitalElevation:"40m",capitalTemperature:"0&#8451;",capitalTags:new Map([[a["Medical Infra"],6],[a["Holy Sites"],4],[a.Charming,4],[a["Academic Focus"],4],[a["Craftsman's Guilds"],3],[a["Central Market"],3],[a.Organized,2],[a["Cultural Hub"],2],[a["Entertainment Infra"],2],[a.Open,2],[a.Lawless,1]]),capitalSummary:"\n                A newly founded city by Queen Argela herself. This city has grown to mirror her philosophy and become the\n                greatest center of medical research on Terra. Healers and doctors from here are valued worldwide, for \n                this atmosphere of freedom and comfort along with the best standards of hygiene and beauty cultivates \n                the very best of them. However, for all its happiness, such unrestrained freedom does attract the \n                unscrupulous...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Aegir",fullName:"Duchy of Aegir",capital:"Eldfjalla (pron. Uld-Fia-Tla)",area:67,population:"2.4M",government:"Aristocracy / Matriarchy",primaryCulture:"Skaldic",leader:"Jarl Gladiia",tags:[],races:new Map([["Humans",72],["Half-Elves",14],["Sea-Elves",8],["Shifters[Aquatic]",6]]),exoticRaces:["Triton","Water Genasi","Yuan-ti"],exclusiveRaces:["Seaborn"],capitalPopulation:"17K",capitalElevation:"2071m",capitalTemperature:"-2&#8451;",capitalTags:new Map([[a.Breathtaking,5],[a["Research Centre"],5],[a["Holy Sites"],3],[a.Lawless,2],[a.Undefended,1]]),capitalSummary:"\n                Built upon the warm, fertile and mineral rich lands of an old volcano, this beautiful little city is an \n                oasis in the frigid wastelands around it. Yet life in the middle of nowhere is not for everyone, and so \n                few choose to live here. Fewer still are encouraged to, for those that live here come to be aware of certain\n                secrets best left untold - and know that the scholars that propel the research here do not all come from Terra...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Calentaur",fullName:"Serene Valleys of Calentaur",capital:"Annwyn",area:57,population:"2.1M",government:"Council",primaryCulture:"Foehn",leader:"Lady Shiadhal",tags:[],races:new Map([["Elves",66],["Half-Elves",14],["Humans",10],["Halflings",6],["Gnomes",4]]),exoticRaces:["Eladrin","Satyr","Owlin","Goblins"],exclusiveRaces:["Fairies"],capitalPopulation:"59K",capitalElevation:"271m",capitalTemperature:"8&#8451;",capitalTags:new Map([[a.Breathtaking,6],[a.Impregnable,6],[a.Greens,5],[a["Mafia Control"],5],[a["Military Curfew"],4],[a["Mage Presence"],3],[a.Organized,3],[a.Sprawling,2],[a["Craftsman's Guilds"],2],[a["Cultural Hub"],2],[a["Fresh Water"],2]]),capitalSummary:"\n                A city that bridges between the material plane and the feywild, and yet belongs to neither. The only way \n                to access it is via a perpendicularity of uncertain location. The few non-elves who have been there have\n                been forever enraptured. Depictions describe it as a supernatural city of eternal youth, beauty, health \n                and abundance, of sophisticated marble architecture with lush green vines and vivid flowers. Yet some \n                who've come back do not feel particularly inclined to return there...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Vinland",fullName:"Free Territory of Vinland",capital:"Frihet",area:57,population:"2.1M",government:"Free Territory",primaryCulture:"Rus / Pegaz / Neo-Anglo",leader:"",tags:[],races:new Map([["Humans",70],["Halflings",21],["Gnomes",9]]),exoticRaces:["Firbolgs","Trolls","Goblins","Kobolds"],exclusiveRaces:[],capitalPopulation:"16K",capitalElevation:"56m",capitalTemperature:"4&#8451;",capitalTags:new Map([[a["Central Market"],3],[a["Craftsman's Guilds"],3],[a["Entertainment Infra"],3],[a["Fresh Water"],2],[a.Greens,2],[a.Charming,2],[a.Undefended,1]]),capitalSummary:"\n                Possibly the most unassuming capital of Terra Prima, the city of liberty is open to all, yet doesn't \n                make any bow underneath its grandeur. The lack of authority means no real power is gathered in the \n                capital, and so economy, and life, here is slow and relaxed. Yet the few who do live here wouldn't leave\n                behind the family like atmosphere plus the ease of availability of a capital for anything else in the \n                world.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Altava",fullName:"Wild Hinterlands of Altava",capital:"Sal Venito",area:103,population:"0.3M",government:"Anarchy",primaryCulture:"Liberi / Skaldic / Roma",leader:"",tags:[],races:new Map([["Humans",90],["DragonBorn",5],["Tieflings",4],["Air Genasi",1]]),exoticRaces:["Goblins","Hobgoblins","Tortle"],exclusiveRaces:["Vedalken"],capitalPopulation:"4K",capitalElevation:"56m",capitalTemperature:"4&#8451;",capitalTags:new Map([[a.Ruins,6],[a.Harbor,3],[a.Organized,3],[a["Mafia Control"],3],[a.Underworld,3],[a.Lawless,2],[a["Sewage System"],2],[a["Fresh Water"],1]]),capitalSummary:"\n                Not more than a century ago a city to rival Ortus, all that remains of this arrogant capital are ruins and\n                shattered dreams. They dared to take on those that must not be spoken of, and all that remained from that\n                was mere fodder for scavengers - criminals, pirates and rival states alike. Now that the corpse has been\n                picked to the bone, a few refugees and hinterland tribesmen still find shelter and comfort in the ruins,\n                still grand and intimating even in decay...\n            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Nidavellir",fullName:"Depths of Nidavellir",capital:"Idavoll",area:61,population:"2.9M",government:"Kingdom",primaryCulture:"Durinn",leader:"Queen Dagfid",tags:[],races:new Map([["Dwarves",64],["Drow",20],["Tieflings",8],["Deep Gnomes",6],["Humans",2]]),exoticRaces:["Duergar","Fire Genasi","Kenku","Orcs"],exclusiveRaces:[],capitalPopulation:"90K",capitalElevation:"-1222m",capitalTemperature:"43&#8451;",capitalTags:new Map([[a.Underground,6],[a["Mining Ops"],6],[a.Impregnable,5],[a["Space Crunch"],5],[a.Cluttered,3],[a["Industrial Zone"],3],[a["Organized Crime"],3],[a.Underworld,2],[a.Lawless,2],[a.Slums,2]]),capitalSummary:"\n                The entrance to the underdark, visitors to the city of Idavoll are greeted by its hot and acrid air, \n                followed by the angry red glare of eternally burning smelters. With its paranoid inhabitants, toiling \n                endlessly and operating ruthlessly in a city that has never seen sunlight, Idavoll is the least \n                accessible settlement on Terra - but it is accessible. Much more than can be said for anything in the \n                passages that descend beneath it... passages rumoured to be the home of great and terrible demon lords, \n                passages rumoured to be the only way into Terra Incognita.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Gaulle",fullName:"United Clans of Gaulle",capital:"Lutetia",area:52,population:"4.0M",government:"Free Tribes",primaryCulture:"Hexenfurst",leader:"Chief Vercingetorix",tags:[],races:new Map([["Humans",88],["Shifters",12]]),exoticRaces:["Aarakocra","Owlin","Tabaxi","Changeling","Kalashtar","Fire Genasi"],exclusiveRaces:["Werewolves"],capitalPopulation:"217K",capitalElevation:"18m",capitalTemperature:"12&#8451;",capitalTags:new Map([[a["Trade Hotspot"],5],[a["Space Crunch"],5],[a["Tourist Hotspot"],5],[a["Entertainment Infra"],4],[a["Academic Focus"],4],[a.Fortified,4],[a.Harbor,3],[a.Lawless,3],[a["Fresh Water"],2]]),capitalSummary:"\n                A large and bustling city of a large and bustling country, it mirrors the serious congestion and \n                overpopulation evident in the rest of the country. For those from outside, reaching from their tavern to \n                their destination can easily take hours - yet those who know their way about know this to be one of the\n                most resourceful places on Terra. There are rumours that a mass renovation is in the works...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Reindal",fullName:"Snowy realms of Reindal",capital:"Witstad",area:39,population:"0.7M",government:"Federation",primaryCulture:"Roma",leader:"Sir Lucius Artorius Castus",tags:[],races:new Map([["Humans",90],["DragonBorn",5],["Half-Elves",2],["Gnomes",1],["Halflings",1],["Elves",1]]),exoticRaces:["Aasimar","Eladrin","Goblin","Kalashtar","Changelings"],exclusiveRaces:[],capitalPopulation:"67K",capitalElevation:"918m",capitalTemperature:"-8&#8451;",capitalTags:new Map([[a.Breathtaking,6],[a["Mage Presence"],5],[a["Academic Focus"],3],[a.Greens,3],[a["Holy Sites"],2],[a["Merchant Guilds"],1],[a.Undefended,1]]),capitalSummary:"\n                Much like the lands to which it belongs, this town, enchanting in its beautiful, pure and perennial snow,\n                is a safe haven from all the conflicts in terra. Originally inhabited by refugees tired of war or slaves\n                escaping to freedom, few people now wish to come here, but those who do come find comfort and peace like\n                no where else. Despite being soft spoken and kind to a fault, the people here would work harder than all \n                others to secure the said comfort. And to secure the said peace...            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"KingsFall",fullName:"Cursed Plains of KingsFall",capital:"Necropolis",area:40,population:"0.2M",government:"Anarchy",primaryCulture:"Hexenfurst",leader:"",tags:[],races:new Map([["Humans",89],["Tieflings",11]]),exoticRaces:["Shadar-Kai","Kalashtar","Vampires","Hexbloods","Reborn"],exclusiveRaces:[],capitalPopulation:"0 ?",capitalElevation:"352m",capitalTemperature:"7&#8451;",capitalTags:new Map([[a["Ghost Town"],1]]),capitalSummary:"\n                Once long ago, these buildings used to be a flourishing city. However, like the rest of the plains - whosoever\n                held it found themselves on the loosing side of a particularly brutal war. These empty streets have\n                changed hands dozens of times - each time involving mass brutality, plunder and slaughter. Now, none \n                dare venture here and only terrible ghosts haunt this mass grave of a capital. Some madmen have reported\n                seeing the Witch King of ancient lore glide the streets even today, dancing a terrible dance along with \n                several human-puppets who they said comprise his troupe...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Terra Incognita",fullName:"Terra Incognita",capital:"?",area:75,population:"?",government:"?",primaryCulture:"?",leader:"?",tags:[],races:new Map,exoticRaces:[],exclusiveRaces:[],capitalPopulation:"?",capitalElevation:"?",capitalTemperature:"?",capitalTags:new Map,capitalSummary:"???",description:"",leaderDescription:""})}},7527:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupHistory=void 0;const a=new Map([["Shardic",{start:"~10<sup>9</sup> BR (T=0)",epoch:"Genesis",height:42}],["Divergence",{start:"~10<sup>9</sup> BR (T=10<sup>-16</sup>s)",epoch:"Genesis",height:40}],["Primordial",{start:"~10<sup>9</sup> BR (T=0.1s)",epoch:"Genesis",height:64}],["Inflationary",{start:"~10<sup>9</sup> BR (T=1s)",epoch:"Genesis",height:40}],["Archean",{start:"~4.1 &times; 10<sup>8</sup> BR",epoch:"Genesis",height:40}],["Mythic",{start:"~2.8 &times; 10<sup>7</sup> BR",epoch:"Legendary",height:144}],["Heroic",{start:"~1.6 &times; 10<sup>5</sup> BR",epoch:"Legendary",height:120}],["Silent",{start:"~20,000 BR",epoch:"Darkness",height:72}],["Archaic",{start:"~1,800 BR",epoch:"Darkness",height:64}],["Classical",{start:"0 AR",epoch:"Recreance",height:72}],["Medieval",{start:"1070 AR",epoch:"Recreance",height:100}],["Renaissance",{start:"1600 AR (now)",epoch:"Recreance",height:40}]]),n=new Map;let i=0;for(const[e,{height:t}]of Array.from(a).reverse())n.set(e,i+t),i=n.get(e);const s=new Map([["TheoGenesis",{text:"Shards Appear - Spacetime & Investiture form.",era:"Shardic",rel_t:0,lane:0}],["Genesis",{text:"Invariants form - Matter/Energy/Momentum/Charge...",era:"Shardic",rel_t:.5,lane:1}],["Divergence",{text:"Planes separate",era:"Divergence",rel_t:0,lane:0}],["OuterPrimordialsInvade",{text:"Outer Primordials Invade",era:"Primordial",rel_t:0,lane:0}],["ShardicPrimordialCreation",{text:"Shardic Primordials are born",era:"Primordial",rel_t:.25,lane:1}],["OuterPrimordialsDefeated",{text:"Outer Primordials are Defeated",era:"Primordial",rel_t:.8,lane:0}],["Expansion",{text:"Planes take shape, The Universe expands",era:"Inflationary",rel_t:.1,lane:1}],["AstralFormation",{text:"Astral Bodies Form",era:"Inflationary",rel_t:.8,lane:0}],["Life",{text:"First Physical Lifeforms emerge",era:"Archean",rel_t:0,lane:1}],["SpiritualLife",{text:"First Non-Physical Lifeforms emerge",era:"Archean",rel_t:.9,lane:0}],["ComplexLife",{text:"Complex/Mortal Lifeforms emerge",era:"Mythic",rel_t:.1,lane:1}],["PrimordialLife",{text:"Shardic Primordials Gain Physical Forms",era:"Mythic",rel_t:.2,lane:0}],["SentientLife",{text:"Sentient Life Forms",era:"Mythic",rel_t:.45,lane:0}],["MythicLife",{text:"Creatures of Myth and Legend Roam the multiverse",era:"Mythic",rel_t:.5,lane:1}],["IntelligentLife",{text:"Intelligent Species emerge",era:"Mythic",rel_t:.67,lane:0}],["SocialLife",{text:"Societies and Cultures begin to take shape",era:"Mythic",rel_t:.85,lane:1}],["SocialLife",{text:"Humans race appears",era:"Mythic",rel_t:.9,lane:0}],["Heroes",{text:"Powerful Nations form - Heroes walk the land",era:"Heroic",rel_t:.2,lane:0}],["War",{text:"Shardic Wars Ensue",era:"Heroic",rel_t:.33,lane:1}],["Kelsier",{text:"The 'Survivor' Dies",era:"Heroic",rel_t:.5,lane:0}],["Re-invasion",{text:"Outsiders begin to seep within",era:"Heroic",rel_t:.8,lane:1}],["Silence",{text:"History falls silent - No records of this time remain",era:"Silent",rel_t:0,lane:0}],["Isolation",{text:"Outer Planes self isolate",era:"Silent",rel_t:.4,lane:1}],["Archaic",{text:"Civilizations restart from scratch post-desolation",era:"Archaic",rel_t:0,lane:0}],["Classical",{text:"Some Cities/Civilizations begin to match those of old",era:"Classical",rel_t:0,lane:0}],["Rome",{text:"Veteres becomes a global empire on Terra Prima",era:"Classical",rel_t:.1,lane:1}],["Annatar",{text:"1539 AR: The Primordial Nightmares gain a foothold",era:"Medieval",rel_t:.75,lane:1}],["Leras",{text:"1540 AR: The Hour of Darkness",era:"Medieval",rel_t:.8,lane:0}]]);t.setupHistory=function(){const e=$("#history_zones"),t=[$("#history_left_tags"),$("#history_right_tags")];for(const[t,{height:n,start:i,epoch:s}]of a.entries())$(`<div class='history_zone' style='height: ${n}px;'>\n            <div class="zone_start">${i}</div>\n            <div class="zone_name">${t}<span class="zone_epoch"> | ${s}</span></div>\n          </div>`).appendTo(e);for(const[e,i]of s.entries()){const e=0+n.get("Shardic")-n.get(i.era)+a.get(i.era).height*i.rel_t;$(`<div class="history_event" style="top: ${e}px;">${i.text}</div>`).appendTo(t[i.lane])}}},3998:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.NpcID=void 0,(a=t.NpcID||(t.NpcID={}))[a.Lucian=0]="Lucian",a[a.Ebenezar=1]="Ebenezar",a[a.Caelynn=2]="Caelynn",a[a.Lesley=3]="Lesley",a[a.Irene=4]="Irene",a[a.Ling=5]="Ling",a[a.DaveRuhl=6]="DaveRuhl",a[a.Ulrich=7]="Ulrich",a[a.Lia=8]="Lia",a[a.Conley=9]="Conley",a[a.Vahareth=10]="Vahareth",a[a.TheMaster=11]="TheMaster",a[a.LogosPlaywright=12]="LogosPlaywright",a[a.Mostima=13]="Mostima",a[a.Shimaken=14]="Shimaken",a[a.Shimarin=15]="Shimarin",a[a.Verrader=16]="Verrader",a[a.Fiest=17]="Fiest",a[a.Mouthpiece=18]="Mouthpiece",a[a.Sanguinarch=19]="Sanguinarch",a[a.DecroaSal=20]="DecroaSal",a[a.Baphomet=21]="Baphomet",a[a.Kjerra=22]="Kjerra",a[a.GDef=23]="GDef",a[a.TraitorOthello=24]="TraitorOthello",a[a.Mandy=25]="Mandy",a[a.Gen=26]="Gen",a[a.Mumu=27]="Mumu",a[a.Shamare=28]="Shamare",a[a.Amaia=29]="Amaia",a[a.Lemuen=30]="Lemuen",a[a.Lemuel=31]="Lemuel",a[a.Eugrud=32]="Eugrud",a[a.Andoain=33]="Andoain",a[a.Dusk=34]="Dusk",a[a.Dawn=35]="Dawn",a[a.Andri=36]="Andri",a[a.Athlon=37]="Athlon",a[a.Bjorn=38]="Bjorn",a[a.Cecelia=39]="Cecelia",a[a.Coroto=40]="Coroto",a[a.Elysium=41]="Elysium",a[a.Erica=42]="Erica",a[a.Genefe=43]="Genefe",a[a.Hav=44]="Hav",a[a.Hina=45]="Hina",a[a.Ingrid=46]="Ingrid",a[a.Iona=47]="Iona",a[a.Jaye=48]="Jaye",a[a.Jordi=49]="Jordi",a[a.Kastor=50]="Kastor",a[a.Petra=51]="Petra",a[a.Roberta=52]="Roberta",a[a.Sasha=53]="Sasha",a[a.Sybilla=54]="Sybilla",a[a.Tomasa=55]="Tomasa",a[a.Verna=56]="Verna",a[a.Vitacia=57]="Vitacia",a[a.Yuki=58]="Yuki",a[a.Ezell=59]="Ezell",a[a.Ruzaki=60]="Ruzaki",a[a.Elliot=61]="Elliot",a[a.Yoeric=62]="Yoeric",a[a.Teiai=63]="Teiai",a[a.Shuo=64]="Shuo",a[a.Gnosis=65]="Gnosis",a[a.__MOBS__=66]="__MOBS__",a[a.NSBrand=67]="NSBrand",a[a.Slider=68]="Slider",a[a.SliderN=69]="SliderN",a[a.Urchin=70]="Urchin",a[a.UrchinN=71]="UrchinN",a[a.Harpooner=72]="Harpooner",a[a.Shrieker=73]="Shrieker",a[a.ShriekerN=74]="ShriekerN",a[a.Ephremis=75]="Ephremis"},8706:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.PARTY_INSIGHT=t.PcCharismaMods=t.PcTokenNames=t.PcIndex=void 0,function(e){e[e.ID_AURELIA=0]="ID_AURELIA",e[e.ID_CYRION=1]="ID_CYRION",e[e.ID_HELIOS=2]="ID_HELIOS"}(a=t.PcIndex||(t.PcIndex={})),t.PcTokenNames=new Map([[a.ID_AURELIA,"Aurelia"],[a.ID_CYRION,"Cyrion"],[a.ID_HELIOS,"Helios"]]),t.PcCharismaMods=new Map([[a.ID_AURELIA,-1],[a.ID_CYRION,-1],[a.ID_HELIOS,5]]),t.PARTY_INSIGHT=19},3294:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Edge=void 0;const n=a(6967);class i extends n.BaseUniqueDOMGenerator{constructor(e,t){if(super(),this.v1=e,this.v2=t,e==t)throw new Error;this.v1.addNeighbour(this),this.v2.addNeighbour(this)}get id(){return`${this.v1.id}___${this.v2.id}`}get center(){return[(this.v1.x+this.v2.x)/2,(this.v1.y+this.v2.y)/2]}get length(){const e=this.v1.x-this.v2.x,t=this.v1.y-this.v2.y;return Math.sqrt(e*e+t*t)}get rotation(){const e=this.v1.x-this.v2.x,t=this.v1.y-this.v2.y;return 0==t?0:Math.PI/2+Math.atan(e/t)}}t.Edge=i},9880:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Graph=void 0;const n=a(6967);class i extends n.BaseUniqueDOMGenerator{constructor(e){super(),this.id=e,this.vertices=new Map,this.edges=new Map,this.neighbours=new Map,this.xMin=Number.POSITIVE_INFINITY,this.yMin=Number.POSITIVE_INFINITY,this.xMax=Number.NEGATIVE_INFINITY,this.yMax=Number.NEGATIVE_INFINITY}get AdditionalElementClasses(){return""}generateDOMString(){const e=[];for(const t of this.vertices.values())e.push(t);e.sort(((e,t)=>t.x-e.x));const t=[];for(const a of e)t.push(a.generateDOMString());const a=[];for(const e of this.edges.values())for(const t of e.values())a.push(t.generateDOMString());return`\n        <div class="graph--${this.StyleSubclass} ${this.AdditionalElementClasses}" \n             style="width: ${this.xSpan}px; \n                    height: ${this.ySpan}px;"\n             id="${this.id}">\n            <div class="graph__edges">\n                ${a.join("")}                \n            </div>\n            <div class="graph__vertices">\n                ${t.join("")}            \n            </div>\n        </div>\n        `}addVertex(e){if(e.graphID!=this.id)throw new Error;this.xMin=Number.POSITIVE_INFINITY,this.yMin=Number.POSITIVE_INFINITY,this.xMax=Number.NEGATIVE_INFINITY,this.yMax=Number.NEGATIVE_INFINITY,this.vertices.set(e.id,e)}removeVertex(e){this.xMin=Number.POSITIVE_INFINITY,this.yMin=Number.POSITIVE_INFINITY,this.xMax=Number.NEGATIVE_INFINITY,this.yMax=Number.NEGATIVE_INFINITY,this.vertices.delete(e.id)}addEdge(e){const t=e.v1,a=e.v2;if(t==a)return null;const n=Math.min(t.numId,a.numId),i=Math.max(t.numId,a.numId);if(this.edges.has(n)||this.edges.set(n,new Map),this.edges.get(n).has(i))throw console.log(n,i),new Error;return this.edges.get(n).set(i,e),this.neighbours.has(t)||this.neighbours.set(t,new Set),this.neighbours.get(t).add(a),this.neighbours.has(a)||this.neighbours.set(a,new Set),this.neighbours.get(a).add(t),e}removeEdge(e){const t=e.v1,a=e.v2,n=Math.min(t.numId,a.numId),i=Math.max(t.numId,a.numId);console.assert(this.edges.get(n).get(i)==e),this.edges.get(n).delete(i),this.neighbours.get(t).delete(a),this.neighbours.get(a).delete(t)}areNeighbours(e,t){return this.neighbours.has(e)&&this.neighbours.get(e).has(t)}mapLocalCoordinatesToScreenPosition([e,t]){if(this.xMax<this.xMin)for(const e of this.vertices.values())this.xMin>e.x&&(this.xMin=e.x),this.xMax<e.x&&(this.xMax=e.x),this.yMin>e.y&&(this.yMin=e.y),this.yMax<e.y&&(this.yMax=e.y);if(this.xMax<this.xMin)throw new Error(`Coordinate system undefined. (${this.xMax}, ${this.xMin})`);return[this.origin[0]+e,this.origin[1]-t]}lookupVertexById(e){return this.vertices.get(e)}get vertexCount(){return this.vertices.size}get xSpan(){return Math.max(0,this.xMax-this.xMin)+2*i.PADDING[0]}get ySpan(){return Math.max(0,this.yMax-this.yMin)+2*i.PADDING[1]}get origin(){return[this.xSpan/2-(this.xMax+this.xMin)/2,this.ySpan/2+(this.yMax+this.yMin)/2]}}t.Graph=i,i.PADDING=[50,50]},3382:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MapEdge=void 0;const n=a(3294);class i extends n.Edge{constructor(e,t,a){super(t,a),this.graph=e,this.lesserVId=Math.min(t.numId,a.numId),this.higherVId=Math.max(t.numId,a.numId),this._worldLengthMultiplier=1,this.graph.addEdge(this)}generateDOMString(){const[e,t]=this.graph.mapLocalCoordinatesToScreenPosition(this.center);return`\n        <div class="map_edge" style="width: ${this.length}px;\n                                     top: ${t}px;\n                                     left: ${e}px;\n                                     rotate: ${this.rotation}rad;">\n        </div>\n        `}get worldLength(){return this.length*this._worldLengthMultiplier}set worldLengthMultiplier(e){this._worldLengthMultiplier=e}}t.MapEdge=i},6453:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMapGraph=t.MapGraph=void 0;const n=a(957),i=a(9880),s=a(1501);class o extends i.Graph{constructor(e){super(e),this.worldDistancePerPixel=0}get StyleSubclass(){return"map"}getSpacialDistance(e,t){if(e.graph!=this||t.graph!=this)throw new Error;return Math.sqrt((e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y)+(e.z-t.z)*(e.z-t.z))}getEdgeDistance(e,t){if(e.graph!=this||t.graph!=this)throw new Error;const a=Math.min(e.numId,t.numId),n=Math.max(e.numId,t.numId);if(!this.edges.has(a)||!this.edges.get(a).has(n))throw new Error;return this.edges.get(a).get(n).worldLength}}t.MapGraph=o,t.setupMapGraph=function(e,t){0!=e.length&&(e.append(t.generateDOMString()),function(e,t){const a=$("#side_banner"),i=$(".graph--map"),o=new s.SidePanel(a);let r=null;i.on("click",".map_vertex",(function(e){if(!$(this).hasClass("inactive"))return;i.find(".map_vertex").addClass("inactive"),$(this).removeClass("inactive");const a=$(this)[0].getBoundingClientRect(),n=$(this).attr("id"),s=t.lookupVertexById(n);i.find(".map_vertex").each((function(){const e=$(this).attr("id"),a=t.lookupVertexById(e),n=t.getSpacialDistance(s,a)*t.worldDistancePerPixel,i=`~${(100*Math.round(n/100)).toLocaleString()} km`;let o;if(t.areNeighbours(s,a)){const e=t.getEdgeDistance(s,a);o=` / ~${Math.round(e).toLocaleString()} km`}else o="";$(this).find(".overhead_text").text(i+o)})),o.swapContentAndReshow(a.x+a.width/2>window.innerWidth/2,s.generateSiteDOMString()),r=s,e.stopPropagation()})),a.on("click",".inspect_base",(function(){$(this).hasClass("disabled")||o.toggleFullSpan((0,n.generateBaseDOM)())})),a.on("click",".hide_base",(function(){o.toggleFullSpan(r.generateSiteDOMString())})),a.on("click",".cog_reseq",(function(){$(".graph_label").removeClass("selected"),$(".graph_label[data-graph-id='skill_graph_area']").addClass("selected"),$(".graph_area").hide(),$("#skill_graph_area").show(),o.reset()})),e.on("click",(function(){i.find(".map_vertex").addClass("inactive"),o.reset(),i.find(".map_vertex .overhead_text").text(""),r=null}))}(e,t))}},3542:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.TransportationToDOMString=t.MapTransportation=void 0,function(e){e[e.Foot=0]="Foot",e[e.Horse=1]="Horse",e[e.Automobile=2]="Automobile",e[e.Train=3]="Train",e[e.Helicopter=4]="Helicopter",e[e.Jet=5]="Jet",e[e.Space=6]="Space",e[e.Cognition=7]="Cognition"}(a=t.MapTransportation||(t.MapTransportation={})),t.TransportationToDOMString=new Map([[a.Foot,'<i class="fa-solid fa-shoe-prints"></i>'],[a.Horse,'<i class="fa-duotone fa-horse-saddle"></i>'],[a.Automobile,'<i class="fa-solid fa-truck-field"></i>'],[a.Jet,'<i class="fa-solid fa-jet-fighter"></i>'],[a.Space,'<i class="fa-solid fa-shuttle-space"></i>'],[a.Cognition,'<i class="fa-solid fa-brain"></i>']])},1744:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MapVertex=void 0;const n=a(4492),i=a(3542),s=a(3560),o=a(2001);class r extends o.Vertex{constructor(e,t,a){super(a.id,a.vertexCount),this.status=e,this.interest=t,this.graph=a,this.name="???",this.statusDescOverride=null,this.z=0,this.intel="<div>No intel available.</div>",this._sitesOfInterest=[],this._characterPaths=[],this.isBase=!1,this.graph.addVertex(this)}generateDOMString(){const e=s.MapVertexStatus[this.status].toLowerCase(),t=null==this.statusDescOverride?s.MapVertexStatusDescriptions.get(this.status):this.statusDescOverride,[a,n]=this.graph.mapLocalCoordinatesToScreenPosition([this.x,this.y]);return`\n        <div class="map_vertex map_vertex--${e} inactive"\n             id="${this.id}"\n             style="left: ${a}px; top: ${n}px;">\n            <img src="assets/images/gui/${e}/RadioBg.png" \n                 alt=""\n                 class="map_vertex__background"/>\n            <img src="assets/images/gui/${e}/Radio.png" \n                 alt=""\n                 class="map_vertex__foreground"/>   \n            <div class="map_vertex__info">\n                <div class="overhead_text"></div>\n                <div class="grunge_label">\n                    <div class="grunge_label__title">\n                        <div class="grunge_label__title__left">${t}</div>\n                        <div class="grunge_label__title__right">${this.interest}</div>\n                    </div>\n                    <div class="grunge_label__desc"><span class="vertex_id">(${this.id})</span>${this.name}</div>                \n                </div>\n            </div>  \n        </div>\n        `}markAsBase(){this.isBase=!0}addSiteOfInterest(e,t,a,n,s,o){const r=[];for(const[e,t]of n)r.push(`\n                <div class="dictionary__row">\n                    <span class="dictionary__row__key site_of_interest__details__key">${e}</span>\n                    <span class="dictionary__row__value site_of_interest__details__value">${t}</span>\n                </div>\n            `);const l=[];for(const[e,t]of o.entries())l.push(`\n                <div class="navigation__type icon_table__slot">\n                    <div class="navigation__type__means icon_table__slot__icon">${i.TransportationToDOMString.get(e)}</div>\n                    <div class="icon_table__slot__label">\n                        ${t}\n                    </div>\n                </div>\n            `);this._sitesOfInterest.push(`\n            <div class="theme_box site_of_interest">\n                <div class="site_of_interest__header">\n                    <div class="site_of_interest__category">${e}</div>\n                    <div class="site_of_interest__name">${t}</div>\n                </div>\n                <div class="site_of_interest__desc">${a}</div>\n                <div class="site_of_interest__details dictionary">\n                    ${r.join("")}\n                </div>\n                <span class="site_of_interest__subheader theme_subheader">Connectivity</span>\n                <div class="site_of_interest__navigation navigation icon_table">\n                    ${l.join("")}\n                </div>\n            </div>\n        `)}addCharacterToken(e){this._characterPaths.push(e)}generateSiteDOMString(){const e=s.MapVertexStatus[this.status].toLowerCase(),t=null==this.statusDescOverride?s.MapVertexStatusDescriptions.get(this.status):this.statusDescOverride;let a,i;if(this.isBase)a="";else if(0==this._characterPaths.length)a='\n            <div class="map_vertex_details__subheader theme_subheader">\n                NPCs in this area\n            </div>\n            <div class="map_vertex_details__desc">\n                No known NPCs are wandering out here.\n            </div>';else{const e=[];for(const t of this._characterPaths)e.push(`<img class="token_s" src="${n.Character.get(t).imgPath}" alt="">`);a=`\n            <div class="map_vertex_details__subheader theme_subheader">\n                NPCs here\n            </div>\n            <div class="map_vertex_details__characters">\n                ${e.join("")}\n            </div>`}i=this.isBase?"":0==this._sitesOfInterest.length?'\n            <div class="map_vertex_details__subheader theme_subheader">\n                Sites of interest\n            </div>\n            <div class="map_vertex_details__desc">\n                No sites of interest have been discovered so far.\n            </div>':`\n            <div class="map_vertex_details__subheader theme_subheader">\n                Sites of interest\n            </div>\n            <div>\n                ${this._sitesOfInterest.join("")}\n            </div>`;const o=this.isBase?"<div class='inspect_base grunge_nav_button'>Inspect Base</div>":"";return`\n        <div class="map_vertex_details theme--${e}">\n            <div class="map_vertex_details__header grunge_panel">\n                <div class="grunge_panel__icon">${s.MapVertexStatusIcons.get(this.status)}</div>\n                <div class="grunge_panel__subtitle">${t}</div>\n                <div class="grunge_panel__title">${this.name}</div>\n            </div>\n            <div class="map_vertex_details__desc">\n                <div class="theme_label">INTEL</div>\n                ${this.intel}\n            </div>\n            ${i}\n            ${a}\n            ${o}\n        </div>\n        `}}t.MapVertex=r},3560:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.MapVertexStatusIcons=t.MapVertexStatusDescriptions=t.MapVertexStatus=void 0,function(e){e[e.Unknown=0]="Unknown",e[e.Neutral=1]="Neutral",e[e.Friendly=2]="Friendly",e[e.Safe=3]="Safe",e[e.Combat=4]="Combat",e[e.Emergency=5]="Emergency",e[e.Deadly=6]="Deadly",e[e.Black=7]="Black"}(a=t.MapVertexStatus||(t.MapVertexStatus={})),t.MapVertexStatusDescriptions=new Map([[a.Unknown,"Unknown"],[a.Neutral,"Neutral"],[a.Friendly,"Friendly"],[a.Safe,"Safe Zone"],[a.Combat,"Hostile"],[a.Emergency,"High Risk Combat"],[a.Deadly,"Deadly"],[a.Black,"Black"]]),t.MapVertexStatusIcons=new Map([[a.Unknown,'<i class="fa-solid fa-circle-question"></i>'],[a.Neutral,'<i class="fa-solid fa-scale-balanced"></i>'],[a.Friendly,'<i class="fa-solid fa-handshake"></i>'],[a.Safe,'<i class="fa-solid fa-house-turret"></i>'],[a.Combat,'<i class="fa-solid fa-swords"></i>'],[a.Emergency,'<i class="fa-regular fa-biohazard"></i>'],[a.Deadly,'<i class="fa-solid fa-skull-crossbones"></i>'],[a.Black,'<i class="fa-solid fa-scythe"></i>']])},1501:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SidePanel=void 0;class a{constructor(e){this.$panel=e,this.$content=e.find(`.${a.CONTENT_ELEMENT_CLASS_NAME}`)}reset(){this.hide((()=>this.empty())),this.$panel.removeClass(a.FULL_SPAN)}toggle(e){this.isVisible()?this.hide((()=>{})):this.show(e)}swapContent(e){this.empty(),this.$content.append(e)}swapContentAndReshow(e,t){this.hideThenShow(e,(()=>{this.swapContent(t)}))}toggleFullSpan(e){this.isVisible()&&(this.empty(),this.$panel.toggleClass(a.FULL_SPAN),setTimeout((()=>{this.$content.append(e)}),a.SLIDE_TIME))}show(e){if(this.isVisible())throw new Error("Show called on visible panel.");this.$panel.removeClass(a.LEFT_PANEL_CLASS_NAME+" "+a.RIGHT_PANEL_CLASS_NAME);const t=e?a.LEFT_PANEL_CLASS_NAME:a.RIGHT_PANEL_CLASS_NAME,n=e?a.VISIBLE_LEFT_PANEL_CLASS_NAME:a.VISIBLE_RIGHT_PANEL_CLASS_NAME;return this.$panel.addClass(t),setTimeout((()=>this.$panel.addClass(n)),10),10+a.SLIDE_TIME}hide(e){return this.isVisible()?(this.$panel.removeClass(a.VISIBLE_LEFT_PANEL_CLASS_NAME+" "+a.VISIBLE_RIGHT_PANEL_CLASS_NAME),setTimeout((()=>{this.$panel.removeClass(a.LEFT_PANEL_CLASS_NAME+" "+a.RIGHT_PANEL_CLASS_NAME),e()}),a.SLIDE_TIME+10),a.SLIDE_TIME+10):(this.$panel.removeClass(a.LEFT_PANEL_CLASS_NAME+" "+a.RIGHT_PANEL_CLASS_NAME),e(),0)}hideThenShow(e,t){const n=e?a.VISIBLE_LEFT_PANEL_CLASS_NAME:a.VISIBLE_RIGHT_PANEL_CLASS_NAME;if(this.$panel.hasClass(n))return void t();const i=this.hide(t);setTimeout((()=>{this.show(e)}),i+10)}empty(){console.log("clearing the content."),this.$content.empty()}isVisible(){return this.$panel.hasClass(a.VISIBLE_LEFT_PANEL_CLASS_NAME)||this.$panel.hasClass(a.VISIBLE_RIGHT_PANEL_CLASS_NAME)}}t.SidePanel=a,a.PANEL_CLASS_NAME="ink_side_banner",a.MOD_LEFT="--left",a.MOD_RIGHT="--right",a.MOD_VISIBLE="--visible",a.SUB_ELEMENT_SUFFIX_CONTENT="__content",a.LEFT_PANEL_CLASS_NAME=a.PANEL_CLASS_NAME+a.MOD_LEFT,a.RIGHT_PANEL_CLASS_NAME=a.PANEL_CLASS_NAME+a.MOD_RIGHT,a.VISIBLE_LEFT_PANEL_CLASS_NAME=a.LEFT_PANEL_CLASS_NAME+a.MOD_VISIBLE,a.VISIBLE_RIGHT_PANEL_CLASS_NAME=a.RIGHT_PANEL_CLASS_NAME+a.MOD_VISIBLE,a.CONTENT_ELEMENT_CLASS_NAME=a.PANEL_CLASS_NAME+a.SUB_ELEMENT_SUFFIX_CONTENT,a.SLIDE_TIME=200,a.FULL_SPAN="full_span"},8763:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UpgradeEdge=void 0;const n=a(3294);class i extends n.Edge{constructor(e,t,a,n=null){if(super(t,a),this.graph=e,this.vc=n,null!=n&&n.sqDistanceFrom(t)-n.sqDistanceFrom(a)>1)throw new Error("Center vertex isn't equidistant to edge vertices.");this.zIndex=0,e.addEdge(this)}generateDOMString(){if(null==this.vc){const[e,t]=this.graph.mapLocalCoordinatesToScreenPosition(this.center);return`\n            <div id="${this.id}"\n                 class="upgrade_edge--linear ${this.isActive?"active":""} ${this.isConnected?"connected":""}" \n                 style="width: ${this.length}px;\n                        top: ${t}px;\n                        left: ${e}px;\n                        rotate: ${this.rotation}rad;\n                        z-index: ${this.zIndex};">\n            </div>`}const e=2*Math.sqrt(this.vc.sqDistanceFrom(this.v1))+2,[t,a]=this.graph.mapLocalCoordinatesToScreenPosition(this.center),n=this.vc.displacementAngleWithX(this.v1),i=this.vc.displacementAngleWithX(this.v2),s=Math.round((90-180/Math.PI*n+360)%360),o=Math.round((90-180/Math.PI*i+360)%360),r=[];return o>s?r.push(["transparent 0deg",`transparent ${s}deg`,`#fff ${s}deg`,`#fff ${o}deg`,`transparent ${o}deg`,"transparent 360deg"]):r.push(["#fff 0deg",`#fff ${o}deg`,`transparent ${o}deg`,`transparent ${s}deg`,`#fff ${s}deg`,"#fff 360deg"]),`\n            <div id="${this.id}"\n                 class="upgrade_edge--circular ${this.isActive?"active":""} ${this.isConnected?"connected":""}"\n                 style="top: ${a}px;\n                        left: ${t}px;\n                        width: ${e}px;\n                        height: ${e}px;\n                        background: conic-gradient(${r.join(", ")});\n                        z-index: ${this.zIndex};">\n                <div class="upgrade_edge--circular__inner"></div>            \n            </div>\n        `}get isActive(){let e=!1;if(this.v1.renderable)e=this.v1.isTouched;else for(const t of this.v1.neighbours.values())if(t!=this.v2&&t.isTouched){e=!0;break}let t=!1;if(this.v2.renderable)t=this.v2.isTouched;else for(const e of this.v2.neighbours.values())if(e!=this.v1&&e.isTouched){t=!0;break}return e&&t}get isConnected(){return this.v1.renderable&&this.v1.isTouched||!this.v1.renderable&&this.v1.isConnected||this.v2.renderable&&this.v2.isTouched||!this.v2.renderable&&this.v2.isConnected}doRefreshRenderedElement(e){e.removeClass("active connected"),this.isActive?e.addClass("active"):this.isConnected&&e.addClass("connected")}get center(){return null==this.vc?super.center:[this.vc.x,this.vc.y]}}t.UpgradeEdge=i},8235:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupUpgradeGraph=t.UpgradeGraph=void 0;const n=a(190),i=a(9880),s=a(1501),o=a(3319);class r extends i.Graph{constructor(e){super(e)}resetGraph(){for(const e of this.vertices.values())e.resetActivation();this.refreshRenderedElement()}doRefreshRenderedElement(e){for(const e of this.vertices.values())e.refreshRenderedElement();for(const e of this.edges.values())for(const t of e.values())t.refreshRenderedElement()}generateActiveVertexEffectsDOMString(){const e=new Map;for(const t of(0,n.getEnumIterator)(o.AtomicUpgradeVertexType))e.set(t,0);let t=0,a=0,i=0,s=0;for(const n of this.vertices.values())if(n.renderable&&(a++,i+=n.activation,s+=n.maxActivation,n.isActive)){t++;for(const t of o.UpgradeToAtomic.get(n.type))e.set(t,e.get(t)+o.UpgradeRarityLevels.get(n.type).get(n.rarity))}const r=[];for(const[t,a]of e.entries())r.push(o.AtomicUpgradeDescGenerators.get(t)(a));return`\n            <div class="upgrade_details theme--safe">\n                <div class="grunge_panel">\n                    <div class="grunge_panel__icon"><i class="fa-light fa-chart-radar" style="rotate: 30deg;"></i></div>\n                    <div class="grunge_panel__subtitle">Investiture Reclamation</div>\n                    <div class="grunge_panel__title">Cognitive Resequencing</div>\n                </div>\n                <div class="theme_text">\n                    <p>You find yourself staring down a Priomrdial Leviathan.\n                    Once the embodiment of Growth, all that remains of this dead \n                    Titan of the Abyss is a cluster of creeping branches.</p>\n                    <p>Having fallen from the grace of We Many, His conciousness \n                    is long perished, and even if new branches grow - they are \n                    all already withered and dead. His journey has come to an \n                    end.</p>\n                    <p>Yet fate is not done with this Firstborn, and eons later,\n                    upon a silvery, shrivelled branch, dark azure leaves begin to grow.</p><br/>\n                    <p>Drop by drop, bit by bit. It is unstoppable.</p>\n                </div>\n                <div class="theme_subheader">\n                    Progress\n                </div>\n                <div class="dictionary upgrade_stats">\n                    <div class="dictionary__row">\n                        <div class="dictionary__row__key">Nodes activated</div>\n                        <div class="dictionary__row__value">${t} / ${a}</div>\n                    </div>                    \n                    <div class="dictionary__row">\n                        <div class="dictionary__row__key">Reclamation level</div>\n                        <div class="dictionary__row__value">${i} / ${s}</div>\n                    </div>                    \n                </div>\n                <div class="theme_subheader">\n                    Cummulative Effects\n                </div>\n                <div class="dictionary upgrade_effects">\n                    ${r.join("")}\n                </div>\n            </div>`}get StyleSubclass(){return"skill"}}t.UpgradeGraph=r,t.setupUpgradeGraph=function(e,t){0!=e.length&&(e.append(t.generateDOMString()),function(e){const t=$("#skill_graph_area"),a=new s.SidePanel($("#side_banner"));a.swapContent(e.generateActiveVertexEffectsDOMString()),$(document).on("keyup",(function(n){t.is(":hidden")||"Escape"==n.key&&(a.swapContent(e.generateActiveVertexEffectsDOMString()),a.toggle(!1))})),t.on("click",".skill_vertex.connected:not(.active)",(function(){e.lookupVertexById($(this).attr("id")).increaseActivation(),a.swapContent(e.generateActiveVertexEffectsDOMString())}))}(t))}},8425:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UpgradeVertex=void 0;const n=a(2656),i=a(3319),s=a(2001);class o extends s.Vertex{constructor(e,t=!0,a=null,n=null,i=0){if(super(e.id,e.vertexCount),this.graph=e,this.renderable=t,this.type=a,this.rarity=n,this.startActivation=i,e.addVertex(this),this.maxActivation=o.RarityToMaxActMap.get(this.rarity),this.startActivation>this.maxActivation||this.startActivation<0)throw new Error("Bad argument: start activation");this._activation=this.startActivation}doRefreshRenderedElement(e){e.removeClass("connected touched active outer"),this.isActive&&e.addClass("active"),this.isTouched&&e.addClass("touched"),this.isConnected&&e.addClass("connected");const t=this._activation/this.maxActivation*360;e.find(".skill_vertex__backdrop").css("background",`conic-gradient(${o.RarityToColorMap.get(this.rarity)} 0deg, \n                            ${o.RarityToColorMap.get(this.rarity)} ${t}deg, \n                            #777                                               ${t}deg,\n                            #777                                               360deg)`)}generateDOMString(){const[e,t]=this.graph.mapLocalCoordinatesToScreenPosition([this.x,this.y]);if(!this.renderable)return`\n                <div class="null_vertex"\n                     id="${this.id}"\n                     style="left: ${e}px; top: ${t}px;">\n                </div>\n            `;const a=null==this.type?"":i.UpgradeIcons.get(this.type),s=[];null!=this.rarity&&s.push(`rarity--${n.Rarity[this.rarity].toLowerCase()}`),this.isActive&&s.push("active"),this.isTouched&&s.push("touched"),this.isConnected&&s.push("connected");const r=[];if(this.maxActivation>1)for(let e=0;e<this.maxActivation;e++){const t=360/this.maxActivation*e;r.push(`<div class="progress_circle__spoke" style="rotate: ${t}deg;"></div>`)}const l=this._activation/this.maxActivation*360;return`\n            <div class="skill_vertex ${s.join(" ")}"\n                 id="${this.id}"\n                 style="left: ${e}px; top: ${t}px;">\n                <div class="skill_vertex__backdrop"\n                     style="background: conic-gradient(${o.RarityToColorMap.get(this.rarity)} 0deg, \n                                                       ${o.RarityToColorMap.get(this.rarity)} ${l}deg, \n                                                       #777                                               ${l}deg,\n                                                       #777                                               360deg);"></div>\n                <div class="progress_circle">\n                    ${r.join("")}                    \n                </div>\n                <div class="skill_vertex__cover" ></div>\n                <div class="skill_vertex__core">\n                    ${a}\n                </div>\n                <div class="skill_vertex__info">\n                    <div class="overhead_text"></div>\n                    <div class="grunge_label">\n                        <div class="grunge_label__title">\n                            <div class="grunge_label__title__left">${n.Rarity[this.rarity]}</div>\n                            <div class="grunge_label__title__right">${i.UpgradeNames.get(this.type)}</div>\n                        </div>\n                        <div class="grunge_label__desc">\n                            ${i.UpgradeDescGenerators.get(this.type)(i.UpgradeRarityLevels.get(this.type).get(this.rarity))}\n                        </div>                \n                    </div>\n                </div>\n            </div>\n        `}increaseActivation(){if(!(this._activation>=this.maxActivation)){if(!this.isConnected)throw new Error("Cannot activate unconnected vertex");this._activation++,1==this._activation?this.graph.refreshRenderedElement():this.refreshRenderedElement()}}resetActivation(){this._activation!=this.startActivation&&(this._activation=this.startActivation)}get isConnected(){if(this.isTouched)return!0;for(const e of this.neighbours.values())if(e.renderable&&e.isTouched||!e.renderable&&e.isConnected)return!0;return!1}get isTouched(){return!!this.renderable&&this._activation>0}get isActive(){return!!this.renderable&&this._activation==this.maxActivation}get activation(){return this._activation}}t.UpgradeVertex=o,o.RarityToMaxActMap=new Map([[n.Rarity.Black,1],[n.Rarity.Common,1],[n.Rarity.Uncommon,2],[n.Rarity.Rare,3],[n.Rarity.Epic,5],[n.Rarity.Legendary,7],[n.Rarity.Artefact,7]]),o.RarityToColorMap=new Map([[n.Rarity.Black,"#FFE"],[n.Rarity.Common,"#242528"],[n.Rarity.Uncommon,"#1FC219"],[n.Rarity.Rare,"#4990E2"],[n.Rarity.Epic,"#9810E0"],[n.Rarity.Legendary,"#FEA227"],[n.Rarity.Artefact,"#9a5c40"]])},3319:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AtomicUpgradeDescGenerators=t.UpgradeToAtomic=t.AtomicUpgradeVertexType=t.UpgradeRarityLevels=t.UpgradeIcons=t.UpgradeDescGenerators=t.UpgradeNames=t.UpgradeVertexType=void 0;const n=a(2656);var i,s;!function(e){e[e.Sync=0]="Sync",e[e.LandMovement=1]="LandMovement",e[e.SeaMovement=2]="SeaMovement",e[e.StepMovement=3]="StepMovement",e[e.DeathSaves=4]="DeathSaves",e[e.AC=5]="AC",e[e.HP=6]="HP",e[e.Accuracy=7]="Accuracy",e[e.Damage=8]="Damage",e[e.ProfBonus=9]="ProfBonus",e[e.Initiative=10]="Initiative",e[e.SavesAll=11]="SavesAll",e[e.SavesStrDexCon=12]="SavesStrDexCon",e[e.SavesIntWisCha=13]="SavesIntWisCha",e[e.SkillsAll=14]="SkillsAll",e[e.SkillsNinjutsu=15]="SkillsNinjutsu",e[e.SkillsWildHeart=16]="SkillsWildHeart",e[e.SkillsIndoctrination=17]="SkillsIndoctrination",e[e.SkillsBrilliance=18]="SkillsBrilliance",e[e.SkillsProdigy=19]="SkillsProdigy",e[e.StatsStr=20]="StatsStr",e[e.StatsDex=21]="StatsDex",e[e.StatsCon=22]="StatsCon",e[e.StatsInt=23]="StatsInt",e[e.StatsWis=24]="StatsWis",e[e.StatsCha=25]="StatsCha",e[e.StatsIntDex=26]="StatsIntDex",e[e.StatsWisCon=27]="StatsWisCon",e[e.StatsChaStr=28]="StatsChaStr",e[e.StatsStrDexCon=29]="StatsStrDexCon",e[e.StatsIntWisCha=30]="StatsIntWisCha",e[e.NULL=31]="NULL"}(i=t.UpgradeVertexType||(t.UpgradeVertexType={})),t.UpgradeNames=new Map([[i.Sync,"Synchronization"],[i.LandMovement,"Acceleration"],[i.SeaMovement,"Marine Adaptation"],[i.StepMovement,"Unfettered Mobility"],[i.DeathSaves,"Death Ward"],[i.AC,"Armor"],[i.HP,"Vitality"],[i.Accuracy,"Accuracy"],[i.Damage,"Ruin"],[i.ProfBonus,"Synaptic Evolution"],[i.Initiative,"Reflexes"],[i.SavesAll,"Assertion of Life"],[i.SavesStrDexCon,"Assertion of Body"],[i.SavesIntWisCha,"Assertion of Mind"],[i.SkillsAll,"Of All Trades"],[i.SkillsNinjutsu,"Ninjutsu"],[i.SkillsWildHeart,"Wild Heart"],[i.SkillsIndoctrination,"Indoctrination"],[i.SkillsBrilliance,"Brilliance"],[i.SkillsProdigy,"Prodigy"],[i.StatsStr,"Strength"],[i.StatsDex,"Dexterity"],[i.StatsCon,"Constitution"],[i.StatsInt,"Intelligence"],[i.StatsWis,"Wisdom"],[i.StatsCha,"Charisma"],[i.StatsIntDex,"Shrewdness"],[i.StatsWisCon,"Stability"],[i.StatsChaStr,"Authority"],[i.StatsStrDexCon,"Physique Upgrade"],[i.StatsIntWisCha,"Cognition Upgrade"]]),t.UpgradeDescGenerators=new Map([[i.Sync,e=>`Attunement slots +${e}, can be used for mass attunement.`],[i.LandMovement,e=>`Walking Speed increases by ${e}ft.`],[i.SeaMovement,e=>`Swimming Speed increases by ${e}ft. Can breathe underwater.`],[i.StepMovement,e=>`As an action, can teleport ${e} times the walking speed \n                            upto proficiency bonus times per long rest.`],[i.DeathSaves,e=>`Gain ${e} to death saves.`],[i.AC,e=>`Gain ${e} AC`],[i.HP,e=>`HP increases by ${e} per level.`],[i.Accuracy,e=>`To-hit rolls and save DCs increase by ${e}.`],[i.Damage,e=>`Damage of weapon attacks and cantrips increases by ${e}.`],[i.ProfBonus,e=>`Proficiency bonus increases by ${e}`],[i.Initiative,e=>`Gain ${e} to initiative rolls.`],[i.SavesAll,e=>`+${e} to all saves.`],[i.SavesStrDexCon,e=>`+${e} to STR/DEX/CON saves.`],[i.SavesIntWisCha,e=>`+${e} to INT/WIS/CHA saves.`],[i.SkillsAll,e=>`+${e} to all skill rolls.`],[i.SkillsNinjutsu,e=>`+${e} to Stealth, Investigation, Acrobatics and Athletics rolls.`],[i.SkillsWildHeart,e=>`+${e} to all Perception, Medicine, Nature and Survival rolls.`],[i.SkillsIndoctrination,e=>`+${e} to all Insight, Deception, Intimidation and Religion rolls.`],[i.SkillsBrilliance,e=>`+${e} to all Arcana, Slight-of-Hand, History and Performance rolls.`],[i.SkillsProdigy,e=>`+${e} to all Stealth, Perception, Insight, Arcana and Persuasion rolls.`],[i.StatsStr,e=>`Strength +${e}`],[i.StatsDex,e=>`Dexterity +${e}`],[i.StatsCon,e=>`Constitution +${e}`],[i.StatsInt,e=>`Intelligence +${e}`],[i.StatsWis,e=>`Wisdom +${e}`],[i.StatsCha,e=>`Charisma +${e}`],[i.StatsIntDex,e=>`Intelligence and Dexterity +${e}`],[i.StatsWisCon,e=>`Wisdom and Constitution +${e}`],[i.StatsChaStr,e=>`Charisma and Strength +${e}`],[i.StatsStrDexCon,e=>`Strength, Dexterity and Constitution +${e}`],[i.StatsIntWisCha,e=>`Intelligence, Wisdom and Charisma +${e}`]]),t.UpgradeIcons=new Map([[i.Sync,'<i class="fa-sharp fa-light fa-wreath-laurel"></i>'],[i.LandMovement,'<i class="fa-solid fa-rabbit-running"></i>'],[i.SeaMovement,'<i class="fa-solid fa-dolphin"></i>'],[i.StepMovement,'<i class="fa-duotone fa-transporter-1"></i>'],[i.DeathSaves,'<i class="fa-solid fa-skull-cow" style="transform: translate(0, 2px);"></i>'],[i.AC,'<i class="fa-sharp fa-solid fa-shield-quartered"></i>'],[i.HP,'<i class="fa-solid fa-heart-pulse"></i>'],[i.Accuracy,'<i class="fa-solid fa-crosshairs"></i>'],[i.Damage,'<i class="fa-sharp fa-solid fa-swords"></i>'],[i.ProfBonus,'<i class="fa-regular fa-dna"></i>'],[i.Initiative,'<i class="fa-sharp fa-solid fa-stopwatch"></i>'],[i.SavesAll,'<i class="fa-regular fa-star-of-life"></i>'],[i.SavesStrDexCon,'<i class="fa-sharp fa-solid fa-football-helmet"></i>'],[i.SavesIntWisCha,'<i class="fa-solid fa-spa"></i>'],[i.SkillsAll,'<i class="fa-regular fa-mandolin"></i>'],[i.SkillsNinjutsu,'<i class="fa-duotone fa-user-ninja"></i>'],[i.SkillsWildHeart,'<i class="fa-duotone fa-user-cowboy"></i>'],[i.SkillsIndoctrination,'<i class="fa-duotone fa-user-secret"></i>'],[i.SkillsBrilliance,'<i class="fa-duotone fa-user-graduate"></i>'],[i.SkillsProdigy,'<i class="fa-duotone fa-user-police-tie"></i>'],[i.StatsStr,'<i class="fa-duotone fa-dumbbell"></i>'],[i.StatsDex,'<i class="fa-solid fa-dagger" style="rotate: 45deg;"></i>'],[i.StatsCon,'<i class="fa-solid fa-heart-half-stroke"></i>'],[i.StatsInt,'<i class="fa-solid fa-brain-circuit"></i>'],[i.StatsWis,'<i class="fa-solid fa-yin-yang"></i>'],[i.StatsCha,'<i class="fa-sharp fa-solid fa-masks-theater"></i>']]),t.UpgradeIcons.set(i.StatsIntDex,`<div class="duo_icon">\n        ${t.UpgradeIcons.get(i.StatsInt)}\n        ${t.UpgradeIcons.get(i.StatsDex)}\n    </div>`),t.UpgradeIcons.set(i.StatsWisCon,`<div class="duo_icon">\n        ${t.UpgradeIcons.get(i.StatsWis)}\n        ${t.UpgradeIcons.get(i.StatsCon)}\n    </div>`),t.UpgradeIcons.set(i.StatsChaStr,`<div class="duo_icon">\n        ${t.UpgradeIcons.get(i.StatsCha)}\n        ${t.UpgradeIcons.get(i.StatsStr)}\n    </div>`),t.UpgradeIcons.set(i.StatsStrDexCon,`<div class="tri_icon">\n        ${t.UpgradeIcons.get(i.StatsStr)}\n        ${t.UpgradeIcons.get(i.StatsCon)}\n        ${t.UpgradeIcons.get(i.StatsDex)}\n    </div>`),t.UpgradeIcons.set(i.StatsIntWisCha,`<div class="tri_icon">\n        ${t.UpgradeIcons.get(i.StatsInt)}\n        ${t.UpgradeIcons.get(i.StatsWis)}\n        ${t.UpgradeIcons.get(i.StatsCha)}\n    </div>`),t.UpgradeRarityLevels=new Map([[i.Sync,new Map([[n.Rarity.Artefact,1]])],[i.LandMovement,new Map([[n.Rarity.Black,-20],[n.Rarity.Common,10],[n.Rarity.Uncommon,20]])],[i.SeaMovement,new Map([[n.Rarity.Rare,20]])],[i.StepMovement,new Map([[n.Rarity.Epic,3]])],[i.DeathSaves,new Map([[n.Rarity.Black,-2],[n.Rarity.Rare,2],[n.Rarity.Legendary,5]])],[i.AC,new Map([[n.Rarity.Black,-1],[n.Rarity.Uncommon,1],[n.Rarity.Rare,2],[n.Rarity.Legendary,3]])],[i.HP,new Map([[n.Rarity.Black,-3],[n.Rarity.Common,1],[n.Rarity.Uncommon,2],[n.Rarity.Rare,3],[n.Rarity.Epic,5],[n.Rarity.Legendary,7]])],[i.Accuracy,new Map([[n.Rarity.Black,-1],[n.Rarity.Uncommon,1],[n.Rarity.Rare,2],[n.Rarity.Epic,3]])],[i.Damage,new Map([[n.Rarity.Uncommon,1],[n.Rarity.Rare,2],[n.Rarity.Epic,3]])],[i.ProfBonus,new Map([[n.Rarity.Legendary,1]])],[i.Initiative,new Map([[n.Rarity.Uncommon,1],[n.Rarity.Rare,2],[n.Rarity.Epic,3]])],[i.SavesAll,new Map([[n.Rarity.Rare,2]])],[i.SavesStrDexCon,new Map([[n.Rarity.Uncommon,2]])],[i.SavesIntWisCha,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsAll,new Map([[n.Rarity.Epic,2]])],[i.SkillsNinjutsu,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsWildHeart,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsIndoctrination,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsBrilliance,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsProdigy,new Map([[n.Rarity.Rare,3]])],[i.StatsStr,new Map([[n.Rarity.Common,1]])],[i.StatsDex,new Map([[n.Rarity.Common,1]])],[i.StatsCon,new Map([[n.Rarity.Common,1]])],[i.StatsInt,new Map([[n.Rarity.Common,1]])],[i.StatsWis,new Map([[n.Rarity.Common,1]])],[i.StatsCha,new Map([[n.Rarity.Common,1]])],[i.StatsIntDex,new Map([[n.Rarity.Epic,2]])],[i.StatsWisCon,new Map([[n.Rarity.Epic,2]])],[i.StatsChaStr,new Map([[n.Rarity.Epic,2]])],[i.StatsStrDexCon,new Map([[n.Rarity.Legendary,3]])],[i.StatsIntWisCha,new Map([[n.Rarity.Legendary,3]])],[i.NULL,new Map([])]]),function(e){e[e.Sync=0]="Sync",e[e.ProfBonus=1]="ProfBonus",e[e.AC=2]="AC",e[e.HP=3]="HP",e[e.StatsStr=4]="StatsStr",e[e.StatsDex=5]="StatsDex",e[e.StatsCon=6]="StatsCon",e[e.StatsInt=7]="StatsInt",e[e.StatsWis=8]="StatsWis",e[e.StatsCha=9]="StatsCha",e[e.Accuracy=10]="Accuracy",e[e.Damage=11]="Damage",e[e.LandMovement=12]="LandMovement",e[e.SeaMovement=13]="SeaMovement",e[e.StepMovement=14]="StepMovement",e[e.Initiative=15]="Initiative",e[e.DeathSaves=16]="DeathSaves",e[e.SavesStrDexCon=17]="SavesStrDexCon",e[e.SavesIntWisCha=18]="SavesIntWisCha",e[e.SkillStealth=19]="SkillStealth",e[e.SkillPerception=20]="SkillPerception",e[e.SkillInsight=21]="SkillInsight",e[e.SkillArcana=22]="SkillArcana",e[e.SkillPersuasion=23]="SkillPersuasion",e[e.SkillMedicineNatureSurvival=24]="SkillMedicineNatureSurvival",e[e.SkillDeceptionIntimidationReligion=25]="SkillDeceptionIntimidationReligion",e[e.SkillsInvestigationAcrobaticsAthletics=26]="SkillsInvestigationAcrobaticsAthletics",e[e.SkillSlightHistoryPerformance=27]="SkillSlightHistoryPerformance",e[e.SkillOther=28]="SkillOther"}(s=t.AtomicUpgradeVertexType||(t.AtomicUpgradeVertexType={})),t.UpgradeToAtomic=new Map([[i.Sync,new Set([s.Sync])],[i.LandMovement,new Set([s.LandMovement])],[i.SeaMovement,new Set([s.SeaMovement])],[i.StepMovement,new Set([s.StepMovement])],[i.DeathSaves,new Set([s.DeathSaves])],[i.AC,new Set([s.AC])],[i.HP,new Set([s.HP])],[i.Accuracy,new Set([s.Accuracy])],[i.Damage,new Set([s.Damage])],[i.ProfBonus,new Set([s.ProfBonus])],[i.Initiative,new Set([s.Initiative])],[i.SavesAll,new Set([s.SavesStrDexCon,s.SavesIntWisCha])],[i.SavesStrDexCon,new Set([s.SavesStrDexCon])],[i.SavesIntWisCha,new Set([s.SavesIntWisCha])],[i.SkillsAll,new Set([s.SkillStealth,s.SkillPerception,s.SkillInsight,s.SkillArcana,s.SkillPersuasion,s.SkillsInvestigationAcrobaticsAthletics,s.SkillMedicineNatureSurvival,s.SkillDeceptionIntimidationReligion,s.SkillSlightHistoryPerformance,s.SkillOther])],[i.SkillsNinjutsu,new Set([s.SkillStealth,s.SkillsInvestigationAcrobaticsAthletics])],[i.SkillsWildHeart,new Set([s.SkillPerception,s.SkillMedicineNatureSurvival])],[i.SkillsIndoctrination,new Set([s.SkillInsight,s.SkillDeceptionIntimidationReligion])],[i.SkillsBrilliance,new Set([s.SkillArcana,s.SkillSlightHistoryPerformance])],[i.SkillsProdigy,new Set([s.SkillStealth,s.SkillPerception,s.SkillInsight,s.SkillArcana,s.SkillPersuasion])],[i.StatsStr,new Set([s.StatsStr])],[i.StatsDex,new Set([s.StatsDex])],[i.StatsCon,new Set([s.StatsCon])],[i.StatsInt,new Set([s.StatsInt])],[i.StatsWis,new Set([s.StatsWis])],[i.StatsCha,new Set([s.StatsCha])],[i.StatsIntDex,new Set([s.StatsInt,s.StatsDex])],[i.StatsWisCon,new Set([s.StatsWis,s.StatsCon])],[i.StatsChaStr,new Set([s.StatsCha,s.StatsStr])],[i.StatsStrDexCon,new Set([s.StatsStr,s.StatsDex,s.StatsCon])],[i.StatsIntWisCha,new Set([s.StatsInt,s.StatsWis,s.StatsCha])],[i.NULL,new Set]]),t.AtomicUpgradeDescGenerators=new Map([[s.Sync,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Attunement Slot Count</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.LandMovement,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Walking Speed</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e} ft</div>\n                 </div>`],[s.SeaMovement,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Swimming Speed</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e} ft</div>\n                 </div>`],[s.StepMovement,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Teleportation</div>\n                     <div class="dictionary__row__value">${e>0?`${e} &times; Walking speed`:"None"}</div>\n                 </div>`],[s.DeathSaves,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Death Saves</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.AC,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Armor Class</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.HP,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Hit Points</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.Accuracy,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">To-hit Modifier</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.Damage,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Per-hit Damage Modifer</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.ProfBonus,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Proficiency Bonus</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.Initiative,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Initiative</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SavesStrDexCon,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">STR / DEX / CON saves</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SavesIntWisCha,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">INT / WIS / CHA saves</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillStealth,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Stealth</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillPerception,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Perception</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillInsight,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Insight</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillArcana,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Arcana</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillPersuasion,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Persuasion</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillMedicineNatureSurvival,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Medicine, Nature, Survival</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillDeceptionIntimidationReligion,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Deception, Intimidation, Religion</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillsInvestigationAcrobaticsAthletics,e=>`<div class="dictionary__row">\n             <div class="dictionary__row__key">Investigation, Acrobatics, Athletics</div>\n             <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n         </div>`],[s.SkillSlightHistoryPerformance,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Slight-of-Hand, History, Performance</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillOther,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">All Other Skills</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsStr,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Strength Score</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsDex,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Dexterity Score</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsCon,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Constitution Score</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsInt,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Intelligence Score</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsWis,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Wisdom Score</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsCha,e=>`<div class="dictionary__row">\n                     <div class="dictionary__row__key">Charisma Score</div>\n                     <div class="dictionary__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`]])},2001:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Vertex=void 0;const n=a(6967);class i extends n.BaseUniqueDOMGenerator{constructor(e,t){super(),this.graphID=e,this.numId=t,this.id=`${e}${String(this.numId).padStart(3,"0")}`,this.radial=[0,0],this._neighbours=new Map}setRadiallyWrt(e,t,a){a*=Math.PI/180;const[n,i]=e._cartesian;this.cartesian=[n+t*Math.cos(a),i+t*Math.sin(a)]}setLinearlyWrt(e,t,a){const[n,i]=e._cartesian;this.cartesian=[n+t,i+a]}sqDistanceFrom(e){return(this.x-e.x)*(this.x-e.x)+(this.y-e.y)*(this.y-e.y)}displacementAngleWithX(e){return i.vectorAngleWithX(e.x-this.x,e.y-this.y)}get x(){return this._cartesian[0]}get y(){return this._cartesian[1]}get r(){return this._radial[0]}get theta(){return this._radial[1]}set radial(e){this._radial=e;const[t,a]=e;this._cartesian=[t*Math.cos(a),t*Math.sin(a)]}set cartesian(e){this._cartesian=e;const[t,a]=e;this._radial=[Math.sqrt(t*t+a*a),i.vectorAngleWithX(t,a)]}static vectorAngleWithX(e,t){return 0!=e?Math.atan(t/e)+(e>0?0:(t>=0?1:-1)*Math.PI):Math.sign(t)*Math.PI/2}addNeighbour(e){if(e.v1==this)this._neighbours.set(e,e.v2);else{if(e.v2!=this)throw new Error;this._neighbours.set(e,e.v1)}}get neighbours(){return this._neighbours}}t.Vertex=i},9086:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.devotionMap=void 0;const n=a(3998),i=a(3382),s=a(6453),o=a(3542),r=a(1744),l=a(3560),d=new s.MapGraph("Dvo");function c(e,t,a,n,i=null,s=null,o=null){null==i&&(i=l.MapVertexStatus.Unknown),null==s&&(s="???");let c=new r.MapVertex(i,s,d);return null==a?n?c.radial=[e,t]:c.cartesian=[e,t]:n?c.setRadiallyWrt(a,e,t):c.setLinearlyWrt(a,e,t),null!=o&&(c.name=o),c}d.worldDistancePerPixel=1e3;const h=c(0,0,null,!1,l.MapVertexStatus.Safe,"Base","The village of Po'Shan"),p=c(-40,-15,h,!1,null,null,null),u=c(-50,-60,p,!1,l.MapVertexStatus.Deadly,"Stronghold",null),m=c(40,40,h,!1,null,null,null),g=c(60,-45,h,!1,null,null,null),f=c(500,0,h,!1,l.MapVertexStatus.Safe,"Perpendicularity","<span>Devotion's Perpendicularity</span>"),v=c(80,25,m,!1,null,null,null),y=c(-15,100,h,!1,null,null,null),w=c(-50,-135,h,!1,null,null,null),S=c(-60,130,y,!1,null,null,null),b=c(130,40,S,!1,null,null,null),D=c(170,-50,b,!1,null,null,null),k=c(25,-90,f,!1,l.MapVertexStatus.Friendly,"Deity's Abode","Mount Hui-ch'i"),C=c(140,10,w,!1,null,null,null),I=c(40,45,C,!1,null,null,null),_=c(150,-95,w,!0,l.MapVertexStatus.Friendly,"Town","Alvarium"),A=c(140,-140,_,!0,null,null,null),P=c(50,-15,_,!0,null,null,null),T=c(70,-120,C,!1,null,null,null),E=c(150,-45,T,!0,null,null,null),M=c(200,60,D,!0,null,null,null),R=c(160,115,D,!0,null,null,null),x=c(240,105,b,!0,null,null,null),N=c(140,100,x,!0,null,null,null),H=c(128,65,x,!0,l.MapVertexStatus.Neutral,"State Capital","Sarausa"),L=c(216,30,x,!0,null,null,null),$=c(150,30,R,!0,null,null,null),O=c(120,75,$,!0,l.MapVertexStatus.Friendly,"City","Aetna"),G=c(60,30,O,!0,null,null,null),V=c(120,-25,P,!0,null,null,null),B=c(100,-110,P,!0,null,null,null),F=c(150,-150,B,!0,l.MapVertexStatus.Combat,"Target","Nix"),U=c(150,-130,F,!0,null,null,null),z=c(180,-75,F,!0,null,null,null),W=c(250,-75,B,!0,null,null,null),j=c(40,55,W,!0,null,null,null),K=c(40,-15,W,!0,null,null,null),Y=c(40,-15,j,!0,null,null,null),q=c(120,-30,B,!0,l.MapVertexStatus.Friendly,"State Capital","Sanctabella"),J=c(100,-15,q,!0,null,null,null),X=c(140,30,H,!0,null,null,null),Z=c(140,85,H,!0,null,null,null),Q=c(140,-155,N,!0,null,null,null),ee=c(250,115,Q,!0,null,null,null),te=c(150,95,Z,!0,null,null,null),ae=c(150,85,X,!0,null,null,null),ne=c(70,60,ae,!0,null,null,null),ie=c(135,130,te,!0,l.MapVertexStatus.Black,"Death","The 2nd Nightmare"),se=c(150,115,G,!0,null,null,null),oe=c(100,120,p,!0,null,null,null),re=c(140,135,G,!0,null,null,null),le=c(130,105,H,!0,null,null,null),de=c(55,-160,oe,!0,null,null,null),ce=c(75,-40,w,!0,null,null,null),he=c(125,-80,J,!0,null,null,null),pe=c(80,-100,he,!0,null,null,null),ue=c(120,140,_,!0,null,null,null),me=c(60,90,se,!0,null,null,null),ge=c(70,120,R,!0,l.MapVertexStatus.Emergency,"Civilian Crisis","RyneTech Labs Outpost"),fe=c(240,-40,z,!0,null,null,null),ve=c(80,-60,z,!0,null,null,null),ye=c(180,85,ee,!0,null,null,null),we=c(125,-120,U,!0,null,null,null),Se=c(50,-90,K,!0,null,null,null);function be(e,t,a=1){new i.MapEdge(d,e,t).worldLengthMultiplier=a}ye.z=Math.sqrt(36e4-ye.x*ye.x),ee.z=Math.sqrt(36e4-ee.x*ee.x),Q.z=Math.sqrt(36e4-Q.x*Q.x),f.z=Math.sqrt(36e4-f.x*f.x),k.z=Math.sqrt(36e4-k.x*k.x),E.z=Math.sqrt(36e4-E.x*E.x),U.z=Math.sqrt(36e4-U.x*U.x),we.z=Math.sqrt(36e4-we.x*we.x),h.markAsBase(),h.intel="<p>An apology, by an eldritch monstrosity on behalf of a mankind who \n             had failed, terribly, one of their own. One who, while she walked \n             Terra, only got to see the worst that life had to offer.</p>\n             <p>On her deathbed, she finally broke. As her Goddess looked down \n             upon her, she wished, choked by wrath and tears. She wished that \n             she could spend just one more day in her childhood village, amidst\n             warm company with whom she belonged, in a time and place that just \n             felt <em>right</em>.</p>\n             <p>And the Goddess, a Fragment that Should Not Be, listened. And so\n             She took her home. And then She painted. Fueled by ferventness and \n             disdain, She painted. And painted. Thus creating a work of art that\n             would never be rivaled, bringing to life not just the long-lost \n             village of Po'Shan, but also a myriad breathtaking visions, of \n             alpine meadows and deep ravines, of snow clad hills and warm beaches, in what was \n             before naught but barren rock...</p>\n             <p>Over time this painted realm became home to quite a varied \n             assortment of people. Lost and abandoned elsewhere, they found this\n             village in the middle of nowhere a welcoming and warm reprieve.</p> \n             <p>A wish fulfilled.</p>\n             <p>At least, while it lasted. For the She-Dragon was not human, nor\n              mortal. And She did not see Herself as one. Until recently, the \n              village was both a boon and a curse, paradise and damnation.</p>\n             <p>But now freed, it forms the key to your survival. With its fate \n             intricately tangled with your own, the path you tread remains to be \n             seen...</p>",F.intel="<p>The territory of Nix (named after the only known 'civilized' \n            town in that area) covers a <em>huge</em> expanse of frigid tundra /\n            vast barren glacier-fields, with only coastal areas (barely) \n            suitable for sustaining life. The rest of it is populated by various primitive, \n            loosely-bound chiefdoms having only a handful of families. These still \n            retain their ancient ways of life, isolationism and shamanic cultures while the \n            rest of this universe continues to modernize. Each of these tribes \n            is lead by revered 'SnowPriests' leading to their renowned (yet \n            elusive) culture of mystic animism.</p>\n            <p>A land that time forgot. A land that is still deeply invested and\n            filled with mysteries and ancient primordials, this infinite \n            icefield has always inspired mixed feelings of fear and reverence,\n            and occasionally mockery. Yet of late, a new feeling has begun to \n            surface... A feeling of pure horror. An infection that few know, \n            and fewer yet understand, has begun to creep upon this land - and \n            the wholesale slaughter of the town of Nix doesn't help with its reputation...</p>",F.addSiteOfInterest("The town of Nix","Coastal Town","The little town of Nix. 'Twas almost yesterday that this was a humble and friendly refuge for many a traveller, and crafts from here adorn many a place in Devotion and even beyond. Unfortunately, the recent bloodbath has gripped this place in a heavy mood of despair and paranoia, and <em>fear</em>.",[["Leader","Sir Gnosis Edelweiss"],["Population","~1.3K"],["Geography","Cliff-side"],["Economy","Shambles"]],2288,new Map([[o.MapTransportation.Foot,"~57 days"],[o.MapTransportation.Horse,"~22 days"],[o.MapTransportation.Automobile,"~2  days"],[o.MapTransportation.Jet,"~1  hour"]])),F.addCharacterToken(n.NpcID.Gnosis),ge.intel="Outpost #4d37335c of RyneTech Labs, Devotion Sector. Responsible \n             for low latency front line research concerning phenomenon observed in this\n             sector of Devotion. Like most \n             other outposts outside the plane of innovation, this area only \n             maintains comms with the 'fringes' of Innovation, and its \n             existence is classified to most inhabitants of the plane it swears \n             allegiance to.<br/>\n             Several campuses have popped up here after the executives of the \n             Labs decided to choose this region to spearhead their research. Other\n             than the central campus, The Kernel, where sensitive and military \n             research occurs, security is fairly lax. But then, the suburbs \n             built on reinforced steel, aluminium and polymers are confident \n             that they needn't fear obsolete arms, magic, siege weapons or \n             even myths and deities.<br/>\n             Most civilians here, while not so \n             oblivious to the multiverse as those within the inner reaches of \n             Innovation are, have never seen an invested being or application of\n             magic in their lives. That's in part due to the extensive \n             surveillance of this area. Scores of satellites patrolling the \n             skies detect signs of life anywhere in this region - and intruders,\n             particularly invested intruders are quarantined or eliminated with \n             extreme professionalism.\n             <div class=\"map_vertex_details__subheader theme_subheader\">\n                 Crisis Details\n             </div>\n             ???\n             ",ge.addSiteOfInterest("The Kernel","Military Research Hub","The central research center of the Outpost. All studies \n                       performed here are classified to the most severe degree. \n                       Highest grade security and fusion-powered defenses\n                       plus a framework made almost entirely upon Aluminium \n                       means this has been impenetrable by man or God, or \n                       anything in between, so far at least.",[["Manager","Yasin Natael"],["Population","~1.0K"],["Geography","High Altitude Plains"],["Defenses","SS Grade"],["Research Focus","???"]],25600,new Map([[o.MapTransportation.Automobile,"~9   days"],[o.MapTransportation.Jet,"~5   hours"],[o.MapTransportation.Space,"75   minutes"]])),ge.addSiteOfInterest("Park District","Neighbourhood","The civilian research area of the Outpost. 4 hours rail \n                      from the Kernel. Most of the civilization needed to support \n                      The Kernel resides here. Also notably, a high population \n                      of Graduate students engage in non-military studies, \n                      enjoying a relaxed sub-urb life subsidised by the labs.",[["Population","~12K"],["Geography","Fertile Plains"],["Defenses","None"]],22400,new Map([[o.MapTransportation.Horse,"~96  days"],[o.MapTransportation.Automobile,"~8   days"],[o.MapTransportation.Jet,"~4.5 hours"],[o.MapTransportation.Space,"70   minutes"]])),ge.addSiteOfInterest("Sand Ridge","Badlands Camp","Home to a corporate funded task force and local militia.\n                       Mainly self-sufficient and independent, the growth of \n                       this 'Camp' has been encouraged by the authorities in \n                       Innovation so that they could provide (at a price) goods\n                       and services, and protection, needed by the research areas\n                       in case of emergencies....",[["Manager","Saito San"],["Population","~4.2K"],["Geography","Semi-barren Plateaus"],["Defenses","B Grade"]],18400,new Map([[o.MapTransportation.Horse,"~72 days"],[o.MapTransportation.Automobile,"~7   days"],[o.MapTransportation.Jet,"~4   hours"]])),be(h,p,.8),be(h,y,.9),be(h,m),be(h,g,.6),be(h,f,.01),be(h,w),be(h,C,1.2),be(p,u,.4),be(p,y),be(p,oe),be(u,ue,.3),be(m,v),be(g,v),be(g,C),be(f,D,.1),be(f,k,.1),be(v,D),be(y,D),be(w,_),be(w,C),be(w,ce),be(S,b),be(S,oe),be(S,de),be(b,D,.1),be(b,x),be(b,R),be(b,Q,.1),be(D,M),be(D,R),be(k,E,.1),be(C,I),be(C,P),be(C,T),be(_,A),be(_,ue),be(A,F),be(P,V),be(P,B),be(E,q,.1),be(M,G),be(R,$),be(R,L),be(R,ge),be(x,N),be(x,H),be(x,L),be(N,Z),be(N,le),be(H,X),be(H,Z),be(L,$),be($,O),be($,re),be(O,G),be(G,se),be(V,q),be(V,J),be(B,F),be(B,W),be(B,q),be(F,z),be(F,W),be(U,q,.1),be(U,we,.1),be(z,fe),be(z,ve),be(W,j),be(W,K),be(j,Y),be(j,q),be(K,Y),be(K,Se),be(Y,J),be(q,J),be(J,he),be(X,te),be(X,ae),be(Z,te),be(Z,le),be(Q,ee,.1),be(ee,ye,.1),be(te,le),be(ae,ne),be(ae,ie),be(ae,se),be(ae,re),be(te,ie),be(ne,ie),be(ne,me),be(he,pe),t.devotionMap=d},2224:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skillMap=void 0;const n=a(2656),i=a(8763),s=a(8235),o=a(8425),r=a(3319),l=new s.UpgradeGraph("sk");function d(e,t,a,n,i,s=null,r=null,d=0){const c=new o.UpgradeVertex(l,i,s,r,d);return null==a?n?c.radial=[e,t]:c.cartesian=[e,t]:n?c.setRadiallyWrt(a,e,t):c.setLinearlyWrt(a,e,t),c}function c(e,t,a=null,n=0){new i.UpgradeEdge(l,e,t,a).zIndex=n}const h=160,p=250,u=350,m=500,g=150,f=240,v=150,y=160,w=d(0,0,null,!1,!0,r.UpgradeVertexType.Sync,n.Rarity.Artefact,1),S=d(80,-45,w,!0,!0,r.UpgradeVertexType.StatsWis,n.Rarity.Common,1),b=d(80,-90,w,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Black,1),D=d(80,-135,w,!0,!0,r.UpgradeVertexType.StatsInt,n.Rarity.Common,1),k=d(80,180,w,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Uncommon),C=d(h,0,w,!0,!0,r.UpgradeVertexType.StatsCon,n.Rarity.Common,1),I=d(h,-45,w,!0,!0,r.UpgradeVertexType.DeathSaves,n.Rarity.Black),_=d(h,-90,w,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Common,1),A=d(h,-135,w,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Uncommon),P=d(h,-180,w,!0,!0,r.UpgradeVertexType.StatsDex,n.Rarity.Common),T=d(p,-22.5,w,!0,!0,r.UpgradeVertexType.StatsStr,n.Rarity.Common),E=d(p,-90,w,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Uncommon),M=d(p,-112.5,w,!0,!0,r.UpgradeVertexType.StatsCha,n.Rarity.Common),R=d(u,0,w,!0,!0,r.UpgradeVertexType.SavesIntWisCha,n.Rarity.Uncommon),x=d(u,-22.5,w,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Common),N=d(u,-45,w,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Rare),H=d(u,-90,w,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Rare),L=d(u,-112.5,w,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Common),$=d(u,-135,w,!0,!0,r.UpgradeVertexType.DeathSaves,n.Rarity.Rare),O=d(u,-157.5,w,!0,!0,r.UpgradeVertexType.SeaMovement,n.Rarity.Rare),G=d(u,-180,w,!0,!0,r.UpgradeVertexType.Initiative,n.Rarity.Uncommon),V=d(m,0,w,!0,!0,r.UpgradeVertexType.SkillsAll,n.Rarity.Epic),B=d(m,-22.5,w,!0,!0,r.UpgradeVertexType.Initiative,n.Rarity.Rare),F=d(m,-90,w,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Epic),U=d(m,-112.5,w,!0,!0,r.UpgradeVertexType.SavesStrDexCon,n.Rarity.Uncommon),z=d(m,-135,w,!0,!0,r.UpgradeVertexType.DeathSaves,n.Rarity.Legendary),W=d(m,-157.5,w,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Epic),j=d(m,-180,w,!0,!0,r.UpgradeVertexType.StepMovement,n.Rarity.Epic),K=d(720,-22.5,w,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Black),Y=d(720,-157.5,w,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Black),q=d(720,-90,w,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Legendary),J=d(0,-500,K,!1,!0,r.UpgradeVertexType.Sync,n.Rarity.Artefact),X=d(80,30,J,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Rare),Z=d(80,150,J,!0,!0,r.UpgradeVertexType.SeaMovement,n.Rarity.Rare),Q=d(g,90,J,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Uncommon),ee=d(g,30,J,!0,!0,r.UpgradeVertexType.SkillsBrilliance,n.Rarity.Uncommon),te=d(g,-30,J,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Legendary),ae=d(g,-90,J,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Uncommon),ne=d(g,-150,J,!0,!0,r.UpgradeVertexType.ProfBonus,n.Rarity.Legendary),ie=d(g,150,J,!0,!0,r.UpgradeVertexType.SkillsNinjutsu,n.Rarity.Uncommon),se=d(f,90,J,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Common),oe=d(f,60,J,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Epic),re=d(f,-30,J,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Uncommon),le=d(330,0,J,!0,!0,r.UpgradeVertexType.StatsChaStr,n.Rarity.Epic),de=d(330,120,J,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Uncommon),ce=d(330,150,J,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Uncommon),he=d(0,-400,Y,!1,!0,r.UpgradeVertexType.Sync,n.Rarity.Artefact),pe=d(80,90,he,!0,!1),ue=d(80,0,he,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Rare),me=d(80,-135,he,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Rare),ge=d(v,180,he,!0,!0,r.UpgradeVertexType.SkillsWildHeart,n.Rarity.Uncommon),fe=d(v,90,he,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Uncommon),ve=d(v,0,he,!0,!0,r.UpgradeVertexType.SkillsIndoctrination,n.Rarity.Uncommon),ye=d(v,-90,he,!0,!0,r.UpgradeVertexType.ProfBonus,n.Rarity.Legendary),we=d(270,180,he,!0,!0,r.UpgradeVertexType.StatsWisCon,n.Rarity.Epic),Se=d(270,-30,he,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Black),be=d(320,-30,Se,!0,!0,r.UpgradeVertexType.Sync,n.Rarity.Artefact),De=d(80,-150,be,!0,!0,r.UpgradeVertexType.StatsStrDexCon,n.Rarity.Legendary),ke=d(80,30,be,!0,!0,r.UpgradeVertexType.StatsIntWisCha,n.Rarity.Legendary),Ce=d(y,-30,be,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Epic),Ie=d(y,-90,be,!0,!0,r.UpgradeVertexType.SavesAll,n.Rarity.Rare),_e=d(y,-150,be,!0,!0,r.UpgradeVertexType.Initiative,n.Rarity.Epic),Ae=d(y,150,be,!0,!0,r.UpgradeVertexType.SeaMovement,n.Rarity.Rare),Pe=d(y,90,be,!0,!0,r.UpgradeVertexType.StatsIntDex,n.Rarity.Epic),Te=d(y,30,be,!0,!0,r.UpgradeVertexType.SkillsProdigy,n.Rarity.Rare),Ee=d(80,0,w,!0,!1),Me=d(p,-45,w,!0,!1),Re=d(p,-135,w,!0,!1),xe=d(80,-90,J,!0,!1),Ne=d(f,120,J,!0,!1),He=d(f,0,J,!0,!1),Le=d(v,-30,he,!0,!1);c(w,b),c(Ee,C),c(Ee,S,w,-1),c(S,b,w,-1),c(b,D,w,-1),c(D,k,w,-1),c(I,_,w,-2),c(_,A,w,-2),c(b,_),c(k,P),c(I,Me),c(T,Me,w,-3),c(_,E),c(M,Re,w,-3),c(Me,N),c(Re,A),c(R,x,w,-4),c(x,N,w,-4),c(E,H),c(M,L),c(Re,$),c(H,L,w,-5),c($,O,w,-5),c(O,G,w,-5),c(P,G),c(R,V),c(x,B),c(H,F),c(L,U),c(U,z,w,-6),c(O,W),c(W,j,w,-6),c(B,K),c(W,Y),c(F,q),c(K,se),c(J,X),c(J,Z),c(Z,X,J,-1),c(xe,Z,J,-1),c(X,ee),c(xe,ae),c(Z,ie),c(Q,se),c(Q,ee,J,-2),c(te,ae,J,-2),c(ne,ie,J,-2),c(Ne,se,J,-3),c(se,oe,J,-3),c(oe,re,J,-3),c(He,le),c(Ne,de),c(te,re),c(le,ce,J,-4),c(ce,de,J,-4),c(ie,ce),c(Y,fe),c(he,pe),c(he,ue),c(he,me),c(ue,me,he,-1),c(me,pe,he,-1),c(ge,fe,he,-2),c(fe,ve,he,-2),c(fe,Le,he,-2),c(Le,ye,he,-2),c(pe,fe),c(ge,we),c(Le,Se),c(Se,we,he,-3),c(Se,Ae),c(be,De),c(be,ke),c(ke,De,be,-1),c(Ce,Ie,be,-2),c(Ie,_e,be,-2),c(_e,Ae,be,-2),c(Ae,Pe,be,-2),c(Pe,Te,be,-2),c(De,_e),c(ke,Te),t.skillMap=l},5708:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BuffedInternalAttack=t.AttackContracts=t.InternalAttack=void 0;const n=a(2870),i=a(5947),s=a(5480);class o extends class{constructor(e){var t,a,n;this.subTitle="";const i=null!==(t=e.subtitle)&&void 0!==t?t:"";this.title=e.title,this.activation=e.activation,this.subTitle=i,this.hitBonus=null!==(a=e.hitBonus)&&void 0!==a?a:0,this.dcBonus=null!==(n=e.dcBonus)&&void 0!==n?n:0,this.mainStat=e.mainStat,this.contentGenerator=e.contentGenerator,this.resolvedDamages=null,this.expectedDamage=null,this.assignedDamages=null}getToHitRollableStr({name:e,stat:t,prof:a=s.ProficiencyLevel.Prof}){null==t&&(t=this.mainStat);const n=this.getMod(t)+this.sheet.pb.mod(a)+this.hitBonus;return this.doGetToHitRollableStr(n)}getDamageRollableStr(e){if(null==this.resolvedDamages)throw new Error("Damage string queried before damages were resolved.");return this.doGetDamageRollableStr(e)}getMod(e){return null==e&&(e=this.mainStat),this.sheet.stats.get(e).mod}getDc({stat:e,prof:t=s.ProficiencyLevel.Prof}={}){return null==e&&(e=this.mainStat),console.log(s.ProficiencyLevel[t]),console.log(8,this.getMod(e),this.sheet.pb.mod(t),this.dcBonus),8+this.getMod(e)+this.sheet.pb.mod(t)+this.dcBonus}bindDamages(e){var t,a,n;return this.expectedDamage=e.expectedDamage,this.damageTypes=null!==(t=e.damageTypes)&&void 0!==t?t:new Map,this.unassignedDamageRatios=null!==(a=e.unassignedDamageRatios)&&void 0!==a?a:new Map,this.assignedDamages=null!==(n=e.assignedDamages)&&void 0!==n?n:()=>new Map,this}bindStats(e){this.sheet=e}createContent(){this.resolveDamages();let e=this.contentGenerator(this);return"<p>"!=e.substring(0,3)&&(e=`<p>${e}</p>`),`<p><strong><em>${this.title}</em>. ${this.subTitle} </strong>`+e.substring(3)}get isDamaging(){return null!=this.expectedDamage||null!=this.assignedDamages}resolveDamages(){var e;if(!this.isDamaging)return;let t=0;const a=this.assignedDamages(this);if(null!=this.expectedDamage){for(const e of a.values())t+=(0,s.E)(e);const n=this.expectedDamage-t;if(n<=0)throw new Error("Assigned damage exceeds expected.");let i=0;for(const[,e]of this.unassignedDamageRatios.entries())for(const[,t]of e.entries())i+=t;for(const[t,o]of this.unassignedDamageRatios.entries())for(const[r,l]of o.entries()){let o;a.has(t)?o=a.get(t):(o=new Map,a.set(t,o));const d=Math.round(n*l/i/(0,s.E)(r));o.set(r,(null!==(e=o.get(r))&&void 0!==e?e:0)+d)}}this.resolvedDamages=a}}{doGetDamageRollableStr(e){const t=s.DamageType[this.damageTypes.get(e)],a=t?`${t} damage`:"";return`${(0,n.wrapRoll)(this.resolvedDamages.get(e))} \n                ${a}`}doGetToHitRollableStr(e){return(0,n.wrapRoll)(e)}}t.InternalAttack=o;class r{constructor(e,t){this.shouldApply=e,this.modify=t}}t.AttackContracts=new Map([["StimulusEnvy1",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.3*a)}))],["StimulusEnvy2",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.6*a)}))],["StimulusFree1",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.2*a)}))],["StimulusFree2",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.7*a)}))],["StimulusFree3",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,2.5*a)}))],["Stimulus1",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.25*a)}))],["Stimulus2",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.5*a)}))],["StimulusArrogance3",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.5*a)}))]]),t.BuffedInternalAttack=class extends o{constructor(e){super(e),this.contracts=new Set}activateContract(e){this.contracts.add(e)}getContracts(){return this.contracts}deactivateContract(e){this.contracts.delete(e)}getDamageTypes(){return this.damageTypes}setDamageTypes(e){this.damageTypes=e}setContentGenerator(e){this.contentGenerator=e}createContent(){this.resolveDamages();for(const e of this.contracts)e.shouldApply(this)&&e.modify(this);let e=this.contentGenerator(this);return"<p>"!=e.substring(0,3)&&(e=`<p>${e}</p>`),`<p><strong><em>${this.title}</em>. ${this.subTitle} </strong>`+e.substring(3)}get currentlyResolvedDamages(){return this.resolvedDamages}get identificationInfo(){return new Map([["Creature",this.sheet.monster_id],["Attack",this.title]])}}},6817:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Contracts=t.renderContracts=t.GENERATED_IDS=void 0;const n=a(5947),i=a(5480),s=a(5708),o=a(7660),r=new Map([[0,"D"],[2,"C"],[5,"B"],[8,"A"],[12,"S"],[15,"SS"],[18,"SSS"],[24,"F"]]);t.GENERATED_IDS=new Set,t.renderContracts=function(){function e(e){setTimeout((()=>{e.stopPropagation();const a=$(".stat_sheet:visible"),n=$(".risk_effects");n.empty();let i=0;for(const[e,t]of o.contractIndex.entries())(0,o.isContractSelected)(e)&&(i+=t.risk,$(`<div class='risk_effect'>\n                       <img class="risk_icon" src="assets/images/risk/CC_Level_${t.risk}.webp" alt=""> \n                       <span>${t.desc}</span>\n                   </div>`).appendTo(n));$("#risk_value").text(i);let s="F";for(const[e,t]of r.entries()){if(!(i>=e))break;s=t}if($("#grade").html(s),0==a.length)return $(".stat_sheet").remove(),void t.GENERATED_IDS.clear();const l=a.attr("id").substring(11);$(".stat_sheet").remove(),t.GENERATED_IDS.clear(),$("#sheet_zone").append(o.ID_TO_SHEET_GENERATOR.get(l)().render())}),10)}$("#contracts").on("click",".contract_group",e),$("#contracts").on("click",".contract",e);for(const e of t.Contracts.values()){const t=[];for(const a of e.values())o.contractIndex.set(a.id,a),t.push(a.render());$(`<div class="contract_group selectable_radio_container">${t.join("")}</div>`).appendTo("#contracts")}},t.Contracts=new Map([["freedom",new Map([[1,new o.SheetContract(1,"free1","Unbreakable Freedom I","CC-FreeBuffA1.webp","Freedom has +20% HP/Attack Dice and +1 AC.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.2*a);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusFree1"));e.ac++}))],[2,new o.SheetContract(2,"free2","Unbreakable Freedom II","CC-FreeBuffA2.webp","Freedom has +30% HP Dice and +3 AC. And <em>Break the Chains</em> has shockwave radius, HP and probablity increased. She no longer takes damage on the chains breaking.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.3*a);e.ac+=3,e.attacks.set("breakTheChains",new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`At the end of her turn, Freedom has a 45% (55% in her second \n            form) chance to call forth her memories of captivity. If she does \n            succeed, chains with 100HP (150HP in her second form) appear around \n            her and stop her from moving or attacking. If the chains are not \n            destroyed until the start of her next-to-next round, she will free\n            herself and release a burst of ${e.getDamageRollableStr("free")}\n            (necrotic in her second form) to all creatures within 90 ft of her. \n            If the chains are broken, she and any creatures in 5ft are stunned\n            till the start of their turns.`,mainStat:void 0,title:"Break the Chains"}).bindDamages({expectedDamage:150,damageTypes:new Map([["free",i.DamageType.Radiant]]),unassignedDamageRatios:new Map([["free",new Map([[n.D12,1]])]])}))}))],[3,new o.SheetContract(3,"free3","Unbreakable Freedom III","CC-FreeBuffA3.webp","Freedom has +50% HP Dice and +5 AC. And <em>Break the Chains</em> has shockwave radius, HP and probablity significantly increased. Freedom now retores HP on the chains breaking.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.5*a);e.ac+=5,e.attacks.set("breakTheChains",new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`At the end of her turn, Freedom has a 65% (75% in her second \n            form) chance to call forth her memories of captivity. If she does \n            succeed, chains with 150HP (225HP in her second form) appear around \n            her and stop her from moving or attacking. If the chains are not \n            destroyed until the start of her next-to-next round, she will free\n            herself and release a burst of ${e.getDamageRollableStr("free")}\n            (necrotic in her second form) to all creatures within 120 ft of her. \n            If the chains are destroyed, she gains 25 HP instead. Also, she and \n            any other creatures within 30ft range are stunned till the start of \n            their turns.`,mainStat:void 0,title:"Break the Chains"}).bindDamages({expectedDamage:150,damageTypes:new Map([["free",i.DamageType.Radiant]]),unassignedDamageRatios:new Map([["free",new Map([[n.D12,1]])]])}))}))],[4,new o.SheetContract(2,"free4","Dazzling Freedom II","CC-FreeBuffB2.webp","Freedom has +90% HP Dice, +70% Damage Dice and resistance to fire and radiant damage. <em>Ink Swirl</em>'s cooldown is reduced.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.9*a);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusFree2"));e.res.add(i.DamageType.Fire),e.res.add(i.DamageType.Radiant),e.attacks.set("inkSwirl",new s.BuffedInternalAttack({activation:i.Activation.Action,contentGenerator:e=>`(This action can only be taken once in every two rounds\n            at the start of Freedom's turn, and before she moves) Freedom\n            targets the closest friendly unit within 60ft of her. If there are\n            two friendly units equidistant, she \n            chooses the one with lower HP. That unit and any other non-inklings \n            in 5 ft of it are <u>restrained</u> in an ink swirl and take\n            <u>continuous ${e.getDamageRollableStr("inkSwirl")}</u> for\n            two rounds. At the start of their turns, they can make a DC \n            ${e.getDc({stat:i.DStat.Cha,prof:i.ProficiencyLevel.Expert})}\n            atheletics check to escape the ink. The DC reduces by one after each\n            instance of damage. Allies can attempt to draw them out by making \n            the same check, but on failure, the ink envelops them too.`,mainStat:i.DStat.Cha,title:"Ink Swirl"}).bindDamages({assignedDamages:e=>new Map([["inkSwirl",new Map([[n.D1,e.getMod(i.DStat.Cha)]])]]),damageTypes:new Map([["inkSwirl",i.DamageType.Corrosion]]),expectedDamage:25,unassignedDamageRatios:new Map([["inkSwirl",new Map([[n.D4,1]])]])}))}))],[5,new o.SheetContract(3,"free5","Dazzling Freedom III","CC-FreeBuffB3.webp","Freedom has +200% HP Dice, +150% Atk Dice and resistance to fire and radiant damage. <em>Ink Swirl</em>'s cooldown is greatly reduced, and it needn't be cast at the start of the turn.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,3*a);e.res.add(i.DamageType.Fire),e.res.add(i.DamageType.Radiant);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusFree3"));e.attacks.set("inkSwirl",new s.BuffedInternalAttack({activation:i.Activation.Action,contentGenerator:e=>` Freedom targets the closest friendly unit\n            within 60ft of her. If there are two friendly units equidistant, she \n            chooses the one with lower HP. That unit and any other non-inklings \n            in 5 ft of it are <u>restrained</u> in an ink swirl and take\n            <u>continuous ${e.getDamageRollableStr("inkSwirl")}</u> for\n            two rounds. At the start of their turns, they can make a DC \n            ${e.getDc({stat:i.DStat.Cha,prof:i.ProficiencyLevel.Expert})}\n            atheletics check to escape the ink. The DC reduces by one after each\n            instance of damage. Allies can attempt to draw them out by making \n            the same check, but on failure, the ink envelops them too.`,mainStat:i.DStat.Cha,title:"Ink Swirl"}).bindDamages({assignedDamages:e=>new Map([["inkSwirl",new Map([[n.D1,e.getMod(i.DStat.Cha)]])]]),damageTypes:new Map([["inkSwirl",i.DamageType.Corrosion]]),expectedDamage:25,unassignedDamageRatios:new Map([["inkSwirl",new Map([[n.D4,1]])]])}))}))]])],["invested",new Map([[1,new o.SheetContract(1,"inv1","Invested I","CC-EnemyHPBuff1.webp","Enemies have their HP Dice increased by 30%",(e=>!0),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.3*a)}))],[2,new o.SheetContract(2,"inv2","Invested II","CC-EnemyHPBuff2.webp","Enemies have their HP Dice increased by 60%",(e=>!0),(e=>{for(const[t,a]of e.hpDice.entries())t!=n.D1&&e.hpDice.set(t,1.6*a)}))],[3,new o.SheetContract(3,"inv3","Invested III","CC-EnemyHPBuff3.webp","Enemies have their HP Dice increased by 110%",(e=>!0),(e=>{for(const[t,a]of e.hpDice.entries())t!=n.D1&&e.hpDice.set(t,2.1*a)}))]])],["def",new Map([[1,new o.SheetContract(1,"def1","Shield of Ink","CC-EnemyDEFBuff1.webp","All enemies gain +2 AC.",(e=>!0),(e=>{e.ac+=2}))]])],["envy",new Map([[1,new o.SheetContract(1,"env1","Deep Envy I","CC-EnvyBuffA1.png","Envies have +20% HP and gain semi-proficiency in Con Saving throws.",(e=>"inkling_envy"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.2*a);e.saves.set(i.DStat.Con,[i.ProficiencyLevel.Half,0])}))],[2,new o.SheetContract(2,"env2","Deep Envy II","CC-EnvyBuffA2.png","Envies have +70% HP, +30% ATK and gain proficiency in Con Saving throws.",(e=>"inkling_envy"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.7*a);e.saves.set(i.DStat.Con,[i.ProficiencyLevel.Prof,0]);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusEnvy1"))}))],[3,new o.SheetContract(3,"env3","Deep Envy III","CC-EnvyBuffA3.png","Envies have +120% HP, +60% ATK and gain expertise in Con Saving throws.",(e=>"inkling_envy"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,2.2*a);e.saves.set(i.DStat.Con,[i.ProficiencyLevel.Expert,0]);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusEnvy2"))}))],[4,new o.SheetContract(2,"env4","Entrenched Envy II","CC-EnvyBuffB2.png","Envies have advantage in Con Saving throws. Also they now charge their attacks in half a round and may begin charging anytime.",(e=>"inkling_envy"==e.monster_id),(e=>{e.attacks.set("charging",new s.BuffedInternalAttack({activation:i.Activation.LegendaryAction,contentGenerator:e=>"The Inkling begins concentrating for a big shot, they'll be done in half a round (*refer to continuous damage initiative cutoffs).",mainStat:null,title:"Charging"})),e.attacks.set("bonusShot",new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 60 feet of itself. The target must succeed \n                    on a DC ${e.getDc()} Constitution saving throw. On failure, they take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}.</p>`,mainStat:i.DStat.Con,title:"Casual Spit"}).bindDamages({expectedDamage:30,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.DStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.DStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,3]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}))}))],[5,new o.SheetContract(3,"env5","Entrenched Envy III","CC-EnvyBuffB3.png","Envies have super-advantage in Con Saving throws. Also they now charge their attacks in quarter of a round and may begin charging anytime.",(e=>"inkling_envy"==e.monster_id),(e=>{e.attacks.set("charging",new s.BuffedInternalAttack({activation:i.Activation.LegendaryAction,contentGenerator:e=>"The Inkling begins concentrating for a big shot, they'll be done in a fourth of a round (*refer to continuous damage initiative cutoffs).",mainStat:null,title:"Charging"})),e.attacks.set("bonusShot",new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 60 feet of itself. The target must succeed \n                    on a DC ${e.getDc()} Constitution saving throw. On failure, they take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}.</p>`,mainStat:i.DStat.Con,title:"Casual Spit"}).bindDamages({expectedDamage:30,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.DStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.DStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,3]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}))}))]])],["stimuli",new Map([[1,new o.SheetContract(1,"sti1","Stimulus I","CC-EnemyATKBuff1.webp","Enemies have their ATK increased by 25%",(e=>!0),(e=>{for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("Stimulus1"))}))],[2,new o.SheetContract(2,"sti2","Stimulus II","CC-EnemyATKBuff1.webp","Enemies have their ATK increased by 50%",(e=>!0),(e=>{for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("Stimulus1"))}))]])],["fast_mouths",new Map([[1,new o.SheetContract(1,"faj1","Fast Jaws I","CC-EnemyASPDBuff1.webp","Impatience, insecurity and Freedom have one more attack per action.",(e=>["inkling_insecurity","inkling_impatience","inkling_free"].includes(e.monster_id)),(e=>{const t="inkling_insecurity"==e.monster_id?"two":"three";e.attacks.set("multiattack",new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>`<p>The inkling makes ${t} bite attacks per turn.</p>`,mainStat:void 0,title:"Multiattack"}))}))],[2,new o.SheetContract(2,"faj2","Fast Jaws II","CC-EnemyASPDBuff2.webp","Impatience, insecurity and Freedom have two more bite attacks per action.",(e=>["inkling_insecurity","inkling_impatience","inkling_free"].includes(e.monster_id)),(e=>{const t="inkling_insecurity"==e.monster_id?"three":"four";e.attacks.set("multiattack",new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>`<p>The inkling makes ${t} bite attacks per turn.</p>`,mainStat:void 0,title:"Multiattack"}))}))]])],["covertAction",new Map([[1,new o.SheetContract(1,"cva1","Covert Action I","CC-SmallerSquad1.webp","One Friendly gains a +10 to stealth rolls but has fragile inflicted throughout the operation (Total HP capped at 1).",(e=>!0),(e=>{}))],[2,new o.SheetContract(3,"cva2","Covert Action II","CC-SmallerSquad2.webp","Two friendlies gain a +10 to stealth rolls but have fragile inflicted throughout the operation (Total HP capped at 1).",(e=>!0),(e=>{}))]])],["clock",new Map([[1,new o.SheetContract(1,"flt1","Fleeting Time I","CC-OperatorASPDDebuff1.webp","Time Limit reduced by 25% to 12 rounds.",(e=>!0),(e=>{}))],[2,new o.SheetContract(2,"flt2","Fleeting Time II","CC-OperatorASPDDebuff2.webp","Time Limit reduced by 50% to 8 rounds.",(e=>!0),(e=>{}))]])],["mov",new Map([[1,new o.SheetContract(1,"mov1","Mobility I","CC-EnemySpeedBuff.webp","All enemies gain +50% movement speeds.",(e=>!0),(e=>{for(const[t,a]of e.speeds.entries())e.speeds.set(t,5*Math.floor(.3*a))}))]])],["arr",new Map([[1,new o.SheetContract(1,"arr1","Flickering Lights I","CC-ArroganceBuffA1.webp","Arrogance gain +70% HP and halves come back to life with full HP if the other half is not killed until the start of their next-to-next turn. They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.7*a)}))],[2,new o.SheetContract(2,"arr2","Flickering Lights II","CC-ArroganceBuffA2.webp","Arrogance gain +220% HP and halves come back to life with full HP if the other half is not killed until the start of their next-to-next turn. They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,3.2*a)}))],[3,new o.SheetContract(3,"arr3","Flickering Lights III","CC-ArroganceBuffA3.webp","Arrogance gain +300% HP and halves come back to life with full HP if the other half is not killed until the start of their next-to-next turn. They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,4*a)}))],[4,new o.SheetContract(2,"arr4","Ephemeral Lights II","CC-ArroganceBuffB2.webp","Arrogance gain +110% HP, increased movement speed (5ft) and a wider blast radius (+50%). They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,2.1*a);for(const[t,a]of e.speeds.entries())e.speeds.set(t,a+5);e.attacks.set("boomText",new s.BuffedInternalAttack({contentGenerator:e=>`<p>Upon death explodes to deal ${e.getDamageRollableStr("Boom")} to targets within 5 ft. \n                    On coming into contact with its opposite explodes to deal ${e.getDamageRollableStr("BigBoom")} \n                    instead to targets within 30ft and half damage to targets within 60ft.</p>`,activation:i.Activation.Special,mainStat:i.DStat.Dex,title:"Boom"}).bindDamages({assignedDamages:e=>new Map([]),unassignedDamageRatios:new Map([["Boom",new Map([[n.D20,1]])],["BigBoom",new Map([[n.D20,12]])]]),damageTypes:new Map([["Boom",i.DamageType.Force],["BigBoom",i.DamageType.Force]]),expectedDamage:270}))}))],[5,new o.SheetContract(3,"arr5","Ephemeral Lights III","CC-ArroganceBuffB3.webp","Arrogance gain +110% HP, increased movement speed (10ft) and a wider blast radius (+100%) with increased damage. They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,2.1*a);for(const[t,a]of e.speeds.entries())e.speeds.set(t,a+10);let a=e.attacks.get("boomText").getContracts();e.attacks.set("boomText",new s.BuffedInternalAttack({contentGenerator:e=>`<p>Upon death explodes to deal ${e.getDamageRollableStr("Boom")} to targets within 5 ft. \n                    On coming into contact with its opposite explodes to deal ${e.getDamageRollableStr("BigBoom")} \n                    instead to targets within 40ft and half damage to targets within 80ft.</p>`,activation:i.Activation.Special,mainStat:i.DStat.Dex,title:"Boom"}).bindDamages({assignedDamages:e=>new Map([]),unassignedDamageRatios:new Map([["Boom",new Map([[n.D20,1]])],["BigBoom",new Map([[n.D20,12]])]]),damageTypes:new Map([["Boom",i.DamageType.Force],["BigBoom",i.DamageType.Force]]),expectedDamage:270}));for(const[t,n]of e.attacks.entries())if(n.isDamaging){n.activateContract(s.AttackContracts.get("StimulusArrogance3"));for(const e of a)n.activateContract(e)}}))]])],["ero",new Map([[1,new o.SheetContract(1,"ero1","Erosion I","CC-HPDebuff1.webp","Friendlies have HP reduced by 20.",(e=>!0),(e=>{}))]])]])},7307:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createFreedom=t.createInklingTank=t.createInklingDynamite=t.createInklingWannabeBoss=t.createInklingAberrant=t.createInklingDog=t.createInkling=void 0;const n=a(5947),i=a(5480),s=a(5708),o=a(7660);t.createInkling=function(){const e=new s.BuffedInternalAttack({title:"Ink Spray",activation:i.Activation.Special,mainStat:i.DStat.Con,contentGenerator:e=>`<p>Upon death, the inkling sprays viscous ink at all creatures within 15 feet of itself. The targets\n            must succeed on a DC ${e.getDc()} Constitution saving throw or be blinded until the end of their next turn.</p>`}),t=new s.BuffedInternalAttack({title:"Bite",activation:i.Activation.Action,mainStat:i.DStat.Str,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 5 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("Blot")} and ${e.getDamageRollableStr("BlotNeural")}.</p>`}).bindDamages({expectedDamage:32,assignedDamages:e=>new Map([["Bite",new Map([[n.D4,1],[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,1]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Neural]])});return new o.BuffedStatSheet({monster_id:"inkling_insecurity",title:"Inkling (Insecurity)",size:i.CreatureSize.Medium,subtitle:" Inkling(Ooze), Typically Chaotic Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(13)],[i.DStat.Dex,new i.StatValue(13)],[i.DStat.Con,new i.StatValue(14)],[i.DStat.Int,new i.StatValue(16)],[i.DStat.Wis,new i.StatValue(15)],[i.DStat.Cha,new i.StatValue(13)]]),ac:13,acDesc:"(Natural Armor)",biologicalHp:40,attacks:new Map([["inkSpray",e],["bite",t]]),crValue:new i.CRValue(2),saveProficiencies:new Map([[i.DStat.Con,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.DSkill.Stealth,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Walking,30]]),vulnerabilities:new Set([i.DamageType.Cold,i.DamageType.Lightning,i.DamageType.Bludgeoning]),resistances:new Set([i.DamageType.Acid,i.DamageType.Fire,i.DamageType.Piercing,i.DamageType.Thunder]),immunities:new Set([i.DamageType.Poison,i.DamageType.Psychic]),conditionImmunities:new Set([i.Condition.Blinded,i.Condition.Deafened,i.Condition.Exhaustion])})},t.createInklingDog=function(){const e=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"<p>The inkling attacks twice on an attack action.</p>",mainStat:void 0,title:"Multiattack"}),t=new s.BuffedInternalAttack({title:"Bite",activation:i.Activation.Action,mainStat:i.DStat.Dex,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 5 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("BiteVenom")}</p>`}).bindDamages({expectedDamage:10,assignedDamages:e=>new Map([["Bite",new Map([[n.D6,1],[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["BiteVenom",new Map([[n.D4,1]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["BiteVenom",i.DamageType.Poison]])});return new o.BuffedStatSheet({monster_id:"inkling_impatience",title:"Inkling (Impatience)",size:i.CreatureSize.Small,subtitle:" Inkling(Fiend), Typically Chaotic Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(11)],[i.DStat.Dex,new i.StatValue(17)],[i.DStat.Con,new i.StatValue(11)],[i.DStat.Int,new i.StatValue(6)],[i.DStat.Wis,new i.StatValue(13)],[i.DStat.Cha,new i.StatValue(7)]]),ac:13,acDesc:"(Natural Armor)",biologicalHp:32,attacks:new Map([["bite",t],["multiattack",e]]),crValue:new i.CRValue(1),saveProficiencies:new Map([[i.DStat.Dex,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.DSkill.Athletics,[i.ProficiencyLevel.Prof,0]],[i.DSkill.Acrobatics,[i.ProficiencyLevel.Prof,0]]]),speeds:new Map([[i.Speed.Walking,50]]),vulnerabilities:new Set([i.DamageType.Fire,i.DamageType.Lightning]),resistances:new Set([i.DamageType.Cold,i.DamageType.Poison,i.DamageType.Psychic])})},t.createInklingAberrant=function(){const e=new s.BuffedInternalAttack({contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 60 feet of itself. The target must succeed \n                    on a DC ${e.getDc()} Constitution saving throw. On failure, they take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}.</p>`,activation:i.Activation.Action,mainStat:i.DStat.Con,title:"Ink Spit"}).bindDamages({expectedDamage:50,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.DStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.DStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,3]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}),t=new s.BuffedInternalAttack({contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 90 feet of itself. The target must succeed \n                    on a DC ${e.getDc({prof:i.ProficiencyLevel.Expert})} Constitution saving throw. On failure, they\n                     take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}. \n                    This damage is neural damage and can cause the target to be Stunned.</p>`,activation:i.Activation.Action,mainStat:i.DStat.Int,title:"Charged Spit"}).bindDamages({expectedDamage:100,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.DStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.DStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,1]])],["BlotNeural",new Map([[n.D8,3]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}),a=new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>"The Inkling begins concentrating for a big shot.",mainStat:void 0,title:"Charging"});return new o.BuffedStatSheet({monster_id:"inkling_envy",title:"Inkling (Envy)",size:i.CreatureSize.Medium,subtitle:" Inkling(Aberration), Typically Chaotic Evil",stats:new Map([[i.DStat.Str,new i.StatValue(13)],[i.DStat.Dex,new i.StatValue(11)],[i.DStat.Con,new i.StatValue(16)],[i.DStat.Int,new i.StatValue(19)],[i.DStat.Wis,new i.StatValue(13)],[i.DStat.Cha,new i.StatValue(15)]]),ac:11,acDesc:"(Natural Armor)",biologicalHp:100,attacks:new Map([["inkSpit",e],["charging",a],["charged",t]]),crValue:new i.CRValue(5),saveProficiencies:new Map([[i.DStat.Int,[i.ProficiencyLevel.Prof,0]],[i.DStat.Wis,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.DSkill.Perception,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Flying,20]]),vulnerabilities:new Set([i.DamageType.Lightning,i.DamageType.Thunder]),immunities:new Set([i.DamageType.Poison,i.DamageType.Psychic]),conditionImmunities:new Set([i.Condition.Prone,i.Condition.Blinded])})},t.createInklingWannabeBoss=function(){const e=new s.BuffedInternalAttack({contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Slam",prof:i.ProficiencyLevel.None})}, reach 15 ft., one target. \n                    Hit: ${e.getDamageRollableStr("Slam")} plus ${e.getDamageRollableStr("SlamVibe")}. The primary\n                    target must succeed a DC ${e.getDc()} Str save or fall prone. Those within 5ft of the primary \n                    target take half the bludgeoning damage and must make a DC ${e.getDc()} Con save or take the \n                    thunder damage too. On a fail of 10 or more, they are deafened until a long rest.<br/>\n                    <em>The behemoth inkling slams a mighty fist into the ground, crushing the poor victim who wasn't \n                    able to run away in time and sending thunderous shockwaves shaking those around.</em></p>`,activation:i.Activation.Action,mainStat:i.DStat.Str,title:"Slam"}).bindDamages({assignedDamages:e=>new Map([["Slam",new Map([[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["Slam",new Map([[n.D8,3]])],["SlamVibe",new Map([[n.D8,1]])]]),damageTypes:new Map([["Slam",i.DamageType.Bludgeoning],["SlamVibe",i.DamageType.Thunder]]),expectedDamage:110}),t=new s.BuffedInternalAttack({contentGenerator:e=>"<p>Can jump up to 60 ft as a bonus action - can grapple a target within 5 ft of landing or takeoff\n                       as part of the same action.</p>",activation:i.Activation.BonusAction,mainStat:i.DStat.Str,title:"Jump"}),a=new s.BuffedInternalAttack({contentGenerator:e=>"<p>Can slam once as an opportunity attack whenever an enemy comes within range.</p>",activation:i.Activation.Reaction,mainStat:i.DStat.Str,title:"Prepared"});return new o.BuffedStatSheet({monster_id:"inkling_fury",title:"Inkling (Fury)",size:i.CreatureSize.Huge,subtitle:" Inkling(Beast), Typically Chaotic Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(24)],[i.DStat.Dex,new i.StatValue(13)],[i.DStat.Con,new i.StatValue(24)],[i.DStat.Int,new i.StatValue(7)],[i.DStat.Wis,new i.StatValue(8)],[i.DStat.Cha,new i.StatValue(13)]]),ac:18,acDesc:"(Natural Armor)",biologicalHp:160,attacks:new Map([["slamText",e],["jumpText",t],["reactText",a]]),crValue:new i.CRValue(9),saveProficiencies:new Map([[i.DStat.Dex,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.DSkill.Athletics,[i.ProficiencyLevel.Expert,0]],[i.DSkill.Acrobatics,[i.ProficiencyLevel.Prof,0]]]),speeds:new Map([[i.Speed.Walking,50]]),vulnerabilities:new Set([i.DamageType.Lightning]),resistances:new Set([i.DamageType.Cold,i.DamageType.Poison,i.DamageType.Psychic])})},t.createInklingDynamite=function(){const e=new s.BuffedInternalAttack({contentGenerator:e=>`<p>Upon death explodes to deal ${e.getDamageRollableStr("Boom")} to targets within 5 ft. \n                    On coming into contact with its opposite explodes to deal ${e.getDamageRollableStr("BigBoom")} \n                    instead to targets within 20ft and half damage to targets within 40ft.</p>`,activation:i.Activation.Special,mainStat:i.DStat.Dex,title:"Boom"}).bindDamages({assignedDamages:e=>new Map([]),unassignedDamageRatios:new Map([["Boom",new Map([[n.D20,1]])],["BigBoom",new Map([[n.D20,12]])]]),damageTypes:new Map([["Boom",i.DamageType.Force],["BigBoom",i.DamageType.Force]]),expectedDamage:270}),t=new s.BuffedInternalAttack({contentGenerator:e=>"<p> Doesn't die till both opposites explode, instead just enters a diffused state with halved\n                    movement speed. If the opposites come into contact and at least one is diffused, damage dealt\n                    is half the rolled damage.</p>",activation:i.Activation.Special,mainStat:i.DStat.Dex,title:"Half Lives"});return new o.BuffedStatSheet({monster_id:"inkling_arrogance",title:"Inkling (Arrogance)",size:i.CreatureSize.Tiny,subtitle:" Inkling(Aberration), Typically Neutral Evil",stats:new Map([[i.DStat.Str,new i.StatValue(1)],[i.DStat.Dex,new i.StatValue(28)],[i.DStat.Con,new i.StatValue(10)],[i.DStat.Int,new i.StatValue(13)],[i.DStat.Wis,new i.StatValue(14)],[i.DStat.Cha,new i.StatValue(11)]]),ac:19,acDesc:"(Natural Armor)",biologicalHp:19,attacks:new Map([["boomText",e],["halfLifeText",t]]),crValue:new i.CRValue(5),saveProficiencies:new Map([[i.DStat.Int,[i.ProficiencyLevel.Prof,0]],[i.DStat.Wis,[i.ProficiencyLevel.Prof,0]],[i.DStat.Cha,[i.ProficiencyLevel.Expert,0]]]),skillProficiencies:new Map([[i.DSkill.Perception,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Flying,20]]),vulnerabilities:new Set([i.DamageType.Cold]),immunities:new Set([i.DamageType.Fire,i.DamageType.Poison,i.DamageType.Psychic,i.DamageType.Lightning,i.DamageType.Thunder]),conditionImmunities:new Set([i.Condition.Prone,i.Condition.Blinded,i.Condition.Frightened,i.Condition.Charmed,i.Condition.Grappled,i.Condition.Exhaustion])})},t.createInklingTank=function(){const e=new s.BuffedInternalAttack({contentGenerator:e=>"<p>Once a creature enters within 60 ft of them or starts their turn in that area and can see them\n                    they must make a DC 24 Cha saving throw. On failure, they can only attack this creature until it \n                    dies. If it goes out of range, they must dash or do whatever they can to approach it as long as they\n                    are within 120ft of it. Any AoE spell must be so placed such that this creature takes the maximum \n                    amount of damage possible. They can repeat this save at the start of their turns to break out of \n                    the taunt effect, but the DC increases by 1 with each failure.</p>",activation:i.Activation.Special,mainStat:i.DStat.Con,title:"Taunt"});return new o.BuffedStatSheet({monster_id:"inkling_sloth",title:"Inkling (Sloth)",size:i.CreatureSize.Small,subtitle:" Inkling(Construct), Typically Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(28)],[i.DStat.Dex,new i.StatValue(1)],[i.DStat.Con,new i.StatValue(28)],[i.DStat.Int,new i.StatValue(2)],[i.DStat.Wis,new i.StatValue(13)],[i.DStat.Cha,new i.StatValue(16)]]),ac:22,acDesc:"(Natural Armor)",biologicalHp:120,attacks:new Map([["tauntText",e]]),crValue:new i.CRValue(7,i.Prof.get(4)),saveProficiencies:new Map([[i.DStat.Str,[i.ProficiencyLevel.Expert,0]],[i.DStat.Con,[i.ProficiencyLevel.Expert,0]],[i.DStat.Int,[i.ProficiencyLevel.Expert,0]],[i.DStat.Wis,[i.ProficiencyLevel.Expert,0]],[i.DStat.Cha,[i.ProficiencyLevel.Expert,0]]]),skillProficiencies:new Map([[i.DSkill.Athletics,[i.ProficiencyLevel.Expert,0]],[i.DSkill.Perception,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Walking,10]]),vulnerabilities:new Set([i.DamageType.Force,i.DamageType.Thunder]),resistances:new Set([i.DamageType.Cold,i.DamageType.Necrotic,i.DamageType.Radiant,i.DamageType.Bludgeoning,i.DamageType.Piercing,i.DamageType.Slashing]),immunities:new Set([i.DamageType.Acid,i.DamageType.Fire,i.DamageType.Lightning,i.DamageType.Poison,i.DamageType.Psychic,i.DamageType.Bludgeoning,i.DamageType.Piercing,i.DamageType.Slashing]),conditionImmunities:new Set([i.Condition.Exhaustion,i.Condition.Poisoned,i.Condition.Prone])})},t.createFreedom=function(){const e=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"Freedom can breathe in air and water.",mainStat:void 0,title:"Amphibious"}),t=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"If Freedom fails a saving throw, she can choose to succeed instead.",mainStat:void 0,title:"Legendary Resistance",subtitle:"(1 / day)"}),a=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"Starts under the blessing of light. When she reaches zero HP for the first time revives herself over the course of 1+ round during which she is invulnerable and cannot attack. At initiative count zero after reviving, she gets a free turn. At the end of that turn looses invulnerability. She falls under the blessing of darkness in her second form.",mainStat:void 0,title:"Duality of Life"}),r=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"The movement speed of Freedom cannot be reduced in any way.",mainStat:void 0,title:"Freely Flowing Ink"}),l=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"<p>The inkling attacks twice on an attack action.</p>",mainStat:void 0,title:"Multiattack"}),d=new s.BuffedInternalAttack({activation:i.Activation.Action,contentGenerator:e=>`(This action can only be taken once in every three rounds\n            at the start of Freedom's turn, and before she moves) Freedom\n            targets the closest friendly unit within 60ft of her. If there are\n            two friendly units equidistant, she \n            chooses the one with lower HP. That unit and any other non-inklings \n            in 5 ft of it are <u>restrained</u> in an ink swirl and take\n            <u>continuous ${e.getDamageRollableStr("inkSwirl")}</u> for\n            two rounds. At the start of their turns, they can make a DC \n            ${e.getDc({stat:i.DStat.Cha,prof:i.ProficiencyLevel.Expert})}\n            atheletics check to escape the ink. The DC reduces by one after each\n            instance of damage. Allies can attempt to draw them out by making \n            the same check, but on failure, the ink envelops them too.`,mainStat:i.DStat.Cha,title:"Ink Swirl"}).bindDamages({assignedDamages:e=>new Map([["inkSwirl",new Map([[n.D1,e.getMod(i.DStat.Cha)]])]]),damageTypes:new Map([["inkSwirl",i.DamageType.Corrosion]]),expectedDamage:25,unassignedDamageRatios:new Map([["inkSwirl",new Map([[n.D4,1]])]])}),c=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"Freedom has two legendary actions.",mainStat:void 0,title:"Legendary Actions"}),h=new s.BuffedInternalAttack({title:"Bite",activation:i.Activation.LegendaryAction,mainStat:i.DStat.Str,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 30 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("BiteVenom")}</p>`,subtitle:"(Cost 1)"}).bindDamages({expectedDamage:null,assignedDamages:e=>new Map([["Bite",new Map([[n.D10,2],[n.D1,e.getMod()]])],["BiteVenom",new Map([[n.D6,3]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["BiteVenom",i.DamageType.Biochemical]])}),p=new s.BuffedInternalAttack({title:"Bite",activation:i.Activation.Action,mainStat:i.DStat.Str,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 30 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("BiteVenom")}. A target hit \n            by this attack is grappled in her jaw till the end of her turn.</p>`}).bindDamages({expectedDamage:null,assignedDamages:e=>new Map([["Bite",new Map([[n.D10,2],[n.D1,e.getMod()]])],["BiteVenom",new Map([[n.D6,3]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["BiteVenom",i.DamageType.Biochemical]])}),u=new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`At the end of her turn, Freedom has a 25% (35% in her second \n            form) chance to call forth her memories of captivity. If she does \n            succeed, chains with 75HP (105HP in her second form) appear around \n            her and stop her from moving or attacking. If the chains are not \n            destroyed until the start of her next-to-next round, she will free\n            herself and release a burst of ${e.getDamageRollableStr("free")}\n            (necrotic in her second form) to all creatures within 60 ft of her.\n            If the chains are destroyed, she looses 50 HP instead and is stunned \n            until the start of her turn.`,mainStat:void 0,title:"Break the Chains"}).bindDamages({expectedDamage:150,damageTypes:new Map([["free",i.DamageType.Radiant]]),unassignedDamageRatios:new Map([["free",new Map([[n.D12,1]])]])});return new o.BuffedStatSheet({monster_id:"inkling_free",title:"Freedom",subtitle:"dragon, typically Chaotic Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(27)],[i.DStat.Dex,new i.StatValue(15)],[i.DStat.Con,new i.StatValue(25)],[i.DStat.Int,new i.StatValue(20)],[i.DStat.Wis,new i.StatValue(15)],[i.DStat.Cha,new i.StatValue(24)]]),ac:21,acDesc:"Natural Armor",attacks:new Map([["amphibious",e],["legendRes",t],["dualLife",a],["freeInk",r],["multiattack",l],["inkSwirl",d],["legendAct",c],["bite",h],["biteA",p],["breakTheChains",u]]),size:i.CreatureSize.Huge,biologicalHp:300,conditionImmunities:new Set([i.Condition.Charmed,i.Condition.Grappled,i.Condition.Frightened,i.Condition.Poisoned,i.Condition.Deafened,i.Condition.Restrained,i.Condition.Stunned]),crValue:new i.CRValue(15,i.Prof.get(6)),immunities:new Set([i.DamageType.Psychic,i.DamageType.Poison]),resistances:new Set([i.DamageType.Acid,i.DamageType.Slashing,i.DamageType.Piercing,i.DamageType.Bludgeoning,i.DamageType.Thunder]),isTough:!0,saveProficiencies:new Map([[i.DStat.Dex,[i.ProficiencyLevel.Prof,0]],[i.DStat.Con,[i.ProficiencyLevel.Prof,0]],[i.DStat.Wis,[i.ProficiencyLevel.Prof,0]],[i.DStat.Cha,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.DSkill.Performance,[i.ProficiencyLevel.Expert,0]],[i.DSkill.Insight,[i.ProficiencyLevel.Prof,0]],[i.DSkill.Perception,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Walking,40],[i.Speed.Swimming,40],[i.Speed.Flying,80]])})}},698:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMonsters=t.setupStatSheet=void 0;const n=a(6817),i=a(7307),s=a(7660);function o(e,t,a,i,o,r=!1){const l=s.ID_TO_SHEET_GENERATOR.has(t);if(s.ID_TO_SHEET_GENERATOR.set(t,o),!l){const n=r?`<img class="icon_img" src="${i}" alt="[NULL]">`:`<img class="icon_img" src="assets/images/mob_tokens/${e}/${i}" alt="[NULL]">`;$("#beastiary .selectable_radio_container").append(`\n            <div class="selectable radio creature" \n                 data-creature-id="${t}"\n                 data-mob-group="${e}"\n                 style="display: none;">\n                ${n}\n                <div class="title selected_only">${a}</div>\n            </div>`)}const d=$(`#stat_sheet_${t}`);if(d.length>1)throw new Error(`Duplicate sheet with id stat_sheet_${t}.`);0!=d.length&&(d.is(":hidden")?(n.GENERATED_IDS.delete(t),d.remove()):(d.remove(),$("#sheet_zone").append(o().render())))}t.setupStatSheet=o,t.setupMonsters=function(){o("inkling","inkling_insecurity","Inkling: Insecurity","insecurity.png",i.createInkling),o("inkling","inkling_impatience","Inkling: Impatience","impatience.png",i.createInklingDog),o("inkling","inkling_envy","Inkling: Envy","envy.png",i.createInklingAberrant),o("inkling","inkling_fury","Inkling: Fury","fury.png",i.createInklingWannabeBoss),o("inkling","inkling_sloth","Inkling: Sloth","sloth.png",i.createInklingTank),o("inkling","inkling_arrogance","Inkling: Arrogance","arrogance.png",i.createInklingDynamite),o("inkling","inkling_free","Freedom","free.png",i.createFreedom);const e=$("#beastiary");e.on("click",".mob_group_icon",(function(){const t=$(this).data("mobGroupId");e.find(".creature").hide(),e.find(`.creature[data-mob-group=${t}]`).show(),console.log("mobgroup clicked")})),e.on("click",".creature:not(.disabled)",(function(){setTimeout((()=>{const e=$("#beastiary .creature.selected").data("creatureId");$(".stat_sheet").hide(),s.ID_TO_SHEET_GENERATOR.has(e)&&(n.GENERATED_IDS.has(e)?$(`#stat_sheet_${e}`).show():($("#sheet_zone").append(s.ID_TO_SHEET_GENERATOR.get(e)().render()),n.GENERATED_IDS.add(e)))}),10)}))}},8254:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupUI=void 0,t.setupUI=function(){const e=$('.page[data-nav-id="beastiary"]');e.find(".selectable_radio_container .selectable.radio .selected_only").hide(),e.on("click",".selectable_radio_container",(function(){$(this).children(".selectable.radio").removeClass("selected"),$(this).children(".selectable.radio").find(".selected_only").hide()})),e.on("click",".selectable.radio:not(.disabled)",(function(e){e.stopPropagation();const t=$(this);if(t.hasClass("selected"))return t.removeClass("selected"),void t.find(".selected_only").hide();t.siblings(".selectable.radio").removeClass("selected"),t.siblings(".selectable.radio").find(".selected_only").hide(),t.addClass("selected"),setTimeout((()=>t.find(".selected_only").fadeIn(100)),200)}))}},7660:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.BuffedStatSheet=t.SheetContract=t.StatSheet=t.isContractSelected=t.contractIndex=t.ID_TO_SHEET_GENERATOR=void 0;const n=a(2870),i=a(5947),s=a(5480);class o{constructor(e,t,a,n=new Map,i=!1){this.stats=e,this.size=t,this.biologicalHp=a,this.adventurerLevels=n,this.isTough=i}get conHpPerDice(){return this.stats.get(s.DStat.Con).mod+(this.isTough?2:0)}getAdventurerHp(){let e=0;for(const[t,a]of this.adventurerLevels.entries())e+=((0,s.E)(s.ClassHitDice.get(t))+this.conHpPerDice)*a;return e}get hpDiceCount(){const e=this.biologicalHp+this.getAdventurerHp(),t=(0,s.E)(this.size)+this.conHpPerDice;return Math.round(e/t)}}function r(e){return $(`#contracts .contract[data-contract-uid=${e}]`).hasClass("selected")}t.ID_TO_SHEET_GENERATOR=new Map,t.contractIndex=new Map,t.isContractSelected=r;class l{constructor({monster_id:e,title:t,subtitle:a,crValue:n,stats:r,size:l,biologicalHp:d,ac:c,speeds:h,attacks:p,saveProficiencies:u=new Map,skillProficiencies:m=new Map,acDesc:g=null,adventurerLevels:f=new Map,vulnerabilities:v=new Set,resistances:y=new Set,immunities:w=new Set,conditionImmunities:S=new Set,isTough:b=!1}){this.monster_id=e,this.title=t,this.subtitle=a,this.crValue=n,this.speeds=h,this.stats=r,this._ac=c,this.saveProficiencies=u,this.skillProficiencies=m,this.acDesc=g,this.size=l,this.vulnerabilities=v,this.resistances=y,this.immunities=w,this.conditionImmunities=S,this._attacks=p;const D=new o(r,s.SizeToDice.get(l),d,f,b);this._hpDice=new Map([[s.SizeToDice.get(this.size),D.hpDiceCount],[i.D1,D.hpDiceCount*D.conHpPerDice]])}visibility(e){throw new Error("Method not implemented.")}get actionContentAPI(){throw new Error("Method not implemented.")}render(){const e=[];for(const[t,a]of this.speeds.entries())e.push(`${s.Speed[t]} ${a} ft.`);const t=[];for(const e of[s.DStat.Str,s.DStat.Dex,s.DStat.Con,s.DStat.Int,s.DStat.Wis,s.DStat.Cha]){const a=this.stats.get(e);t.push(`<td>${a.stat} ${(0,n.wrapRoll)(a.mod)}</td>`)}const a=[];for(const[e,t]of this.computeSaves().entries())a.push(`${s.DStat[e]} ${(0,n.wrapRoll)(t)}`);const i=[];for(const[e,t]of this.computeSkills().entries())i.push(`${s.DSkill[e]} ${(0,n.wrapRoll)(t)}`);const o=[];for(const e of[s.Activation.Special,s.Activation.Action,s.Activation.BonusAction,s.Activation.Reaction,s.Activation.LegendaryAction,s.Activation.MythicAction]){const t=this.getAttacksWithActivation(e);if(0!=t.length){e!=s.Activation.Special&&o.push(`<h4 class="sheet_section_header">${s.Activation[e]}s</h4>`);for(const e of t)o.push(`<div class="sheet_content">${e}</div>`)}}const r=[];for(const e of this.vulnerabilities.values())r.push(s.DamageType[e]);const l=0==r.length?"":`<tr><td>Damage Vulnerabilities</td><td>${r.join(", ")}</td></tr>`,d=[];for(const e of this.resistances.values())d.push(s.DamageType[e]);const c=0==d.length?"":`<tr><td>Damage Resistances</td><td>${d.join(", ")}</td></tr>`,h=[];for(const e of this.immunities.values())h.push(s.DamageType[e]);const p=0==h.length?"":`<tr><td>Damage Immunities</td><td>${h.join(", ")}</td></tr>`,u=[];for(const e of this.conditionImmunities.values())u.push(s.Condition[e]);const m=0==u.length?"":`<tr><td>Condition Immunities</td><td>${u.join(", ")}</td></tr>`;return`\n        <div class="stat_sheet" id="stat_sheet_${this.monster_id}">\n            <div class="sheet_header">\n                <div class="header_zone">\n                    <h3 class="sheet_title">${this.title}</h3>\n                    <div class="sheet_subtitle">${s.CreatureSize[this.size]} ${this.subtitle}</div>\n                </div>\n                <div class="header_zone">\n                    <table>\n                        <tr><td>Armor Class</td><td>${this._ac} ${this.acDesc}</td></tr>\n                        <tr><td>Hit Points</td><td>${Math.round((0,s.E)(this.hpDice))} \n                            ${(0,n.wrapRoll)(this.hpDice)}</td></tr>\n                        <tr><td>Speed</td><td>${e.join(", ")}</td></tr>\n                    </table>\n                </div>\n                <div class="header_zone">\n                    <table class="stats_table">\n                        <tr><th>STR</th><th>DEX</th><th>CON</th><th>INT</th><th>WIS</th><th>CHA</th></tr>\n                        <tr>${t.join("")}</tr>\n                    </table>\n                </div>\n                <div class="header_zone">\n                    <table>\n                        <tr><td>Saving Throws</td><td>${a.join(" ")}</td></tr>\n                        <tr><td>Skills</td><td>${i.join(" ")}</td></tr>\n                        <tr><td>Challenge Rating</td><td>${this.crValue.cr}</td></tr>\n                        <tr><td>Proficiency Bonus</td><td>${this.pb.mod()}</td></tr>\n                        ${l}${c}${p}${m}\n                    </table>\n                </div>\n            </div>\n            ${o.join("")}\n        </div>`}get pb(){return this.crValue.prof}get attacks(){return this._attacks}getAttacksWithActivation(e){const t=[];for(const a of this._attacks.values())a.activation==e&&(a.bindStats(this),t.push(a.createContent()));return t}computeSaves(){const e=new Map;for(const[t,[a,n]]of this.saveProficiencies.entries())e.set(t,(e.has(t)?e.get(t):this.stats.get(t).mod)+this.pb.mod(a)+n);return e}computeSkills(){const e=new Map;for(const[t,[a,n]]of this.skillProficiencies.entries()){const i=s.StatForSkill.get(t);e.set(t,(e.has(t)?e.get(t):this.stats.get(i).mod)+this.pb.mod(a)+n)}return e}get hpDice(){return this._hpDice}mod(e){return 0}}t.StatSheet=l,t.SheetContract=class{constructor(e,t,a,n,i,s,o){this.risk=e,this.id=t,this.displayName=a,this.imgPath=n,this.desc=i,this.shouldApply=s,this.modify=o}render(){return`<div class="contract selectable radio risk${this.risk}" data-contract-uid="${this.id}">\n                    <img class="contract_icon" src="assets/images/risk/${this.imgPath}" alt="[null]">\n                    <div class="contract_box"><div class="contract_title">${this.displayName}</div></div>\n                </div>`}},t.BuffedStatSheet=class extends l{constructor(e){super(e)}get hpDice(){return super.hpDice}get attacks(){return super.attacks}render(){for(const[e,a]of t.contractIndex.entries())r(e)&&a.shouldApply(this)&&a.modify(this);return super.render()}get ac(){return this._ac}set ac(e){this._ac=e}get res(){return this.resistances}get saves(){return this.saveProficiencies}},t.test=function(){}},1506:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AttitudeHandler=void 0;const n=a(4982),i=a(7821);t.AttitudeHandler=class{constructor(){this.bufferedAttitude=new i.StandardBufferedAttitudeList,this.currentTime=new n.GameTimestamp,this.ambientInteraction=0}testReset(){this.bufferedAttitude.resetRatings()}incrementTimeTo(e){if(e.totalMillis<this.currentTime.totalMillis)throw new Error("Cannot move backwards in time.");const t=this.forgetfulness,a=this.ambientInteraction,n=t+a,i=Math.sign(a)!=Math.sign(t)&&Math.abs(a)<Math.abs(t);this.bufferedAttitude.adjustValue(n*(e.totalDays-this.currentTime.totalDays),i,e.totalDays-this.currentTime.totalDays),this.currentTime=e}addEvent(e,t){this.bufferedAttitude.adjustValue(e)}get value(){return this.bufferedAttitude.value}get rating(){return this.bufferedAttitude.rating}get timestamp(){return this.currentTime}}},8286:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferedAttitudeListBase=void 0;const n=a(190),i=a(3665),s=a(3794);t.BufferedAttitudeListBase=class{constructor(){this.posSlots=[],this.negSlots=[],this.dynamicBuffer=new i.DynamicBufferSlot}resetRatings(){if(this.dynamicBuffer.reset(),this.posSlots.length>0){for(const e of this.posSlots)e.reset();for(const e of this.negSlots)e.reset();return}let e=0;for(let t=1;t<=this.maxRating;t++){const a=this.getValueCapacityOfRating(t),n=this.getZoneDeltaOffset(e);if(this.posSlots.push(new s.FixedSizeSlot(a,!1,-n)),this.negSlots.push(new s.FixedSizeSlot(-a,!1,n)),e<this.zoneCutoffs.length&&t>=this.zoneCutoffs[e]){const t=this.getBufferCapacityOfZone(this.zoneCutoffs[e]);this.posSlots.push(new s.FixedSizeSlot(t,!0,0)),this.negSlots.push(new s.FixedSizeSlot(-t,!0,0)),e++}}this.posSlots.push(new s.FixedSizeSlot(16777215,!1,0)),this.negSlots.push(new s.FixedSizeSlot(-16777215,!1,0))}adjustValue(e,t=!1,a){if(console.assert(this.posSlots[0].value*this.negSlots[0].value==0),0==e)return;const i=Math.sign(this.posSlots[0].value+this.negSlots[0].value),s=Math.sign(e),o=i*s>=0;let r,l;if(i>0?(r=this.posSlots,l=this.negSlots):i<0?(r=this.negSlots,l=this.posSlots):(r=s>0?this.posSlots:this.negSlots,l=s>0?this.negSlots:this.posSlots),t?a&&this.dynamicBuffer.adjust(Math.sign(this.dynamicBuffer.size)*a*.1):e=this.dynamicBuffer.adjust(e),0!=e)if(o){let t;for(t=0;t<r.length&&r[t].isFilled;t++);let a=!1;for(let n=0;n<100&&(e=r[t].adjust(e),r[t].isFilled);n++)a=!0,this.dynamicBuffer.size=this.getDynamicBufferSizeForRating(this.rating),t++;a&&(this.dynamicBuffer.size=this.getDynamicBufferSizeForRating(this.rating))}else{let a;for(a=0;a<r.length;a++)if(r[a].isEmpty){a--;break}for(let n=0;n<100&&!(a<0);n++){if(t&&r[a].isBuffered)return;if(e=r[a].adjust(e),!r[a].isEmpty)break;a--}if((0,n.EQ)(e,0))return;if(console.assert(r[0].isEmpty,"My logic failed badly."),t)return;let i=!1;a=0;for(let t=0;t<100&&(e=l[a].adjust(e),l[a].isFilled);t++)a++,i=!0;i&&(this.dynamicBuffer.size=this.getDynamicBufferSizeForRating(this.rating))}}get rating(){const e=this.posSlots[0].value>0,t=this.negSlots[0].value<0;if(t&&e)throw new Error("both positive and negative buffers filled");if(!t&&!e)return 0;const a=e?this.posSlots:this.negSlots;let n=e?1:-1,i=0;for(const e of a){if(!e.isFilled)break;e.isBuffered||i++}return n*i}get value(){let e=0;for(const t of this.posSlots)if(!t.isBuffered&&(e+=t.value,t.value<t.size))break;for(const t of this.negSlots)if(!t.isBuffered&&(e+=t.value,t.value>t.size))break;return e}get bufferedValue(){let e=this.dynamicBuffer.value;for(const t of this.posSlots)t.isBuffered&&(e+=t.value);for(const t of this.negSlots)t.isBuffered&&(e+=t.value);return e}get zone(){const e=this.rating,t=Math.abs(e),a=Math.sign(e);let n=0;for(const e of this.zoneCutoffs){if(e>t)break;n++}return n*a}}},3665:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DynamicBufferSlot=void 0;const n=a(8672);class i extends n.SlotBase{constructor(){super(!0,0),this._size=0}get shouldAutofillOnFirstCross(){return!1}reset(){super.reset(),this._size=0}get size(){return this._size}set size(e){if((e-this.value)*this.value<0)throw new Error("New size set cannot fit the current value");this._size=e,this._value=this._size}}t.DynamicBufferSlot=i},3794:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testSlot=t.FixedSizeSlot=void 0;const n=a(8672);class i extends n.SlotBase{constructor(e,t,a){super(t,a),this.size=e}}t.FixedSizeSlot=i,t.testSlot=function(){const e=new i(7,!1,-2),t=new i(-7,!1,2);function a(e,t,a,n){const i=e.adjust(t);console.assert(e.value==a,`(Adju ${t}) Expected value ${a}, Got ${e.value}`),console.assert(i==n,`(Adju ${t}) Expected leftover ${n}, Got ${i}`)}a(e,0,0,0),a(e,-1,0,-1),a(e,1,0,0),a(e,5,3,0),a(e,-1,0,0),a(e,7,5,0),a(e,7,7,5),a(e,-6,0,1),a(t,0,0,0),a(t,1,0,1),a(t,-1,0,0),a(t,-5,-3,0),a(t,1,0,0),a(t,-7,-5,0),a(t,-7,-7,-5),a(t,6,0,-1)}},4550:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NpcInteractionEvent=void 0;const n=a(8706),i=a(3260),s=a(5990);t.NpcInteractionEvent=class{constructor(e,t,a,n=10,i=null){this.timestamp=e,this.displayText=t,this.effects=a,this.insightGate=n,this.renderReverse=i}generateDOMString(){let e;if(e=this.insightGate<=10?"":this.insightGate<=n.PARTY_INSIGHT?`<div class='insight_lock insight_lock--unlocked'><i class="fa-solid fa-unlock"></i>${this.insightGate}</div>`:`<div class='insight_lock insight_lock--locked'><i class="fa-solid fa-lock"></i>${this.insightGate}</div>`,this.insightGate>n.PARTY_INSIGHT)return`<div class='event_li'>\n                    <div class="timestamp"><span>${this.timestamp.generateDOMString()}</span></div>\n                    <div class="effect_tags">${e}</div>\n                  </div>`;const t=[];for(const[e,a]of this.effects.entries()){if(0==a)continue;const n=(0,i.getZone)(a);let o,r;null==this.renderReverse||1!=this.renderReverse.get(e)?(o=-1==n?"-":"+".repeat(Math.abs(n)),r=n<-1?s.NegativeEmotion.get(e):s.PositiveEmotion[e]):(o=-1==n?"+":"-".repeat(Math.abs(n)),r=n>=-1?s.NegativeEmotion.get(e):s.PositiveEmotion[e]);const l=n<0?s.NegativeEmotion.get(e):s.PositiveEmotion[e];t.push(`<div class="effect_tag" data-emo="${l}">${r}${o}</div>`)}return`<div class='event_li'>\n                    <div class="timestamp"><span>${this.timestamp.generateDOMString()}</span></div>\n                    <div class="display_text">${this.displayText}</div>\n                    <div class="effect_tags">${e} ${t.join("")}</div>\n                  </div>`}get startTime(){return this.timestamp}}},9676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.NpcOpinion=void 0;const n=a(190),i=a(8706),s=a(3260),o=a(3794),r=a(4550),l=a(5990),d=a(8374),c=a(7821),h=a(2995);t.NpcOpinion=class{constructor(e,t){this.npc=e,this.pc=t,this.attitudeHandlers=new Map,this.events=[],this.currentTime=null;for(const e of(0,n.getEnumIterator)(l.PositiveEmotion))this.attitudeHandlers.set(e,new d.StandardAttitudeHandler)}addEvent(e){if(null!=this.currentTime){if(e.startTime.totalDays>this.currentTime.totalDays+2&&console.warn(`Gap between events ${e.startTime.totalDays} -> ${this.currentTime.totalDays} not covered by timeskip.`),e.startTime.totalMillis<this.currentTime.totalMillis)throw new Error(`Cannot move backward in time, current time ${this.currentTime.generateDOMString()} event start time ${e.startTime.generateDOMString()}.`)}else this.currentTime=e.startTime,this.addEvent(new r.NpcInteractionEvent(e.startTime,"Base Charisma.",new Map([[l.PositiveEmotion.Respect,i.PcCharismaMods.get(this.pc)]])));if(this.events.push(e),e instanceof h.TimeskipEvent){for(const t of(0,n.getEnumIterator)(l.PositiveEmotion)){const a=e.ambientInteraction.has(t)?e.ambientInteraction.get(t):0,n=this.attitudeHandlers.get(t);n.ambientInteraction=a,n.incrementTimeTo(e.endTime)}this.currentTime=e.endTime}else if(e instanceof r.NpcInteractionEvent){for(const[t,a]of e.effects.entries())this.attitudeHandlers.get(t).addEvent(a);this.currentTime=e.timestamp}}generateDOMString(){const e=(0,s.getZone)(this.getEmotion(l.PositiveEmotion.Trust)),t=e>=0?`<div class="emotion_border emotion_border--trust emotion_border--value_${e}"></div>`:`<div class="emotion_border emotion_border--paranoia emotion_border--value_${-e}"></div>`,a=(0,s.getZone)(this.getEmotion(l.PositiveEmotion.Gratitude)),i=a>=0?`<div class="emotion_border emotion_border--gratitude emotion_border--value_${a}"></div>`:`<div class="emotion_border emotion_border--envy emotion_border--value_${-a}"></div>`,o=(0,s.getZone)(this.getEmotion(l.PositiveEmotion.Respect)),r=o>=0?`<div class="emotion_border emotion_border--respect emotion_border--value_${o}"></div>`:`<div class="emotion_border emotion_border--contempt emotion_border--value_${-o}"></div>`;let d=0;for(const e of(0,n.getEnumIterator)(l.PositiveEmotion))d+=this.getEmotion(e);return`\n            <div class="simple_table__row__cell opinion_cell">\n                <div class="npc_opinion_circle" \n                     data-npc-id="${this.npc}" \n                     data-pc-id="${this.pc}">\n                    ${d}\n                </div>\n                ${t}${i}${r}\n                <div class="emotion_border--backdrop"></div>\n            </div>`}generateTimelineDOMString(){const e=[];for(const t of this.events)e.push(t.generateDOMString());const t=[];for(const e of(0,n.getEnumIterator)(l.PositiveEmotion))t.push(this.generateOpinionTag(e));return`\n                <h4>Interaction Details</h4>\n                <div class="opinion_tags">${t.join("")}</div>\n                <div class="events_list">${e.join("")}</div>\n            `}generateOpinionTag(e){const t=this.getEmotion(e);if(0==t)return"";const a=t>0?l.PositiveEmotion[e]:l.NegativeEmotion.get(e);return`<div class="effect_tag" data-emo="${a}">${a}: ${Math.abs(t)}</div>`}getEmotion(e){return this.attitudeHandlers.get(e).rating}},t.test=function(){(0,o.testSlot)(),(0,c.testBufferedAttitude)(),(0,d.testAttitudeHandler)()}},5990:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.NegativeEmotion=t.PositiveEmotion=void 0,function(e){e[e.Affection=0]="Affection",e[e.Gratitude=1]="Gratitude",e[e.Trust=2]="Trust",e[e.Respect=3]="Respect"}(a=t.PositiveEmotion||(t.PositiveEmotion={})),t.NegativeEmotion=new Map([[a.Affection,"Hatred"],[a.Gratitude,"Envy"],[a.Trust,"Paranoia"],[a.Respect,"Contempt"]])},8672:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SlotBase=void 0;const n=a(190);t.SlotBase=class{constructor(e,t){if(e&&0!=t)throw new Error("A buffer shouldn't have a delta modifier.");this.isBuffered=e,this.deltaModifier=t,this._value=0,this.crossedBefore=!1}adjust(e){if(this.shouldAutofillOnFirstCross&&!this.crossedBefore)return this.crossedBefore=!0,this._value=this.size,e;const t=Math.sign(e);if(e+=this.deltaModifier,t!=Math.sign(e))return 0;const a=this._value;this._value+=e,Math.sign(this.size)*this._value<0?this._value=0:Math.abs(this._value)>Math.abs(this.size)&&(this._value=this.size);const i=e-(this._value-a);return(0,n.EQ)(0,i)?0:i-this.deltaModifier}reset(){this._value=0,this.crossedBefore=!1}get shouldAutofillOnFirstCross(){return this.isBuffered}get value(){return this._value}get isFilled(){return(0,n.EQ)(this.value,this.size)}get isEmpty(){return(0,n.EQ)(this.value,0)}}},8374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testAttitudeHandler=t.StandardAttitudeHandler=void 0;const n=a(190),i=a(4982),s=a(1506);class o extends s.AttitudeHandler{constructor(){super()}get forgetfulness(){const e=this.bufferedAttitude.zone,t=Math.abs(e),a=Math.sign(e);return[.2,.1,.05,.02][t]*-a}}t.StandardAttitudeHandler=o,t.testAttitudeHandler=function(){const e=new o;console.assert(0==e.rating),e.incrementTimeTo(i.GameTimestamp.fromDays(1)),console.assert(0==e.rating),e.addEvent(2.5),e.incrementTimeTo(i.GameTimestamp.fromDays(2e3)),console.assert(0==e.rating),e.testReset(),e.addEvent(7),console.assert(2==e.rating),e.incrementTimeTo(i.GameTimestamp.fromDays(2002)),console.assert(1==e.rating),e.incrementTimeTo(i.GameTimestamp.fromDays(4e3)),console.assert(1==e.rating),console.assert((0,n.EQ)(e.value,3),e.value),e.ambientInteraction=-.1,e.incrementTimeTo(i.GameTimestamp.fromDays(4021)),console.assert((0,n.EQ)(e.value,1.8),e.value)}},7821:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testBufferedAttitude=t.StandardBufferedAttitudeList=void 0;const n=a(8286);class i extends n.BufferedAttitudeListBase{constructor(){super(),this.resetRatings()}getBufferCapacityOfZone(e){return Math.abs(e)}getDynamicBufferSizeForRating(e){return e}getValueCapacityOfRating(e){return Math.abs(e)+2}getZoneDeltaOffset(e){return[0,0,1,2][e]}get zoneCutoffs(){return[1,4,7]}get maxRating(){return 10}}t.StandardBufferedAttitudeList=i,t.testBufferedAttitude=function(){const e=new i;function t(e,t,a,n){console.assert(e.value==t&&e.rating==a&&e.bufferedValue==n,`Expected (V, R, B): (${t}, ${a}, ${n}). Got (${e.value}, ${e.rating}, ${e.bufferedValue}).`)}e.adjustValue(1),t(e,1,0,0),e.adjustValue(-3),t(e,-2,0,0),e.adjustValue(5),t(e,3,1,2),e.adjustValue(-8),t(e,-3,-1,-2),e.resetRatings(),e.adjustValue(8),t(e,8,2,3),e.adjustValue(18),t(e,25,5,10),e.adjustValue(-1),t(e,25,5,9),e.adjustValue(-5),t(e,23,4,5),e.adjustValue(-5),t(e,18,4,5),e.adjustValue(-2),t(e,18,4,3),e.adjustValue(-2),t(e,18,4,1),e.adjustValue(-2),t(e,16,3,1),e.adjustValue(-2),t(e,14,3,1),e.adjustValue(2),t(e,14,3,3),e.resetRatings(),e.adjustValue(7),e.adjustValue(-.1,!0),t(e,6.9,1,3)}},2995:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeskipEvent=void 0;const n=a(190),i=a(5990);t.TimeskipEvent=class{constructor(e,t,a,n){this.startTime=e,this.endTime=t,this.ambientInteraction=a,this.text=n}generateDOMString(){if(0==this.ambientInteraction.size)return`<div class="timeskip_li">\n                        The time between <span class="timeskip_li__time">${this.startTime.generateDOMString()}</span> and \n                        <span class="timeskip_li__time">${this.endTime.generateDOMString()}</span> passed with negligible\n                        interaction.\n                    </div>`;const e=[];for(let[t,a]of this.ambientInteraction.entries()){if((0,n.EQ)(a,0))continue;const s=a<-.1?i.NegativeEmotion.get(t):i.PositiveEmotion[t];a<-.1&&(a=-a),a<0?e.push(`<li class="timeskip__emotion_desc">\n                        <span class="emotion_string--${s.toLowerCase()}--neg">${s}</span> eroded slightly.\n                    </li>`):a<=.4?e.push(`<li class="timeskip__emotion_desc">\n                        <span class="emotion_string--${s.toLowerCase()}">${s}</span> increased slightly.\n                    </li>`):a<=.9?e.push(`<li class="timeskip__emotion_desc">\n                        <span class="emotion_string--${s.toLowerCase()}">${s}</span> increased moderately.\n                    </li>`):e.push(`<li class="timeskip__emotion_desc">\n                        <span class="emotion_string--${s.toLowerCase()}">${s}</span> increased significantly.\n                    </li>`)}const t=this.text.length>0?`<p class="timeskip_li__description">${this.text}</p>`:"";return`<div class="interactions_list__item timeskip_li">\n                    The time between \n                    <span class="timeskip_li__time">${this.startTime.generateDOMString()}</span> and \n                    <span class="timeskip_li__time">${this.endTime.generateDOMString()}</span> passed with the following notable \n                    ambient interaction for each day of the duration -\n                    <ul>\n                        ${e.join("")}\n                    </ul>\n                    ${t}\n                </div>`}}},3260:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getZone=void 0,t.getZone=function(e){return Math.sign(e)*Math.floor((Math.abs(e)+2)/3)}},1913:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arc21OpinionEvents=void 0;const n=a(3998),i=a(8706),s=a(4982),o=a(4492),r=a(5990),l=a(6797);t.arc21OpinionEvents=function(){const e=o.Character.get(n.NpcID.Hina).passiveDeception;(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_CYRION,i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,28,12),"So literally the minute they found about my bondsmith powers, they \n        already found a use for it? Sigh, in the end all adults really are the \n        same aren't they?<br/>\n        ... Fuck, what is wrong with me? This is Dawn's life we're talking about,\n        and it's not like they have a choice here. If there is any situation \n        where my powers are used well, this is it. So be it, I'll help them \n        without complaint or bargaining.",new Map([[r.PositiveEmotion.Respect,-1]]),e+2,new Set([r.PositiveEmotion.Respect])),(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_CYRION,i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,28,12,5),"Wait a minute, Ruin has been talking to all of them too? All this time?",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,-4]])),(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_CYRION],new s.GameTimestamp(0,28,12,5),"Hmm... I don't really see Ruin's investiture on him - at least none \n        that hasn't been with him long enough to have become his own.",new Map([[r.PositiveEmotion.Trust,4]]),e),(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,28,12,35),"Huh, was I sleep paralyzed? Possessed? Can't be- <br/>\n        That said, that was a real horrible nightmare. I'm really... Thanks a \n        lot for expending so much investiture to rid me of that - though I fear \n        I may not be worth it-<br/>\n        <em>Wait, did I kill all these guys? Ughh... </em>",new Map([[r.PositiveEmotion.Gratitude,3]]),e),(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_CYRION,i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,28,12,40),"...<br/>\n        Yes, I think I'm certain. You are all good people. And possibly the best\n        thing to have happened to our village.<br/>\n        Ruzaki be damned, my own self be damned. I will not kill you.",new Map([[r.PositiveEmotion.Trust,1],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Respect,1],[r.PositiveEmotion.Affection,1]])),(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,28,12,40),'Wait, you protected me?? Again?<br/>\n        oh no, no, NO! You cannot die like this!<br/>\n        <span style="font-size: 9px;">So it does come to this in the end, all \n        said and done, even I <em>will not</em> break my oath. So all that\'s left\n        is either I die alone, and remove the shardbearer from the equation, or \n        he kills me after dispatching you. In saving me today... I am not being \n        manipulated to do this. Yes, I give my life for yours of my own free \n        will.</span>',new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,1]])),(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_CYRION],new s.GameTimestamp(0,28,12,40),"You really brought <i>me</i> back to life? lmao...",new Map([[r.PositiveEmotion.Gratitude,10],[r.PositiveEmotion.Affection,2]]),e),(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_AURELIA],new s.GameTimestamp(0,28,12,45),"Two very different professors, two very different lifetimes.<br/>\n        This had to have been a horrormare - first that Shardic command, then that \n        <i>sleep</i>, and then... <span style=\"font-size: 11px; font-style: italic;\">Ruzaki</span>. \n        Why him? Why now? Why here, so far away? Just so tired, bound, trapped. I...<br/>\n        I really didn't want to be a burden... but... thank you for listening.\n        Thank you for indulging me. Thank you for telling me, again and again, \n        as many times as I needed, that freedom was a choice I still had.<br/>\n        You'll probably regret this day in the future, but I swear that until time \n        ends for me, I will remain loyal to you. And so I will grant you, for free,\n        that which all of them would kill to get...",new Map([[r.PositiveEmotion.Respect,7],[r.PositiveEmotion.Gratitude,10],[r.PositiveEmotion.Affection,4],[r.PositiveEmotion.Trust,6]]))}},8659:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arc22OpinionEvents=void 0;const n=a(3998),i=a(8706),s=a(4982),o=a(4492),r=a(5990),l=a(6797);t.arc22OpinionEvents=function(){const e=o.Character.get(n.NpcID.Hina).passiveDeception;(0,l.addInteractionEvent)(n.NpcID.Hina,[i.PcIndex.ID_AURELIA],new s.GameTimestamp(0,29,8),"Being called an ingrate after I pledged to give up my life for them \n         pricks just a bit. Sigh, she's probably kidding, isn't she? Though jokes \n         generally do build upon an element of truth...<br/>\n         I don't want to see them turn out like other adults I've been with - \n         I suppose I should pre-pone <i>those</i> plans.",new Map([[r.PositiveEmotion.Respect,-3],[r.PositiveEmotion.Gratitude,-3]]),e+5),(0,l.addInteractionEvent)(n.NpcID.Dawn,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_CYRION,i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,29,8),"They actually made it? Meaning... I needn't disappear...</br>\n         I... get to live? A normal life? And Tomasa too??\n         This has to be a dream, hasn't it?",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Trust,8],[r.PositiveEmotion.Gratitude,12]])),(0,l.addInteractionEvent)(n.NpcID.Elysium,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_CYRION,i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,29,8),"These guys actually returned successful from a mission this perilous \n         within 1 day?? Hmm, they're far from run-of-the-mill, I must admit.",new Map([[r.PositiveEmotion.Respect,4]]),10,new Set([r.PositiveEmotion.Gratitude])),(0,l.addInteractionEvent)(n.NpcID.Ezell,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_CYRION,i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,29,8),"They're really amazing. To accomplish such a feat with such elegance. \n        Meanwhile we couldn't even enter- Ugh!",new Map([[r.PositiveEmotion.Respect,6],[r.PositiveEmotion.Gratitude,-2]]),10,new Set([r.PositiveEmotion.Gratitude])),(0,l.addInteractionEvent)(n.NpcID.Roberta,[i.PcIndex.ID_CYRION],new s.GameTimestamp(0,29,8,15),"Oh dear, you really shouldn't go around accepting random injections from \n        strangers. Ah well, don't worry - I'm not gonna be the one to exploit \n        your gullibility.",new Map([[r.PositiveEmotion.Trust,2]]),o.Character.get(n.NpcID.Roberta).passiveDeception),(0,l.addInteractionEvent)(n.NpcID.Elysium,[i.PcIndex.ID_AURELIA],new s.GameTimestamp(0,29,8,15),"She spoke to the <i>survivor Himself</i>??! And to tell Him off because \n        she didn't like His ways? I continue to be amazed by your strength of \n        character, Ms. Aurelia.<br/>\n        Well I suppose it may not be that surprising when you take into account \n        her unusual family. What's up with all of that mess with them anyway?",new Map([[r.PositiveEmotion.Respect,4]])),(0,l.addInteractionEvent)(n.NpcID.Ezell,[i.PcIndex.ID_HELIOS],new s.GameTimestamp(0,29,8,15),"How can it be?? The sigil of a higher vampiric family? On an aasimar?\n         And he's not undead either?<br/>\n         And did his halo change form? Were his wings always like this? Did he \n         even have them normally?<br/>\n         <em>What the hell is going on here?</em>",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Trust,-1]]),10,new Set([r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(n.NpcID.Elysium,[i.PcIndex.ID_CYRION],new s.GameTimestamp(0,29,8,30),"One look at the sea terror and his conclusions already match mine. \n        That's impressive.",new Map([[r.PositiveEmotion.Respect,2]]))}},9537:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents10=void 0;const n=a(8706),i=a(4492),s=a(3998),o=a(4982),r=a(5990),l=a(6797);t.sessionOpinionEvents10=function(){(0,l.addInteractionEvent)(s.NpcID.Petra,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,45),"Prodded me to confront the past. About what happened to... to... \n        AARGH!",new Map([[r.PositiveEmotion.Gratitude,3],[r.PositiveEmotion.Affection,-2]]),10,new Set([r.PositiveEmotion.Affection])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,14,30),"So many people waiting outside my door? Ah, I see. I'm popular now it seems.",new Map([])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,14,40),"Didn't get any idea of what I just did. Thank God.",new Map([[r.PositiveEmotion.Respect,-1],[r.PositiveEmotion.Gratitude,1]]),i.Character.get(s.NpcID.Hina).passiveDeception),(0,l.addInteractionEvent)(s.NpcID.Elysium,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,21,20),"Well, that was an expensive investment. Still, it's rare for Hina to \n        recommend someone, and the local Goddess also picked them for the fight\n        to decide the fate of this village. Maybe this will pay off handsomely?",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Trust,-3]]),i.Character.get(s.NpcID.Elysium).passiveDeception,new Set([r.PositiveEmotion.Trust]));const e=new Map([[s.NpcID.Dusk,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA]],[s.NpcID.Dawn,[]],[s.NpcID.Andri,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Athlon,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Cecelia,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcID.Coroto,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Elysium,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Erica,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcID.Genefe,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Hav,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Hina,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcID.Ingrid,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Iona,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcID.Jaye,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Jordi,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Kastor,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Petra,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Roberta,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA]],[s.NpcID.Sasha,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcID.Sybilla,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Tomasa,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Verna,[n.PcIndex.ID_CYRION]],[s.NpcID.Vitacia,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Yuki,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Ezell,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcID.Irene,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]]]);(0,l.addTimeSkipEvent)(s.NpcID.Roberta,[n.PcIndex.ID_CYRION],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Hmm... it was pretty fun interacting with a good ol' backwaters hippy (100% real) druid \n         . Makes quite a difference from my usual clientele. Sigh,\n         though he refused to become my client after all - but that's all right \n         - people are usually shy before they get a taste of my services. Not to\n         mention he also managed to pick up bits of my 100% organic natural \n         herbal recipe... <br/>",new Map([[r.PositiveEmotion.Respect,.8],[r.PositiveEmotion.Trust,.3],[r.PositiveEmotion.Gratitude,.4]])),(0,l.addTimeSkipEvent)(s.NpcID.Hina,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"She's putting in so much effort (it it a penance?), yet these kids... sigh. With them \n        being useless like that, I suppose I can't do my usual of utilizing class hours for catching up \n        on jet lag. While I hate to be the responsible student,\n        I must admit... something about this classroom is... different...\n        <br/>\n        ...<br/>\n        Fuck. I think I'm actually enjoying this.",new Map([[r.PositiveEmotion.Respect,.7],[r.PositiveEmotion.Trust,.4],[r.PositiveEmotion.Affection,.3]])),(0,l.addTimeSkipEvent)(s.NpcID.Iona,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Wow, a year ago, I'd never have imagined this. That I'll be going to a \n         regular school with a proper teacher and true friends. The others \n         probably don't appreciate this, having grown up in a sheltered environment.\n         But I'm really, truly grateful for this. I'll do my best, I swear.",new Map([[r.PositiveEmotion.Gratitude,.8],[r.PositiveEmotion.Respect,.25],[r.PositiveEmotion.Trust,.1]])),(0,l.addTimeSkipEvent)(s.NpcID.Verna,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Her classes for the kids are actually pretty decent, and God knows this\n         is something Iona needed for proper growth.",new Map([[r.PositiveEmotion.Gratitude,.45],[r.PositiveEmotion.Respect,.25]])),(0,l.addTimeSkipEvent)(s.NpcID.Cecelia,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Damn it. It hurts watching her try so hard, and yet I can't reciprocate...\n         But I can't! I just can't... I've got barely a year to live, the fuck \n         am I studying for anyway?<br/>\n         Just leave me alone. Don't look at me. Don't expect things of me.<br/>\n         Please...<br/>\n         But of course you won't. And I suppose this classroom does have its \n         cool moments. Sigh... it does help to take my mind of ig...",new Map([[r.PositiveEmotion.Gratitude,.6],[r.PositiveEmotion.Affection,-.1]])),(0,l.addTimeSkipEvent)(s.NpcID.Sasha,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Another physics lesson??? Oh, we're going to the beach today?",new Map([[r.PositiveEmotion.Respect,.3],[r.PositiveEmotion.Affection,-.05]])),(0,l.addInteractionEvent)(s.NpcID.Roberta,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,27,20,30),"You mean you grew all the herbs I'd mentioned in a secret grove to \n        which I'll have privileged access too?! Cool!<br/>\n        Also, this means I won't have to keep beggin Bjorn always to remember to\n        get those herbs for me, and won't have to depend on his whims? Woohooo!!\n        (Wonder where he's disappeared off to anyway...)",new Map([[r.PositiveEmotion.Gratitude,8],[r.PositiveEmotion.Respect,3]])),(0,l.addTimeSkipEvent)(s.NpcID.Verna,[n.PcIndex.ID_HELIOS],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"",new Map([[r.PositiveEmotion.Respect,.2]])),(0,l.addTimeSkipEvent)(s.NpcID.Jaye,[n.PcIndex.ID_HELIOS],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Ah it seems I got myself a routine customer (even if they don't pay). \n        Strange tho, never would've guessed him as a seafood lover...",new Map([[r.PositiveEmotion.Respect,.1],[r.PositiveEmotion.Gratitude,.2]])),(0,l.addTimeSkipEvent)(s.NpcID.Athlon,[n.PcIndex.ID_HELIOS],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(17),"",new Map),(0,l.addInteractionEvent)(s.NpcID.Athlon,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,17,9,30),"Negated the drink and forced me to face a world I can't bear to face.",new Map([[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Affection,-3]]),10,new Set([r.PositiveEmotion.Affection])),(0,l.addTimeSkipEvent)(s.NpcID.Athlon,[n.PcIndex.ID_HELIOS],o.GameTimestamp.fromDays(18),o.GameTimestamp.fromDays(27),"",new Map),(0,l.addTimeSkipEvent)(s.NpcID.Dusk,[n.PcIndex.ID_CYRION],o.GameTimestamp.fromDays(2),o.GameTimestamp.fromDays(27),"",new Map),(0,l.addTimeSkipEvent)(s.NpcID.Dawn,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"",new Map([[r.PositiveEmotion.Trust,.2]])),(0,l.addTimeSkipEvent)(s.NpcID.Erica,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"",new Map([[r.PositiveEmotion.Trust,.4],[r.PositiveEmotion.Gratitude,.3]]));for(const[t,a]of e.entries())(0,l.addTimeSkipEvent)(t,a,o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"",new Map)}},1622:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents11=void 0;const n=a(8706),i=a(4492),s=a(3998),o=a(4982),r=a(5990),l=a(6797);t.sessionOpinionEvents11=function(){(0,l.addInteractionEvent)(s.NpcID.Jaye,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,27,21,0),"You know boss, you got one hell of a silver tongue. Ok, I'm convinced, but you owe me <em>big</em> time now.",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Trust,-1],[r.PositiveEmotion.Gratitude,-1]]));const e=new Map([[s.NpcID.Andri,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Athlon,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Cecelia,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,-1],[r.PositiveEmotion.Trust,1],[r.PositiveEmotion.Affection,-1]])],[s.NpcID.Coroto,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Elysium,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,3]])],[s.NpcID.Erica,new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Genefe,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Hav,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Hina,new Map([[r.PositiveEmotion.Respect,0],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,3]])],[s.NpcID.Ingrid,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Iona,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Jordi,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Kastor,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,-4],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Petra,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Roberta,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Sasha,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,1]])],[s.NpcID.Sybilla,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Tomasa,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Verna,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Vitacia,new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,4],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Yuki,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,0],[r.PositiveEmotion.Trust,2]])],[s.NpcID.Ezell,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,3]])],[s.NpcID.Irene,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,2]])]]),t=new o.GameTimestamp(0,28,11,0);for(const[a,i]of e.entries())(0,l.addInteractionEvent)(a,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION],t,"<em>(On Dawn explaining the entire situation and the combat.)</em>",i);(0,l.addInteractionEvent)(s.NpcID.Jaye,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION],t,"Well, despite everything, I gotta say - didn't experience this adrenaline in a long time, Boss(es?). You fight like real polar bears. Also, I daresay I'll get more customers now. Right, gotta get back to the chopping board!<br/>",new Map([[r.PositiveEmotion.Respect,8],[r.PositiveEmotion.Gratitude,9],[r.PositiveEmotion.Trust,6]])),(0,l.addInteractionEvent)(s.NpcID.Dawn,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION],t,"I suppose... it is over? 400 years. But I don't want to -",new Map([[r.PositiveEmotion.Gratitude,-3],[r.PositiveEmotion.Affection,-2]]),i.Character.get(s.NpcID.Dawn).passiveDeception-5),(0,l.addInteractionEvent)(s.NpcID.Verna,[n.PcIndex.ID_HELIOS],t,"So that's what the sparring was about. (Sad smile) Pricks just a bit...",new Map([[r.PositiveEmotion.Gratitude,-1]]),i.Character.get(s.NpcID.Verna).passiveDeception,new Set([r.PositiveEmotion.Gratitude])),(0,l.addInteractionEvent)(s.NpcID.Dusk,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,28,9,0),"Oh? He's hot.<br/><p style='font-size: 11px'>And could be called cool too, now that I think of it... hmm, Sun and wind...<br/>And just like that, an artist, slumbering for way too long, gets inspiration again. And going all in? in that state? Huh, coming from a champion of Ruin, that's... dangerous.<br/>Logically, I should draw the sword, but whimsy compels me to the brush instead.</p>",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,7]])),(0,l.addInteractionEvent)(s.NpcID.Dusk,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,28,9,0),"Stands back, out of the limelight. But without him, Mr. Shash would've been dead two times over. Boring as a primary subject, but the reliability makes the backdrop oh so much better...",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,3]]))}},7482:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents02=void 0;const n=a(8706),i=a(3998),s=a(4982),o=a(5990),r=a(6797);t.sessionOpinionEvents02=function(){(0,r.addInteractionEvent)(i.NpcID.Dusk,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,1,12,0),"Why are Champions of Ruin here? I do not remember doing anything to provoke him. Anyway...",new Map([[o.PositiveEmotion.Trust,-1]]),10,new Set([o.PositiveEmotion.Trust])),(0,r.addInteractionEvent)(i.NpcID.Dusk,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,1,13,0),"So these guys being here is probably not related to me too..",new Map([[o.PositiveEmotion.Trust,1]]),10);for(const e of[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA])(0,r.addInteractionEvent)(i.NpcID.Dawn,[e],new s.GameTimestamp(0,5,9,0),"A polite bunch it seems.",new Map([[o.PositiveEmotion.Respect,1]])),(0,r.addInteractionEvent)(i.NpcID.Tomasa,[e],new s.GameTimestamp(0,5,9,0),"Liked the soup I made.",new Map([[o.PositiveEmotion.Gratitude,1]]));(0,r.addInteractionEvent)(i.NpcID.Hina,[n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,5,10,0),"Cooler than I expected aasimar/paladins to be.",new Map([[o.PositiveEmotion.Respect,2]])),(0,r.addInteractionEvent)(i.NpcID.Cecelia,[n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,5,10,30),"A friend of my brother. Seems to be as noble and kind as I'd expect.",new Map([[o.PositiveEmotion.Respect,4],[o.PositiveEmotion.Trust,4]]))}},5146:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents03=void 0;const n=a(8706),i=a(3998),s=a(4982),o=a(5990),r=a(6797);t.sessionOpinionEvents03=function(){(0,r.addInteractionEvent)(i.NpcID.Cecelia,[n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,5,11,0),"Bearer of an awful truth about Mostima/Andoain.",new Map([[o.PositiveEmotion.Affection,-2],[o.PositiveEmotion.Trust,1],[o.PositiveEmotion.Gratitude,2]])),(0,r.addInteractionEvent)(i.NpcID.Cecelia,[n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,5,11,15),"Seemed concerned about my state.",new Map([[o.PositiveEmotion.Gratitude,1]])),(0,r.addInteractionEvent)(i.NpcID.Cecelia,[n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,5,11,30),"Seemed interested in helping out Andoain and myself.",new Map([[o.PositiveEmotion.Gratitude,1],[o.PositiveEmotion.Respect,1],[o.PositiveEmotion.Trust,1]])),(0,r.addInteractionEvent)(i.NpcID.Cecelia,[n.PcIndex.ID_AURELIA],new s.GameTimestamp(0,5,12,0),"Took an interest in my health and offered words of comfort.",new Map([[o.PositiveEmotion.Gratitude,2]])),(0,r.addInteractionEvent)(i.NpcID.Genefe,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,11,45),"Prying into how I look after these kids, like I were guilty of something.",new Map([[o.PositiveEmotion.Respect,-1],[o.PositiveEmotion.Trust,-1]]),17),(0,r.addInteractionEvent)(i.NpcID.Sasha,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,11,45),"Thinks I'm mentally unstable.",new Map([[o.PositiveEmotion.Respect,-1],[o.PositiveEmotion.Trust,-1]])),(0,r.addInteractionEvent)(i.NpcID.Genefe,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,12,0),"Acknowledges how hard I work for these kids.",new Map([[o.PositiveEmotion.Trust,2],[o.PositiveEmotion.Respect,2],[o.PositiveEmotion.Gratitude,2]])),(0,r.addInteractionEvent)(i.NpcID.Sasha,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,12,0),"Praising that hag.",new Map([[o.PositiveEmotion.Respect,-1]])),(0,r.addInteractionEvent)(i.NpcID.Cecelia,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,12,30),"Hehe, puked in his first flight despite being healthy.",new Map([[o.PositiveEmotion.Gratitude,1],[o.PositiveEmotion.Respect,-2]])),(0,r.addInteractionEvent)(i.NpcID.Erica,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA],new s.GameTimestamp(0,5,13,30),"Seem like a well-mannered bunch. Asked for permission to enter our garden instead of jumping over the bush.",new Map([[o.PositiveEmotion.Respect,2],[o.PositiveEmotion.Trust,1]]))}},6379:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents04=void 0;const n=a(8706),i=a(4492),s=a(3998),o=a(4982),r=a(5990),l=a(6797);t.sessionOpinionEvents04=function(){(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,5,13,30),"Didn't seem to hold respect for my position.",new Map([[r.PositiveEmotion.Respect,-2]])),(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,0),"Acknowledged my honor for the fatherland.",new Map([[r.PositiveEmotion.Respect,1],[r.PositiveEmotion.Gratitude,2]])),(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,0),"Comes from a weak country and a feminine race.",new Map([[r.PositiveEmotion.Respect,-2],[r.PositiveEmotion.Trust,-1]])),(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,0),"Appears to have respect for our fatherland.",new Map([[r.PositiveEmotion.Gratitude,1]])),(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,0),"Comes from a powerful country and a noble race.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,0),"Was worried about our safety.",new Map([[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,2]])),(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,0),"Promised with honor to defend us should the need arise.",new Map([[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Respect,2]])),(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,30),"Was gallivanting with my wife.",new Map([[r.PositiveEmotion.Respect,-1],[r.PositiveEmotion.Trust,-1],[r.PositiveEmotion.Gratitude,-1]]),i.Character.get(s.NpcID.Coroto).passiveDeception+5),(0,l.addInteractionEvent)(s.NpcID.Erica,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,25),"Reminded me of happier times in my father's estate and Ivangrad.",new Map([[r.PositiveEmotion.Gratitude,2]])),(0,l.addInteractionEvent)(s.NpcID.Erica,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,25),"Were polite to me when when, in my failing memory, I couldn't help them much",new Map([[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(s.NpcID.Erica,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,30),"Their coming here will shake things up.",new Map([[r.PositiveEmotion.Trust,-2]]),i.Character.get(s.NpcID.Erica).passiveDeception+5),(0,l.addInteractionEvent)(s.NpcID.Coroto,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,30),"Their coming here can cause much trouble.",new Map([[r.PositiveEmotion.Trust,-2]]),i.Character.get(s.NpcID.Coroto).passiveDeception+5),(0,l.addInteractionEvent)(s.NpcID.Jordi,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,15,30),"As a first impression, they seem to be kind and humble people.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(s.NpcID.Jordi,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,15,30),"Gazed at the sea wistfully. Does he too belong there?",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(s.NpcID.Jordi,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,15,45),"Was concerned about the disaster that struck our land and my harsh experience in it.",new Map([[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(s.NpcID.Jordi,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,15,45),"Was curious about the spearhead stone and of my uncle's travels.",new Map([[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(s.NpcID.Jordi,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,0),"Noted the value of fishing in enriching the local diet.",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(s.NpcID.Petra,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,30),"I'm sure they're all good youths and am happy to have them with us.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,3],[r.PositiveEmotion.Gratitude,3]])),(0,l.addInteractionEvent)(s.NpcID.Petra,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,30),"I'm glad they partook in the meal we made and gave us company.",new Map([[r.PositiveEmotion.Gratitude,3]])),(0,l.addInteractionEvent)(s.NpcID.Petra,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,45),"I'm surprised and happy that they are willing to hear out the story of an old nobody like myself.",new Map([[r.PositiveEmotion.Gratitude,4],[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,2]])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,30),"Starry-dude's not too fond of gaming, it seems.",new Map),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,16,45),"Heh, his holiness would also go down the path of the gaming addict...",new Map([[r.PositiveEmotion.Respect,1],[r.PositiveEmotion.Trust,2]])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,16,45),"Wait, the investiture changed... that intent... hmm...",new Map([[r.PositiveEmotion.Trust,-3],[r.PositiveEmotion.Respect,2]]),i.Character.get(s.NpcID.Hina).passiveDeception,new Set([r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,16,45),"He actually beat the boss, guy's got a bright future. (even if...)",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,45),"Starry-dude speaks fondly to gran.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,1],[r.PositiveEmotion.Gratitude,3]])),(0,l.addInteractionEvent)(s.NpcID.Petra,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,16,45),"He's having fun with Hina.",new Map([[r.PositiveEmotion.Gratitude,1]]))}},9995:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combatMemories=t.sessionOpinionEvents05=void 0;const n=a(190),i=a(8706),s=a(4492),o=a(3998),r=a(4982),l=a(5990),d=a(6797);function c(e,t){const a=[o.NpcID.Elysium,o.NpcID.Bjorn,o.NpcID.Hav,o.NpcID.Sasha,o.NpcID.Cecelia,o.NpcID.Irene,o.NpcID.Dusk,o.NpcID.Dawn,o.NpcID.Hina,o.NpcID.Ezell],r=[o.NpcID.Elysium,o.NpcID.Bjorn,o.NpcID.Hav,o.NpcID.Sasha,o.NpcID.Cecelia,o.NpcID.Irene,o.NpcID.Dusk,o.NpcID.Dawn,o.NpcID.Hina,o.NpcID.Ezell],c=[o.NpcID.Elysium,o.NpcID.Bjorn,o.NpcID.Hav,o.NpcID.Sasha,o.NpcID.Cecelia,o.NpcID.Irene,o.NpcID.Dusk,o.NpcID.Dawn,o.NpcID.Hina,o.NpcID.Ezell];if(!e){(0,d.addInteractionEvent)(o.NpcID.Yuki,[i.PcIndex.ID_HELIOS],t,"He shines so bright... ugh, it burns. Also the way <em>that man</em> looks at me - cringe.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,-4],[l.PositiveEmotion.Respect,4]]),s.Character.get(o.NpcID.Yuki).passiveDeception),a.push(o.NpcID.Yuki),(0,d.addInteractionEvent)(o.NpcID.Iona,[i.PcIndex.ID_HELIOS],t,"Saved me!! Gods below, I didn't see that coming... Rusts, that thing would've... would've...",new Map([[l.PositiveEmotion.Trust,4],[l.PositiveEmotion.Gratitude,4],[l.PositiveEmotion.Respect,2]]),s.Character.get(o.NpcID.Iona).passiveDeception-5),a.push(o.NpcID.Iona),(0,d.addInteractionEvent)(o.NpcID.Cecelia,[i.PcIndex.ID_HELIOS],t,"Chosen by a Ryshadium! A ryshadium who came to our aid during this fearsome storm with all the demons that emerged from it.",new Map([[l.PositiveEmotion.Trust,2],[l.PositiveEmotion.Gratitude,4],[l.PositiveEmotion.Respect,5]])),(0,d.addInteractionEvent)(o.NpcID.Sasha,[i.PcIndex.ID_HELIOS],t,"Sent his mount to protect Cecilia and me.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,5],[l.PositiveEmotion.Respect,3]])),(0,d.addInteractionEvent)(o.NpcID.Kastor,[i.PcIndex.ID_HELIOS],t,"The way he was so completely in command... I wish that was me instead.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,-2],[l.PositiveEmotion.Respect,4]]),10,new Set([l.PositiveEmotion.Gratitude])),(0,d.addInteractionEvent)(o.NpcID.Kastor,[i.PcIndex.ID_HELIOS],t,"Did he not consider me worthy of assisting him in combat? And he considered <em>Yuki</em> worthy enough instead? Heh, and the coward didn't even pick up the weapon.",new Map([[l.PositiveEmotion.Trust,-1],[l.PositiveEmotion.Gratitude,-2],[l.PositiveEmotion.Respect,-1]]),10,new Set([l.PositiveEmotion.Gratitude])),a.push(o.NpcID.Kastor),(0,d.addInteractionEvent)(o.NpcID.Jaye,[i.PcIndex.ID_HELIOS],t,"Now, why did he throw the spear towards me?",new Map([])),(0,d.addInteractionEvent)(o.NpcID.Verna,[i.PcIndex.ID_HELIOS],t,"Was more comfortable when the attack started compared to the dinner. It's been so long since I met someone like that. And in handing me the javelin, he also immediately noted me as a warrior. That... regrettably... makes me proud.",new Map([[l.PositiveEmotion.Trust,3],[l.PositiveEmotion.Gratitude,1],[l.PositiveEmotion.Respect,7]])),(0,d.addInteractionEvent)(o.NpcID.Verna,[i.PcIndex.ID_HELIOS],t,"Saved Iona in the nick of time from that monster.",new Map([[l.PositiveEmotion.Gratitude,7]])),a.push(o.NpcID.Verna),(0,d.addInteractionEvent)(o.NpcID.Coroto,[i.PcIndex.ID_HELIOS],t,"Just as he warned, <em>the monsters from the north</em> came. How did he know? But he stood up for us, nobly and bravely like I'd expect. Did the Tsar send him? If so, for what purpose?",new Map([[l.PositiveEmotion.Trust,-2],[l.PositiveEmotion.Gratitude,2],[l.PositiveEmotion.Respect,4]]),10,new Set([l.PositiveEmotion.Trust])),a.push(o.NpcID.Coroto),(0,d.addInteractionEvent)(o.NpcID.Coroto,[i.PcIndex.ID_CYRION],t,"Was in good command of the powers of nature as he covered our escape. Well, would suck if a druid from that weak nation couldn't even do that. But... I suppose there is a reason why the other strong folk keep him around...",new Map([[l.PositiveEmotion.Trust,4],[l.PositiveEmotion.Gratitude,-1],[l.PositiveEmotion.Respect,4]]),10,new Set([l.PositiveEmotion.Gratitude])),r.push(o.NpcID.Coroto),(0,d.addInteractionEvent)(o.NpcID.Jordi,[i.PcIndex.ID_CYRION],t,"Amazing! I was considering him to be like myself, but there's no way I could stand against such odds and protect such a large group at the same time.",new Map([[l.PositiveEmotion.Trust,4],[l.PositiveEmotion.Gratitude,2],[l.PositiveEmotion.Respect,5]])),r.push(o.NpcID.Jordi),(0,d.addInteractionEvent)(o.NpcID.Yuki,[i.PcIndex.ID_CYRION],t,"Well, ig he doesn't want us dead at least. Too easy to feign weakness in this crisis and let the monsters do the rest.",new Map([[l.PositiveEmotion.Trust,3]])),r.push(o.NpcID.Jordi),(0,d.addInteractionEvent)(o.NpcID.Erica,[i.PcIndex.ID_AURELIA],t,"I suspected she was a powerful spellcaster, but damn, I don't think I, as an Ursine noble, met more than a handful of mages who could conjure fireballs! And with such frequency! Father would be so proud to meet her... but why would she care about someone like me?",new Map([[l.PositiveEmotion.Respect,5],[l.PositiveEmotion.Gratitude,3]])),c.push(o.NpcID.Erica);for(const e of(0,n.getEnumIterator)(o.NpcID)){const n=s.Character.get(e);n&&n.isOpinionated&&(a.includes(e)||(0,d.addInteractionEvent)(e,[i.PcIndex.ID_HELIOS],t,"Was completely in control during the fearsome blizzard and took charge when the monsters arrived.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,1],[l.PositiveEmotion.Respect,4]])),r.includes(e)||(0,d.addInteractionEvent)(e,[i.PcIndex.ID_CYRION],t,"Organized our retreat while stalling the monsters nearby.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,4],[l.PositiveEmotion.Respect,1]])),c.includes(e)||(0,d.addInteractionEvent)(e,[i.PcIndex.ID_AURELIA],t,"Stood tall in the fearsome blizzard and granted us cover from the aerial roof.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,4],[l.PositiveEmotion.Respect,1]])))}}}t.sessionOpinionEvents05=function(){(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_HELIOS,i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,17,30),"It seems they're wreaking havoc on the paintbrushes.",new Map([[l.PositiveEmotion.Affection,1]]));for(const e of[o.NpcID.Dawn,o.NpcID.Tomasa])(0,d.addInteractionEvent)(e,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,17,30),"Oh, poor guy, apologizing for his friends. They must've got him into trouble so many times...",new Map([[l.PositiveEmotion.Respect,1]]));(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,17,35),"Got assaulted by my innocent canvas. So cute.",new Map([[l.PositiveEmotion.Affection,2]])),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,17,35),"Has a good imagination and a poetic painting in mind.",new Map([[l.PositiveEmotion.Respect,2]])),(0,d.addTimeSkipEvent)(o.NpcID.Dusk,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_HELIOS],r.GameTimestamp.fromDays(2),r.GameTimestamp.fromDays(5),"",new Map),(0,d.addInteractionEvent)(o.NpcID.Dusk,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,40),"Go ahead. Your intent did rouse me before. Now humour me ...",new Map([[l.PositiveEmotion.Respect,1]]),10),(0,d.addInteractionEvent)(o.NpcID.Dusk,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,17,40),"Know your place. It is not you the canvas beckons.",new Map([[l.PositiveEmotion.Respect,-1]]),10,new Set([l.PositiveEmotion.Respect])),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,35),"Ms. Dusk Herself chose to give him a chance. And requested that he paint for Her.",new Map([[l.PositiveEmotion.Respect,5],[l.PositiveEmotion.Trust,2]]),s.Character.get(o.NpcID.Dawn).passiveDeception),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,40),"The painting comes out rather nice. He is clearly not a painter by profession. Yet his spirit longs to express itself. Was that why he was chosen?",new Map([[l.PositiveEmotion.Trust,1]])),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,17,40),"Helped stabilize his friend's hand by guiding it with the powers of nature.",new Map([[l.PositiveEmotion.Respect,2],[l.PositiveEmotion.Gratitude,1]])),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,45),"The painting turned out so... inspired. <em>Honor holding back the Wrath of Devotion.</em> Beautiful. And... it seems She agrees.",new Map([[l.PositiveEmotion.Respect,7],[l.PositiveEmotion.Trust,4]])),(0,d.addInteractionEvent)(o.NpcID.Dusk,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,45),"I am humoured. Nothing holds interest forever, but this work does merit a moment of contemplation.",new Map([[l.PositiveEmotion.Respect,3],[l.PositiveEmotion.Gratitude,4]]),10),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,17,50),"<span style='font-size: 10px;'>I'm not the person they seem to think me to be.</span> <span style='font-size: 9px;'>I cannot give an answer to their problems, or even some of their questions.I'm feeling a bit...  </span> <span style='font-size: 8px;'>overwhelmed... particularly when they ask me what I was before. </span> <span style='font-size: 7px;'> It isn't...</span> Thanks for letting me get back.",new Map([[l.PositiveEmotion.Respect,1],[l.PositiveEmotion.Gratitude,4]]),s.Character.get(o.NpcID.Dawn).passiveDeception);for(const e of[o.NpcID.Dawn,o.NpcID.Tomasa])(0,d.addInteractionEvent)(e,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_HELIOS,i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,0),"They helped us out with cooking for the community dinner. They weren't quite particularly skilled, but that makes it good to see that they didn't consider good, honest labour like cooking beneath them.",new Map([[l.PositiveEmotion.Respect,1],[l.PositiveEmotion.Gratitude,1],[l.PositiveEmotion.Trust,1]]));(0,d.addInteractionEvent)(o.NpcID.Erica,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,19,25),"Seemed to be interested in books and literature in all forms.",new Map([[l.PositiveEmotion.Respect,1]])),(0,d.addInteractionEvent)(o.NpcID.Erica,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,19,30),"Nudged me to write. Was being genuine when she mentioned she would love to read something I came up with.",new Map([[l.PositiveEmotion.Gratitude,7],[l.PositiveEmotion.Respect,3],[l.PositiveEmotion.Trust,4]])),(0,d.addInteractionEvent)(o.NpcID.Dusk,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,19,30),"<em style='font-size: 11px'>(Musing) Books belong to the same world as works of art. Like paintings, the ones worth mentioning all have a unique strength of character, form, and carry decent meaning. None of that can ever come out of the shallow of heart. By no means shallow, Erica might just break the mould.</em><br/>For encouraging her, you, Aurelia, have my respect.",new Map([[l.PositiveEmotion.Respect,9]])),(0,d.addInteractionEvent)(o.NpcID.Coroto,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,19,30),"What's her game here? Why's this strange elf woman encouraging my wife so? Just another fan of literature? Or is there some ulterior motive I'm missing...",new Map([[l.PositiveEmotion.Trust,-2],[l.PositiveEmotion.Respect,1]]),s.Character.get(o.NpcID.Coroto).passiveDeception-5,new Set([l.PositiveEmotion.Trust])),(0,d.addInteractionEvent)(o.NpcID.Jordi,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,30),"Seemed to be even more interested in my tales from the seas.",new Map([[l.PositiveEmotion.Gratitude,1]])),(0,d.addInteractionEvent)(o.NpcID.Yuki,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,30),"Why's he suddenly so interested in Hav? This druid's clearly not a seafarer. In fact, I won't be surprised to know he's never sailed before. Jordi's too naive for his own good, but this seems a touch too blatant. I'll have to keep an eye out...",new Map([[l.PositiveEmotion.Trust,-3]]),s.Character.get(o.NpcID.Yuki).passiveDeception,new Set([l.PositiveEmotion.Trust])),(0,d.addInteractionEvent)(o.NpcID.Kastor,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,30),"Ugh.. the way he socializes with those two losers. It's nauseating... Just look at Jordi blabbering and that emo acting all cool like he doesn't care...",new Map([[l.PositiveEmotion.Respect,-2]])),(0,d.addInteractionEvent)(o.NpcID.Petra,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,30),"It's good to see how the kid can bring Jordi out of his shell again. He's been brooding a lot lately...",new Map([[l.PositiveEmotion.Respect,2]]));const e=new r.GameTimestamp(0,5,19,45);(0,d.addInteractionEvent)(o.NpcID.Hina,[i.PcIndex.ID_HELIOS],e,"Kept his cutlery back slowly and primly before standing and drawing his weapon. Touché. Yep, dude's definitely a seasoned warrior...<br/>and a killer through-and-through.",new Map([[l.PositiveEmotion.Trust,-2],[l.PositiveEmotion.Respect,5]]),10,new Set([l.PositiveEmotion.Trust])),(0,d.addInteractionEvent)(o.NpcID.Hina,[i.PcIndex.ID_CYRION],e,"The others didn't seem to notice, but was a large part responsible for us not getting ambushed right outside the door. Doesn't seem addicted to violence.",new Map([[l.PositiveEmotion.Gratitude,2],[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Respect,3]])),(0,d.addInteractionEvent)(o.NpcID.Hina,[i.PcIndex.ID_AURELIA],e,"Hmm... a spellcaster... they're typically the first to be targeted, and for good reason. Fights are always safer with their throats slit... <span style='font-size: 11px;'>of course, that's not possible with the really dangerous ones...</span><br/><i>Damn, those fireballs are cool.</i>",new Map([[l.PositiveEmotion.Respect,4]])),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_HELIOS],e,"Acted as a beacon of hope and helped keep the villagers calm when <em>they</em> came...",new Map([[l.PositiveEmotion.Gratitude,3],[l.PositiveEmotion.Trust,1]])),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_CYRION],e,"Helped in organizing the villagers and keeping the inklings at bay as he led us to Mr. Elysium's.",new Map([[l.PositiveEmotion.Gratitude,3],[l.PositiveEmotion.Respect,1]])),(0,d.addInteractionEvent)(o.NpcID.Dawn,[i.PcIndex.ID_AURELIA],e,"Fireball after fireball. Teleporting roof-to-roof in the shadows. All for these poor inklings. Hehe, aren't we dramatic?",new Map([[l.PositiveEmotion.Respect,2]])),c(!1,e)},t.combatMemories=c},8792:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents06=void 0;const n=a(8706),i=a(4492),s=a(3998),o=a(4982),r=a(5990),l=a(6797);t.sessionOpinionEvents06=function(){(0,l.addInteractionEvent)(s.NpcID.Erica,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,6,0),"Huh that was quite a shove. But given how polite they were in asking if they could visit our garden yesterday, I can only assume something has happened...",new Map([])),(0,l.addInteractionEvent)(s.NpcID.Erica,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,6,30),"<span style='font-size: 11px'>The way Aurelia's owl was staring after me, hiding in the bush until I saw it, then flying off - I'm sure of it. Probably one of her spellcasting powers. I hope I'm mistaken, but... sigh, I doubt it. That's how those with power act, and I was a fool to expect otherwise. </span><span style='font-size: 9px'>Even after telling her to leave me alone as clearly as I could, won't take no for an answer. Let alone respect any measure of my privacy, I'm seen as an object and downright forbidden to keep my secrets to myself. Can't live with their own paranoia and would downright descend to <em>spying</em> to find out whatever tf they suspect me of hiding from their highnesses.</span><br/>Wait, the owl being there was probably a coincidence. I hope I'm overthinking stuff.",new Map([[r.PositiveEmotion.Trust,-4],[r.PositiveEmotion.Gratitude,-1],[r.PositiveEmotion.Respect,-3]]),i.Character.get(s.NpcID.Erica).passiveDeception+5),(0,l.addInteractionEvent)(s.NpcID.Dawn,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,7,30),"Channeled his investiture to heal me. God knows I needed that, phew... <em>What the hell just happened?</em>&nbsp; What was this sudden touch of death that almost snuffed all our souls out?",new Map([[r.PositiveEmotion.Gratitude,3]])),(0,l.addInteractionEvent)(s.NpcID.Tomasa,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,7,30),"Healed me, probably saving me from the verge of death... but... what does it matter, now that... why... Taihe...",new Map([[r.PositiveEmotion.Gratitude,2]]))}},2023:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents07=void 0;const n=a(8706),i=a(4492),s=a(3998),o=a(4982),r=a(5990),l=a(6797);t.sessionOpinionEvents07=function(){(0,l.addInteractionEvent)(s.NpcID.Dawn,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,8,0),"Remained business-like in investigating last night even in the face of Taihe's death. But I suppose it's to be expected, they'd have seen death in their profession, but what happened last night was bizarre and deserving of explanation.",new Map),(0,l.addInteractionEvent)(s.NpcID.Dawn,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,30),"So they were around the garden statue, huh. I did suspect they were somehow involved in Taihe's death, given the coincidence. But why would they do that? Must've been an accident, right?",new Map([[r.PositiveEmotion.Trust,-2]]),i.Character.get(s.NpcID.Dawn).passiveDeception,new Set([r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(s.NpcID.Tomasa,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,0),"Tried to examine Taihe's body and analyze what happened.",new Map),(0,l.addInteractionEvent)(s.NpcID.Roberta,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,8,0),"Seems to have some passing knowledge of alchemy.",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(s.NpcID.Vitacia,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,8,15),"Their arrival brought doom!! They killed him. THEY KILLED HIM! I know they did this. They made poor Taihe suffer so much. And now... I must... live the rest of... no, no... I can't. ",new Map([[r.PositiveEmotion.Respect,-1],[r.PositiveEmotion.Trust,-1],[r.PositiveEmotion.Affection,-2]]),10,new Set([r.PositiveEmotion.Respect,r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(s.NpcID.Vitacia,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,15),"His face betrays his crime. The way he avoids my gaze. The weird way his powers work. And the way he seems to know what happened to Taihe's body. He must have done it! I know he did!",new Map([[r.PositiveEmotion.Respect,-3],[r.PositiveEmotion.Trust,-2],[r.PositiveEmotion.Affection,-4]]),10,new Set([r.PositiveEmotion.Respect,r.PositiveEmotion.Trust]));for(const e of[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA])(0,l.addInteractionEvent)(s.NpcID.Vitacia,[e],new o.GameTimestamp(0,6,8,18),"Oh Saints above! What was wrong with me? How did I just blame them with no reasons whatever? My pain absolutely doesn't excuse this unfairness! Yet... they don't seem to hate me for it.",new Map([[r.PositiveEmotion.Respect,e==n.PcIndex.ID_CYRION?6:1],[r.PositiveEmotion.Trust,e==n.PcIndex.ID_CYRION?5:1],[r.PositiveEmotion.Affection,e==n.PcIndex.ID_CYRION?8:2]]),10,new Set([e==n.PcIndex.ID_CYRION?r.PositiveEmotion.Respect:r.PositiveEmotion.Affection,r.PositiveEmotion.Respect,r.PositiveEmotion.Trust]));(0,l.addInteractionEvent)(s.NpcID.Vitacia,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,30),"Even though I don't blame him for Taihe's death anymore, he seems to have begun to hate himself for it. Just great, you've done it now, you terrible, awful person. And even then he tries his best to console me.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,30),"Fell under a powerful wave of guilt. But that clearly was his vulnerable mind. Its signature is that of a false guilt complex. Conscience strong with this guy. Fairly certain he's not the killer.",new Map([[r.PositiveEmotion.Trust,4]]),i.Character.get(s.NpcID.Hina).passiveDeception+5),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,8,30),"Heh, decently suppressed, and I was distracted by the starry guy overreacting... but it's clear. You're the killer, aren't you? That's some fresh guilt quashed in there. You're not absolute scum, but it's too less for - ahem - <em>culpable homicide not amounting to murder</em>...<br/>Anyway, far be it from me to cast the first stone...",new Map([[r.PositiveEmotion.Trust,-3]]),i.Character.get(s.NpcID.Hina).passiveDeception+5),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,8,30),"Hmm, actually mitigated the guilt of his friend to some degree, and didn't feel any of his own. Not now, and very little in the past. Is it because he didn't focus on me enough, because he is a hero? Or is it because he is a psychopath?",new Map([[r.PositiveEmotion.Trust,2],[r.PositiveEmotion.Respect,2]]),i.Character.get(s.NpcID.Hina).passiveDeception+5),(0,l.addInteractionEvent)(s.NpcID.Yuki,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,0),"A soul sheared. A paladin. A druid digging up the pasts of people here. Coincidences? I think not. Poor Taihe, you had no chance did you... I shudder at the last sight those eyes of your saw. The pure horror of inescapable death before they burnt. That bastard!slaughtering a kid like that...",new Map([[r.PositiveEmotion.Affection,-4],[r.PositiveEmotion.Respect,-2]]),i.Character.get(s.NpcID.Yuki).passiveDeception+5),(0,l.addInteractionEvent)(s.NpcID.Erica,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,9,30),"So it was spying after all... sigh. I'd hoped I was wrong. Apologizing after being caught still leaves a bad aftertaste, but at least it makes her a much better person than one who wouldn't. I'm not sure how far I can trust those words, but she did sound genuinely remorseful, and not as arrogant as I feared. Maybe I'll give it another try and see how it goes.",new Map([[r.PositiveEmotion.Trust,2],[r.PositiveEmotion.Respect,4]]),i.Character.get(s.NpcID.Erica).passiveDeception-5,new Set([r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(s.NpcID.Genefe,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,30),"Hey! um... well.. yeah you may hold her wheelchair I suppose.",new Map([[r.PositiveEmotion.Respect,-1]])),(0,l.addInteractionEvent)(s.NpcID.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,30),"Seems to know something is wrong here. Also gave off weird vibes like Hina once did.",new Map([[r.PositiveEmotion.Respect,3]])),(0,l.addInteractionEvent)(s.NpcID.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,30),"Claims he would try to search for a way to save me. I wish I could believe that. Those probably aren't empty words, but I don't think he could succeed, or if there even is a way to. But... if someone's trying... dare I hope? ",new Map([[r.PositiveEmotion.Gratitude,5]])),(0,l.addInteractionEvent)(s.NpcID.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,30),"No, no, no. Don't do that. Don't give me hope. Being alive and powerful like yourself, it's easy to believe everything is possible. But I am already a corpse. Please don't...",new Map([[r.PositiveEmotion.Gratitude,-3]]),i.Character.get(s.NpcID.Cecelia).passiveDeception+5,new Set([r.PositiveEmotion.Affection])),(0,l.addInteractionEvent)(s.NpcID.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,10,30),"It's clear how much mutual trust and joviality lies in their friendship. Ahh... I wish I had someone like that.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,-1]]),i.Character.get(s.NpcID.Cecelia).passiveDeception+5,new Set([r.PositiveEmotion.Gratitude])),(0,l.addInteractionEvent)(s.NpcID.Yuki,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,11,30),"Wait an alias attestable by the brat's father himself? And now that I notice... his oath's clearly not that advanced yet. I was barking up the wrong tree. I don't know how that makes me feel. But I can't help seeing him as a misguided junior. Oh, you poor boy, if only you knew... there's no point. After all, <em>Honor is dead</em>.",new Map([[r.PositiveEmotion.Affection,6],[r.PositiveEmotion.Respect,2]]),i.Character.get(s.NpcID.Yuki).passiveDeception+5,new Set([r.PositiveEmotion.Affection])),(0,l.addInteractionEvent)(s.NpcID.Yuki,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,11,30),"All that said, the way he glows. That radiance is blinding. Maybe... in another reality...",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,-4]]),i.Character.get(s.NpcID.Yuki).passiveDeception),(0,l.addInteractionEvent)(s.NpcID.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,11,30),"Made a superficial attempt to console me, changing to her topics of interest real quick at the slightest word from me. But then she really didn't have a reason to care either.",new Map([[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(s.NpcID.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,11,45),"Took the initiative to teach the kids! I... that's... Thank you! Thank you so much! With this, there may be some future for them yet.",new Map([[r.PositiveEmotion.Respect,7],[r.PositiveEmotion.Gratitude,7],[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,11,30),"Oh you poor boy, here we go. You did nothing wrong.",new Map([[r.PositiveEmotion.Trust,1]]),i.Character.get(s.NpcID.Hina).passiveDeception+5);for(const e of[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA])(0,l.addInteractionEvent)(s.NpcID.Dawn,[e],new o.GameTimestamp(0,6,12,0),"Finally, after all these years... people I could open up to...",new Map([[r.PositiveEmotion.Respect,e==n.PcIndex.ID_HELIOS?8:4],[r.PositiveEmotion.Gratitude,e==n.PcIndex.ID_HELIOS?9:5],[r.PositiveEmotion.Trust,e==n.PcIndex.ID_HELIOS?6:3]]));(0,l.addInteractionEvent)(s.NpcID.Dawn,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,0),"Feels sorry for my state. But if only he knew... just how little I deserve that.",new Map([[r.PositiveEmotion.Gratitude,4],[r.PositiveEmotion.Affection,2]]),i.Character.get(s.NpcID.Dawn).passiveDeception)}},5603:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents08=void 0;const n=a(8706),i=a(4492),s=a(3998),o=a(4982),r=a(5990),l=a(6797);t.sessionOpinionEvents08=function(){(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,15),"Oh, an Honorspren-bound. Well he at least won't massacre us,  but... I'll probably need to keep a vigil for incoming bits of wisdom... sigh.",new Map([[r.PositiveEmotion.Trust,10],[r.PositiveEmotion.Respect,-1]])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,15),"Wait, is that honorspren bound to the both of them? And are two spren bound to Helios? What... sort of an orgy is happening here?",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(s.NpcID.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,15),"Hmm... he's clearly never met another Windrunner, yet it's strange how they all turn out according to prototype. Would easily suffer the pain of death to help secure his friend's freedom.<br/>He'll never betray, huh... Maybe, just maybe... for once... I could rely on - NO!!",new Map([[r.PositiveEmotion.Trust,9],[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Affection,3]]),i.Character.get(s.NpcID.Hina).passiveDeception)}},6797:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sessionOpinionEvents09=t.addTimeSkipEvent=t.addInteractionEvent=void 0;const n=a(8706),i=a(4492),s=a(3998),o=a(4982),r=a(5990);function l(e,t,a,n,s,o=10,r=new Set){const l=i.Character.get(e);l&&l.isOpinionated&&l.opinions.addInteractionEvent(t,a,n,s,o,r)}t.addInteractionEvent=l,t.addTimeSkipEvent=function(e,t,a,n,s,o){const r=i.Character.get(e);r&&r.isOpinionated&&r.opinions.addTimeskipEvent(t,a,n,s,o)},t.sessionOpinionEvents09=function(){l(s.NpcID.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"Ahh, so it was her tinkering that led to Taihe's death... Ms. Dusk says \n        it wasn't deliberate but... Who the fuck asked her to mess with things \n        that she doesn't understand? Are our lives mere-",new Map([[r.PositiveEmotion.Affection,-5],[r.PositiveEmotion.Respect,-2]]),i.Character.get(s.NpcID.Dawn).passiveDeception+5),l(s.NpcID.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"STOP. She didn't know what she was doing, and it's a scholar's duty to \n        be inquisitive. Who am I kidding? This was happening sooner or later \n        anyway... if anything its my fault for not sharing everything with them\n        sooner... In fact my crimes date far back...",new Map([[r.PositiveEmotion.Affection,5]]),i.Character.get(s.NpcID.Dawn).passiveDeception+5,new Set([r.PositiveEmotion.Affection])),l(s.NpcID.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"I see, sent by Ruin, huh. Well, in that case nothing to do but to face\n        the punishment that comes without inconveniencing the others. Sigh, I \n        should be happy that it happened...",new Map([[r.PositiveEmotion.Affection,-1]]),i.Character.get(s.NpcID.Dawn).passiveDeception+5,new Set([r.PositiveEmotion.Affection])),l(s.NpcID.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"Wait, she is coming. Stop thinking. Help her help the villagers, that's\n         all that matters now. If the end is coming, might as well do it right. \n         Now smile.",new Map([[r.PositiveEmotion.Affection,-1]]),i.Character.get(s.NpcID.Dawn).passiveDeception),l(s.NpcID.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"Was concerned about how Ms Dusk treats us. Despite everything, it \n        feels... rather good, to have someone finally voice the apprehensions\n        I've been clamping up for all these ages... Gods I am such a hypocrite.",new Map([[r.PositiveEmotion.Affection,3],[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,1]]),i.Character.get(s.NpcID.Dawn).passiveDeception),l(s.NpcID.Ezell,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,20),"It's always a pleasure to meet a fellow aasimar. From Terra no less, \n        Heh, looks like he was following Andoain all this while with no idea \n        of who he was. And got here by the aid of Mostima herself, though ofc\n        she slipped away. <br/><em>(note to self: must file a report on this)</em>",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,1]])),l(s.NpcID.Ezell,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,20),"Bound to an Honorspren, and the bond is strong enough for her to lead \n        him into the spiritual realm.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,7]])),l(s.NpcID.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,25),"I was hungry. He gave me good food... ... want more...",new Map([[r.PositiveEmotion.Affection,2],[r.PositiveEmotion.Gratitude,5]])),l(s.NpcID.Elysium,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,20),"Windrunner? Good News.",new Map([[r.PositiveEmotion.Trust,5]])),l(s.NpcID.Ezell,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,30),"While their primary concern is probably to escape out of this curse, \n        it does seem like they're trying to help the people here without any \n        ulterior motivations.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,3]])),l(s.NpcID.Elysium,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,30),"While their primary concern is probably to escape out of this curse, \n        it does seem like they're trying to help the people here without any \n        ulterior motivations.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,2]])),l(s.NpcID.Elysium,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,30),"Even though they just got here and are way out of their depths, \n         they're already willing to deep dive into the problems of the \n         multiverse. I must say I like their hunger for lore.",new Map([[r.PositiveEmotion.Respect,2]])),l(s.NpcID.Elysium,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,35),"Not afraid to wade into the myriads of prosaic official journals I \n         keep.",new Map([[r.PositiveEmotion.Respect,4]])),l(s.NpcID.Ezell,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,35),"So they've heard of the Order of St. Lataranus. Oh? As a shady criminal \n        cult? lmao.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Affection,1]]))}},5947:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RollVariant=t.D100=t.D20=t.D12=t.D10=t.D8=t.D6=t.D4=t.D1=t.Dice=void 0;class a{constructor(e){this.sides=e,this.E=(e+1)/2}countHavingE(e,t=0){return Math.sign(e)*Math.ceil(Math.abs(e)/(this.E+t))}roll(e=Math.random){return Math.floor(e()*this.sides)+1}}var n;t.Dice=a,t.D1=new a(1),t.D4=new a(4),t.D6=new a(6),t.D8=new a(8),t.D10=new a(10),t.D12=new a(12),t.D20=new a(20),t.D100=new a(100),(n=t.RollVariant||(t.RollVariant={}))[n.Normal=0]="Normal",n[n.Advantage=1]="Advantage",n[n.Disadvantage=2]="Disadvantage",n[n.SuperAdvantage=3]="SuperAdvantage",n[n.SuperDisadvantage=4]="SuperDisadvantage",n[n.Critical=5]="Critical"},8581:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.DamageRollable=t.NatRollable=t.Rollable=t.RollArgumentError=void 0;const n=a(5947);class i extends Error{constructor(e){super(e)}}t.RollArgumentError=i;class s{constructor(e,t=Math.random){this.rng=t,this.rolls=new Map,this.dice=new Map([...e.entries()].sort(((e,t)=>t[0].sides-e[0].sides)))}roll(e){this.rolls.clear();for(const[e,t]of this.dice.entries())if(0!=t)if(e!=n.D1){this.rolls.set(e,[]);for(let a=0;a<Math.abs(Math.round(t));a++){const a=e.roll(this.rng)*Math.sign(t);this.rolls.get(e).push(a)}}else this.rolls.set(n.D1,[Math.round(t)])}get parts(){return this.rolls}get result(){let e=0;for(const[t,a]of this.rolls)for(const t of a)e+=t;return e}}t.Rollable=s;class o extends s{constructor(e,t=Math.random){super(new Map([[n.D20,3],[n.D1,Math.round(e)]]),t),this.modifier=e,this._parts=new Map,this._mode=n.RollVariant.Normal}static generate(e,t=Math.random){if(t!=Math.random)return new o(e,t);if(this.NAT_ROLLABLE_CACHE.has(e))return console.log("cache hit"),this.NAT_ROLLABLE_CACHE.get(e);const a=new o(e,t);return this.NAT_ROLLABLE_CACHE.set(e,a),a}roll(e=n.RollVariant.Normal){if(e==n.RollVariant.Critical)throw new i("");this._mode=e,super.roll()}get parts(){return 0==this._parts.size?super.parts:this._parts}get result(){const e=super.parts.get(n.D20),t=this.modifier;if(this._parts.clear(),this._mode==n.RollVariant.Normal)return this._parts.set(n.D20,[e[0]]),e[0]+t;if(this._mode==n.RollVariant.Advantage)return this._parts.set(n.D20,[e[0],e[1]]),Math.max(e[0],e[1])+t;if(this._mode==n.RollVariant.Disadvantage)return this._parts.set(n.D20,[e[0],e[1]]),Math.min(e[0],e[1])+t;if(this._mode==n.RollVariant.SuperAdvantage)return this._parts.set(n.D20,e),Math.max(...e)+t;if(this._mode==n.RollVariant.SuperDisadvantage)return this._parts.set(n.D20,e),Math.min(...e)+t;throw new i(`Roll variant ${n.RollVariant[this._mode]} not supported`)}}t.NatRollable=o,o.NAT_ROLLABLE_CACHE=new Map;class r extends s{constructor(e,t=Math.random){const a=new Map,i=new Map;for(const[t,s]of e.entries())t==n.D1?i.set(t,Math.round(s)):i.set(t,2*Math.round(s)),a.set(t,Math.round(s));super(i,t),this._parts=new Map,this.baseDice=a}roll(e=n.RollVariant.Normal){this._mode=e,super.roll()}get parts(){return 0==this._parts.size?super.parts:this._parts}get result(){if(this._parts.clear(),this._mode==n.RollVariant.Normal){let e=0;for(const[t,a]of super.parts)if(t==n.D1)e+=Math.round(a[0]);else{const n=[];for(let t=0;t<a.length/2;t++)e+=a[t],n.push(a[t]);this._parts.set(t,n)}return e}if(this._mode==n.RollVariant.Critical)return super.result;throw new i(`Roll variant ${n.RollVariant[this._mode]} not supported`)}}t.DamageRollable=r,t.test=function(){let e=1;function t(){const t=1e4*Math.sin(e++);return t-Math.floor(t)}const a=new s(new Map([[n.D20,1],[n.D1,5]]),t);a.roll(),console.assert(20==a.result,`Expected: 20, Rolled: ${a.result}`),a.roll(),console.assert(25==a.result,`Expected: 25, Rolled: ${a.result}`);const l=new s(new Map([[n.D100,-1],[n.D12,4],[n.D8,3],[n.D1,-10]]),t);l.roll(),console.assert(27==l.result),l.roll(),console.assert(16==l.result);const d=new s(new Map([[n.D8,4]]));for(let e=0;e<100;e++)d.roll(),console.assert(d.result>=4&&d.result<=32);const c=o.generate(4,t);c.roll(n.RollVariant.SuperAdvantage),console.assert(20==c.result);try{c.roll(n.RollVariant.Critical),console.error("Roll argument error not thrown.")}catch(e){console.assert(e instanceof i,"Roll argument error not thrown.")}const h=new r(new Map([[n.D6,2]]),t);h.roll(n.RollVariant.Critical),console.assert(13==h.result);const p=new r(new Map([[n.D4,4],[n.D1,-10]]),t);p.roll(),console.assert(1==p.result),console.log("Rollable tests performed.")}},7187:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.activateCombatScenarios=void 0,t.activateCombatScenarios=function(){$("#combat").on("click",".combat_picker__item",(function(){$(".combat_picker__item").removeClass("combat_picker__item--selected"),$(this).addClass("combat_picker__item--selected"),$(".combat_scenario").hide(),$(`.combat_scenario[data-combat-id="${$(this).data("pickerId")}"]`).show()}))}},8129:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0,t.Action=class{constructor(e,t){this._activation=e,this._content=t}measureImpact(e){throw new Error("Not implemented.")}get activation(){return this._activation}bindStats(e){}createContent(){return this._content}}},9275:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ActionContext=void 0;const n=a(5480),i=a(2870);t.ActionContext=class{constructor(e){this.stats=e}get pb(){return this.stats.pb.mod()}mod(e){return this.stats.stats.get(e).mod}hit(e,{prof:t=n.ProficiencyLevel.Prof,mod:a=0}){return(0,i.wrapRoll)(this.stats.stats.get(e).mod+this.stats.pb.mod(t)+a)}dc(e,{prof:t=n.ProficiencyLevel.Prof,mod:a=0}){return`DC ${this.stats.stats.get(e).mod+this.stats.pb.mod(t)+a+8}`}}},2870:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.enableRolling=t.wrapActivation=t.wrapCreatureSize=t.wrapSense=t.wrapSpeed=t.wrapRating=t.wrapCSkillValue=t.wrapCSkill=t.wrapDSkill=t.wrapCondition=t.wrapDamageType=t.wrapRoll=t.registerRollable=void 0;const n=a(5947),i=a(8581),s=a(5480),o=a(2656),r=new Map,l=new Map;let d=0;function c(e){if(l.has(e))return l.get(e);const t=d++;return r.set(t,e),l.set(e,t),t}t.registerRollable=c,t.wrapRoll=function(e){let t,a=null;if(e instanceof n.Dice)a=new Map([[e,1]]);else if(Array.isArray(e))if(Array.isArray(e[0])){a=new Map;for(const[t,n]of e)a.set(n,(a.has(n)?a.get(n):0)+t)}else{let t=e;a=new Map([[t[1],t[0]]])}else e instanceof Map&&(a=e);const s=[];if(a){a=new Map([...a.entries()].sort(((e,t)=>t[0].sides-e[0].sides)));for(const[e,t]of a.entries()){if(0==t)continue;const a=t>0?0==s.length?"":"+":"-",n=e.sides>1?`d${e.sides}`:"";s.push(`${a}${Math.abs(Math.round(t))}${n}`)}t=c(new i.DamageRollable(a))}else{if("number"!=typeof e)throw new Error(`Unrecognized type of ${e} (${typeof e}) to wrap roll over`);s.push((e>=0?"+":"")+e),t=c(i.NatRollable.generate(e))}return`<span class="rollable" data-rollable-uid="${t}">${s.join("")}</span>`},t.wrapDamageType=function(e){return e>s.DamageType._NonStandard?`<span class="damage_type__nonstd">${s.DamageType[e]}</span>`:`<span class="damage_type">${s.DamageType[e]}</span>`},t.wrapCondition=function(e){return e>s.Condition._NonStandard?`<span class="condition__nonstd">${s.Condition[e]}</span>`:`<span class="condition">${s.Condition[e]}</span>`},t.wrapDSkill=function(e){return e>s.DSkill._NonStandard?`<span class="d_skill__nonstd">${s.DSkill[e]}</span>`:`<span class="d_skill">${s.DSkill[e]}</span>`},t.wrapCSkill=function(e){return`<span class="c_skill">${s.CSkill[e]}</span>`},t.wrapCSkillValue=function(e){return`<span class="c_skill_value">${e}</span>`},t.wrapRating=function(e){return`<span class="rating">${o.Rating[e]}</span>`},t.wrapSpeed=function(e){return e>s.Speed._NonStandard?`<span class="speed__nonstd">${s.Speed[e]}</span>`:`<span class="speed">${s.Speed[e]}</span>`},t.wrapSense=function(e){return e>s.Sense._NonStandard?`<span class="sense__nonstd">${s.senseStr.get(e)}</span>`:`<span class="sense">${s.senseStr.get(e)}</span>`},t.wrapCreatureSize=function(e){return e>s.CreatureSize._NonStandard?`<span class="creatureSize__nonstd">${s.CreatureSize[e]}</span>`:`<span class="creatureSize">${s.CreatureSize[e]}</span>`},t.wrapActivation=function(e,t=!1){const a=t?"s":"";return e>s.Activation._NonStandard?`<span class="activation__nonstd">${s.Activation[e]}${a}</span>`:`<span class="activation">${s.Activation[e]}${a}</span>`},t.enableRolling=function(){const e=$("#toast-container");$("#beastiary").on("click",".rollable",(function(t){const a=$(this).data("rollableUid"),s=r.get(a);let o=n.RollVariant.Normal;s instanceof i.NatRollable?t.shiftKey?o=t.altKey?n.RollVariant.SuperAdvantage:n.RollVariant.Advantage:t.ctrlKey&&(o=t.altKey?n.RollVariant.SuperDisadvantage:n.RollVariant.Disadvantage):s instanceof i.DamageRollable&&t.altKey&&(o=n.RollVariant.Critical),s.roll(o),console.log(s.result);const l=[];for(const[e,t]of s.parts.entries())if(e!=n.D1)for(const e of t)l.push(e);console.log(l);const d=$(`\n            <div class="toast">\n                <div class="roll_result">${s.result}</div>\n                <div class="roll_buildup">${l.join(", ")}</div>\n            </div>`);d.hide(),d.appendTo(e),d.fadeIn(400),setTimeout((()=>{d.fadeOut(400,(()=>{d.remove()}))}),3e3)}))}},2406:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateAchievementsPanel=void 0;class a{constructor(e,t,a,n){this.title=e,this.desc=t,this.maxExp=a,this.complete=n}generateDOMString(){return`\n        <div class="achievement ${this.complete?"achievement--complete":""}">\n            <div class="achievement__title">${this.title}</div>\n            <div class="achievement__xp">${this.maxExp} xp</div>\n            <div class="achievement__desc">${this.desc}</div>\n            <div class="achievement__status"><i class="fa-solid fa-circle-check"></i></div>\n        </div>`}get curExp(){return this.complete?this.maxExp:0}}class n{constructor(e,t,a,n){this.title=e,this.desc=t,this.baseExp=a,this.done=n,this._curExp=this.done?this.baseExp:0,this.routeDOMs=[]}addRoute(e,t,a,n){if(n){if(!this.done)throw new Error;this._curExp+=a}return this.routeDOMs.push(`<div class="achievement--inner ${n?"achievement--complete":""}">\n                <div class="achievement__title">${e}</div>\n                <div class="achievement__xp">${a} xp</div>\n                <div class="achievement__desc">${t}</div>\n                <div class="achievement__status"><i class="fa-solid fa-circle-check"></i></div>\n            </div>`),this}get curExp(){return this._curExp}generateDOMString(){return`\n        <div class="achievement ${this.done?"achievement--complete":""}">\n            <div class="achievement__title">${this.title}</div>\n            <div class="achievement__xp">${this.baseExp} xp</div>\n            <div class="achievement__desc">${this.desc}</div>\n            <div class="achievement__status"><i class="fa-solid fa-circle-check"></i></div>\n        </div>\n        <div class="achievement_parts">${this.routeDOMs.join("")}</div>`}get maxExp(){throw new Error("Not implemented: Nested achievements are no longer xor")}}const i=new Map([["The Candles",[new a("That's a familiar scent?","Understand the nature of the unusual candles and trace their past.",500,!1),new n("A breath of wind","Defeat the Reimagined after it enters its Poltergeist state.",1e3,!0).addRoute("Melody of Death","Ignite 8 candles to the rhythm of Ruin to destroy the poltergeist.",400,!1).addRoute("Beats of Passion","Ignite 9 candles to the rhythm of Odium to dominate the poltergeist.",450,!1).addRoute("Overtones of Absolute Command","Ignite 10 candles to the rhythm of Honor to deny the poltergeist.",600,!1),new a("Dangerous Experiments","Investigate how the Reimagined came to be.",600,!1)]],["The Shardbearer",[new a("Kneel!","Capture the shardbearer alive.",1200,!1),new n("He who lives by the blade...","Kill the Shardbearer.",800,!0).addRoute("Surgical Precision","While dealing < 200 points of damage.",500,!1).addRoute("Why use a scalpel when you have a sledgehammer?","While dealing > 800 points of damage.",800,!1).addRoute("Unconventional methods","Without using a weapon for the killing blow (acid/lava/quicksand etc.).",1e3,!1).addRoute("Esse ventus","Without any party member suffering a major blow.",1e3,!0).addRoute("Absolute Dominance","Without any party member suffering a major blow and without Hina dying even once.",1600,!1)]],["The clock",[new a("Meeting the deadline","Return from the expedition before Dusk's magic fades away.",1e3,!1),new a("ez","Return from the expedition within 1 day in devotion's time.",1500,!1),new a("No need for suspense","Return from the expedition within 1 hour in devotion's time.",2500,!1),new a("You're not dead yet","???",2500,!1)]],["The sand soldier",[new n("Prudence...","Choose not to stand against the sand soldier.",500,!0).addRoute("Master of the black market","Uncover the name and identity of the sand soldier.",1400,!1).addRoute("A passenger onboard","Have the Sand Soldier join your cause.",800,!1),new n("... is for the weak","Prevent the sand soldier from leaving with the blade.",1e3,!1).addRoute("I can do this all day","Kill the sand soldier after the shardbearer fight but before taking the subsequent rest.",3e3,!1),new a("In a moment's dream","Recruit the sand soldier's sister.",1200,!1)]],["The heist",[new n("Heh, noobs","Do not fall for the illusionary bridge trap.",500,!0).addRoute("Now why are they looking that way?","Cross the lava stream for the first time using the invisible bridge.",800,!0).addRoute("Who needs a bridge anyway","Have the whole party cross the lava stream for the first time without using the invisible bridge.",800,!1),new n("Oh no! Did something happen?","Reach the ground level without being recognized as the thieves of the safe.",600,!0).addRoute("Must be rats","Attract attention at least 3 times but never have the alarm raised.",1e3,!0).addRoute("[Bonus] Out of sight, out of mind","Trapped 4 guards in the bio research room without getting detected.",1600,!0),new a("Pacifist's creed","Do not kill a single resident of the shelter.",1200,!0),new a("It was luxuries like air conditioning","While on the way out, enter the bio research room",800,!0),new n("Unbreakable from the outside","Extract the Amethyst from the wall of force enclosing it.",700,!0).addRoute("Witness to true perfection","Form a bond with the ancient inkspren trapped in the Amethyst before returning to Devotion.",3e3,!1)]],["The exile",[new a("Berserk","Learn of Hina's cyberpunk nature.",700,!0),new a("Unusual attire for a tribesman","Figure out how Ruzaki ended up here.",1300,!1),new a("You've been talking to them too?","Witness Hina's audience with the Shards",1400,!0),new a("Yeah, science!","Enter into and understand how Ruzaki's sulphuric acid manufacturing works.",600,!0),new a("Fire with fire","Learn what the shards wanted from Hina.",1e3,!1),new a("Now I am become death","Investigate Ruzaki's research notes.",1e3,!1),new a("Free as a bird","Sign-up Hina as the village labourer.",500,!0),new a("Deal with the devil","Recruit Ruzaki into the village.",1500,!1),new a("I'm somewhat of a scientist myself","Recruit Teiai into the village.",500,!1)]]]);t.generateAchievementsPanel=function(){const e=[];let t=0;for(const[a,n]of i.entries()){e.push(`<div class="achievement_category">${a}</div>`);for(const a of n)e.push(a.generateDOMString()),t+=a.curExp}return`\n        <div class="achievements">\n            <div class="achievements__header">\n                <div class="terminal_title">Current Quest Achievements</div>\n                <div class="xp_summary"><span class="gained">${t}</span> xp obtained so far</div>\n            </div>\n            \n            <div class="achievements__list">\n                ${e.join("")}            \n            </div>\n        </div>\n    `}},957:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupBaseLogic=t.generateBaseDOM=void 0;const n=a(2406),i=a(6663),s=a(4417);t.generateBaseDOM=function(){return`\n<div class="base_management">\n    <div class="base_management__logs">\n        ${(0,n.generateAchievementsPanel)()}\n    </div> \n    <div class="base_management__rating">\n        <div class="terminal_title">Faction Ratings</div>\n        <div class="ratings_dictionary">\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Recognition</div>\n                <div class="dictionary__row__value">Unknown nobodies</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Honor</div>\n                <div class="dictionary__row__value">5</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Notoriety</div>\n                <div class="dictionary__row__value">0</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Intelligence Level</div>\n                <div class="dictionary__row__value">20</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Internal Security</div>\n                <div class="dictionary__row__value">0</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Offensive capbilities</div>\n                <div class="dictionary__row__value">8</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Defenses</div>\n                <div class="dictionary__row__value">0</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Shardic Investiture</div>\n                <div class="dictionary__row__value">33</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Eldritch Investiture</div>\n                <div class="dictionary__row__value">17</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Technology</div>\n                <div class="dictionary__row__value">15</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Culture</div>\n                <div class="dictionary__row__value">7</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Economy</div>\n                <div class="dictionary__row__value">2</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">Amentities</div>\n                <div class="dictionary__row__value">6</div>\n            </div>\n            <div class="dictionary__row">\n                <div class="dictionary__row__key">General Morale</div>\n                <div class="dictionary__row__value">-25</div>\n            </div>\n        </div>\n    </div> \n    <div class="base_management__buildings">\n        ${(0,i.generateBuildingsPanel)()}\n    </div> \n    <div class="base_management__villagers">\n        ${(0,s.generateOperatorProfileSelection)()}    \n    </div>\n    <div class="base_management__navigation"> \n        <div class="cog_reseq grunge_nav_button">Cognitive ReSequencing</div>    \n        <div class="hide_base grunge_nav_button">Back to map</div>    \n    </div>\n</div>`},t.setupBaseLogic=function(){(0,s.setupBaseOperatorLogic)()}},4417:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupBaseOperatorLogic=t.generateOperatorProfile=t.generateOperatorProfileSelection=t.OperatorProfiles=void 0;const n=a(4492);function i(){const e=[];for(const a of t.OperatorProfiles.keys()){const t=n.Character.get(a);e.push(`\n            <div class="operator_profile" data-operator-id="${a}">\n                <img src="${t.imgPath}" alt="">\n            </div>\n        `)}return`\n    <div class="operator_profiles">\n        <div class="operator_profiles__header">Villager Profiles</div>\n        <div class="operator_profiles__list">\n            ${e.join("")}\n        </div>\n    </div>`}function s(e){return t.OperatorProfiles.has(e)?t.OperatorProfiles.get(e):""}t.OperatorProfiles=new Map,t.generateOperatorProfileSelection=i,t.generateOperatorProfile=s,t.setupBaseOperatorLogic=function(){const e=$("#side_banner");e.on("click",".operator_profile",(function(){const e=$(".base_management__villagers"),t=$(this).data("operatorId");e.empty(),e.append(s(t))})),e.on("click",".operator_screen__back",(function(){const e=$(".base_management__villagers");e.empty(),e.append(i())}))}},6663:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateBuildingsPanel=void 0;const a=[];t.generateBuildingsPanel=function(){const e=[];for(const t of a)e.push(t.generateDOMString());return`\n        <div class="terminal_title">Infrastructure</div>\n        <div class="infrastructure">\n            ${e.join("")}\n        </div>`}},4492:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Character=void 0;const n=a(5480),i=a(5477),s=a(6091),o=a(7673),r=a(3738),l=a(7664),d=a(9785),c=a(1738),h=a(6090),p=a(9815),u=a(1312);class m{constructor(e){this.id=e,m._Index.set(e,this),this._coreAspect=null,this._dStatsAspect=null,this._dSkillsAspect=null,this._cardAspect=null,this._opinionAspect=null,this._combatAspect=null,this._sheetAspect=null,this._cSkillsAspect=null,this._operatorAspect=null}static get(e){return m._Index.get(e)}getSkillMod(e,t=null,a=!1){return this.dSkillsAspect.getSkillMod(e,t,a)}getCardIndex(){return this.cardAspect.getCardIndex()}generatePrimaryToken(){return this.cardAspect.generatePrimaryToken()}createLink(e){return this.cardAspect.createLink(e)}generateCard(e){return this.cardAspect.generateCard(e)}render(){return""}mod(e){return this.dStatsAspect.mod(e)}dc(e){return this._combatAspect.dc(e)}getSkillVal(e){return this.cSkillsAspect.getSkillVal(e)}visibility(e){return this.dStatsAspect.visibility(e)}finalize(){let e;for(e of[this._coreAspect,this._dStatsAspect,this._dSkillsAspect,this._opinionAspect,this._cardAspect,this._combatAspect,this._sheetAspect,this._cSkillsAspect,this._operatorAspect])null!=e&&e.finalize()}generateOperatorDOM(){return this.operatorAspect.generateDOMString()}generateOpinionDOM(){return this.opinionAspect.generateDOMString()}generateOpinionTimelineDOM(e){return this.opinionAspect.generateTimelineDOMString(e)}get upgradedSkills(){return this.dSkillsAspect.upgradedSkills}get ac(){return this._combatAspect.ac}get stats(){return this.dStatsAspect.stats}get pb(){return this.dStatsAspect.pb}get hpDice(){return this.combatAspect.hpDice}get hp(){return this.combatAspect.hp}get speeds(){return this.combatAspect.speeds}get senses(){return this.combatAspect.senses}get saves(){return this.combatAspect.saves}get passivePerception(){return this.combatAspect.passivePerception}get damageRes(){return this.combatAspect.damageRes}get conditionImmunities(){return this.combatAspect.conditionImmunities}get actions(){return this.combatAspect.actions}get actionContentAPI(){return this.dStatsAspect.actionContentAPI}get isOpinionated(){return this.opinionAspect.isOpinionated}get passiveDeception(){return this.opinionAspect.passiveDeception}get name(){return this.coreAspect.name}get imgPath(){return this.coreAspect.imgPath}get cSkillRatings(){return this.cSkillsAspect.cSkillRatings}get core(){return null==this._coreAspect&&(this._coreAspect=new r.CoreAspect(this)),this._coreAspect}get dStats(){return null==this._dStatsAspect&&(this._dStatsAspect=new c.DStatsAspect(this)),this._dStatsAspect}get dSKills(){return null==this._dSkillsAspect&&(this._dSkillsAspect=new d.DSkillsAspect(this)),this._dSkillsAspect}get opinions(){return null==this._opinionAspect&&(this._opinionAspect=new p.OpinionAspect(this)),this._opinionAspect}get card(){return null==this._cardAspect&&(this._cardAspect=new s.CardAspect(this)),this._cardAspect}get combat(){return null==this._combatAspect&&(this._combatAspect=new o.CombatAspect(this)),this._combatAspect}get sheet(){return null==this._sheetAspect&&(this._sheetAspect=new u.SheetAspect(this)),this._sheetAspect}get cSkills(){return null==this._cSkillsAspect&&(this._cSkillsAspect=new l.CSkillsAspect(this)),this._cSkillsAspect}get operator(){return null==this._operatorAspect&&(this._operatorAspect=new h.OperatorAspect(this)),this._operatorAspect}get STR(){return this.mod(n.DStat.Str)}get DEX(){return this.mod(n.DStat.Dex)}get CON(){return this.mod(n.DStat.Con)}get INT(){return this.mod(n.DStat.Int)}get WIS(){return this.mod(n.DStat.Wis)}get CHA(){return this.mod(n.DStat.Cha)}get SemiProf(){return this.pb.mod(n.ProficiencyLevel.Half)}get Prof(){return this.pb.mod(n.ProficiencyLevel.Prof)}get Expertise(){return this.pb.mod(n.ProficiencyLevel.Expert)}get fatigue(){return this.operatorAspect.fatigue}get morale(){return this.operatorAspect.morale}get notableCSkills(){return this.operatorAspect.notableCSkills}get notableDSkills(){return this.operatorAspect.notableDSkills}get notableStuff(){return this.operatorAspect.notableStuff}get ratings(){return this.operatorAspect.ratings}get era(){return this.operator.era}get professions(){return this.operator.professions}get dSkillRatings(){return this.dSkillsAspect.dSkillRatings}get cardAspect(){if(null==this._cardAspect)throw new i.AspectNotSetupException("cardAspect");return this._cardAspect}get opinionAspect(){if(null==this._opinionAspect)throw new i.AspectNotSetupException("opinionAspect");return this._opinionAspect}get dSkillsAspect(){if(null==this._dSkillsAspect)throw new i.AspectNotSetupException("dSkillsAspect");return this._dSkillsAspect}get dStatsAspect(){if(null==this._dStatsAspect)throw new i.AspectNotSetupException("dStatsAspect");return this._dStatsAspect}get coreAspect(){if(null==this._coreAspect)throw new i.AspectNotSetupException("coreAspect");return this._coreAspect}get combatAspect(){if(null==this._combatAspect)throw new i.AspectNotSetupException("combatAspect");return this._combatAspect}get sheetAspect(){if(null==this._sheetAspect)throw new i.AspectNotSetupException("sheetAspect");return this._sheetAspect}get cSkillsAspect(){if(null==this._cSkillsAspect)throw new i.AspectNotSetupException("sheetAspect");return this._cSkillsAspect}get operatorAspect(){if(null==this._operatorAspect)throw new i.AspectNotSetupException("sheetAspect");return this._operatorAspect}}t.Character=m,m._Index=new Map},7922:(e,t)=>{var a,n;Object.defineProperty(t,"__esModule",{value:!0}),t.MoraleFlavorText=t.MoraleEffects=t.Morale=t.NpcMoraleEffects=void 0,function(e){e[e.LatentExhaustion=0]="LatentExhaustion",e[e.ProficiencyBonusModifier=1]="ProficiencyBonusModifier",e[e.InitiativeModifierNAT=2]="InitiativeModifierNAT",e[e.XPGainRatio=3]="XPGainRatio",e[e.SkillModifier=4]="SkillModifier",e[e.CombatRollMod=5]="CombatRollMod"}(a=t.NpcMoraleEffects||(t.NpcMoraleEffects={})),function(e){e[e.Abysmal=0]="Abysmal",e[e.Depressed=1]="Depressed",e[e.Dismal=2]="Dismal",e[e.Low=3]="Low",e[e.Average=4]="Average",e[e.Comfortable=5]="Comfortable",e[e.Optimistic=6]="Optimistic",e[e.Sanguine=7]="Sanguine",e[e.Ecstatic=8]="Ecstatic"}(n=t.Morale||(t.Morale={})),t.MoraleEffects=new Map([[n.Abysmal,new Map([[a.XPGainRatio,.3],[a.LatentExhaustion,2],[a.ProficiencyBonusModifier,-2],[a.InitiativeModifierNAT,-20],[a.SkillModifier,-3],[a.CombatRollMod,-2]])],[n.Depressed,new Map([[a.XPGainRatio,.6],[a.LatentExhaustion,1],[a.ProficiencyBonusModifier,-1],[a.InitiativeModifierNAT,-10],[a.SkillModifier,-2]])],[n.Dismal,new Map([[a.XPGainRatio,.8],[a.ProficiencyBonusModifier,-1],[a.SkillModifier,-1]])],[n.Low,new Map([[a.XPGainRatio,.9],[a.SkillModifier,-1]])],[n.Average,new Map([[a.XPGainRatio,1]])],[n.Comfortable,new Map([[a.XPGainRatio,1.05]])],[n.Optimistic,new Map([[a.XPGainRatio,1.1],[a.SkillModifier,1]])],[n.Sanguine,new Map([[a.XPGainRatio,1.15],[a.SkillModifier,1],[a.ProficiencyBonusModifier,1],[a.LatentExhaustion,-1],[a.InitiativeModifierNAT,2]])],[n.Ecstatic,new Map([[a.XPGainRatio,1.2],[a.SkillModifier,2],[a.ProficiencyBonusModifier,1],[a.LatentExhaustion,-2],[a.CombatRollMod,2],[a.InitiativeModifierNAT,5]])]]),t.MoraleFlavorText=new Map([[n.Abysmal,"<i>Thinking hurts. Existence hurts.</i> You just... can't... bring yourself to move."],[n.Depressed,"The world is black. Just let whatever be, be. You don't care anymore."],[n.Dismal,"So <i>tired</i>. All of it feels just... so... pointless."],[n.Low,"You're just not feeling like it today..."],[n.Average,"Just another usual day."],[n.Comfortable,"There is peace and tranquility, life is good."],[n.Optimistic,"The darkness has melted away. The future looks hopeful and it is easier to focus."],[n.Sanguine,"Your positivity lends a surge of energy. Everything seems possible now."],[n.Ecstatic,"Unstoppable. Unbreakable. You're completely <i>in the zone</i>."]])},9692:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.AspectFactoryFlag=void 0,(a=t.AspectFactoryFlag||(t.AspectFactoryFlag={}))[a.CoreNameSetup=0]="CoreNameSetup",a[a.CoreImgPathSetup=1]="CoreImgPathSetup",a[a.DStatsStatsSetup=2]="DStatsStatsSetup",a[a.DStatsProficiencyDeclared=3]="DStatsProficiencyDeclared",a[a.DStatsProficiencyFinalized=4]="DStatsProficiencyFinalized",a[a.DSkillsSkillsDeclared=5]="DSkillsSkillsDeclared",a[a.DSkillsSkillsFinalized=6]="DSkillsSkillsFinalized",a[a.CSkillsSkillsDeclared=7]="CSkillsSkillsDeclared",a[a.CSkillsSkillsFinalized=8]="CSkillsSkillsFinalized",a[a.CardCampaignSet=9]="CardCampaignSet"},5477:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AspectNotSetupException=void 0;class a extends Error{}t.AspectNotSetupException=a},3206:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseAspect=void 0;const n=a(3998),i=a(9692),s=a(5477),o=a(2448);t.BaseAspect=class{constructor(e){this.character=e,this.flags=new Set}setupSentinel(e){if(this.flags.has(e))throw new o.DuplicateSetupException;this.flags.add(e)}buildSentinel(e,t){if(this.flags.has(t))throw new o.DuplicateSetupException;this.flags.add(e)}ensure(e,t=!0){if(!this.flags.has(e)){if(t)throw new s.AspectNotSetupException;console.warn(`Aspect Factory setup not completed wrt ${i.AspectFactoryFlag[e]} on character ${n.NpcID[this.character.id]}.`)}}finalize(){}get id(){return this.character.id}}},7664:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CSkillsAspect=void 0;const n=a(5480),i=a(2656),s=a(9692),o=a(3206);class r extends o.BaseAspect{constructor(e){super(e),this.c=e,this.skills=new Map}finalizeSkills(){this.setupSentinel(s.AspectFactoryFlag.CSkillsSkillsFinalized)}getSkillVal(e){return this.ensure(s.AspectFactoryFlag.CSkillsSkillsFinalized,!0),this.skills.get(e)}setSkillValue(e,t,a){t!=r.BASE_VALUES.get(e)&&(this.buildSentinel(s.AspectFactoryFlag.CSkillsSkillsDeclared,s.AspectFactoryFlag.CSkillsSkillsFinalized),this.skills.set(e,[t,a]))}get cSkillRatings(){this.ensure(s.AspectFactoryFlag.CSkillsSkillsFinalized,!0);const e=new Map;for(const[t,[a,n]]of this.skills.entries())e.set(t,r.getRatingForSkillModifier(a));return e}setSkillValues(e){this.finalizeSkills();for(const t of e)t[1]!=r.BASE_VALUES.get(t[0])&&this.skills.set(t[0],[t[1],t[2]])}static getRatingForSkillModifier(e){return e<5?i.Rating.F:e<20?i.Rating.E:e<50?i.Rating.D:e<75?i.Rating.C:e<90?i.Rating.B:e<100?i.Rating.A:e<150?i.Rating.S:e<200?i.Rating.SS:i.Rating.SSS}}t.CSkillsAspect=r,r.BASE_VALUES=new Map([[n.CSkill.Accounting,5],[n.CSkill.Anthropology,0],[n.CSkill.Appraise,0],[n.CSkill.Archaeology,0],[n.CSkill.Artillery,0],[n.CSkill.Charm,15],[n.CSkill.ComputerUse,5],[n.CSkill.Demolitions,0],[n.CSkill.Disguise,5],[n.CSkill.Diving,0],[n.CSkill.DriveAuto,20],[n.CSkill.ElectricalRepair,10],[n.CSkill.Electronics,0],[n.CSkill.FirstAid,30],[n.CSkill.Hypnosis,0],[n.CSkill.Law,5],[n.CSkill.LibraryUse,20],[n.CSkill.Locksmith,0],[n.CSkill.MechanicalRepair,10],[n.CSkill.ModernMedicine,0],[n.CSkill.NaturalWorld,10],[n.CSkill.Navigate,10],[n.CSkill.Occult,5],[n.CSkill.OperateHeavyMachinery,0],[n.CSkill.Psychoanalysis,0],[n.CSkill.ReadLips,0],[n.CSkill.Ride,15],[n.CSkill.Throw,20],[n.CSkill.Acting,5],[n.CSkill.Calligraphy,0],[n.CSkill.Carpentry,10],[n.CSkill.Cooking,20],[n.CSkill.Dancing,5],[n.CSkill.FineArt,5],[n.CSkill.Forgery,0],[n.CSkill.Writing,5],[n.CSkill.Singing,5],[n.CSkill.Painting,5],[n.CSkill.Photography,0],[n.CSkill.Sculpting,0],[n.CSkill.Chainsaw,10],[n.CSkill.HeavyWeapons,10],[n.CSkill.Flamethrower,10],[n.CSkill.MachineGun,10],[n.CSkill.SubmachineGun,10],[n.CSkill.Aircraft,0],[n.CSkill.Boat,5],[n.CSkill.Astronomy,0],[n.CSkill.Biology,0],[n.CSkill.Botany,0],[n.CSkill.Chemistry,0],[n.CSkill.Cryptography,0],[n.CSkill.Engineering,0],[n.CSkill.Forensics,0],[n.CSkill.Geology,0],[n.CSkill.Mathematics,10],[n.CSkill.Meteorology,0],[n.CSkill.Pharmacy,0],[n.CSkill.Physics,0],[n.CSkill.Zoology,0]])},6091:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CardAspect=void 0;const n=a(8547),i=a(3998),s=a(9692),o=a(3206);class r extends o.BaseAspect{constructor(e){super(e),this.characterCore=e,this.tags=[],this._summary=()=>"???",this._story=()=>"",this.images=new Map,this.primaryImageName=r.defaultPrimaryImageName,this.images.set(this.primaryImageName,this.characterCore.imgPath)}getCardIndex(){return`[character|${this.id}]`}generateCard(e){let t;if(e||!(this.images.size>1)&&this.images.has(r.defaultPrimaryImageName))t=`<img src="${this.images.get(this.primaryImageName)}" \n                               class="token" \n                               alt="[NULL]">`;else{const e=[],a=[];let n=!0;for(const[t,i]of this.images.entries())e.push(`<img src="${i}" \n                          alt="[NULL]" \n                          class="token"\n                          data-token="${t}" \n                          style=${n?'""':'"display: none;"'}>`),a.push(`<span class="token_selector tag ${n?"tag--selected":""}" \n                           data-token="${t}">${t}</span>`),n=!1;t=`<div class='tokens'>${e.join("")}</div>\n                          <div>${a.join("")}</div>`}const a=this.tags.map((e=>`<span class="tag">${e}</span>`)).join("");return`<div class="character_card"\n                     data-index-key="${this.getCardIndex()}"\n                     >\n                    <div class="token_space">${t}</div>\n                    <div class="content">\n                        <h5  class="name">${this.characterCore.name}</h5>\n                        <div class="tags">${a}</div>\n                        <div class="details">${this._story()}</div>\n                        <div class="summary">${this._summary()}</div>\n                    </div>\n                </div>`}set summary(e){this._summary=e}set story(e){this._story=e}set primaryImageTitle(e){this.images.set(e,this.images.get(r.defaultPrimaryImageName)),this.primaryImageName=e,this.images.delete(r.defaultPrimaryImageName)}addAlternateImage(e,t){this.images.has(e)&&console.warn(`Image override for ${e}`),this.images.set(e,`./assets/images/${t}`)}addCardTag(e){this.tags.push(e)}createLink(e){return`<span class="card_link" \n                      data-index-key="${this.getCardIndex()}">${e||this.characterCore.name}</span>`}generatePrimaryToken(){return`<img src="${this.characterCore.imgPath}" \n                     class="token" \n                     alt="[NULL]" \n                     data-index-key="${this.getCardIndex()}">`}finalize(){this.ensure(s.AspectFactoryFlag.CardCampaignSet),super.finalize(),console.log("Registering card for",i.NpcID[this.id]),$(`#tokens .token_space[data-campaign='${this.campaign}'][data-arc='${this.arc}']`).append($(this.generatePrimaryToken())),n.Card.register(this)}setCampaignArc(e,t){this.setupSentinel(s.AspectFactoryFlag.CardCampaignSet),this.campaign=e,this.arc=t,this.tags.push(`Campaign ${e} <span class='verbose'>Arc ${t}</span>`)}static setupCardLogic(){$(".central_view").on("click",".tag",(function(){$(this).siblings(".tag").removeClass("tag--selected"),$(this).addClass("tag--selected");const e=$(this).data("token"),t=$(this).parent().siblings(".tokens");console.log(t.find(`.token[data-token="${e}"]`)),console.log(e),t.find(".token").hide(),t.find(`.token[data-token="${e}"]`).show()}))}}t.CardAspect=r,r.defaultPrimaryImageName="default"},7673:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CombatAspect=void 0;const n=a(190),i=a(5947),s=a(5480),o=a(3998),r=a(3206);class l extends r.BaseAspect{constructor(e){super(e),this.statsAspect=e,this.skillsAspect=e,this.baseACSources=[],this.acBonuses=[],this.classes=new Map,this._hpDice=new Map,this._bonusHP=0,this._speeds=new Map,this._senses=new Map,this._res=new Map,this._saves=new Map,this._conditionImmunities=new Set,this._actions=[],this.bioHpDice=[]}addBioHpDice(e,t){this.bioHpDice.push([e,t])}dc(e){return 8+this.statsAspect.mod(e)+this.statsAspect.pb.mod()}setMagicalArmor(e){this.baseACSources.push(e+this.statsAspect.mod(s.DStat.Dex))}setLightArmor(e){this.baseACSources.push(e+this.statsAspect.mod(s.DStat.Dex))}setMediumArmor(e){this.baseACSources.push(e+Math.min(2,this.statsAspect.mod(s.DStat.Dex)))}setHeavyArmor(e){this.baseACSources.push(e)}addAcBonus(e){this.acBonuses.push(e)}set bladeSinger(e){this.classes.has(s.AdventurerClass.Wizard)||console.warn("BladeSinger on non wizard:",o.NpcID[this.id]),this.baseACSources.push(this.statsAspect.mod(s.DStat.Dex)+this.statsAspect.mod(s.DStat.Int)+10)}addClassLevels(e,t){e==s.AdventurerClass.Monk?this.baseACSources.push(this.statsAspect.mod(s.DStat.Dex)+this.statsAspect.mod(s.DStat.Wis)+10):e==s.AdventurerClass.Barbarian&&this.baseACSources.push(this.statsAspect.mod(s.DStat.Dex)+this.statsAspect.mod(s.DStat.Con)+10),this.classes.set(e,(this.classes.has(e)?this.classes.get(e):0)+t)}get bonusHP(){return this._bonusHP}set bonusHP(e){this._bonusHP=e}computeHP(){this._hpDice.clear();const e=this.statsAspect.mod(s.DStat.Con);for(const[t,a]of this.classes.entries()){if(a<1)throw new Error("AAAAAAARRRRRRRRRRGH");0==this._hpDice.size?((0,n.updateMap)(this._hpDice,i.D1,s.ClassHitDice.get(t).sides+e),(0,n.updateMap)(this._hpDice,s.ClassHitDice.get(t),a-1)):(0,n.updateMap)(this._hpDice,s.ClassHitDice.get(t),a)}for(const[e,t]of this.bioHpDice)(0,n.updateMap)(this._hpDice,t,e);let t=0;for(const[e,a]of this._hpDice.entries())1!=e.sides&&(t+=a);(0,n.updateMap)(this._hpDice,i.D1,t*e+this._bonusHP),this._hp=0;for(const[e,t]of this._hpDice.entries())this._hp+=t*e.E;this._hp=Math.round(this._hp)}setSave(e,t=s.ProficiencyLevel.Prof,a=0){this._saves.set(e,[t,a])}setSpeed(e,t){this._speeds.set(e,t)}setSense(e,t){this._senses.set(e,t)}setRes(e,t){this._res.set(e,t)}addConditionImmunity(e){this._conditionImmunities.add(e)}addAction(e){this._actions.push(e)}get ac(){let e=10+this.statsAspect.mod(s.DStat.Dex);for(const t of this.baseACSources){if(t<e)return;e=t}let t=e;for(const e of this.acBonuses)t+=e;return t}get stats(){return this.statsAspect.stats}get pb(){return this.statsAspect.pb}get hpDice(){return this._hpDice}get hp(){return this._hp}get speeds(){return this._speeds}get senses(){return this._senses}get saves(){return this._saves}get passivePerception(){return this.skillsAspect.getSkillMod(s.DSkill.Perception)[0]+10}get damageRes(){return this._res}get conditionImmunities(){return this._conditionImmunities}get actions(){return this._actions}}t.CombatAspect=l},3738:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreAspect=void 0;const n=a(9692),i=a(3206);class s extends i.BaseAspect{constructor(e){super(e)}set name(e){this.setupSentinel(n.AspectFactoryFlag.CoreNameSetup),this._name=e}get name(){return this.ensure(n.AspectFactoryFlag.CoreNameSetup),this._name}set imgPath(e){this.setupSentinel(n.AspectFactoryFlag.CoreImgPathSetup),this._imgPath=e}get imgPath(){return this.ensure(n.AspectFactoryFlag.CoreImgPathSetup),`./assets/images/${this._imgPath}`}}t.CoreAspect=s},9785:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DSkillsAspect=void 0;const n=a(5480),i=a(2656),s=a(9692),o=a(3206);class r extends o.BaseAspect{constructor(e){super(e),this.c=e,this.dStats=e,this.skills=new Map}setSkillProficiency(e,t,a=n.ProficiencyLevel.Prof,i=0){this.buildSentinel(s.AspectFactoryFlag.DSkillsSkillsDeclared,s.AspectFactoryFlag.DSkillsSkillsFinalized),this.skills.set(e,[a,i,t])}getSkillMod(e,t=null,a=!1){a||this.ensure(s.AspectFactoryFlag.DSkillsSkillsFinalized,!0);let i,o,r,l=this.dStats.mod(n.StatForSkill.get(e));return this.skills.has(e)?[i,o,r]=this.skills.get(e):this.skills.has(n.DSkill._ALL)?[i,o,r]=this.skills.get(n.DSkill._ALL):[i,o,r]=[n.ProficiencyLevel.None,0,n.Shown],t&&(i=t),[l+this.dStats.pb.mod(i)+o,r]}finalizeSkills(){this.setupSentinel(s.AspectFactoryFlag.DSkillsSkillsFinalized)}get upgradedSkills(){const e=new Map;if(this.skills.has(n.DSkill._ALL)){const[t,a,i]=this.skills.get(n.DSkill._ALL);for(const s of[n.DSkill.Acrobatics,n.DSkill.AnimalHandling,n.DSkill.Arcana,n.DSkill.Athletics,n.DSkill.Deception,n.DSkill.History,n.DSkill.Insight,n.DSkill.Intimidation,n.DSkill.Investigation,n.DSkill.Medicine,n.DSkill.Nature,n.DSkill.Perception,n.DSkill.Performance,n.DSkill.Persuasion,n.DSkill.Religion,n.DSkill.SlightOfHand,n.DSkill.Stealth,n.DSkill.Survival])e.set(s,[this.dStats.mod(n.StatForSkill.get(s))+this.dStats.pb.mod(t)+a,i])}for(const[t,[a,i,s]]of this.skills.entries())t!=n.DSkill._ALL&&e.set(t,[this.dStats.mod(n.StatForSkill.get(t))+this.dStats.pb.mod(a)+i,s]);return e}get dSkillRatings(){this.ensure(s.AspectFactoryFlag.DSkillsSkillsFinalized,!0);const e=new Map;for(const[t,[a,n]]of this.upgradedSkills.entries())e.set(t,r.getRatingForSkillModifier(a));return e}static getRatingForSkillModifier(e){return e<0?i.Rating.F:e<=2?i.Rating.E:e<=4?i.Rating.D:e<=7?i.Rating.C:e<=10?i.Rating.B:e<=15?i.Rating.A:e<=20?i.Rating.S:e<=26?i.Rating.SS:i.Rating.SSS}}t.DSkillsAspect=r},1738:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DStatsAspect=void 0;const n=a(5480),i=a(9275),s=a(9692),o=a(3206);class r extends o.BaseAspect{constructor(e){super(e),this._stats=new Map,this._statVisibilities=new Map,this._pb=null}initializeStats(e,t,a,i,o,r){this.setupSentinel(s.AspectFactoryFlag.DStatsStatsSetup),this._stats.set(n.DStat.Str,new n.StatValue(e)),this._stats.set(n.DStat.Dex,new n.StatValue(t)),this._stats.set(n.DStat.Con,new n.StatValue(a)),this._stats.set(n.DStat.Int,new n.StatValue(i)),this._stats.set(n.DStat.Wis,new n.StatValue(o)),this._stats.set(n.DStat.Cha,new n.StatValue(r))}setVisibilityLevel(e,t=null){if(null==t)for(const t of[n.DStat.Str,n.DStat.Dex,n.DStat.Con,n.DStat.Int,n.DStat.Wis,n.DStat.Cha])this._statVisibilities.set(t,e);else this._statVisibilities.set(t,e)}get stats(){return this._stats}get pb(){return this.ensure(s.AspectFactoryFlag.DStatsProficiencyDeclared),this._pb}set pb(e){this.buildSentinel(s.AspectFactoryFlag.DStatsProficiencyDeclared,s.AspectFactoryFlag.DStatsProficiencyFinalized),this._pb=e}get actionContentAPI(){return new i.ActionContext(this)}mod(e){return this._stats.get(e).mod}visibility(e){return this._statVisibilities.has(e)?this._statVisibilities.get(e):n.VisibilityLevel.Hinted}}t.DStatsAspect=r},2448:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DuplicateSetupException=void 0;class a extends Error{}t.DuplicateSetupException=a},6090:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorAspect=void 0;const n=a(5480),i=a(2656),s=a(2870),o=a(4417),r=a(4492),l=a(7922),d=a(3206);class c extends d.BaseAspect{constructor(e){super(e),this.core=e,this.dStats=e,this.dSkills=e,this.cSkills=e,this.notableStuff=[],this._afflictions=[],this._items=[],this._chemistry=new Map}generateDOMString(){const e=[];for(const[t,a]of this.notableStuff)e.push(`\n                <div class="dictionary__row">\n                    <span class="dictionary__row__key">${t}</span>\n                    <span class="dictionary__row__value">${a}</span>\n                </div>\n            `);const t=[];for(const e of this._afflictions)t.push(`<span class="operator_screen__status__item">${e}</span>`);const a=[];for(const[e,[t,n]]of this._chemistry.entries()){const i=null==n||""==n?"":`<span class="npc_chemistry__desc">${n}</span>`;a.push(`\n                <span class="npc_chemistry">\n                    <div class="npc_chemistry__npc">\n                        <img src="${r.Character.get(e).imgPath}" alt="">\n                        <div class="npc_chemistry__value">${t}</div>\n                    </div>\n                    <div class="npc_chemistry__desc">${i}</div>\n                </span>\n            `)}const o=new Map,d=new Map;for(const[e,t]of this.dSkills.dSkillRatings.entries())o.has(t)||o.set(t,[]),o.get(t).push(e);for(const[e,t]of this.cSkills.cSkillRatings.entries())d.has(t)||d.set(t,[]),d.get(t).push(e);const c=new Map([[i.Rating.F,"Useless"],[i.Rating.E,"Novice"],[i.Rating.D,"Hobbyist"],[i.Rating.C,"Professional"],[i.Rating.B,"Expertise"],[i.Rating.A,"Mastery"],[i.Rating.S,"Legendary"],[i.Rating.SS,"Mythic"],[i.Rating.SSS,"Titanic"]]),h=[];for(const e of[i.Rating.D,i.Rating.C,i.Rating.B,i.Rating.A,i.Rating.S,i.Rating.SS,i.Rating.SSS])(o.has(e)&&o.get(e).length>0||d.has(e)&&d.get(e).length>0)&&h.push(`\n                <div class="skill_block dictionary__row">\n                    <div class="dictionary__row__key">${c.get(e)}</div>\n                    <div class="dictionary__row__value">\n                        ${o.has(e)?o.get(e).map((e=>(0,s.wrapDSkill)(e))).join(""):""}\n                        ${d.has(e)?d.get(e).map((e=>(0,s.wrapCSkill)(e))).join(""):""}                    \n                    </div>\n                </div>`);const p=[];for(const[e,t]of this._items)p.push(`<span class="inventory_item inventory_item--${i.Rarity[t]}">${e}</span>`);return`\n            <div class="operator_screen">\n                <div class="operator_screen__title">Villager Profile: ${this.core.name} \n                    <span class="operator_screen__back"><i class="fa-solid fa-arrow-left"></i></span>\n                </div>\n                <div class="operator_screen__icon"><img src="${this.core.imgPath}" alt=""/></div>\n                <div class="operator_screen__ratings icon_table">\n                    <div class="icon_table__slot">\n                        <div class="icon_table__slot__icon"><i class="fa-solid fa-swords"></i></div>\n                        <div class="icon_table__slot__value">${this.ratings.damage}</div>\n                        <div class="icon_table__slot__label">Damage Rating</div>\n                    </div>\n                    <div class="icon_table__slot">\n                        <div class="icon_table__slot__icon"><i class="fa-sharp fa-solid fa-gears"></i></div>\n                        <div class="icon_table__slot__value">${this.ratings.control}</div>\n                        <div class="icon_table__slot__label">Control Rating</div>\n                    </div>\n                    <div class="icon_table__slot">\n                        <div class="icon_table__slot__icon"><i class="fa-solid fa-shield-cross"></i></div>\n                        <div class="icon_table__slot__value">${this.ratings.survival}</div>\n                        <div class="icon_table__slot__label">Survival Rating</div>\n                    </div>\n                    <div class="icon_table__slot">\n                        <div class="icon_table__slot__icon"><i class="fa-solid fa-user-tie"></i></div>\n                        <div class="icon_table__slot__value">${this.ratings.pro}</div>\n                        <div class="icon_table__slot__label">Professional Skills</div>\n                    </div>\n                </div>\n                <div class="operator_screen__subtitle">Notable Information</div>\n                <div class="operator_screen__details dictionary">\n                    <div class="dictionary__row">\n                        <span class="dictionary__row__key">From Era</span>\n                        <span class="dictionary__row__value">${n.Era[this.era]}</span>\n                    </div>\n                    <div class="dictionary__row">\n                        <span class="dictionary__row__key">Old Profession</span>\n                        <span class="dictionary__row__value">${this.professions[0]}</span>\n                    </div>\n                    <div class="dictionary__row">\n                        <span class="dictionary__row__key">Current Profession</span>\n                        <span class="dictionary__row__value">${this.professions[1]}</span>\n                    </div>\n                    ${e.join("")}\n                    <div class="dictionary__row">\n                        <span class="dictionary__row__key">Morale</span>\n                        <span class="dictionary__row__value">${l.Morale[this.morale]}</span>\n                    </div>\n                </div>\n                <div class="operator_screen__subtitle">Specializing skills</div>\n                <div class="operator_screen__skills">\n                    ${h.join("")}\n                </div>\n                <div class="operator_screen__subtitle">Chemistry with other villagers</div>\n                <div class="operator_screen__chemistry">\n                    ${a.join("")}\n                </div>\n            </div>\n        `}addNotableStuff(e,t){this.notableStuff.push([e,t])}addAffliction(e){this._afflictions.push(e)}setChemistryWith(e,t,a){this._chemistry.set(e,[t,a])}addInventoryItem(e,t){this._items.push([e,t])}finalize(){o.OperatorProfiles.set(this.id,this.generateDOMString())}get morale(){return this._morale}set morale(e){this._morale=e;const t=l.MoraleEffects.get(e);if(t.has(l.NpcMoraleEffects.ProficiencyBonusModifier)&&(this.character.dStats.pb=n.Prof.get(this.dStats.pb.mod()+t.get(l.NpcMoraleEffects.ProficiencyBonusModifier))),t.has(l.NpcMoraleEffects.SkillModifier))for(let[e,[a,i]]of this.dSkills.upgradedSkills)a-=this.dStats.mod(n.StatForSkill.get(e)),this.character.dSKills.setSkillProficiency(e,i,n.ProficiencyLevel.None,a+t.get(l.NpcMoraleEffects.SkillModifier))}get notableCSkills(){throw new Error("Not implemented")}get notableDSkills(){return this.dSkills.upgradedSkills}}t.OperatorAspect=c},9815:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OpinionAspect=void 0;const n=a(4550),i=a(9676),s=a(1913),o=a(8659),r=a(2995),l=a(190),d=a(8706),c=a(5480),h=a(3998),p=a(4492),u=a(3206),m=a(7482),g=a(5146),f=a(6379),v=a(9995),y=a(8792),w=a(2023),S=a(5603),b=a(6797),D=a(9537),k=a(1622);class C extends u.BaseAspect{constructor(e){super(e),this.core=e,this.dSkills=e,this.opinions=new Map;for(const e of(0,l.getEnumIterator)(d.PcIndex))this.opinions.set(e,new i.NpcOpinion(this.id,e))}static setupOpinionTable(){(0,m.sessionOpinionEvents02)(),(0,g.sessionOpinionEvents03)(),(0,f.sessionOpinionEvents04)(),(0,v.sessionOpinionEvents05)(),(0,y.sessionOpinionEvents06)(),(0,w.sessionOpinionEvents07)(),(0,S.sessionOpinionEvents08)(),(0,b.sessionOpinionEvents09)(),(0,D.sessionOpinionEvents10)(),(0,k.sessionOpinionEvents11)(),(0,s.arc21OpinionEvents)(),(0,o.arc22OpinionEvents)();const e=$("#individual_ast"),t=$("#attitude_summary_table_area"),a=[];for(const e of(0,l.getEnumIterator)(d.PcIndex))a.push(`<div class="simple_table__row__cell character_token">\n                <img src="./assets/images/character_tokens/C2/pcs/${d.PcTokenNames.get(e)}.png" \n                     alt="[NULL]">\n            </div>`);const n=[];for(const e of(0,l.getEnumIterator)(h.NpcID)){const t=p.Character.get(e);t&&t.isOpinionated&&n.push(t.generateOpinionDOM())}t.append(`\n        <div class='opinion_summary_table'>\n            <div class='simple_table__row simple_table__row--header'>\n                <div class='simple_table__row__cell'></div>\n                ${a.join("")}\n            </div>\n            <div class='simple_table__body'>\n                ${n.join("")}\n            </div>\n        </div>    \n    `),t.on("click",".npc_opinion_circle",(function(){const t=$(this).data("npcId"),a=$(this).data("pcId");e.html(p.Character.get(t).generateOpinionTimelineDOM(a)),e.show()}))}generateDOMString(){const e=[];for(const t of(0,l.getEnumIterator)(d.PcIndex)){const a=this.opinions.get(t);e.push(a.generateDOMString())}return`\n            <div class='simple_table__row'>\n                <div class='simple_table__row__cell character_token'>\n                    <img src="${this.core.imgPath}" alt="[NULL]">\n                </div>\n                ${e.join("")}\n            </div>\n        `}addInteractionEvent(e,t,a,i,s=10,o=new Set){let r=null;if(o){r=new Map;for(const e of o)r.set(e,!0)}for(const o of e)this.opinions.get(o).addEvent(new n.NpcInteractionEvent(t,a,i,s,r))}addTimeskipEvent(e,t,a,n,i){for(const s of e)this.opinions.get(s).addEvent(new r.TimeskipEvent(t,a,i,n))}generateTimelineDOMString(e){return this.opinions.get(e).generateTimelineDOMString()}get isOpinionated(){return this._opinionated}set isOpinionated(e){this._opinionated=e}get passiveDeception(){return 10+this.dSkills.getSkillMod(c.DSkill.Deception)[0]}}t.OpinionAspect=C},1312:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SheetAspect=void 0;const n=a(5480),i=a(698),s=a(2870),o=a(3206);class r extends o.BaseAspect{constructor(e){super(e),this.combatAspect=e,this.coreAspect=e,this.skillAspect=e,this.statsAspect=e,this._subtitle="",this._acDesc="",this._cr=null}render(){const e=[];for(const[t,a]of this.combatAspect.speeds.entries())e.push(`${(0,s.wrapSpeed)(t)} ${a} ft.`);const t=[];for(const[e,a]of this.combatAspect.senses.entries())t.push(`${(0,s.wrapSense)(e)} ${a} ft.`);const a=[];for(const e of[n.DStat.Str,n.DStat.Dex,n.DStat.Con,n.DStat.Int,n.DStat.Wis,n.DStat.Cha]){const t=this.combatAspect.stats.get(e);a.push(`<td>${t.stat} ${(0,s.wrapRoll)(t.mod)}</td>`)}const i=[];for(const[e,[t,a]]of this.combatAspect.saves.entries()){const o=this.statsAspect.mod(e)+this.combatAspect.pb.mod(t)+a;i.push(`${n.DStat[e]} ${(0,s.wrapRoll)(o)}`)}const o=[];for(const[e,[t,a]]of this.skillAspect.upgradedSkills.entries())o.push(`<span style="display: inline-block;">${(0,s.wrapDSkill)(e)} ${(0,s.wrapRoll)(t)}</span>`);const r=[],l=[],d=[];for(const[e,t]of this.combatAspect.damageRes.entries())if(t<0){const a=-100==t?"":`(${100-t}% damage)`;r.push(`${(0,s.wrapDamageType)(e)} ${a}`)}else if(0==t);else if(t<100){const a=50==t?"":`(${100-t}% damage)`;l.push(`${(0,s.wrapDamageType)(e)} ${a}`)}else{const a=100==t?"":`(Heals for ${t-100}% damage)`;d.push(`${(0,s.wrapDamageType)(e)} ${a}`)}const c=0==r.length?"":`<tr><td>Damage Vulnerabilities</td><td>${r.join(", ")}</td></tr>`,h=0==l.length?"":`<tr><td>Damage Resistances</td><td>${l.join(", ")}</td></tr>`,p=0==d.length?"":`<tr><td>Damage Immunities</td><td>${d.join(", ")}</td></tr>`,u=[];for(const e of this.combatAspect.conditionImmunities.values())u.push(n.Condition[e]);const m=0==u.length?"":`<tr><td>Condition Immunities</td><td>${u.join(", ")}</td></tr>`,g=new Map;for(const e of this.combatAspect.actions){const t=e.activation;g.has(t)||g.set(t,[]),e.bindStats(this.statsAspect),g.get(t).push(e.createContent())}const f=[];for(const[e,t]of g.entries()){e!=n.Activation.Special&&f.push(`<h4 class="sheet_section_header">${(0,s.wrapActivation)(e,!0)}</h4>`);for(const e of t)f.push(`<div class="sheet_content">${e}</div>`)}return`\n        <div class="stat_sheet" id="stat_sheet_${this.category}_${this.id}">\n            <div class="sheet_header">\n                <div class="header_zone">\n                <h3 class="sheet_title">${this.coreAspect.name}</h3>\n                <div class="sheet_subtitle">${(0,s.wrapCreatureSize)(this._size)} ${this._subtitle}</div>\n                </div>\n                <div class="header_zone">\n                    <table>\n                        <tr><td>Armor Class</td><td>${this.combatAspect.ac} ${this._acDesc}</td></tr>\n                        <tr><td>Hit Points</td><td>${this.combatAspect.hp} ${(0,s.wrapRoll)(this.combatAspect.hpDice)}</td></tr>\n                        <tr><td>Speed</td><td>${0==e.length?"None":e.join(", ")}</td></tr>\n                    </table>\n                </div>\n                <div class="header_zone">\n                    <table class="stats_table">\n                        <tr><th>STR</th><th>DEX</th><th>CON</th><th>INT</th><th>WIS</th><th>CHA</th></tr>\n                        <tr>${a.join("")}</tr>\n                    </table>\n                </div>\n                <div class="header_zone">\n                    <table>\n                        ${t.length>0?`<tr><td>Senses</td><td>${t.join(" ")}</td></tr>`:""} \n                        ${i.length>0?`<tr><td>Saving Throws</td><td>${i.join(" ")}</td></tr>`:""} \n                        ${o.length>0?`<tr><td>Skills</td><td>${o.join(" ")}</td></tr>`:""}\n                        <tr><td>Challenge Rating</td><td>${this._cr.cr}</td></tr>\n                        <tr><td>Proficiency Bonus</td><td>${this.combatAspect.pb.mod()}</td></tr>\n                        ${c}${h}${p}${m}\n                    </table>\n                </div>\n            </div>\n            ${f.join("")}\n        </div>`}set subtitle(e){this._subtitle=e}set acDesc(e){this._acDesc=e}set cr(e){this._cr=e}set size(e){this._size=e}finalize(){super.finalize(),(0,i.setupStatSheet)(this.category,`${this.category}_${this.id}`,this.coreAspect.name,this.coreAspect.imgPath,(()=>this),!0)}}t.SheetAspect=r},4190:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCharacters=void 0;const n=a(190),i=a(3998),s=a(9815),o=a(4492),r=a(9787),l=a(9514),d=a(7395),c=a(3838);t.setupCharacters=function(){(0,r.setupC1A1)(),(0,l.setupC1A2)(),(0,d.setupC2A1)(),(0,c.setupC2A2)();for(const e of(0,n.getEnumIterator)(i.NpcID)){const t=o.Character.get(e);t&&t.finalize()}s.OpinionAspect.setupOpinionTable()}},9787:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupC1A1=void 0;const n=a(6838),i=a(2112),s=a(5299),o=a(6600),r=a(9105),l=a(216),d=a(8252),c=a(5510),h=a(747),p=a(971),u=a(4323);t.setupC1A1=function(){(0,c.setupLucian)(),(0,s.setupEbenezar)(),(0,n.setupCaelynn)(),(0,r.setupLesley)(),(0,o.setupIrene)(),(0,d.setupLing)(),(0,i.setupDave)(),(0,p.setupUlrich)(),(0,l.setupLia)(),(0,u.setupVahareth)(),(0,h.setupMaster)()}},6838:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCaelynn=void 0;const n=a(3998),i=a(4492);t.setupCaelynn=function(){const e=new i.Character(n.NpcID.Caelynn);e.core.name="Caelynn Nailo",e.core.imgPath="character_tokens/C1/Arc1/caelynn.png",e.card.setCampaignArc(1,1),e.card.addCardTag("F4560"),e.card.addCardTag("CR | 25"),e.card.addCardTag("From | Materia / Preservation"),e.card.addCardTag("Allegiance | Preservation"),e.card.addCardTag("Race | Half-Elf"),e.card.addCardTag("<span class='verbose'>Circle of Dreams</span> Druid"),e.card.addCardTag("Guardian of Life"),e.card.addCardTag("Atium Savant"),e.card.addCardTag("Faction: Watchers"),e.card.summary=()=>`Born in the last years of the heroic age, fled into The Gardens due to an accidental encounter with the Fifth\n      Nightmare. Being extremely gifted, she received guidance from various orders - often from Guardians themselves.\n      Was once close to ${i.Character.get(n.NpcID.TraitorOthello).createLink("The Traitor")}. Currently leads the people of the Garden\n      as the Guardian of Life. Now an Atium savant.`,e.card.story=()=>`\n<h5>Early life</h5>\nCaelynn Nailo was born in ? during the years that marked the end of the Heroic Age, and the onset of the Silent Age. \nBorn in a university to a family of accomplished and well renowned scholars, young Caelynn had led a protected - \nalmost pampered - life. A life that, along with her natural gifts, had allowed her to dream, to reach for the stars,\nto set out near impossible goals and achieve them. Unfortunately, this self-confidence and ambition were dormant \nseeds of tragedy that finally bore fruit in the years that heralded the Silent Age.<br/>\nAnd so it was, that one day she found everyone she knew - her family, her friends, her professors - all massacred. \nAs she stared into the essence of The fifth, a horror she could not yet fully \ncomprehend, she <i>knew</i> it would be her next - and welcomed it, for even in her broken mind she knew she had\ncaused all their deaths. But the powers that be had decided it was not time for her to die yet.<br/>\nIn this case 'the powers' took the form of a single man who had escaped the slaughter and fought back the horror to\nprotect her. A man she knew as the HoD of botany, someone she'd never really felt bold enough to interact with. A \nman who, as she would learn soon, couldn't dream. Another thing she would learn soon was that he came from a \ndifferent universe - a garden - and went by the title of 'Guardian of Life' there...\n<h5>In the Garden</h5>\nWhen she entered the garden, she was a different person. Fate had broken her, but she had stood up again and filled \nthe cracks with something stronger. Gone was the childish optimism, the vanity. It was replaced by singular purpose -\nto ensure that none would suffer at the hands of those from without as she did. To ensure that she could, would \nprotect as she had been protected by ${i.Character.get(n.NpcID.Vahareth).createLink("Vahareth")}. Before long, she was \nregarded as a prodigy there too - with the different orders of Watchers, Inquisitors and Scholars training her and \nvying for her to join them. Yet there was little surprise when she chose to join the Watchers - after all she was\nvirtually Vahareth's daughter - lived in his bunker, trained under him personally, and had the same cold steel gaze\nthat could unnerve the most confident of men.<br/>\nBeing so close to power and being the center of attention of so many orders meant that she met a fair share of \nimportant people from different orders. One among them was the apprentice of the Guardian of Defense, \n${i.Character.get(n.NpcID.TraitorOthello).createLink("Othello Titanborn")}. The gardens, because of their extremely low but <i>very</i>\nhighly skilled population, would typically send out squads of two people for most operations - and Caelynn and \nOthello were often together because of their complementary skills but aligning personalities. The two began courting\nand were a happy couple for quite a few decades. However, that was not to last, and the forces that had broken \nCaelynn before would soon break her again...\n<h5>The Betrayal and Bunker#371</h5>  \nOne day, Preveservation was ablaze with the news that everyone in Bunker#17 had died. When it reached her ears, she \nwas terrified, for that was where Othello lived. Upon reaching there, however, she recieved even worse news from the\nGuardians of Order and Life who were inspecting the site. He was not dead, he was the one who had killed them all, \nwith the assistance of a mysterious group of assassins from the Castle of Ruin known as 'The Troupe' and escaped there\nwith them following the slaughter. His motives were unknown, but the evidence was irrefutable. This evidence included\na prisoner, whom Caelynn, under the superivision and command of the Guardian of Order, tortured and 'practiced' \nhemalurgy upon.<br/>\nThe shock of betrayal, overwhelming sense of abandonment and trauma of hemalurgy sent Caelynn into a downward spiral.\nShe would do all future operations alone, with Machiavellian maneuvers executed with utter ruthlessness. And so she\nspent almost two millenia in the service of Preservation. Until during one of her last operations, she came face-to-face \nagainst a higher vampire in the streets of Ortus, a major capital of a planet in Materia. While they were antagonistic\nat first, in her eyes Caelynn saw the same look as herself - to be more precise, the same look following both the \ntimes life had broken her. This girl, she knew, had seen abandonment, loss and regret, and little else, as she too \nslid downwards in a spiral of her own demons. Despite herself, Caelynn did keep a close eye on her anyway, and so was there to see \nwhen finally the vampire resisted against the spiral, resisted against instincts Caelynn knew were more powerful, \nmore primal than she had ever faced.<br/>\nThat moment had moved her to a degree much more than she could anticipate. Buried regrets deep inside came out at \nlast, and so she, for the first time after Othello, reached out to someone. And so she returned to the Gardens with\n${i.Character.get(n.NpcID.Lesley).createLink("Lesley")} in tow. The two soon grew very close, also starting to work together on\noperations. A few decades later, as her date of graduation from field service arrived, her collegues gifted her an\n${i.Character.get(n.NpcID.DaveRuhl).createLink("automaton")} to help defend her in close range. And so the three of them started \nBunker#371, and remained its sole members for one and a half millenia. Until finally Caelynn was there for someone\nthe way Vahareth had been for her - an elven girl, ${i.Character.get(n.NpcID.Lia).createLink("Lia Mistcloak")}, who\nwas 'taken' by the second. A few centuries after, Lia was to get married and\n${i.Character.get(n.NpcID.Ulrich).createLink("her husband")} too moved in. Again after a few centruries Lesley decided\nto 'adopt' ${i.Character.get(n.NpcID.Ebenezar).createLink("a human boy")} whose soul seemed burdened in the same way that hers and \nCaelynn's once had. As Caelynn approved, it finally struck her that her lone wolf days were a thing of the long \npast - and once again she felt warmth in the company of others. It was when this happened that Vahareth finally \ndecided to name her his apprentice formally, meant to succeed him as guardian. Since then there were a few ups and \ndowns - like Conley joining and Ebenezar abandoning Lesley - an act of remarkable\nparallel with the way Othello once had her, but with each other for support, they weathered all that came.\n<h5>The hour of Loss</h5>\nA few days before the hour of loss, Caelynn got notified of a threat that required at least the attention of a \nGuardian apprentice. On arriving the scene, she found a group of adventurers, of whom \n${i.Character.get(n.NpcID.Lucian).createLink("all but one")} were peacefully slumbering around a mistflame. The one not \nslumbering seemed to be raving, and on his neck, she could see a Nightblood inhibitor. She knew what that meant -\nand the people who could venture outside the castle were typically very dangerous - the \nonly ones she'd heard of were members of the troupe, steel inquisitors or the demon lords. The mist clung to him, so \nhe wasn't hemalurgically enhanced. A demon lord wouldn't ever wear an inhibitor, so that left...<br/>\nShe was about to raise the alarm, when the inhibitor suddenly broke - and the person starting laughing in a \nparticularly insane way. He then summoned some... aberrations(?), gave them some directions, made some preperations \nfor the others, then... slit the throats of the aberrations until the mists tore apart from him, and then he slipped\nthrough the realms, giving her - who was wildshaped into a sparrow - a knowing grin as he faded. There would be \nlittle point in chasing him, and while she wanted to get a hold of the knife with which he could 'kill' even in here,\nsomething about his grin unnerved her, and she wanted to learn the motiviations of the others still asleep.<br/>\nWhich turned out to be a good idea, since their motivations were as noble as they come. As they willingly gave her \nthe dagger, she allowed them to stay as guests in the bunker. They certainly did make their presence felt out there. \nThey helped them in an odd variety of tasks, but what left her the most grateful for having them was that they\nhelped Lesley shed some of her demons. Yet something unnerved her, events were moving too fast for \nthis realm. Circumstances which would have come in years came in days, and they would absolutely not consider the \nidea of not going to the castle, despite all her warnings.<br/>\nSo when the hour of loss finally came, she found herself anticipating it. Preservation was getting weaker since eons,\nand of course <i>they</i> would take advantage of the imbalance between shardic powers. After helping her new guests\nmake it into the castle, she focused on rooting out the corruption that spread, yet this incursion was way more than\nhad ever been before. They did keep it at bay though, and while no more than half a dozen died in the Garden, the \nGardens themselves were completely ravaged. Vahareth too decided to 'retire' to seek out the cause of this, leaving \nher as the Guardian of Life. Soon after she took power, her guests established contact from within the castle, a \nfeat that required a great deal of magical power and skill. While she did wonder about it, as she did worry about \nthem, this was not the time. The intel they provided strongly suggested that the cause of the rift was somewhere \nwithin Ruin's domain. And so all the Guardians set out to deal with it.<br/>          \nUnfortunately, they were too late - by the time they had taken control, and crossed the midnight boundary to find \nthemselves face to face with ${i.Character.get(n.NpcID.LogosPlaywright).createLink("The Playwright")} and \n${i.Character.get(n.NpcID.Sanguinarch).createLink("The SanguineArch")}, the primoridal nightmares were already free. \nThankfully, all of them being in one place meant that a greater disaster was prevented. Even with all his inquisitors,\nRuin could not take on the five of them together. That meant he couldn't get the Atium, couldn't complete himself and\nwas evenly matched against the new Preservation, 'The Survivor'. But leaving the Atium stash intact was too much of a\nrisk, so they offered the adventurers to burn it all if they would like to, an honour for helping protect the entire \nmultiverse from utter and imminent destruction. However, the adventures refused as they felt the Guardians were \nbetter suited for the power. They just wanted to have peace and quiet and leave the castle behind finally.<br/>\nHowever, that was not to be. For one of them had been marked by The second, and the\nPlaywright's powers had bound their souls in their skirmish. And so, she once again lost a group of good people, \npeople important to her, people who'd given her hope. There were already plans of war in motion. Of vengence, of\nsurvival. Until now, they had tried to play nice, it had resulted in the death of friends, in the death of God. \nNo more...`,e.opinions.isOpinionated=!1}},2112:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupDave=void 0;const n=a(3998),i=a(4492);t.setupDave=function(){const e=new i.Character(n.NpcID.DaveRuhl);e.core.name="Dave Ruhl",e.core.imgPath="character_tokens/C1/Arc1/dave.png",e.card.addCardTag("Physically Deceased"),e.card.setCampaignArc(1,1),e.card.addCardTag("M2500"),e.card.addCardTag("CR | 13"),e.card.addCardTag("From | Innovation / Preservation"),e.card.addCardTag("Race | Warforged"),e.card.addCardTag("<span class='verbose'>Samurai</span> Fighter"),e.card.addCardTag("Faction: Defenders"),e.card.summary=()=>`A warforged automaton that was purchased by ${i.Character.get(n.NpcID.Caelynn).createLink("Caelynn")}'s \n      batch-mates at a heavy price upon her graduation, to serve and protect her. His modules were heavily operated \n      upon by Lesley who practiced her coding skills on him. Failed to defend Caelynn at one point long ago, and \n      gave his life holding out against a deep-sea aberration to atone for it.`,e.opinions.isOpinionated=!1}},5299:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupEbenezar=void 0;const n=a(3998),i=a(4492);t.setupEbenezar=function(){const e=new i.Character(n.NpcID.Ebenezar);e.core.name="Ebenezar",e.core.imgPath="character_tokens/C1/Arc1/ebenezar.png",e.card.addCardTag("Deceased"),e.card.setCampaignArc(1,1),e.card.addCardTag("M750"),e.card.addCardTag("CR | 22"),e.card.addCardTag("From | Materia / Preservation / Ruin"),e.card.addCardTag("Race | Human"),e.card.addCardTag("<span class='verbose'>Divination</span> Wizard"),e.card.addCardTag("Lich"),e.card.summary=()=>`\n     A human kid born in the the classical era. Accidentally entered a perpendicularity inside a \n     subterranean lake into the Gardens. Lived there for a few centuries and trained fanatically as a mage under his\n     then-girlfriend ${i.Character.get(n.NpcID.Lesley).createLink()}'s tutelage and soon surpassed her. Became a Lich\n     and would often roam in shady alleys of Materia, appearing helpless - then feeding on the souls of any who \n     assaulted him. Stabilized the perpendicularity between the lake he once drowned in - making it his 'lair' - and \n     the Mistflame in the Gardens near Bunker#371. Went to the castle to 'fight death', but failed and died, his \n     last days and whereabouts remain unknown.\n    `,e.opinions.isOpinionated=!1}},6600:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupIrene=void 0;const n=a(5480),i=a(3998),s=a(5947),o=a(8129),r=a(2870),l=a(4492),d=a(7922);t.setupIrene=function(){const e=new l.Character(i.NpcID.Irene);e.core.name="Irene",e.core.imgPath="character_tokens/C1/Arc1/irene.png",e.card.setCampaignArc(1,1),e.card.addCardTag("F1390"),e.card.addCardTag("CR | 16"),e.card.addCardTag("From | Air / Water / Preservation"),e.card.addCardTag("Allegiance | Preservation"),e.card.addCardTag("Race | Air Genasi"),e.card.addCardTag("<span class='verbose'>Gunslinger</span> Fighter / <span class='verbose'>Tempest</span> Cleric / <span class='verbose'>Storm</span> Sorcerer"),e.card.addCardTag("Faction: Inquisitor"),e.card.addCardTag("Inquisitor of ???"),e.card.summary=()=>`\n      <div class="effect_tag">Incomplete</div><br/>\n    An air genasi who was a junior member of the inquisition of the gardens. All her bunker-mates were killed in \n    an attack by The Troupe around 300 years ago, but the ${l.Character.get(i.NpcID.Kjerra).createLink("Guardian of Magic")}\n    took pity on her and replaced them all with physically intractable and sentient illusions. Despite them being \n    near-perfect replicas, Irene eventually figured out their true nature, but being grateful for the concern, she \n    kept the pretense of believing in them. Even so, ${l.Character.get(i.NpcID.Lesley).createLink("Lesley")} took a personal \n    interest in her and made sure to invite her every now and then to make sure she got to interact with real people.\n    During the Hour of Loss, she displayed unexpected skill (leading others to suspect she had specifically been \n    trained for such situations), resolve, and fanaticism in fighting a deep-ocean aberration but went missing in\n    the fight.`,e.opinions.isOpinionated=!0,e.dStats.initializeStats(8,20,10,8,14,20),e.dStats.pb=n.Prof.get(7),e.dSKills.setSkillProficiency(n.DSkill.Acrobatics,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Insight,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Intimidation,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Religion,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Stealth,n.Hidden,n.ProficiencyLevel.Expert),e.operator.morale=d.Morale.Average,e.dSKills.finalizeSkills(),e.cSkills.setSkillValues([[n.CSkill.Accounting,5,n.Vague],[n.CSkill.Anthropology,0,n.Vague],[n.CSkill.Appraise,70,n.Vague],[n.CSkill.Archaeology,40,n.Vague],[n.CSkill.Artillery,0,n.Vague],[n.CSkill.Charm,15,n.Vague],[n.CSkill.ComputerUse,5,n.Vague],[n.CSkill.Demolitions,0,n.Vague],[n.CSkill.Disguise,5,n.Vague],[n.CSkill.Diving,150,n.Vague],[n.CSkill.DriveAuto,20,n.Vague],[n.CSkill.ElectricalRepair,10,n.Vague],[n.CSkill.Electronics,0,n.Vague],[n.CSkill.FirstAid,90,n.Vague],[n.CSkill.Hypnosis,0,n.Vague],[n.CSkill.Law,5,n.Vague],[n.CSkill.LibraryUse,20,n.Vague],[n.CSkill.Locksmith,0,n.Vague],[n.CSkill.MechanicalRepair,10,n.Vague],[n.CSkill.ModernMedicine,0,n.Vague],[n.CSkill.NaturalWorld,60,n.Vague],[n.CSkill.Navigate,90,n.Vague],[n.CSkill.Occult,50,n.Vague],[n.CSkill.OperateHeavyMachinery,0,n.Vague],[n.CSkill.Psychoanalysis,0,n.Vague],[n.CSkill.ReadLips,0,n.Vague],[n.CSkill.Ride,15,n.Vague],[n.CSkill.Throw,20,n.Vague],[n.CSkill.Acting,5,n.Vague],[n.CSkill.Calligraphy,0,n.Vague],[n.CSkill.Carpentry,10,n.Vague],[n.CSkill.Cooking,20,n.Vague],[n.CSkill.Dancing,5,n.Vague],[n.CSkill.FineArt,5,n.Vague],[n.CSkill.Forgery,0,n.Vague],[n.CSkill.Writing,5,n.Vague],[n.CSkill.Singing,5,n.Vague],[n.CSkill.Painting,5,n.Vague],[n.CSkill.Photography,0,n.Vague],[n.CSkill.Sculpting,0,n.Vague],[n.CSkill.Chainsaw,10,n.Vague],[n.CSkill.HeavyWeapons,10,n.Vague],[n.CSkill.Flamethrower,10,n.Vague],[n.CSkill.MachineGun,10,n.Vague],[n.CSkill.SubmachineGun,10,n.Vague],[n.CSkill.Aircraft,0,n.Vague],[n.CSkill.Boat,65,n.Vague],[n.CSkill.Astronomy,0,n.Vague],[n.CSkill.Biology,35,n.Vague],[n.CSkill.Botany,50,n.Vague],[n.CSkill.Chemistry,0,n.Vague],[n.CSkill.Cryptography,0,n.Vague],[n.CSkill.Engineering,0,n.Vague],[n.CSkill.Forensics,0,n.Vague],[n.CSkill.Geology,0,n.Vague],[n.CSkill.Mathematics,10,n.Vague],[n.CSkill.Meteorology,0,n.Vague],[n.CSkill.Pharmacy,0,n.Vague],[n.CSkill.Physics,0,n.Vague],[n.CSkill.Zoology,50,n.Vague]]),e.operator.fatigue=0,e.operator.ratings={damage:"S",control:"A+",survival:"B",pro:"S"},e.operator.addNotableStuff("Major Damage Type","Magical Piercing, Lightning, Force"),e.operator.addNotableStuff("Insanely Strong against","Seaborn"),e.operator.addNotableStuff("Strong against","Melee Opponents, Undead"),e.operator.addNotableStuff("Weak against","Flying enemies"),e.operator.addNotableStuff("Combat Experience","SSS Grade (>1000 years)"),e.operator.setChemistryWith(i.NpcID.Jordi,11,"Thinks he's a nice person, appreciates being able to spend time with him in comfortable silence."),e.operator.professions=["Inquisitor","Unemployed (Amnesiac)"],e.operator.era=n.Era.Timeless,e.sheet.cr=new n.CRValue(16),e.operator.addNotableStuff("Challenge Rating","16"),e.combat.setSpeed(n.Speed.Walking,40),e.combat.setSpeed(n.Speed.Swimming,70),e.combat.setSpeed(n.Speed.Flying,30),e.combat.setSave(n.DStat.Dex),e.combat.setSave(n.DStat.Con,n.ProficiencyLevel.Expert),e.combat.setSave(n.DStat.Wis),e.combat.setSave(n.DStat.Cha),e.combat.addClassLevels(n.AdventurerClass.Sorcerer,5),e.combat.addClassLevels(n.AdventurerClass.Cleric,2),e.combat.addClassLevels(n.AdventurerClass.Fighter,7),e.combat.bonusHP=32,e.combat.computeHP(),e.combat.setSense(n.Sense.Darkvision,120),e.combat.setSense(n.Sense.TremorSense,120),e.combat.setRes(n.DamageType.Cold,100),e.combat.setRes(n.DamageType.Poison,100),e.combat.setRes(n.DamageType.Acid,100),e.combat.setRes(n.DamageType.Lightning,100),e.combat.setRes(n.DamageType.Psychic,50),e.combat.setRes(n.DamageType.Necrotic,50),e.combat.addConditionImmunity(n.Condition.Frightened),e.combat.addConditionImmunity(n.Condition.Blinded),e.combat.addConditionImmunity(n.Condition.Poisoned),e.combat.addConditionImmunity(n.Condition.Stunned),e.combat.addConditionImmunity(n.Condition.Paralyzed),e.combat.addAction(new o.Action(n.Activation.Special,"<p><strong><em>Scourge of the Deep Oceans.</em></strong> Her natural \n        biology and extensive training as an inquisitor \n        has made Irene deadly in the oceans. She can hold her breath indefinitely,\n        never takes damage from water pressure and can make her body as buoyant \n        as the wind itself. Additionally, she takes only 20% damage from seaborn \n        creatures and her to-hit rolls and saves against them have advantage, as\n        they have disadvantage on attack rolls and saving throws against her.</p>")),e.combat.addAction(new o.Action(n.Activation.Special,"<p><strong><em>Blade of the winds.</em></strong> Creatures levitated by Irene \n        without a flying speed are considered restrained. She gains an additional\n        +5 to attack rolls against such creatures and deals double damage on all \n        her attacks against those creatures.\n        If the levitating creatures are seaborn, she additionally rolls with super-advantage.</p>")),e.combat.addAction(new o.Action(n.Activation.Special,"<p><strong><em>Action Surge.</em> (1/SR)</strong> Irene may choose to \n        take an additional action in one of her turns.</p>")),e.combat.addAction(new o.Action(n.Activation.Special,`<p><strong><em>Spellcasting.</em></strong> Irene is a 7th level spellcaster \n        and has the following spells prepared (To hit ${(0,r.wrapRoll)(e.CHA+e.Prof+3)} Save DC ${e.dc(n.DStat.Cha)+3})</p>\n        <ul style="font-size: 12px;">\n            <li><b>Cantrip.</b> Guidance, Shocking Grasp (3d8 ${(0,r.wrapDamageType)(n.DamageType.Lightning)} damage)</li>\n            <li><b>1<sup>st</sup> Level. (4 slots)</b> Healing word, Cure Wounds, Detect Evil and Good, Protection From Evil and Good, Fog cloud, Shield</li>\n            <li><b>2<sup>nd</sup> Level. (3 slots)</b> Levitate</li>\n            <li><b>3<sup>rd</sup> Level. (3 slots)</b> Lightning Bolt</li>\n            <li><b>4<sup>th</sup> Level. (1 slot)</b></li>\n        </ul>\n        <p>Due to her extensive training, she can cast these spells without Verbal or \n        Somatic components.</p>`)),e.combat.addAction(new o.Action(n.Activation.Action,"<p><strong><em>Multiattack.</em></strong> As an action irene makes two \n        attacks with her rapier and one with her revolver. If there are seaborn \n        in the battlefield, she instead makes 3 rapier and 2 revolver attacks.</p>")),e.combat.addAction(new o.Action(n.Activation.Action,`<p><strong><em>Rapier.</em></strong> Melee Weapon Attack: ${(0,r.wrapRoll)(e.DEX+e.Prof+2)}\n        reach 5 ft., one target. Hit: ${(0,r.wrapRoll)([[1,s.D8],[e.DEX+2,s.D1]])} \n        ${(0,r.wrapDamageType)(n.DamageType.Piercing)} damage (magical) plus ${(0,r.wrapRoll)(s.D8)} \n        ${(0,r.wrapDamageType)(n.DamageType.Lightning)} damage.</p>`)),e.combat.addAction(new o.Action(n.Activation.Action,`<p><strong><em>Revolver.</em></strong> Ranged Weapon Attack: ${(0,r.wrapRoll)(e.DEX+e.Prof+2)} \n        reach 40/120 ft., one target. Hit: ${(0,r.wrapRoll)([[3,s.D8],[e.DEX+2,s.D1]])} \n        ${(0,r.wrapDamageType)(n.DamageType.Piercing)} damage (magical). This shot can pierce through enemeies, \n        and she makes attack rolls with disadvantage for every creature within 40 ft behind the primary target.</p>`)),e.combat.addAction(new o.Action(n.Activation.Action,`<p><strong><em>Electrostatic Shackles. </em>(7/LR)</strong> Irene \n        unleashes a powerful burst of static electricity thrice - on each \n        occasion all creatures within 5 ft of her take ${(0,r.wrapRoll)([[1,s.D8],[e.CHA,s.D1]])}\n        ${(0,r.wrapDamageType)(n.DamageType.Lightning)} damage (halved on a ${e.dc(n.DStat.Cha)+3}\n        CON save; one save for all three bursts). After the first burst, \n        instead of sourcing the lightning from herself, she can make any other\n        creature who has taken damage from this attack the source instead.<br/> If \n        performed underwater, the ${(0,r.wrapDamageType)(n.DamageType.Lightning)}\n        damage is ${(0,r.wrapRoll)([[3,s.D8],[e.CHA,s.D1]])} instead.</p>`)),e.combat.addAction(new o.Action(n.Activation.Action,`<p><strong><em>Judgement of the Storms. </em>(1/SR)</strong>\n        Irene unleashes The Primal Winds form the Inner Plane of Air to force all creatures\n        of her choice within 30 ft to make a DC ${e.dc(n.DStat.Cha)+3} CON \n        save. All creatures who fail take ${(0,r.wrapRoll)([[6,s.D8],[e.CHA+3,s.D1]])} \n        ${(0,r.wrapDamageType)(n.DamageType.Force)} damage and levitate 20 ft\n        in the air until the start of her next turn. Creatures who succeed the \n        save take half damage and don't levitate. Immediately after unleashing the winds, she shoots \n        12 times with her revolver, each shot dealing <span class="rollable">${11+e.DEX}</span> \n        ${(0,r.wrapDamageType)(n.DamageType.Piercing)} damage to the target and <span class="rollable">8</span> \n        ${(0,r.wrapDamageType)(n.DamageType.Lightning)} damage to all creatures within \n        5 ft of the target (including the target).<br/>\n        If performed underwater, The Primal Winds first form a bubble of torrential winds of \n        60 ft radius centered on her. In this case every enemy without a flying speed\n        automatically is considered to have failed the CON save.</p>`)),e.combat.addAction(new o.Action(n.Activation.BonusAction,"<p><strong><em>Destructive Wrath.</em> (2/SR)</strong> Irene empowers herself \n        with primal electricity. For the duration of this turn, Irene deals \n        maximum lightning damage on all attacks and her attacks ignore resistance\n        to electric damage.</p>")),e.combat.addAction(new o.Action(n.Activation.BonusAction,`<p><strong><em>Gust.</em></strong> Irene's next melee attack deals an \n        extra ${(0,r.wrapRoll)([2,s.D8])} ${(0,r.wrapDamageType)(n.DamageType.Force)} damage and, should they fail a  \n        DC ${e.dc(n.DStat.Cha)+3} CON save, causes the target to levitate 20 ft until the end of her turn.</p>`)),e.combat.addAction(new o.Action(n.Activation.BonusAction,`<p><strong><em>Calm breeze.</em></strong> Irene moves her flying \n        speed and heals for ${(0,r.wrapRoll)([[1,s.D10],[7,s.D1]])} HP. This movement \n        doesn't provoke oppurtunity attacks. If performed underwater, her flying \n        speed is quadrupled, but she can only move upwards.</p>`)),e.combat.addAction(new o.Action(n.Activation.BonusAction,"<p><strong><em>Quickened Spells.</em> (5/LR)</strong> Irene can cast \n        any of her spells with a casting time of 1 action as a bonus action \n        instead.</p>")),e.combat.addAction(new o.Action(n.Activation.Reaction,"<p><strong><em>Spellcasting.</em></strong> Shield</p>")),e.combat.addAction(new o.Action(n.Activation.Reaction,`<p><strong><em>Wrath of the storm.</em></strong> Whenever a creature \n        she can see hits Irene with an attack, she can use her reaction to cause \n        it to make a DC ${e.dc(n.DStat.Cha)+3} CON save and take ${(0,r.wrapRoll)([3,s.D8])} \n        ${(0,r.wrapDamageType)(n.DamageType.Lightning)} or ${(0,r.wrapDamageType)(n.DamageType.Thunder)} \n        damage if it fails.</p>`)),e.combat.addAction(new o.Action(n.Activation.LegendaryAction,"<p>Irene gets 3 legendary actions per round.</p>")),e.combat.addAction(new o.Action(n.Activation.LegendaryAction,"<p><strong><em>Move.</em> (Costs 1)</strong> Irene moves upto her movement \n        speed.</p>")),e.combat.addAction(new o.Action(n.Activation.LegendaryAction,"<p><strong><em>Levitate.</em> (Costs 1)</strong> Irene casts levitate on \n        one target, consuming a spell slot.</p>")),e.combat.addAction(new o.Action(n.Activation.LegendaryAction,`<p><strong><em>Shattertide.</em> (Costs 3)</strong> Irene causes upto 6 creatures \n        in a 40 ft cone from her that are ${(0,r.wrapCreatureSize)(n.CreatureSize.Large)} \n        or smaller to be pushed back to 40 ft distance on a failed DEX \n        save of DC ${e.dc(n.DStat.Cha)+3} and deals ${(0,r.wrapRoll)([3,s.D8])} \n        ${(0,r.wrapDamageType)(n.DamageType.Lightning)}, ${(0,r.wrapDamageType)(n.DamageType.Force)},\n        ${(0,r.wrapDamageType)(n.DamageType.Thunder)} and ${(0,r.wrapDamageType)(n.DamageType.Piercing)}\n        (magical) damage each to them (halved if the DEX save was a success).</p>`)),e.combat.addAcBonus(4),e.sheet.size=n.CreatureSize.Medium,e.sheet.subtitle=" Humanoid (Air Genasi), Lawful Good",e.sheet.acDesc="(Mastercrafted Studded Leather)",e.sheet.category="human"}},9105:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupLesley=void 0;const n=a(3998),i=a(4492);t.setupLesley=function(){const e=new i.Character(n.NpcID.Lesley);e.core.name="Lesley Aeternus",e.core.imgPath="character_tokens/C1/Arc1/lesley.png",e.card.addCardTag("Deceased"),e.card.setCampaignArc(1,1),e.card.addCardTag("F2860"),e.card.addCardTag("CR | 18 / 24"),e.card.addCardTag("From | Shadowfell / Materia / Preservation"),e.card.addCardTag("Allegiance | Preservation"),e.card.addCardTag("Race | Higher Vampire"),e.card.addCardTag("<span class='verbose'>Chronurgy</span> Wizard / <span class='verbose'>Knowledge</span> Cleric"),e.card.addCardTag("Time Command"),e.card.addCardTag("Faction: Projectors"),e.card.summary=()=>`A rich higher vampire mage with powerful time control powers. Came to The Gardens after a failed attempt to\n      kill ${i.Character.get(n.NpcID.Caelynn).createLink("Caelynn")}. Lived for two millennia there as her closest friend/advisor. Detested \n      her family and avoided using her higher vampiric and bloodline powers. Instead, spent all that time cultivating her arcane skills,\n      becoming a highly skilled mage/enchanter over time. Her skills eventually becoming so well known in the right circles that clients\n      from various planes would give her contracts to research new spells or enchantments at their direction.<br/>\n      In her time during the gardens, she took on two students - both of whom left her after their training was complete. One, \n      ${i.Character.get(n.NpcID.Ebenezar).createLink("a human with whom she was romantically involved with")}, eventually ditched her to \n      persue lichdom and delve deeper into the arcane. The other? Well ${i.Character.get(n.NpcID.Mostima).createLink("that fallen angel")} was \n      clear from the start she wouldn't stay there forever, but would continue to occasionally drop in for a cup of tea, before \n      disappearing off to God knows where.<br/>\n      In her last days, she went one step further and even stopped feeding on blood entirely. While a laudable step, it\n      took a toll on her mental health, and though she didn't cause trouble to anyone, her resolve failed her when an \n      ${i.Character.get(n.NpcID.Lucian).createLink("assassin in black")} finally came for her life. But by some twist of fate, she had forged a\n      bond with a person who was supposed to be her judge, jury and executioner - but he had deemed her not guilty. And via that bond...`,e.card.story=()=>`\n<h5>Early life</h5>\nAll higher vampires are aristocrats, served upon - should they require it - by their thralls and other creatures of \nthe shadowfell. However, even among them, the Aeternus family - one of the oldest - was highly feared and regarded,\nsince their blood granted them command over the flow of time itself. As such, as their youngest child, Lesley \ncommanded fear and respect before she was even old enough to know what the words meant. It would be long before she\nwould learn what respect meant, but unfortunately what fear was became clear to her very early in life.<br/>\nFor most higher vampires also share a particular trait - while their bodies are ageless, and can only ever grow \nstronger - old age is marked as their mind begins to slip. Not in terms of stupidity, loss of wisdom or weakness\nof will - no, a higher vampire could <i>never</i> be weak. It slips in terms of balance and stability. Elder vampires\nof aged minds are extremely paranoid and easy annoyed. They become desperate for solitude, and suffer in every word\nthey speak - as if every single word would bring them one step closer to insanity. They also turn into extreme \npsychopaths - it is said in the shadowfell that should any creature save another higher vampire even approach within\na mile of them, even unwittingly, they would instantly kill them for offending them with their existence. Ultimately,\nthis is what keeps the population in check, for only another higher vampire - or another titan - can truly kill a \nhigher vampire.<br/>\nUnfortunately, for child Lesley this meant she had to bear witness to mind-numbing amounts of domestic violence as\nshe grew into her teenage years (i.e., was a century old), to the point where one of the parents ripping out the \nhead of another would just draw a vacant dead glance from her, before she went back to reading her books. Her sole \ncomfort was in her elder brother, who taught her to use the powers of the bloodline - who stood by her - taking the\nbrunt of the shit - as her parents seperated, each cocooning up in their subdomains, never to be disturbed again. \nHowever, that strain was too much for him too, and on one - only one - occasion, he snapped violently at her. \nThat once was enough, she fled from the realm, never to look back again.\n<h5>Meeting Caelynn</h5>\nIn Materia, Lesley took shelter in the vast city of Ortus of Terra Prima. While the rest of the material plane was \nstill using bronze, and in some cases, stone tools. Veteres had already moved on to iron, cement and even niter. \nOrtus was quickly regaining the glories of times past, Lesley was certain they would learn steel-craft soon too. \nThat glorious, densely populated city was the perfect dream. Books that were a rarity in Shadowfell were present in \nthousands in the many libraries here. Poets and scholars blossomed in great numbers. Conversation with any stranger \nwas a pleasure. Lesley finally relaxed herself, took the persona of an author and set herself free...<br/>\n Sadly, with all the pent-up darkness within, setting herself free was the most dangerous thing she could do. Soon\nshe began to develop a taste for blood, something she'd never had before she came here, which before she knew it \nwas a crippling addiction. But unlike her ilk, she avoided violence, avoided killing, making thralls. It reminded her\nof her family, her kind way too much. The very thought disgusted her. For that matter, so did her addiction, but try as\nshe would, she couldn't let go - her darkness returned stronger than ever every time she tried to step away, and what\nwas a thing of pleasure soon became a necessity for being able to function.<br/>\nIt was at this time that she made friends with a rather nice guy, Nohadon, a person who would one day be regarded as one of \nthe greatest thinkers of the early classical era. To Lesley however, a person who would have been a God-sent company \nonce was now just an object of depraved anticipation. As she softly smiled and discussed ideas with him, she would \ninternally be picturing the oh-so-satisfying look of horror as she turned to feast upon him. However, there was just\none snag - a random noblewoman, who seemed too smart for her own good, seemed to have caught on to something and was\ntime and again thwarting Lesley's attempts to isolate the guy. Finally, Lesley had had enough, for the first time \nshe felt too pissed off to care about her heritage. She would get rid of this meddling arrogant bitch who had no idea\nwhat she was facing.<br/> \nUnfortunately, as she lay - a decapitated and bloody mess - tangled in a bunch of thorny vines, she found out \nthe situation was reverse, and it was her who had been utterly deluded. It was at this time that reality of what\nshe was trying to do finally dawned on her - she was turning into the same people as those she had detested the \nmost. And so, instead of fleeing and disappearing like the noblewoman advised, she went back to resume her life,\ndrawing an angry glare from her more than once. As time passed, she learnt to function, to curtail her bloodlust \nand just... function. Gradually, her time spent with Nohadon turned \nconsiderably more honest, pure and, strangely, fun. The noblewoman too, Lesley learnt her true name was \n${i.Character.get(n.NpcID.Caelynn).createLink("Caelynn")}, began to warm up to her. Her nightmare was again turning \ninto a dream... until her brother came.<br/>\nEverything shattered, utterly broken and traumatized by what proceeded, that very night Lesley assaulted Nohadon and fed\non his lifeblood. As her suppressed addiction returned with a vengeance, she sucked out more and more - further than \nshe'd ever gone before - to the point where she could've killed him at any point. But thrilled, anxious, she wanted \nto pleasure herself more before she did that finale - she wanted to forget everything... but found she couldn't. From\nwhere she couldn't fathom, but the awful grace of God seemed to have fell on her. She couldn't lose herself, couldn't \npretend she enjoyed this - as she finally opened her eyes and faced what she was doing. Aghast, guilt seized her, \nchoked her. He wasn't dead yet - but there was nothing she could do to help him at this stage. Yet she tried, weeping\nand broken, she tried - but could only watch as the life left him...<br/>\nUntil a single word forced the life back into him, a single word from Caelynn, more pleasant than any she'd heard her \nwhole life. A word that carried mana considerably stronger than she could ever summon. That was when Caelynn told her \neverything - including about the place where even <i>her</i> family could never reach her again, a place where a group of \neight could well take on a higher vampire, a place where the leaders were evenly matched against \n${i.Character.get(n.NpcID.Sanguinarch).createLink("The SanguineArch")} themself...\n<h5>Ebenezar</h5>  \nLesley's time in Bunker#371 was satisfying, not entirely perfect - but as happy as a penance could be. Happier than \nshe felt she deserved anyway. And while the blacksmith and his wife pissed her off, subtly reminding her of her \nfamily, Caelynn was a pure pleasure. Plus even ${i.Character.get(n.NpcID.Irene).createLink("an inquisitor")}, who had been \nso adamant that Lesley was a criminal, that there was something off about her - until Lesley had revealed\nher heritage, was becoming a great friend. And so she was sure she wasn't lacking in any way - until she met \n${i.Character.get(n.NpcID.Ebenezar).createLink("Ben")}. A human \nboy who'd stumbled into a perpendicularity by accident (well he'd drowned in there), the teenager was solemn far beyond \nhis age. And his eyes seemed so <i>tired</i>, eyes that had seen way too much. Seeing a boy that dead inside reminded \nLesley of times long past, times before she'd tasted human blood, times when she still looked up to her brother... \nshe pleaded Caelynn to allow her to take him in. After her approval, as Ben came to live with them, Lesley found out\nthat there was one thing which still excited him, one thing that made his eyes shine like a child's again - magic.<br/>\nHe'd watch wide-eyed with wonder at every experiment Lesley did, ask about every potion she concocted, be amazed by\nevery spell she cast. Flattered by being the subject of such innocent, genuine praise, she offered to teach the kid \nher ways. He readily agreed, and Lesley watched with pride as this new purpose brought life back into him. His mood \nimproved considerably, he turned to cooking and painting as hobbies, became the best friend of everyone in the \nbunker, and before long was the glue that held them all together. A slight voice deep inside Lesley made her worry a\nbit on how <i>passionate</i> the boy was about learning, every day in a land where all were immortal, and so \npreferred to maintain a very healthy work-life balance (often bit a bit more emphasis on the latter), the kid would \neasily be studying for over 13 hours a day. What was her ward studying that hard for, Lesley couldn't help but wonder, \nbut helped him the best she could anyway.<br/>\nLess than two centuries later, her teaching and his studying turned into both of them researching together, as the\nboy's skills began to rival hers. She also became aware, partly from the teasing of others, that the boy seemed to be\ndeveloping feelings for her - feelings she felt she could, probably did reciprocate. Yet despite being over two \ncenturies old by experience, his body was still that of someone in their late teens. So, his request of being allowed\ntime to roam Materia, more specifically, his home planet terra - was met with approval by all. Caelynn did warn her \nhowever that something felt wrong in the kid's eyes as she had approved, so Lesley secretly spiked one of his drinks\nwith a pinch of her blood - it would let her know if he ever died.<br/>\nHe went out more than two dozen times over three centuries, and Lesley was sure her fears were unwarranted, when \nsuddenly her blood froze - Ben was dead! As she immediately prepared herself to project, the connection was \nre-established, and so she had no idea what happened. If she had trained her vampiric abilities better, instead of \nleaving them sealed and forgotten until the rare occasions that required them arose - she might've known he'd turned\nto Lichdom. But as it happened, she merely assumed there was some disruption and relaxed herself. Afterwards, he did\nreturn to the bunker, but continued to go out steadily back into the material plane. As his skills surpassed hers, \nhe also began to become distant, and would at times rebuke her for being too clinging - something very unfair, and \nsomething he'd never say before, but also something that struck a deep insecurity within her from her childhood days, \nand shook her to the core.<br/>\nWhile their relationship wasn't quite perfect, they still were happy - or at least so Lesley felt. So when she was \ndevastated when he declared he needed to go into the castle. Though he promised he'd return, she knew it was over \nbetween them. Maybe she should've stopped him, but old instincts took over that would not allow her to 'look' weak. \nSo instead she, perhaps a bit coldly, said she was ok - but insisted he take a very particular 'watch' with her. With \nhim gone, Lesley finally broke - and old habits returned. However, this time she was wise enough to not drink wantonly, \nbut only from someone who could overpower her if she lost control - someone who was also close to her. While the \nothers always kept encouraging her that he would return - he had learnt magic strong enough to open perpendicularities\n- her blood already had told her he was dead for good. So she drank. Hating herself, she continued to drink, and \ndrink, and drink (becoming the reason for Caelynn to appear even paler than her natural complexion).\n<h5>Forgiveness</h5>\nThe first break from her relapse into darkness was when people said a \n${i.Character.get(n.NpcID.Mostima).createLink("mysterious girl with temporal control")} had shown up and wanted to be her ward.\nThough she was in no mood to, Caelynn forced her to take her as a student, something Lesley thanked her for later.\nBut the final reprieve came when, a few decades later, Caelynn brought home a group of guests - one of them an aasimar paladin,\nof an oath high enough to be a full knight radiant. From the first day, he could feel something was off in the \nbunker. He would find her, she knew, and while she could kill him, she found herself unwilling to. Her past had \nfinally caught up, judgement was here, and with her addiction resurfacing, she couldn't find it in herself to try to \nhinder it. She didn't want to die, though and tried hiding her true nature until hiding it was virtually equivalent \nto killing him. For he'd conjoined two powerful relics, one from the castle and another from the Guardian of magic, the \nlatter sealing the essence of the Primordials and being watched by Ruin himself. He was taken by surprise and \ncouldn't resist it. He would die before the split-second was over. No one else had noticed yet - and wouldn't before\nit was too late, but even the best of them didn't have the reflexes of a higher vampire - nor the strength.<br/>\nSo betraying her true nature, to the shock of many, she broke the conjunction and pulled him out to safety. It was \nnot a plea to spare her life because she'd saved his. No, this was no bargain, no trade deal. After preparing herself\nand wrapping on restraints to suppress her vampiric powers, she stood before him. With the secret out, she answered\nall his questions honestly, and closed her eyes, bracing for the end. Yet he wouldn't strike. While he made it clear\nhe didn't fully trust her, she had to be sure he <i>meant</i> it when he chose to spare her. So she asked him to \nbreak the restraints she had on - and stand before her in her unrestrained vampiric powers, which he did. Bless the\nman, he did! And so, knowing that they would be heading into the castle - she gave him her vampiric sigil - a token \nof trust beyond what most mortals could comprehend. It gave him powers like her own which would surface if, and only \nif, needed. It also lent the authority of her family to him, and gave him the power to truly kill her for good. Such\na need didn't arise, however. But the group did contact her to confirm Ben was gone (via a device he'd left \nbehind), but she knew that already. Still, when Caelynn told her all the Guardians were heading there, and were \nlikely to run into them, she was all too glad to be a part of that group, even if it meant running into the \nSanguineArch themself...`,e.opinions.isOpinionated=!1}},216:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupLia=void 0;const n=a(3998),i=a(4492);t.setupLia=function(){const e=new i.Character(n.NpcID.Lia);e.core.name="Lia Mistcloak",e.core.imgPath="character_tokens/C1/Arc1/lia.png",e.card.setCampaignArc(1,1),e.card.addCardTag("F1280"),e.card.addCardTag("CR | 10"),e.card.addCardTag("From | Faewild / Preservation"),e.card.addCardTag("Allegiance | Preservation"),e.card.addCardTag("Race | <span class='verbose'>High</span> Elf"),e.card.addCardTag("<span class='verbose'>Samurai</span> Fighter"),e.card.addCardTag("Faction: Watchers"),e.card.summary=()=>`An elven archer who roamed freely the Feywild until by cruel circumstance she fell prey to the second \n      nightmare. Survived the encounter thanks to ${i.Character.get(n.NpcID.Caelynn).createLink("Caelynn")}'s \n      intervention, who remained on the lookout for primordial incursions. Caelynn then offered her asylum with \n      herself promising to keep her safe from the primordial as far as possible, an offer she readily took. \n      Rescued ${i.Character.get(n.NpcID.Ulrich).createLink("Ulrich")} when he showed up a few centuries later and subsequently \n      married him on his insistence. While not the ideal marriage, the two manage fine nowadays.`,e.opinions.isOpinionated=!1}},8252:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupLing=void 0;const n=a(3998),i=a(4492);t.setupLing=function(){const e=new i.Character(n.NpcID.Ling);e.core.name="Ling",e.core.imgPath="character_tokens/C1/Arc1/ling_garden.png",e.card.setCampaignArc(1,1),e.card.addCardTag("F"),e.card.addCardTag("CR | 27"),e.card.addCardTag("From | Preservation"),e.card.addCardTag("Allegiance | ???"),e.card.addCardTag("Race | Titan &times; <span class='verbose'>Blue Dragon</span>"),e.card.addCardTag("<span class='verbose'>Draconic</span> Sorcerer"),e.card.addCardTag("<span>Primordial | Outsider <span class='verbose'>(3<sup>rd</sup> Fragment of Sui)</span></span>"),e.card.addCardTag("Ex-Guardian of Diplomacy"),e.card.addCardTag("Ex-Lighthouse Keeper"),e.card.primaryImageTitle="Lighthouse Keeper",e.card.addAlternateImage("Shrine Maiden","character_tokens/C1/Arc1/ling_sui.png"),e.card.summary=()=>`One of the fragments of an outer primordial. Moved into the Gardens long ago along with \n     ${i.Character.get(n.NpcID.Kjerra).createLink("Kjera")} and worked as a lighthouse keeper there so as to be best placed to\n      respond to the revival of her 'parent' or any other outsiders. Was chosen to be the Guardian of Diplomacy after\n      the inquisitors' betrayal. Agreed but went missing during the expedition inside the Castle of the Night \n      following Preservation's death and the Survivor's Ascension.`,e.opinions.isOpinionated=!1}},5510:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupLucian=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupLucian=function(){const e=new s.Character(i.NpcID.Lucian);e.core.name="Lucian",e.core.imgPath="character_tokens/C1/Arc1/lucian_norm.png",e.dStats.pb=n.Prof.get(7),e.dStats.initializeStats(13,25,7,13,5,27),e.card.setCampaignArc(1,1),e.card.addCardTag("M210"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Allegiance | Ruin / Troupe Leader"),e.card.addCardTag("Race | Feline"),e.card.addCardTag("<span class='verbose'>Echo</span> Warrior / <span class='verbose'>Assassin</span> Rogue / ..."),e.card.addCardTag("Nightblood | Ominous Melody"),e.card.addCardTag("Time Command"),e.card.addCardTag("Aberrant Fused (???)"),e.card.addCardTag("<i>He who quiets</i>"),e.card.addCardTag("CR | 23"),e.card.primaryImageTitle="Phantom",e.card.addAlternateImage("Solitaire","character_tokens/C1/Arc1/lucian_mad.png"),e.card.summary=()=>`\n    "This darkness is a refuge, a throne, and paradise. The spirits of the dead have never left, and I’ve cursed \n     the world from atop their bones... Seeing me as I am now, do you still want to hear my song? Do you still\n     dare... to stand before me?"<br/>\n     Calamity of The Troupe - an unfinished masterpiece of their leader. Was once raised as their rising star in\n     response to the threat that was ${s.Character.get(i.NpcID.Ebenezar).createLink("the Lich")}. But turned against them only \n     as he slaughtered all the troupe's senior members in one night and escaped into Materia - sealing his\n     memories and powers. He returned to the outer planes by accident and sought out the troupe when he did. \n     Descended into insanity after killing ${s.Character.get(i.NpcID.Mouthpiece).createLink("The Mouthpiece")} and inheriting \n     his curse. Following which he stealthily assassinated ${s.Character.get(i.NpcID.TraitorOthello).createLink("The Traitor")}, who was \n     preoccupied in fighting 'Agents of the Fifth', thus freeing the Primordial nightmares.\n    `,e.opinions.isOpinionated=!1}},747:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMaster=void 0;const n=a(3998),i=a(4492);t.setupMaster=function(){const e=new i.Character(n.NpcID.TheMaster);e.core.name="The Master",e.core.imgPath="character_tokens/C1/Arc1/g_order.png",e.card.addCardTag("Deceased"),e.card.setCampaignArc(1,1),e.card.addCardTag("M50K+"),e.card.addCardTag("CR | 27"),e.card.addCardTag("From | Materia / Preservation"),e.card.addCardTag("Allegiance | Preservation / ???"),e.card.addCardTag("Race | Shadar-Kai"),e.card.addCardTag("Paladin / Bard"),e.card.addCardTag("Faction: Inquisitors"),e.card.addCardTag("Ex-Guardian of Order"),e.card.summary=()=>`Known across all the realms simply as 'The Master' - the Guardian of Order was an expert at diplomacy, the \n      forceful arm-twisting kind, who always got his way. Unlike most others who took it easy in the garden, he spent\n      his whole life scheming and ruthlessly executing ever-more-complex Machiavellian schemes. So complex that even\n      his own loyalties were at times doubted, particularly when some links were found between him and\n      ${i.Character.get(n.NpcID.TraitorOthello).createLink("The Traitor")}. He was also a very strong warrior, rumoured to be a \n      radiant as well as have hemalurgic powers equivalent of Mistborn of old derived from an inordinate \n      number of spikes. A number equivalent to some of his seniormost counterparts within the castle itself, so many that \n      even Aluminium couldn't negate them in time. Committed suicide when Ruin attempted to assert his will via the\n      hemalurgic spikes instead of letting his knowledge fall into the enemies hands. A pity too, for he was \n      literally the personification of one of the ideals of the new Preservation, "There's always another secret."`,e.opinions.isOpinionated=!1}},971:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupUlrich=void 0;const n=a(3998),i=a(4492);t.setupUlrich=function(){const e=new i.Character(n.NpcID.Ulrich);e.core.name="Ulrich Mistcloak",e.core.imgPath="character_tokens/C1/Arc1/ulrich.png",e.card.setCampaignArc(1,1),e.card.addCardTag("M1020"),e.card.addCardTag("CR | 7"),e.card.addCardTag("From | Materia / Preservation"),e.card.addCardTag("Race | Human"),e.card.addCardTag("<span class='verbose'>Forge</span> Cleric"),e.card.addCardTag("Faction: Scholars"),e.card.summary=()=>"A human that lived in the last years of the Archaic era and had shown remarkable skill in making heavy armors \n      for those of his clerical order. Upon his death in war, Preservation gave him a second chance at sentient life\n      in the Gardens, as a reward for saving the lives of so many thanks to his meticulous work at their armors. \n      Since then he's been honing his skills and is now regarded as one of the finest smiths in the multiverse.",e.opinions.isOpinionated=!1}},4323:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupVahareth=void 0;const n=a(3998),i=a(4492);t.setupVahareth=function(){const e=new i.Character(n.NpcID.Vahareth);e.core.name="Vahareth Tsav Anat",e.core.imgPath="character_tokens/C1/Arc1/g_life.png",e.card.addCardTag("<i>Retired</i>"),e.card.setCampaignArc(1,1),e.card.addCardTag("M50K+"),e.card.addCardTag("CR | 28"),e.card.addCardTag("From | Materia / Preservation"),e.card.addCardTag("Allegiance | Preservation"),e.card.addCardTag("Race | Kalashtar"),e.card.addCardTag("Druid"),e.card.addCardTag("Faction: Inspector"),e.card.addCardTag("Ex-Guardian of Life"),e.card.summary=()=>`${i.Character.get(n.NpcID.Caelynn).createLink("Caelynn")}'s predecessor as the Guardian of Life as well as a \n      father figure to her. Scouted her out in Materia, then got her to the gardens and personally trained her. \n      Known and feared throughout all the outer planes for his unbreakable will and eyes that could delve into the \n      deepest nature of a person's soul with just a glance. 'Retired' after Leras' death.`,e.opinions.isOpinionated=!1}},9514:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupC1A2=void 0;const n=a(7450),i=a(3610),s=a(8830),o=a(3606),r=a(5729),l=a(7337),d=a(5960),c=a(1026),h=a(4133),p=a(7778),u=a(3757),m=a(1422),g=a(6017),f=a(7945),v=a(8366),y=a(7648),w=a(5663),S=a(6946),b=a(7640);t.setupC1A2=function(){(0,h.setupLogos)(),(0,u.setupMostima)(),(0,w.setupShimaken)(),(0,S.setupShimarin)(),(0,b.setupVerrader)(),(0,o.setupFiest)(),(0,m.setupMouthpiece)(),(0,v.setupSArch)(),(0,s.setupDecroa)(),(0,i.setupBaphomet)(),(0,d.setupKjerra)(),(0,r.setupGDef)(),(0,f.setupOthello)(),(0,p.setupMandragora)(),(0,l.setupGen)(),(0,g.setupMuelsyse)(),(0,y.setupShamare)(),(0,c.setupLemuen)(),(0,n.setupAmaia)()}},7450:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupAmaia=void 0;const n=a(3998),i=a(4492);t.setupAmaia=function(){const e=new i.Character(n.NpcID.Amaia);e.core.name="Amaia",e.core.imgPath="character_tokens/C1/Arc2/amaia.png",e.card.setCampaignArc(1,2),e.card.addCardTag("Deceased (Merged)"),e.card.addCardTag("F43"),e.card.addCardTag("From | Materia / Water"),e.card.addCardTag("Race | Human"),e.card.addCardTag("Aberrant-fused"),e.card.addCardTag("Core of the Many"),e.card.addCardTag("CR | ?"),e.card.summary=()=>"\n    ",e.opinions.isOpinionated=!1}},3610:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupBaphomet=void 0;const n=a(3998),i=a(4492);t.setupBaphomet=function(){const e=new i.Character(n.NpcID.Baphomet);e.core.name="Baphomet",e.core.imgPath="character_tokens/C1/Arc2/baphomet.png",e.card.setCampaignArc(1,2),e.card.addCardTag("M20K+"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Race | Demon"),e.card.addCardTag("Demon Lord"),e.card.addCardTag("Domain | 20:00 to 21:00"),e.card.addCardTag("CR | 23"),e.card.summary=()=>"\n    The Demon Lord in command of the 'lowest level' of the Castle who often was summoned to other realms to fight\n      on the front lines, and so had inherited the traits of lesser demons - namely ferocity in battle without regard\n      to self-preservation, an irrational hatred of devils, and a slight dearth of brain cells. Regardless, the mere\n      mention of his name brought terror in the hearts of many - particularly in the lower levels of the castle...",e.opinions.isOpinionated=!1}},8830:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupDecroa=void 0;const n=a(3998),i=a(4492);t.setupDecroa=function(){const e=new i.Character(n.NpcID.DecroaSal);e.core.name="Decroa Sal",e.core.imgPath="character_tokens/C1/Arc2/decroa.png",e.card.setCampaignArc(1,2),e.card.addCardTag("F2620"),e.card.addCardTag("From | Shadowfell"),e.card.addCardTag("Race | Higher Vampire"),e.card.addCardTag("Crystal Command"),e.card.addCardTag("CR | 23"),e.card.summary=()=>`\n    A higher vampire who had been captured by the Troupe Long ago and used both as a trap against unwanted \n      intruders and for their 'plays' and research. Prolonged torture and withdrawal symptoms had made her a little \n      unhinged, and <i>very</i> thristy. Was finally freed by a group of adventurers and thereafter protected by \n      ${i.Character.get(n.NpcID.Sanguinarch).createLink("The SanguineArch")} until she could escape the \n      castle. Revealed herself to be a childhood friend of ${i.Character.get(n.NpcID.Lesley).createLink("Lesley")}'s.`,e.opinions.isOpinionated=!1}},3606:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupFiest=void 0;const n=a(3998),i=a(4492);t.setupFiest=function(){const e=new i.Character(n.NpcID.Fiest);e.core.name="Fiest",e.core.imgPath="character_tokens/C1/Arc2/fiest.png",e.card.setCampaignArc(1,2),e.card.addCardTag("Deceased"),e.card.addCardTag("M80"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Race | Human"),e.card.addCardTag("Class | Artificer"),e.card.addCardTag("CR | 9"),e.card.summary=()=>`\n    While he rarely stepped on to the field himself, ${i.Character.get(n.NpcID.Shimaken).createLink("Shimaken")} and the \n      others owed a lot to his technical genius. Since he rarely even left the confines of his lab, his life was\n      rather sheltered and happy. ${i.Character.get(n.NpcID.Lemuen).createLink("Lemuen")}'s boyfriend before she died.`,e.opinions.isOpinionated=!1}},5729:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupGDef=void 0;const n=a(3998),i=a(4492);t.setupGDef=function(){const e=new i.Character(n.NpcID.GDef);e.core.name="The Guardian of Defense",e.core.imgPath="character_tokens/C1/Arc2/g_def.png",e.card.setCampaignArc(1,2),e.card.addCardTag("-40K+"),e.card.addCardTag("From | Innovation / Preservation"),e.card.addCardTag("Allegiance | Preservation"),e.card.addCardTag("Race | Warforged &times; Aasimar"),e.card.addCardTag("Class | Fighter"),e.card.addCardTag("Guardian of Defense"),e.card.addCardTag("Atium Savant"),e.card.addCardTag("'Saint'"),e.card.addCardTag("CR | 27"),e.card.summary=()=>"\n    ???",e.opinions.isOpinionated=!1}},7337:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupGen=void 0;const n=a(3998),i=a(4492);t.setupGen=function(){const e=new i.Character(n.NpcID.Gen);e.core.name="Gen",e.core.imgPath="character_tokens/C1/Arc2/gen.png",e.card.setCampaignArc(1,2),e.card.addCardTag(""),e.card.addCardTag("From | Materia / Ruin / Devotion"),e.card.addCardTag("Race | Human"),e.card.addCardTag("Class | <span class='verbose'>Illusion</span> Wizard"),e.card.addCardTag("Class | Artificer"),e.card.addCardTag("CR | 17"),e.card.summary=()=>`\n    Little is known (so far) of ${i.Character.get(n.NpcID.Mandy).createLink("Mandragora")}'s brother except that he was\n      a regular studious boy in Terra Prima until he was kidnapped by a \n      ${i.Character.get(n.NpcID.Mostima).createLink("bored wandering plane-hopper")} and brought into the Castle of \n      Death to be used as a bargaining chip by a group of adventurers, since he was supposedly the only family, and \n      only weakness of his sister.`,e.card.primaryImageTitle="Child",e.opinions.isOpinionated=!1}},5960:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupKjerra=void 0;const n=a(3998),i=a(4492);t.setupKjerra=function(){const e=new i.Character(n.NpcID.Kjerra);e.core.name="Kjerra",e.core.imgPath="character_tokens/C1/Arc2/g_mag_stone.png",e.card.setCampaignArc(1,2),e.card.addCardTag("F"),e.card.addCardTag("From | Stone / Preservation"),e.card.addCardTag("Race | Titan <span class='verbose'>&times; Serpentine</span>"),e.card.addCardTag("Class | Spellcaster <span class='verbose'>(All)</span>"),e.card.addCardTag("Primordial | Shardic"),e.card.addCardTag("Guardian of Magic"),e.card.addCardTag("Atium Savant"),e.card.addCardTag("CR | 30"),e.card.primaryImageTitle="Lithic",e.card.addAlternateImage("Humanoid","character_tokens/C1/Arc2/g_mag_human.png"),e.card.summary=()=>"\n    Very little is known (so far) about the Guardian of Magic. Except that she keeps her consciousness distributed\n      across various forms and bodies, not all humanoid, across several reams. And so she is pretty much immortal even\n      before her primordial origins are taken into account. Since each body has its own reservoir of mana, she \n      herself has near unlimited mana and can cast all non-proprietary spells, and most proprietary ones, known in \n      all the dimensions. She personally maintains the entire internal financial infrastructure of the Gardens.",e.opinions.isOpinionated=!1}},1026:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupLemuen=void 0;const n=a(3998),i=a(4492);t.setupLemuen=function(){const e=new i.Character(n.NpcID.Lemuen);e.core.name="Lemuen",e.core.imgPath="character_tokens/C1/Arc2/lemuen.png",e.card.setCampaignArc(1,2),e.card.addCardTag("Deceased"),e.card.addCardTag("F124"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Race | Aasimar"),e.card.addCardTag("Class | <span class='verbose'>Gunslinger</span> Fighter"),e.card.addCardTag("Class | <span class='verbose'>Assassin</span> Rogue"),e.card.addCardTag("'Saintess'"),e.card.addCardTag("Nightblood | Neural Link"),e.card.addCardTag("CR | 14"),e.card.summary=()=>`\n    ${i.Character.get(n.NpcID.Mostima).createLink("Mostima")}'s half-sister and ${i.Character.get(n.NpcID.Shimarin).createLink("Rin")}'s\n      teacher - she was reputed to be a sniper without compare. While her life had a great deal of ups and downs,\n      very few individuals would know her full life story - probably only Mostima. And yet, one adventurer did begin\n      to bond with a part of her left behind after she died, inheriting her skills and small pieces of her memories.`,e.opinions.isOpinionated=!1}},4133:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupLogos=void 0;const n=a(3998),i=a(4492);t.setupLogos=function(){const e=new i.Character(n.NpcID.LogosPlaywright);e.core.name="The Playwright",e.core.imgPath="character_tokens/C1/Arc2/logos_normal.png",e.card.setCampaignArc(1,2),e.card.addCardTag("M50K+"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Race | Banshee (Demon)"),e.card.addCardTag("Greater Demon Lord"),e.card.addCardTag("Domain | 01:40 to 01:56"),e.card.addCardTag('Aberrant-Fused <span class="verbose">(Tragodia)</span>'),e.card.addCardTag("CR 30"),e.card.primaryImageTitle="The Writer",e.card.addAlternateImage("The Demon Lord","character_tokens/C1/Arc2/logos_banshee.png"),e.card.summary=()=>"\n    The enigmatic 'scriptwriter' of the Troupe. From the 'Troupe Leader' he\n    gained an uncanny ability to write reality to his whim, anything he writes <i>will exactly occur</i> as he wrote it. \n    However this works better for futures far off and with a lot of possibilities. Is functionally immortal\n    since he wrote his own ending in the far future. <br/>\n    Before he became the Playwright, he was also a greater demon lord. Banshees being male is extremely rare, and \n    all are very dangerous, and one among them becoming Lord was unheard of before him. Even back then he could \n    cast reality-bending magic simply by speaking aloud or writing his commands in the air.",e.opinions.isOpinionated=!1}},7778:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMandragora=void 0;const n=a(3998),i=a(4492);t.setupMandragora=function(){const e=new i.Character(n.NpcID.Mandy);e.core.name="Mandragora",e.core.imgPath="character_tokens/C1/Arc2/mandy.png",e.card.setCampaignArc(1,2),e.card.addCardTag("F76 (16)"),e.card.addCardTag("From | Materia / Ruin"),e.card.addCardTag("Race | Ursine"),e.card.addCardTag("Nightblood | Stoneward"),e.card.addCardTag("CR | 16"),e.card.summary=()=>`\n    A criminal and gang/cult leader, she was well known and feared throughout the lower levels of the castle for \n      being a very advanced case of nightblood. It gave her powers to manipulate stone, something which also made \n      her near impossible to kill, while completely sapping her of human emotions like empathy, making her a \n      psychopathic killing machine. Seemed to be researching some clues regarding the plane of the earth a \n      ${i.Character.get(n.NpcID.Ebenezar).createLink("particularly adept spellcaster")} had left behind but was thwarted by a \n      group of adventurers who handed her research to ${i.Character.get(n.NpcID.Verrader).createLink("Verrader")}.`,e.opinions.isOpinionated=!1}},3757:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMostima=void 0;const n=a(3998),i=a(4492);t.setupMostima=function(){const e=new i.Character(n.NpcID.Mostima);e.core.name="Mostima",e.core.imgPath="character_tokens/C1/Arc2/mostima.png",e.card.setCampaignArc(1,2),e.card.addCardTag("F152"),e.card.addCardTag("Plane-hopper"),e.card.addCardTag("From | Devotion | Materia | Ruin | ALL"),e.card.addCardTag("Race | Aasimar &times; Tiefling"),e.card.addCardTag("Class | <span class='verbose'>Clockwork Soul</span> Sor-lock"),e.card.addCardTag("Class | <span class='verbose'>Chronurgy</span> Wizard"),e.card.addCardTag("Class | Fighter"),e.card.addCardTag("Nightblood | Shattered Time"),e.card.addCardTag("'Fallen Saintess'"),e.card.addCardTag("Keeper of the Lock and Key"),e.card.addCardTag("CR | 25"),e.card.primaryImageTitle="Messenger",e.card.addAlternateImage("Saintess","character_tokens/C1/Arc2/mostima_saint.png"),e.card.summary=()=>"\n    A fallen angel who can move through planes without relying on perpendicularities. Has a tendency of talking to\n    someone one minute and disappearing the next. Suffers from an advanced case of Nightblood but doesn't seem to \n    suffer from psychosis or neurosis. Carries two staves that appear powerful and seem to be the manifestation of\n    an ancient, or rather timeless, soul.",e.opinions.isOpinionated=!1}},1422:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMouthpiece=void 0;const n=a(3998),i=a(4492);t.setupMouthpiece=function(){const e=new i.Character(n.NpcID.Mouthpiece);e.core.name="Troupe Mouthpiece",e.core.imgPath="character_tokens/C1/Arc2/ahrendts.png",e.card.setCampaignArc(1,2),e.card.addCardTag("M"),e.card.addCardTag("Deceased"),e.card.addCardTag("From | Materia / Shadowfell / Ruin"),e.card.addCardTag("Allegiance | Ruin &times; Outsiders"),e.card.addCardTag("Race | Titan <span class='verbose'>&times; Aberration</span>"),e.card.addCardTag("Primordial | Outsider <span class='verbose'>(Curse)</span>"),e.card.addCardTag("CR | 23"),e.card.summary=()=>`\n    Was somehow related to the Witch King of lore. The most loyal member of the troupe, he took it upon himself\n      to be the host/announcer of the Troupe's 'shows'. Responsible for their most grotesque creations which often \n      were looked down upon by ${i.Character.get(n.NpcID.LogosPlaywright).createLink("The Playwright")} as being crude and tasteless. \n      Was killed by a group of adventurers and ${i.Character.get(n.NpcID.Lucian).createLink("Solitare")} but he had already \n      accomplished what his master needed...`,e.opinions.isOpinionated=!1}},6017:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMuelsyse=void 0;const n=a(3998),i=a(4492);t.setupMuelsyse=function(){const e=new i.Character(n.NpcID.Mumu);e.core.name="Muelsyse",e.core.imgPath="character_tokens/C1/Arc2/muelsyse.png",e.card.setCampaignArc(1,2),e.card.addCardTag("F343"),e.card.addCardTag("From | Water / Innovation"),e.card.addCardTag("Race | High-Elf"),e.card.addCardTag("Class | Artificer"),e.card.addCardTag("MD ???, RyneTech Labs"),e.card.addCardTag("CR | 25"),e.card.summary=()=>`\n    A well known research specialist from Innovation who specialized in nanomachines and fluid automation. Had \n      come to the castle of Ruin for reasons unknown and there happened to meet, and protect from imminent \n      destruction, ${i.Character.get(n.NpcID.Fiest).createLink("one of the fans of her research")} and also helped out his group of adventurer \n      friends. However, being in a rush they couldn't really get to know her better then.`,e.opinions.isOpinionated=!1}},7945:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupOthello=void 0;const n=a(3998),i=a(4492);t.setupOthello=function(){const e=new i.Character(n.NpcID.TraitorOthello);e.core.name="The traitor",e.core.imgPath="character_tokens/C1/Arc2/othello.png",e.card.setCampaignArc(1,2),e.card.addCardTag("Deceased"),e.card.addCardTag("M5020"),e.card.addCardTag("From | Materia / Preservation / Ruin"),e.card.addCardTag("Allegiance | Preservation (?)"),e.card.addCardTag("Race | Human"),e.card.addCardTag("Class | Fighter"),e.card.addCardTag("Class | Barbarian"),e.card.addCardTag("Class | Paladin"),e.card.addCardTag("Apprentice Guardian of Defense"),e.card.addCardTag("<i>Bearer of Agonies</i>"),e.card.addCardTag("CR | 20"),e.card.summary=()=>`\n    Once the apprentice guardian of defense, he betrayed the people in Preservation to kill everyone in the bunker\n      with the help of the troupe and escaped into the castle. The only person, other than himself, who would've \n      known all the details was ${i.Character.get(n.NpcID.TheMaster).createLink("The Guardian of Order")} before he passed away.\n      <br/>\n      By the time he was found again by a group of adventurers, he was imprisoned by the troupe next to a rather \n      large explosive, and had completely lost his mind - as he kept babbling some gibberish. As they were escaping\n      with him, however, the mists touched him causing him to fully become himself again. Unfortunately, this was but\n      for a moment since soon after he was assassinated by ${i.Character.get(n.NpcID.Lucian).createLink("Solitaire")}.`,e.opinions.isOpinionated=!1}},8366:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupSArch=void 0;const n=a(3998),i=a(4492);t.setupSArch=function(){const e=new i.Character(n.NpcID.Sanguinarch);e.core.name="The SanguineArch",e.core.imgPath="character_tokens/C1/Arc2/sarch_m.png",e.card.setCampaignArc(1,2),e.card.addCardTag("-"),e.card.addCardTag("From | Shadowfell"),e.card.addCardTag("Race | Titan <span class='verbose'>&times; Vampire</span>"),e.card.addCardTag("Primordial | Shardic"),e.card.addCardTag("The Original"),e.card.addCardTag("Life Command"),e.card.addCardTag("CR | 29"),e.card.primaryImageTitle="Male",e.card.addAlternateImage("Female","character_tokens/C1/Arc2/sarch_f.png"),e.card.summary=()=>"\n    Little is known (so far) about the first, and primordial, vampire and the de facto Lord of the entire dimension\n      of the Shadowfell except that they are extremely dangerous to all but other higher vampires, most of whom regard \n      them with utmost respect. Fear, yes, but respect...",e.opinions.isOpinionated=!1}},7648:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupShamare=void 0;const n=a(3998),i=a(4492);t.setupShamare=function(){const e=new i.Character(n.NpcID.Shamare);e.core.name="Shamare",e.core.imgPath="character_tokens/C1/Arc2/shamare.png",e.card.setCampaignArc(1,2),e.card.addCardTag("Deceased?"),e.card.addCardTag("F52"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Race | Vulpine"),e.card.addCardTag("Warlock"),e.card.addCardTag("Nightblood | Voodoo"),e.card.addCardTag("Soul Weaver"),e.card.addCardTag("CR | 12"),e.card.summary=()=>`\n    A child who'd been forced into a harsher life someone of her age deserved, the death of her sister caused her\n      to inherit her nightblood and learn of her 'arts'. These 'arts' involved weaving the souls of people, and \n      others, into inanimate objects - twisting their identity and spiritual energy to perform certain tasks. The\n      first soul she weaved was that of her own sister's, who had been shot - as she was trying to go incognito - by \n      ${i.Character.get(n.NpcID.Shimarin).createLink("a sniper")} at the behest of her \n      ${i.Character.get(n.NpcID.Mouthpiece).createLink("last employer")} after she had completed a certain contract supposedly\n      involving a lock. Shamare finally gave up her quest for vengeance when she realized she was being manipulated.`,e.opinions.isOpinionated=!1}},5663:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupShimaken=void 0;const n=a(3998),i=a(4492);t.setupShimaken=function(){const e=new i.Character(n.NpcID.Shimaken);e.core.name="Ken Shima",e.core.imgPath="character_tokens/C1/Arc2/shimaken.png",e.card.setCampaignArc(1,2),e.card.addCardTag("Deceased"),e.card.addCardTag("M72"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Allegiance | Preservation"),e.card.addCardTag("Race | Human"),e.card.addCardTag("Class | <span class='verbose'>Battlemaster</span> Fighter"),e.card.addCardTag("Class | <span class='verbose'>Bondsmith</span> Paladin"),e.card.addCardTag("Lerasium Savant"),e.card.addCardTag("CR | ?"),e.card.primaryImageTitle="Rebel",e.card.addAlternateImage("Bondsmith","character_tokens/C1/Arc2/shimaken_uber.png"),e.card.summary=()=>`\n    An orphan in the Castle of the Night who was adopted and raised by ${i.Character.get(n.NpcID.Lemuen).createLink()} along \n    with ${i.Character.get(n.NpcID.Shimarin).createLink("his sister")}. Wasn't the\n    best at fighting but maintained an unshakable, and contagious, aura of hope and optimism despite having seen \n    his fair share of atrocities and horrors. Organized a 'resistance' aimed at making leaving the castle possible.`,e.opinions.isOpinionated=!1}},6946:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupShimarin=void 0;const n=a(3998),i=a(4492);t.setupShimarin=function(){const e=new i.Character(n.NpcID.Shimarin);e.core.name="Rin Shima",e.core.imgPath="character_tokens/C1/Arc2/shimarin.png",e.card.setCampaignArc(1,2),e.card.addCardTag("Deceased"),e.card.addCardTag("F81"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Allegiance | Ruin / Preservation"),e.card.addCardTag("Race | Human"),e.card.addCardTag("Class | <span class='verbose'>Assassin</span> Rogue"),e.card.addCardTag("Class | <span class='verbose'>Gunslinger</span> Fighter"),e.card.addCardTag("CR | 13"),e.card.summary=()=>`\n    An orphan adopted and raised by ${i.Character.get(n.NpcID.Lemuen).createLink()} who taught her sniping. Took it up as a job after \n    Lemuen got crippled. Worked in a team until ${i.Character.get(n.NpcID.Verrader).createLink("Verrader")} sold them out, \n    then worked solo. Was there, past midnight, when Ruin almost got complete - she made it back with \n    ${i.Character.get(n.NpcID.LogosPlaywright).createLink("The Playwright")}'s aid.`,e.card.story=()=>`\n<h5>Early Life and Capture</h5>\nIt is hardly unusual for a child to lose their parents at a very young age in the Castle of the Night, and so when her\nparents went missing, eight-year-old Rin found a plenitude of odd jobs, not all very ethical, to support herself and \nher four-year-old brother ${i.Character.get(n.NpcID.Shimaken).createLink("Ken")}. Not all her employers were the most scrupulous,\nhowever - and on one occasion, now 14 yrs of age, she found herself in the service of a sadistic, hateful and dangerous\n(at least, so it seemed to her then) thug. For his amusement, he forced her to suffer from a round of 'Russian \nRoulette', and experience that deeply terrified and traumatized her. He then told her that he'd found the trail of a \nvery dangerous assassin that had sniped one of his right-hand men. She was to go and sabotage their rifle with an \nexplosive he gave.<br/>\nThis mission lead her to sneak into a remote alley which she learnt had been dubbed 'Saints Row'. Unfortunately, or\nperhaps fortunately, she was woefully under-prepared - while she was quite adept in stealth, she didn't know a very \nimportant fact, all 'Saints' were bonded to their firearms. The minute she touched the gun, her target knew. Alarms \nwent off everywhere, and she was surrounded in moments. As she was being apprehended, she couldn't help but notice \nhow all of them were aasimar who looked noble-to-a-fault and had halos and wings hovering around them that appeared\nlike light reflected on a crystalline surface. ${i.Character.get(n.NpcID.Mostima).createLink("One of them")} however, also\nseemed to have the black horns and tails of a fiend. She seemed a lot less noble, and so to Rin a lot more unnerving,\nmore like a street thug she was used to instead of a divine being like the others.<br/>\nWhen her blindfolds were removed, she found herself in a cell. Sitting next to her, with her gun on her lap, was the\n${i.Character.get(n.NpcID.Lemuen).createLink("famed sniper")} she'd heard so much off. Her kindly - almost jovial - demeanour\ncompletely shocked Rin. She seemed not a bit mad, merely amused and curious. The stark contrast between her target,\nsupposedly her enemy, and her employer cracked something deep inside of her. She completely broke down, after half a \ndecade of keeping it together while living through hell, she - in the midst of hyperventilation and sobbing - unloaded\nall that her soul had been burdened with at that point. Lemuen heard her whole tale soberly - Rin couldn't help but \nnotice how Lemuen's face hardened when she got to her latest employer. When she was done, with a very comforting hug, \nLemuen said she and a few others would leave this colony to diffuse the trail on her. She asked Rin to come along \nwith them for now. Lemuen herself would train Rin to make her strong enough to go back and retrieve her brother. Rin\ngratefully agreed, though she was sure she hadn't been offered a choice (which made her more happy than \nit should have).<br/>\nLemuen said the ones coming with her would be her half-sister and \n${i.Character.get(n.NpcID.Fiest).createLink("her boyfriend")} - a human guy they'd met here who \nused to work on making and maintaining their firearms and other equipment. Also, it turned out the 'half-sister' was\nnone other than the half-fiend Rin had noticed earlier. Her earlier assessment was spot on, she was way rougher than\nLemuen - at least superficially. Though with Lemuen, Mostima too completely let down her guard and was cheerful and\nrelaxed. The four of them moved into a very secure, and quite cozy, bunker-like place where the two sisters trained\nher with firearms - Lemuen with rifles and Mostima with handguns. Despite their light-hearted natures, Rin couldn't\nhelp but notice the two were <i>very</i> good with weapons and infiltration. These were not skills someone acquired\nwith experience on the street, but the result of a careful training regimen drilled into elite squads of the \nstrongest militaries.\n<h5>Becoming a Sniper</h5>\nA year later, while she was getting anxious to rescue her brother already - the lingering fear that she wasn't yet \nprepared to take on the monster that was her former employer continued to haunt her. Unfortunately, fate wouldn't \nleave her a choice. In their year together, she found out a lot about them - at least about stuff they were willing \nto share. The two had come from the material plane. Their father had turned away Mostima who'd sought him out, \ndenying that she was his child, and Lemuen had left him to live with her. The two of them had then begun to manifest\nthe powers of 'Saints', which had lead a certain organization to seek them out. The others they were living with were\npart of their old squad. Their squad had apparantly been charged with some mission in a place deep under the surface\nof their 'planet' known as the underdark. While there, the trails of some relic of the past had unwittingly led them\nright into a perpendicularity which had led them stright into the pits underneath the castle - where, ever so rarely,\nAtium could be found. Mostima had recognized this as the place where her mother had long ago been summoned from, and\nwhen the group had learnt they could return, they had established themselves here - awaiting any orders that may come \nsomeday.<br/>\nAnd so, after a year, Rin was deeply troubled when she saw their leader arrive at the doors of their bunker. No \norder had come, but he'd finally found a trail of the relics that had lead them in this castle in the first place. \nWhile the mention of the relics didn't really give the sisters a great deal of happiness - for they were the reason \nall of them were struggling within the Castle of Death himself instead of chilling in Terra Prima - they would not \ndisobey orders, even if it was uncertain if the chain of command still applied. Plus even they knew the supposed power\nof those relics, and the importance of recovering them. And so the three of them set out, leaving Rin alone in the bunker.<br/>\nA few days later, a familiar - though tired - knock on the door of their bunker was heard. Nervous with excitement, \nbut a bit apprehensive, Rin opened the door... and was shocked to find an abosolutely worn down Mostima, covered \nwith blood, halo and wings turned dark black, carrying an unconcious Lemuen inside. Fiest followed her with a haunted, \nhorrified look. Neither would explain any details, except that Lemuen would survive - though probably had lost the \nuse of her legs - and that Mostima would stay away from guns henceforth, and they would never see the other aasimars\nagain. And so the full reality sank into Rin, the only \nway to survive now was for Rin to take up Lemuen's job. She was not particularly skilled in anything else, save \nstealth and theivery, but that would never earn enough for the five of them, and none of the others could work. But \nbefore that, she needed to sort out her own demons, her own moral quandries. She had seen much, true, had been \nhardened by life, true, but living with the sisters had made her aware that she couldn't just close her mind and \nkill. If she went down this path, there was no looking back - and so she had to be absolutely certain that not an \niota of doubt or regret survived within her. She had to 'kill' her heart completely.<br/>\nSo after forcing Fiest to make some 'special preparations', she set off to rescue her brother. As she reached the \ndoors and corridors of her former employer, she noticed so many weaknesses in his defenses - stuff she'd never \nnoticed before. Security that seemed impregnable before seemed trivial now. One year of training had put her on a \nlevel far beyond this. In fact, she probably could've stormed in here even after two months of training. She realized that \nthe person she had feared as a 'monster' before was no more than a petty criminal. Of course the mission he'd sent \nher on was doomed to fail, a mission far beyond his means, a mission against true 'monsters'. A lucky break had put \nhim on their trail, and he was too low-level to even fathom how foolish pursuing that trail was. Well he'd know now,\nshe thought savagely as she finally walked into his room - the wretched man called out for help, but none would come. \nNone could come. She took out her revolver, made sure it was full, then took out one bullet as she headed to him, \nspinning the chamber.<br/>\nIn his defense, he found some backbone somewhere, and flat out declared - despite being terrified - he would not \nplay any games, she could just shoot him and get it over with. But she'd not come here to kill him, she'd come here \nto die. The others would manage somehow. But if she survived this night, a lot of people would die - some innocent, \nsome undeserving of death. If God didn't want that, now was the time to stop her. She put the muzzle to her own \nmouth and, as her former-boss looked on - stunned and aghast, she pulled the trigger.... and was still alive. \nDeep down, at that moment, she swore she could hear reality around her itself chuckle softly. Well, if \nthat's what God desired, who was she to deny Him. She would do what she did best, and would mourn every single time, \nbut then do it again. After the resolve sank in, she turned to her former boss, still crouched in a corner - eyes \nbetraying pure terror - as she emptied the other five bullets in his brain.<br/>\nWith that done, she went to find her brother, her iron mask cracking as she tried to imagine the look of horror\nthat would paint his face from living a year in this hell alone. But she was wrong. Her brother, while a bit wiser \nand hardened now, looked as pure and optimistic as the day she'd left him. That moment she realized her brother held\non to something she'd just killed in herself a few moments ago. Hope. Hope for a better future even while standing \nin utter darkness. And the courage to act for it, despite all odds. Standing there she could feel him shine so bright\nthat she actually squinted her eyes. And that's where she found her purpose, she would stalk the darkness and deal \nwith threats and obstacles there while her brother sought the light.\n<h5>Against the troupe</h5>\nThe years that followed did see life change for them all. Lemuen who'd been paralyzed below her waist was recovering \nunder the patient care of Fiest and continued to train Shimarin in the art of sniping. Shimarin chose to become part\nof a crew to persue bigger contracts, however that ended when \n${i.Character.get(n.NpcID.Verrader).createLink("one member of the crew")} betrayed the others for personal gain,\nonly to find he himself had been deluded by their 'fixer' - what resulted, therefore, was all of them drowing in \nmagma, except Shimarin, who was covering them from a distance. Of the rest of the crew, only the traitor survived, \ngaining nightblood at exactly that point. This was something Shimarin learnt much later though, however she never \nagain would work in a crew. During this time Mostima had started to go missing for large amounts of time, and only \nto her sister would she confide the details of her 'journeys'. Shimarin couldn't help but notice that her mood had \nstablised and improved considerably, and she seemed to have gained expertise in time magic after her frequent \ntravels - though she didn't pry into more details. A few years later, Lemuen to passed away from her nightblood \nleading to great loss of morale in the bunker. Yet Mostima had done something before the death, and Rin \ncould feel something was off, the death 'felt' unlike the others she'd seen. A few years after her \ndeath, they were joined by a tiefling, who remained in hiding from the demons in the castle. The kindest person \nthey'd ever met, he had taken a liking to her, despite herself. As life looked a bit better, in the years to come, \nshe took many high profile contracts - and didn't ask questions. Some even came from almost mythic figures - like\nonce when the troupe ${i.Character.get(n.NpcID.Mouthpiece).createLink("Mouthpiece")} himself asked her to kill a certain Vulpine soul weaver. <br/>   \nIn all her missions\nshe always followed one unsaid rule - after killing the target, she could also kill any one person near them of her \nchoice. That prevented her from being a mere pawn, a mere tool - and drove away a lot of petty schemers from her who\nregarded her as too much of a wildcard while attracting clients who wanted people dead for personal reasons but\nweren't strong enough to challenge them. For around such people, it was unlikely she'd want to kill a passer-by. \nThese were the clients she favoured, for their targets were almost always people the world was better off without.\nUnfortunately, this tradition of hers backfired badly one day - she was told by the mouthpiece that a group of people might \nbe coming from the gardens, and may be accompanied by some members of the troupe. If a drow priestess was among them,\nshe was to die. She did die, yet Rin found another drow - probably still a teenager, with them. A member of the \ntroupe, having failed a mission - Rin didn't envy her and wasn't surprised when she asked her captors to kill her. \nOf course, they refused, but then they didn't know the castle, didn't know the troupe, the mouthpiece. Better by her \nbullet then at their hands, better in Preservation than in Ruin, she thought, as she fired again. And so, her last \nthoughts were of peace, of being re-assured by the hulking barbarian. She didn't even know when she died. Enviable, \nRin thought coldly, as she packed up and went back home. What she didn't know was that she had disrupted one of the \nmajor schemes of the troupe and triggered of a cycle of vendetta's and mutual destruction.<br/>\nThe next day, the demons had captured the tiefling - and planned to burn him in a pyre of hellfire for some made up\ncrimes. Given how stupid demons at this level were, Rin had no doubt they had been assisted, and little doubt as to \nby whom. Well, she was not stupid enough to go into an execution ground, but she wouldn't let him suffer in hellfire. \nStrangely enough, and almost as a mockery, she'd also got another assassination contract from the troupe - a junior\nhad delivered it this time - that she was to assassinate the executioner. But then something changed all the plans \n- the same group of adventurers (she'd helped them earlier that day), had taken it upon themselves to resuce the guy.\nShe was excited, and for once in a very long time dared to hope as she covered them as they escaped. Sadly, the \ncastle was not a place where hope can live, and with a deep horror, she realized that the party was cornered - and \nby none other than ${i.Character.get(n.NpcID.Baphomet).createLink("Baphomet")} himself. There was no way out of this, and so she did what she had planned before, and\nput a bullet into her friend. Something which, by the tears in his eyes, he knew was coming.<br/>\nAfter that, she decided to bite back at the troupe by taking out their most valuable piece, someone she knew they \nhad big plans for - ${i.Character.get(n.NpcID.Lucian).createLink("The Solitaire")}. Things didn't go as planned however,\nand instead she ended up in the fortress of the inquisitors, gaining an Atium spike and a Steel spike powered by \nVerrader's soul followed by heading right past midnight into a showdown that involved more myths and legends than \nshe could even dream of - all the Guardians with Preservation himself in the mists, eight senior inquisitors moved\nby Ruin himself (who was also moving her - despite her best efforts), \n${i.Character.get(n.NpcID.LogosPlaywright).createLink("The Playwright")} and the Mouthpiece and lastly \n${i.Character.get(n.NpcID.Sanguinarch).createLink("The SanguineArch")} along with two other higher vampires. Finally, \nthere was one other - a single Honorspren who stood next to her, waiting, and had gone unnoticed by all...  \n`,e.opinions.isOpinionated=!1}},7640:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupVerrader=void 0;const n=a(3998),i=a(4492);t.setupVerrader=function(){const e=new i.Character(n.NpcID.Verrader);e.core.name="Verrader",e.core.imgPath="character_tokens/C1/Arc2/verrader.png",e.card.setCampaignArc(1,2),e.card.addCardTag("M31"),e.card.addCardTag("Deceased"),e.card.addCardTag("From | Ruin"),e.card.addCardTag("Race | Human"),e.card.addCardTag("Class | <span class='verbose'>Eloquence</span> Bard"),e.card.addCardTag("Class | <span class='verbose'>Elemental Bloodline</span> Sorcerer"),e.card.addCardTag("Nightblood | Magma"),e.card.addCardTag("Zinc Savant"),e.card.addCardTag("Copper Savant"),e.card.addCardTag("CR | 10"),e.card.summary=()=>`\n    An influential fixer in Night Castle. Made it big thanks to his incredible charisma and deception skills. \n      Gained Nightblood in an accident - a result of his first betrayal - during his\n      early years spent on the field in a forge which submerged his whole team, except \n      ${i.Character.get(n.NpcID.Shimarin).createLink("Shimarin")}, in magma. Died at the hands of the Steel Inquisitors, \n      his soul burnt to power Rin's hemalurgy.`,e.opinions.isOpinionated=!1}},7395:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupC2A1=void 0;const n=a(4445),i=a(4521),s=a(348),o=a(200),r=a(975),l=a(7817),d=a(8412),c=a(1672),h=a(4986),p=a(2481),u=a(8453),m=a(4838),g=a(5521),f=a(3728),v=a(634),y=a(2218),w=a(8231),S=a(5031),b=a(9267),D=a(7573),k=a(4573),C=a(8066),I=a(5443),_=a(5563),A=a(7282),P=a(5157);t.setupC2A1=function(){(0,n.setupAndoain)(),(0,i.setupAndri)(),(0,s.setupAthlon)(),(0,o.setupBjron)(),(0,r.setupCecilia)(),(0,l.setupCoroto)(),(0,d.setupDawn)(),(0,c.setupDusk)(),(0,h.setupElysium)(),(0,p.setupErica)(),(0,u.setupEzell)(),(0,m.setupGenefe)(),(0,g.setupHav)(),(0,f.setupHina)(),(0,v.setupIngrid)(),(0,y.setupIona)(),(0,w.setupJaye)(),(0,S.setupJordi)(),(0,b.setupKastor)(),(0,D.setupRoberta)(),(0,k.setupSasha)(),(0,C.setupSybilla)(),(0,I.setupTomasa)(),(0,_.setupVerna)(),(0,A.setupVitacia)(),(0,P.setupYuki)()}},4445:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupAndoain=void 0;const n=a(3998),i=a(4492);t.setupAndoain=function(){const e=new i.Character(n.NpcID.Andoain);e.core.name="Andoain",e.core.imgPath="character_tokens/C2/Arc1/Andoain.png",e.card.setCampaignArc(2,1),e.card.addCardTag("M221"),e.card.addCardTag("From | ? / Materia"),e.card.addCardTag("Race | Aasimar"),e.card.addCardTag("Class | <span class='verbose'>Gunslinger</span> Fighter"),e.card.addCardTag("Class | <span class='verbose'>Hexblade</span> Warlock"),e.card.addCardTag("Class | <span class='verbose'>War</span> Cleric"),e.card.addCardTag("'Saint'"),e.card.addCardTag("CR | 21"),e.card.summary=()=>`\n    An aasimar with a halo and glowing wings like reflected glass who mysteriously appeared in Veteres in around \n      1580 AR. Seemed to be supernaturally gifted in the use of firearms and preferred them to swords. Known by all \n      to be an extremely generous and kind soul, but seemed to be haunted by demons of his own, and was always \n      begging God for forgiveness. Was randomly assaulted by a \n      ${i.Character.get(n.NpcID.Mostima).createLink("mysterious half-blood fallen aasimar")} while peacefully exploring the\n      coast of Aegir.<br/>\n      <div class="effect_tag">Incomplete</div>`,e.opinions.isOpinionated=!1}},4521:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupAndri=void 0;const n=a(3998),i=a(4492);t.setupAndri=function(){const e=new i.Character(n.NpcID.Andri);e.core.name="Andri",e.core.imgPath="character_tokens/C2/Arc1/Andri.png",e.card.setCampaignArc(2,1),e.card.addCardTag("M37"),e.card.summary=()=>"???",e.opinions.isOpinionated=!1}},348:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupAthlon=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupAthlon=function(){const e=new s.Character(i.NpcID.Athlon);e.core.name="Athlon",e.core.imgPath="character_tokens/C2/Arc1/Athlon.png",e.dStats.initializeStats(10,20,18,8,16,10),e.dStats.pb=n.Prof.get(4),e.card.setCampaignArc(2,1),e.card.addCardTag("M58"),e.card.summary=()=>"???",e.opinions.isOpinionated=!0}},200:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupBjron=void 0;const n=a(3998),i=a(4492);t.setupBjron=function(){const e=new i.Character(n.NpcID.Bjorn);e.core.name="Bjron",e.core.imgPath="character_tokens/C2/Arc1/Bjorn.png",e.card.setCampaignArc(2,1),e.card.addCardTag("M35"),e.card.summary=()=>"???",e.opinions.isOpinionated=!1}},975:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCecilia=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupCecilia=function(){const e=new s.Character(i.NpcID.Cecelia);e.core.name="Cecilia",e.core.imgPath="character_tokens/C2/Arc1/Cecilia.png",e.dStats.initializeStats(6,16,8,10,14,18),e.dStats.pb=n.Prof.get(3),e.dSKills.setSkillProficiency(n.DSkill.Insight,n.Hidden),e.dSKills.finalizeSkills(),e.card.setCampaignArc(2,1),e.card.addCardTag("F11"),e.opinions.isOpinionated=!0}},7817:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCoroto=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupCoroto=function(){const e=new s.Character(i.NpcID.Coroto);e.core.name="Coroto",e.core.imgPath="character_tokens/C2/Arc1/Coroto.png",e.dStats.initializeStats(14,12,14,13,12,17),e.dStats.pb=n.Prof.get(3),e.dSKills.setSkillProficiency(n.DSkill.Intimidation,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Nature,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Performance,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Stealth,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Deception,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Persuasion,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.card.setCampaignArc(2,1),e.card.addCardTag("M54"),e.opinions.isOpinionated=!0}},8412:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupDawn=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupDawn=function(){const e=new s.Character(i.NpcID.Dawn);e.core.name="Dawn",e.core.imgPath="character_tokens/C2/Arc1/Dawn.png",e.dStats.initializeStats(8,8,16,11,17,18),e.dStats.pb=n.Prof.get(4),e.dSKills.setSkillProficiency(n.DSkill.AnimalHandling,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Deception,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.History,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Insight,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Medicine,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Survival,n.Hidden,n.ProficiencyLevel.Prof,5),e.dSKills.setSkillProficiency(n.DSkill.Persuasion,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Performance,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.SlightOfHand,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill._ALL,n.Hidden,n.ProficiencyLevel.Half),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("F405 (32)"),e.card.addCardTag("From | Materia<span class='verbose'>(Naiyumi)</span> / Devotion"),e.card.addCardTag("Race | Human"),e.card.summary=()=>'\n    The gentle and reserved pawn shop owner and the de facto caretaker of the small mountainous village of Po\'shan. \n    Appears to hide quite a bit of pain underneath a sad smile. Was born in the hinterlands of Naiyumi around \n    1200 AR. Kept witnessing the residents of her village constantly get slaughtered again and again, and lose \n    quite a bit of the memories of their times spent together again and again.<br/>\n    <div class="effect_tag">Incomplete</div>',e.cSkills.setSkillValues([[n.CSkill.Accounting,35,n.Hidden],[n.CSkill.Anthropology,0,n.Hidden],[n.CSkill.Appraise,0,n.Hidden],[n.CSkill.Archaeology,0,n.Hidden],[n.CSkill.Artillery,0,n.Hidden],[n.CSkill.Charm,15,n.Hidden],[n.CSkill.ComputerUse,5,n.Hidden],[n.CSkill.Demolitions,0,n.Hidden],[n.CSkill.Disguise,5,n.Hidden],[n.CSkill.Diving,0,n.Hidden],[n.CSkill.DriveAuto,20,n.Hidden],[n.CSkill.ElectricalRepair,10,n.Hidden],[n.CSkill.Electronics,0,n.Hidden],[n.CSkill.FirstAid,60,n.Hidden],[n.CSkill.Hypnosis,0,n.Hidden],[n.CSkill.Law,5,n.Hidden],[n.CSkill.LibraryUse,20,n.Hidden],[n.CSkill.Locksmith,0,n.Hidden],[n.CSkill.MechanicalRepair,10,n.Hidden],[n.CSkill.ModernMedicine,0,n.Hidden],[n.CSkill.NaturalWorld,35,n.Hidden],[n.CSkill.Navigate,10,n.Hidden],[n.CSkill.Occult,5,n.Hidden],[n.CSkill.OperateHeavyMachinery,0,n.Hidden],[n.CSkill.Psychoanalysis,0,n.Hidden],[n.CSkill.ReadLips,0,n.Hidden],[n.CSkill.Ride,15,n.Hidden],[n.CSkill.Throw,20,n.Hidden],[n.CSkill.Acting,5,n.Hidden],[n.CSkill.Calligraphy,90,n.Hidden],[n.CSkill.Carpentry,10,n.Hidden],[n.CSkill.Cooking,90,n.Hidden],[n.CSkill.Dancing,5,n.Hidden],[n.CSkill.FineArt,5,n.Hidden],[n.CSkill.Forgery,0,n.Hidden],[n.CSkill.Writing,5,n.Hidden],[n.CSkill.Singing,5,n.Hidden],[n.CSkill.Painting,75,n.Hidden],[n.CSkill.Photography,0,n.Hidden],[n.CSkill.Sculpting,0,n.Hidden],[n.CSkill.Chainsaw,10,n.Hidden],[n.CSkill.HeavyWeapons,10,n.Hidden],[n.CSkill.Flamethrower,10,n.Hidden],[n.CSkill.MachineGun,10,n.Hidden],[n.CSkill.SubmachineGun,10,n.Hidden],[n.CSkill.Aircraft,0,n.Hidden],[n.CSkill.Boat,5,n.Hidden],[n.CSkill.Astronomy,0,n.Hidden],[n.CSkill.Biology,0,n.Hidden],[n.CSkill.Botany,0,n.Hidden]])}},1672:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupDusk=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupDusk=function(){const e=new s.Character(i.NpcID.Dusk);e.core.name="Dusk",e.core.imgPath="character_tokens/C2/Arc1/Dusk.png",e.dStats.initializeStats(28,18,26,21,24,30),e.dStats.pb=n.Prof.get(8),e.dSKills.setSkillProficiency(n.DSkill.Persuasion,n.Hidden,n.ProficiencyLevel.None,-5),e.dSKills.setSkillProficiency(n.DSkill.Deception,n.Hidden,n.ProficiencyLevel.Half),e.dSKills.setSkillProficiency(n.DSkill.Perception,n.Hidden,n.ProficiencyLevel.Half),e.dSKills.setSkillProficiency(n.DSkill.Stealth,n.Hidden,n.ProficiencyLevel.Half),e.dSKills.setSkillProficiency(n.DSkill.History,n.Hidden,n.ProficiencyLevel.Prof),e.dSKills.setSkillProficiency(n.DSkill.Insight,n.Hidden,n.ProficiencyLevel.Prof),e.dSKills.setSkillProficiency(n.DSkill.Medicine,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Performance,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.SlightOfHand,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("F"),e.card.addCardTag("From | Devotion"),e.card.addCardTag("Race | Titan <span class='verbose'>&times; Jade Dragon</span>"),e.card.addCardTag("<span>Primordial | Outsider <span class='verbose'>(11<sup>th</sup> Fragment of Sui)</span></span>"),e.card.addCardTag("CR | 26"),e.card.summary=()=>"???"}},4986:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupElysium=void 0;const n=a(5480),i=a(3998),s=a(4492),o=a(7922);t.setupElysium=function(){const e=new s.Character(i.NpcID.Elysium);e.core.name="Elysium",e.core.imgPath="character_tokens/C2/Arc1/Elysium.png",e.dStats.initializeStats(8,18,14,15,18,10),e.dStats.pb=n.Prof.get(5),e.dSKills.setSkillProficiency(n.DSkill.Insight,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Investigation,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Medicine,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Stealth,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Perception,n.Hidden,n.ProficiencyLevel.Expert,5),e.opinions.isOpinionated=!0,e.operator.morale=o.Morale.Average,e.dSKills.finalizeSkills(),e.operator.fatigue=10,e.operator.ratings={damage:"C-",control:"SS",survival:"D",pro:"S"},e.operator.era=n.Era.Information,e.operator.professions=["Messenger / Logistics","Messenger"],e.operator.addNotableStuff("Major Damage Type","Slashing / Piercing"),e.operator.addNotableStuff("Strong against","Nothing really (by himself)"),e.operator.addNotableStuff("Combat Experience","B Grade (5 years / in logistics)"),e.operator.addNotableStuff("Challenge Rating","9"),e.operator.setChemistryWith(i.NpcID.Ezell,31,"(Boyfriend) During the course of his latest assignment in assisting the Saints, the two have been through a lot of perilous missions together - including some outside of professional scope (like finding a cure for Cecilia)."),e.operator.setChemistryWith(i.NpcID.Jordi,17,"Though Jordi doesn't remember, Elysium knows him from a time long ago..."),e.operator.setChemistryWith(i.NpcID.Dawn,14,"Was aware that she was in touch with the entity 'guarding' the village. He could see her burying sadness and strongly felt she was a good person, despite her secrets. His respect for her increased significantly after recent events."),e.operator.setChemistryWith(i.NpcID.Hina,13,"Feels a strong sense of sympathy and a slight paternal instinct for her. Understands her situation and periodically smuggles stuff she needs. Also spoils her rotten."),e.operator.setChemistryWith(i.NpcID.Cecelia,11,"Has known her from almost the day she was born. Is quite empathetic to her situation and feels she is too good a person to die so young. Also Ezell's concern for her has made him quite invested in her fate."),e.cSkills.setSkillValues([[n.CSkill.Accounting,5,n.Vague],[n.CSkill.Anthropology,0,n.Vague],[n.CSkill.Appraise,0,n.Vague],[n.CSkill.Archaeology,0,n.Vague],[n.CSkill.Artillery,0,n.Vague],[n.CSkill.Charm,15,n.Vague],[n.CSkill.ComputerUse,65,n.Vague],[n.CSkill.Demolitions,0,n.Vague],[n.CSkill.Disguise,5,n.Vague],[n.CSkill.Diving,0,n.Vague],[n.CSkill.DriveAuto,80,n.Vague],[n.CSkill.ElectricalRepair,60,n.Vague],[n.CSkill.Electronics,50,n.Vague],[n.CSkill.FirstAid,30,n.Vague],[n.CSkill.Hypnosis,0,n.Vague],[n.CSkill.Law,60,n.Vague],[n.CSkill.LibraryUse,20,n.Vague],[n.CSkill.Locksmith,0,n.Vague],[n.CSkill.MechanicalRepair,10,n.Vague],[n.CSkill.ModernMedicine,0,n.Vague],[n.CSkill.NaturalWorld,10,n.Vague],[n.CSkill.Navigate,80,n.Vague],[n.CSkill.Occult,5,n.Vague],[n.CSkill.OperateHeavyMachinery,0,n.Vague],[n.CSkill.Psychoanalysis,0,n.Vague],[n.CSkill.ReadLips,0,n.Vague],[n.CSkill.Ride,15,n.Vague],[n.CSkill.Throw,20,n.Vague],[n.CSkill.Acting,5,n.Vague],[n.CSkill.Calligraphy,0,n.Vague],[n.CSkill.Carpentry,10,n.Vague],[n.CSkill.Cooking,20,n.Vague],[n.CSkill.Dancing,5,n.Vague],[n.CSkill.FineArt,5,n.Vague],[n.CSkill.Forgery,0,n.Vague],[n.CSkill.Writing,5,n.Vague],[n.CSkill.Singing,5,n.Vague],[n.CSkill.Painting,5,n.Vague],[n.CSkill.Photography,0,n.Vague],[n.CSkill.Sculpting,0,n.Vague],[n.CSkill.Chainsaw,10,n.Vague],[n.CSkill.HeavyWeapons,10,n.Vague],[n.CSkill.Flamethrower,10,n.Vague],[n.CSkill.MachineGun,10,n.Vague],[n.CSkill.SubmachineGun,10,n.Vague],[n.CSkill.Aircraft,95,n.Vague],[n.CSkill.Boat,50,n.Vague],[n.CSkill.Astronomy,0,n.Vague],[n.CSkill.Biology,0,n.Vague],[n.CSkill.Botany,0,n.Vague],[n.CSkill.Chemistry,0,n.Vague],[n.CSkill.Cryptography,0,n.Vague],[n.CSkill.Engineering,0,n.Vague],[n.CSkill.Forensics,0,n.Vague],[n.CSkill.Geology,30,n.Vague],[n.CSkill.Mathematics,50,n.Vague],[n.CSkill.Meteorology,30,n.Vague],[n.CSkill.Pharmacy,0,n.Vague],[n.CSkill.Physics,30,n.Vague],[n.CSkill.Zoology,0,n.Vague]]),e.card.setCampaignArc(2,1),e.card.addCardTag("M33")}},2481:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupErica=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupErica=function(){const e=new s.Character(i.NpcID.Erica);e.core.name="Erica",e.core.imgPath="character_tokens/C2/Arc1/Erica.png",e.dStats.initializeStats(8,8,14,12,14,20),e.dStats.pb=n.Prof.get(3),e.dSKills.setSkillProficiency(n.DSkill.Perception,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Insight,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Performance,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill._ALL,n.Hidden,n.ProficiencyLevel.Half),e.dSKills.finalizeSkills(),e.card.setCampaignArc(2,1),e.card.addCardTag("F50"),e.opinions.isOpinionated=!0}},8453:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupEzell=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupEzell=function(){const e=new s.Character(i.NpcID.Ezell);e.core.name="Ezell",e.core.imgPath="character_tokens/C2/Arc1/Ezell.png",e.dStats.initializeStats(8,20,14,10,13,16),e.dStats.pb=n.Prof.get(4),e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("M32")}},4838:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupGenefe=void 0;const n=a(3998),i=a(4492);t.setupGenefe=function(){const e=new i.Character(n.NpcID.Genefe);e.core.name="Genefe",e.core.imgPath="character_tokens/C2/Arc1/Genefe.png",e.card.setCampaignArc(2,1),e.card.addCardTag("F28"),e.card.summary=()=>"???",e.opinions.isOpinionated=!1}},5521:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupHav=void 0;const n=a(3998),i=a(4492);t.setupHav=function(){const e=new i.Character(n.NpcID.Hav);e.core.name="Hav",e.core.imgPath="character_tokens/C2/Arc1/Hav.png",e.card.setCampaignArc(2,1),e.card.addCardTag("M47"),e.card.summary=()=>"???",e.opinions.isOpinionated=!1}},3728:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupHina=void 0;const n=a(5480),i=a(3998),s=a(5947),o=a(8129),r=a(2870),l=a(4492),d=a(7922);t.setupHina=function(){const e=new l.Character(i.NpcID.Hina);e.core.name="Hina",e.core.imgPath="character_tokens/C2/Arc1/Hina.png",e.dStats.initializeStats(13,20,24,18,14,20),e.dStats.pb=n.Prof.get(6),e.dSKills.setSkillProficiency(n.DSkill.Investigation,n.Hidden,n.ProficiencyLevel.Prof,5),e.dSKills.setSkillProficiency(n.DSkill.Medicine,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Athletics,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.History,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Perception,n.Hidden,n.ProficiencyLevel.Expert,5),e.dSKills.setSkillProficiency(n.DSkill.SlightOfHand,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Stealth,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Survival,n.Hidden,n.ProficiencyLevel.Expert),e.operator.morale=d.Morale.Dismal,e.dSKills.finalizeSkills(),e.operator.fatigue=20,e.operator.ratings={damage:"S",control:"S+",survival:"S",pro:"SS"},e.operator.addNotableStuff("Major Damage Type","Magical Bludgeoning"),e.operator.addNotableStuff("Strong against","Aberrations, Machines, Huge creatures"),e.operator.addNotableStuff("Weak against","Humanoids"),e.operator.addNotableStuff("Combat Experience","S Grade (7 years)"),e.operator.setChemistryWith(i.NpcID.Dawn,21,"Although they don't interact that much, in her mind, Hina virtually sees Dawn as a mother."),e.operator.setChemistryWith(i.NpcID.Elysium,17,"The only one in the village who truly knows her - identity, past, nature, everything..."),e.operator.setChemistryWith(i.NpcID.Iona,12,"For some reason, Hina treats her as though she were her little sister."),e.operator.era=n.Era.Future,e.operator.professions=["Bionic Tank","Student / Laborer"],e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("F21 (14)"),e.card.addCardTag("From | Innovation / Ruin / Materia / Devotion"),e.card.addCardTag("Race | Human <span class='verbose'>(Cyberpunk)</span>"),e.card.addCardTag("OS | Berserk MK5"),e.card.addCardTag("Mutation | Greater Green"),e.card.addCardTag("<span class='verbose'>Project Diablo |</span> #41"),e.card.addCardTag("Edgedancer <span class='verbose'>(Cultivation)</span>"),e.card.addCardTag("Bondsmith <span class='verbose'>(Preservation)</span>"),e.card.addCardTag("Champion of Ruin"),e.card.addCardTag("Chamber of Guilt"),e.card.addCardTag("Class | Barbarian &times; Rogue"),e.card.addCardTag("CR | 23"),e.card.summary=()=>"???",e.card.primaryImageTitle="Urchin",e.cSkills.setSkillValues([[n.CSkill.Accounting,80,n.Vague],[n.CSkill.Anthropology,0,n.Vague],[n.CSkill.Appraise,0,n.Vague],[n.CSkill.Archaeology,0,n.Vague],[n.CSkill.Artillery,0,n.Vague],[n.CSkill.Charm,5,n.Vague],[n.CSkill.ComputerUse,100,n.Vague],[n.CSkill.Demolitions,90,n.Vague],[n.CSkill.Disguise,5,n.Vague],[n.CSkill.Diving,0,n.Vague],[n.CSkill.DriveAuto,70,n.Vague],[n.CSkill.ElectricalRepair,40,n.Vague],[n.CSkill.Electronics,50,n.Vague],[n.CSkill.FirstAid,30,n.Vague],[n.CSkill.Hypnosis,0,n.Vague],[n.CSkill.Law,5,n.Vague],[n.CSkill.LibraryUse,20,n.Vague],[n.CSkill.Locksmith,0,n.Vague],[n.CSkill.MechanicalRepair,35,n.Vague],[n.CSkill.ModernMedicine,0,n.Vague],[n.CSkill.NaturalWorld,10,n.Vague],[n.CSkill.Navigate,10,n.Vague],[n.CSkill.Occult,5,n.Vague],[n.CSkill.OperateHeavyMachinery,60,n.Vague],[n.CSkill.Psychoanalysis,0,n.Vague],[n.CSkill.ReadLips,0,n.Vague],[n.CSkill.Ride,15,n.Vague],[n.CSkill.Throw,20,n.Vague],[n.CSkill.Acting,5,n.Vague],[n.CSkill.Calligraphy,0,n.Vague],[n.CSkill.Carpentry,10,n.Vague],[n.CSkill.Cooking,20,n.Vague],[n.CSkill.Dancing,5,n.Vague],[n.CSkill.FineArt,20,n.Vague],[n.CSkill.Forgery,0,n.Vague],[n.CSkill.Writing,5,n.Vague],[n.CSkill.Singing,5,n.Vague],[n.CSkill.Painting,75,n.Vague],[n.CSkill.Photography,0,n.Vague],[n.CSkill.Sculpting,0,n.Vague],[n.CSkill.Chainsaw,10,n.Vague],[n.CSkill.HeavyWeapons,10,n.Vague],[n.CSkill.Flamethrower,10,n.Vague],[n.CSkill.MachineGun,10,n.Vague],[n.CSkill.SubmachineGun,10,n.Vague],[n.CSkill.Aircraft,20,n.Vague],[n.CSkill.Boat,30,n.Vague],[n.CSkill.Astronomy,0,n.Vague],[n.CSkill.Biology,30,n.Vague],[n.CSkill.Botany,20,n.Vague],[n.CSkill.Chemistry,50,n.Vague],[n.CSkill.Cryptography,90,n.Vague],[n.CSkill.Engineering,60,n.Vague],[n.CSkill.Forensics,30,n.Vague],[n.CSkill.Geology,0,n.Vague],[n.CSkill.Mathematics,80,n.Vague],[n.CSkill.Meteorology,0,n.Vague],[n.CSkill.Pharmacy,30,n.Vague],[n.CSkill.Physics,60,n.Vague],[n.CSkill.Zoology,0,n.Vague]]),e.combat.setSpeed(n.Speed.Walking,40),e.combat.setSave(n.DStat.Str,n.ProficiencyLevel.Prof),e.combat.setSave(n.DStat.Dex,n.ProficiencyLevel.Prof),e.combat.setSave(n.DStat.Con,n.ProficiencyLevel.Expert),e.combat.addClassLevels(n.AdventurerClass.Barbarian,9),e.combat.addClassLevels(n.AdventurerClass.Rogue,9),e.combat.addClassLevels(n.AdventurerClass.Warlock,2),e.combat.addAcBonus(2),e.combat.bonusHP=48,e.combat.computeHP(),e.combat.setSense(n.Sense.DevilSight,120),e.combat.setRes(n.DamageType.Psychic,50),e.combat.addConditionImmunity(n.Condition.Charmed),e.combat.addConditionImmunity(n.Condition.Frightened),e.combat.addAction(new o.Action(n.Activation.Special,"<p><strong><em>Bionic Brain.</em></strong> Hina is always aware of her \n        directions and always remembers anything she's seen or heard, even when\n        unconscious or sleeping. She gains a +5 to perception and investigation \n        scores, and can understand a person's words by lip-reading, assuming the\n        language is one she knows.</p>")),e.combat.addAction(new o.Action(n.Activation.Special,"<p><strong><em>Chamber of Guilt.</em></strong> Being possessed by Penance,\n        Hina can telepathically gauge and selectively influence a creature's\n        mental state, as long as the creature is within 1 mile and aware of her \n        (consequently such a creature could never be hidden from her).\n        Because of the same possession, she cannot dream and gains advantage on Wis saving \n        throws.</p>")),e.combat.addAction(new o.Action(n.Activation.Special,"<p><strong><em>Bondsmith &times; Edgedancer Hybrid.</em></strong> Hina \n        is bonded to a Cultivation Spren elevated to a God Spren by the splinter\n        of Preservation. Notably, as such she can draw investiture from life light \n        (respiration) and is a full-born in the presense of Preservation's mists.  \n        </p>")),e.combat.addAction(new o.Action(n.Activation.Special,"<p><strong><em>Morale: Dismal.</em></strong> Due to her low morale, \n        Hina's proficiency bonus decreases by 1 and she gains a -1 to all her \n        skill modifiers (included in the sheet). \n        </p>")),e.combat.addAction(new o.Action(n.Activation.Action,"<p><strong><em>Multiattack.</em></strong> As an action Hina makes one black \n        knife attack and two telekinetic slams.</p>")),e.combat.addAction(new o.Action(n.Activation.Action,`<p><strong><em>Black Knife.</em></strong> Melee Weapon Attack: ${(0,r.wrapRoll)(e.DEX+e.Prof+3)}, \n        reach 5 ft., one target. Hit: ${(0,r.wrapRoll)([[6,s.D6],[e.DEX+6,s.D1]])} \n        ${(0,r.wrapDamageType)(n.DamageType.Piercing)} damage. A target hit by this attack \n        can't regenerate HP till the end of their next turn and instantly breaks \n        concentration on a spell, causing the target of the spell to take necrotic\n        (void) damage equal to 10 times the spell slot level. In Hina's hands, \n        this weapon also behaves as a vorpal blade. On a critical hit, it instantly kills targets \n        without legendary resistances and deals ${(0,r.wrapRoll)([[18,s.D6],[e.DEX+6,s.D1]])}\n        to targets with legendary resistances.</p>`)),e.combat.addAction(new o.Action(n.Activation.Action,`<p><strong><em>Telekinetic slam.</em></strong> Ranged Attack: Hina targets\n        a point on the ground within 600 ft of her and slams a heavy object \n        telekinetically on that spot. Targets within 5 ft of the point must make\n        a DC ${e.dc(n.DStat.Con)} DEX save or take ${(0,r.wrapRoll)([[10,s.D12],[e.CON+3,s.D1]])} \n        ${(0,r.wrapDamageType)(n.DamageType.Bludgeoning)} (magical) damage. On a successful save they take half damage.\n        This attack deals triple damage to structures.</p>`)),e.combat.addAction(new o.Action(n.Activation.Action,`<p><strong><em>Overwhelming Regrets.</em></strong> Hina infuses a creature's \n        soul with an intense focused onslaught of guilt. The target makes a DC \n        ${e.getSkillMod(n.DSkill.Persuasion,n.ProficiencyLevel.Expert)[0]+13} CHA save.\n        On failure a non-hostile creature is charmed by her while a hostile creature\n        has disadvantage on attack rolls. Also, they can't take opportunity attacks against \n        targets other than her. Any other effects charming or freightening the \n        target end immediately and concentration is broken. If the failure is by \n        a margin of 15 or more, they are also paralyzed by guilt. These effects last \n        until a minute, or until Hina lifts the effect. This effect can only \n        target creatures aware of her.</p>`)),e.combat.addAction(new o.Action(n.Activation.Action,`<p><strong><em>Edgedancer (Progression).</em></strong> (${e.Prof} / LR) \n        Hina heals a creature she touches by ${10*e.CON}. This effect ends \n        blindess, deafness and any diseases afflicting the target and restores \n        missing body parts.</p>`)),e.combat.addAction(new o.Action(n.Activation.BonusAction,`<p><strong><em>Berserk MK5.</em></strong> (4 / LR) By activating her neural OS, \n        Hina drastically increases her defensive capabilities. For the duration \n        of 1 minute, she has resistance to all damage, advantage on STR checks\n        and saving throws and her ${(0,r.wrapDamageType)(n.DamageType.Physical)} damage \n        per attack is increased by 3.</p>`)),e.combat.addAction(new o.Action(n.Activation.BonusAction,"<p><strong><em>Edgedancer (Abrasion).</em></strong> Hina can use her bonus\n        action to take the dodge, disengage or hide action. Until the start of her\n        next turn she is not affected by difficult terrain, has advantage on DEX \n        saving throws, is immune to being grappled and her movement speed increases by 15ft.</p>")),e.combat.addAction(new o.Action(n.Activation.BonusAction,`<p><strong><em>Telekinetic lashing.</em></strong> Hina attempts to \n        telekinetically move creatures around. She can either target upto 6 \n        creatures, moving each 10ft in any direction (on collision they take \n        ${(0,r.wrapRoll)(s.D6)} ${(0,r.wrapDamageType)(n.DamageType.Bludgeoning)} damage) \n        should they fail a DC ${e.dc(n.DStat.Con)+e.Prof} STR save, or target one\n        creature and move it upto 100ft (${(0,r.wrapRoll)([10,s.D6])} \n        ${(0,r.wrapDamageType)(n.DamageType.Bludgeoning)} damage on collision) should it\n        fail a DC ${e.dc(n.DStat.Con)+e.Prof+10} STR save.</p>`)),e.combat.addAction(new o.Action(n.Activation.BonusAction,`<p><strong><em>Flare Aluminium.</em></strong> Hina hemallurgically burns \n        Aluminium to nullify all investiture in her system. She looses access \n        to all her non-cyberware abilities (including resistance to \n        ${(0,r.wrapDamageType)(n.DamageType.Psychic)} damage and condition immunities) \n        and her max HP drops to 22. She can no longer be targeted by spells and\n        doesn't suffer any effects from any magic items.</p>`)),e.combat.addAction(new o.Action(n.Activation.Reaction,"<p><strong><em>Sidestep.</em></strong> Hina can halve the damage she \n        takes on a hit from a source that she can see.</p>")),e.combat.addAction(new o.Action(n.Activation.Reaction,`<p><strong><em>Parry.</em></strong> Hina gains a +${e.Prof} to her AC\n        against a hit from a target she can see.</p>`)),e.combat.addAction(new o.Action(n.Activation.Reaction,"<p><strong><em>Riposte.</em></strong> Hina immediately makes one attack \n        with her knife against a target within 5 ft of her who attempts to hit \n        her with an attack and misses.</p>")),e.combat.addAction(new o.Action(n.Activation.Reaction,"<p><strong><em>Mage slayer.</em></strong> Hina immediately makes one \n        attack with her knife against a target who casts a spell within 5 ft of \n        her.</p>")),e.combat.addAction(new o.Action(n.Activation.LegendaryAction,"<p>Hina has three legendary actions.</p>")),e.combat.addAction(new o.Action(n.Activation.LegendaryAction,"<p><p><strong><em>Telekinetic lashing.</em></strong> (Cost: 2) Hina uses her telekinetic lashing as a legendary action.</p>")),e.combat.addAction(new o.Action(n.Activation.LegendaryAction,"<p><strong><em>Telekinetic slam.</em></strong> (Cost: 1) Hina uses her telekinetic slam as a legendary action.</p>")),e.sheet.cr=new n.CRValue(23),e.operator.addNotableStuff("Challenge Rating","23"),e.sheet.size=n.CreatureSize.Medium,e.sheet.subtitle=" Humanoid (Cyberpunk), Chaotic Good",e.sheet.acDesc="(Subdermal Armor MK4)",e.sheet.category="human"}},634:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupIngrid=void 0;const n=a(3998),i=a(4492);t.setupIngrid=function(){const e=new i.Character(n.NpcID.Ingrid);e.core.name="Ingrid",e.core.imgPath="character_tokens/C2/Arc1/Ingrid.png",e.card.setCampaignArc(2,1),e.card.addCardTag("F24"),e.card.summary=()=>"???",e.opinions.isOpinionated=!1}},2218:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupIona=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupIona=function(){const e=new s.Character(i.NpcID.Iona);e.core.name="Iona",e.core.imgPath="character_tokens/C2/Arc1/Iona.png",e.dStats.initializeStats(8,10,16,17,11,12),e.dStats.pb=n.Prof.get(2),e.dSKills.setSkillProficiency(n.DSkill.Arcana,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.History,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Investigation,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Nature,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Perception,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Religion,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Stealth,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Survival,n.Hidden),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("F13")}},8231:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupJaye=void 0;const n=a(5947),i=a(5480),s=a(3998),o=a(8129),r=a(2870),l=a(4492);t.setupJaye=function(){const e=new l.Character(s.NpcID.Jaye);e.core.name="Jaye",e.core.imgPath="character_tokens/C2/Arc1/Jaye.png",e.dStats.initializeStats(16,18,16,8,12,8),e.dStats.pb=i.Prof.get(4),e.dSKills.setSkillProficiency(i.DSkill.Acrobatics,i.Hidden),e.dSKills.setSkillProficiency(i.DSkill.Athletics,i.Hidden),e.dSKills.setSkillProficiency(i.DSkill.Nature,i.Hidden),e.dSKills.setSkillProficiency(i.DSkill.Intimidation,i.Hidden),e.dSKills.setSkillProficiency(i.DSkill.Stealth,i.Hidden,i.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(i.DSkill.SlightOfHand,i.Hidden,i.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(i.DSkill.Survival,i.Shown,i.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("M26"),e.card.addCardTag("Race | Ursine <span class='verbose'>(Polar)</span>"),e.card.addCardTag("CR | 5"),e.card.summary=()=>"???",e.cSkills.setSkillValues([[i.CSkill.Accounting,5,i.Hidden],[i.CSkill.Anthropology,0,i.Hidden],[i.CSkill.Appraise,0,i.Hidden],[i.CSkill.Archaeology,0,i.Hidden],[i.CSkill.Artillery,0,i.Hidden],[i.CSkill.Charm,15,i.Hidden],[i.CSkill.ComputerUse,5,i.Hidden],[i.CSkill.Demolitions,0,i.Hidden],[i.CSkill.Disguise,5,i.Hidden],[i.CSkill.Diving,0,i.Hidden],[i.CSkill.DriveAuto,20,i.Hidden],[i.CSkill.ElectricalRepair,10,i.Hidden],[i.CSkill.Electronics,0,i.Hidden],[i.CSkill.FirstAid,30,i.Hidden],[i.CSkill.Hypnosis,0,i.Hidden],[i.CSkill.Law,5,i.Hidden],[i.CSkill.LibraryUse,20,i.Hidden],[i.CSkill.Locksmith,0,i.Hidden],[i.CSkill.MechanicalRepair,10,i.Hidden],[i.CSkill.ModernMedicine,0,i.Hidden],[i.CSkill.NaturalWorld,85,i.Hidden],[i.CSkill.Navigate,10,i.Hidden],[i.CSkill.Occult,5,i.Hidden],[i.CSkill.OperateHeavyMachinery,0,i.Hidden],[i.CSkill.Psychoanalysis,0,i.Hidden],[i.CSkill.ReadLips,0,i.Hidden],[i.CSkill.Ride,15,i.Hidden],[i.CSkill.Throw,80,i.Hidden],[i.CSkill.Acting,5,i.Hidden],[i.CSkill.Calligraphy,0,i.Hidden],[i.CSkill.Carpentry,10,i.Hidden],[i.CSkill.Cooking,95,i.Hidden],[i.CSkill.Dancing,5,i.Hidden],[i.CSkill.FineArt,5,i.Hidden],[i.CSkill.Forgery,0,i.Hidden],[i.CSkill.Writing,5,i.Hidden],[i.CSkill.Singing,5,i.Hidden],[i.CSkill.Painting,5,i.Hidden],[i.CSkill.Photography,0,i.Hidden],[i.CSkill.Sculpting,0,i.Hidden],[i.CSkill.Chainsaw,10,i.Hidden],[i.CSkill.HeavyWeapons,10,i.Hidden],[i.CSkill.Flamethrower,10,i.Hidden],[i.CSkill.MachineGun,10,i.Hidden],[i.CSkill.SubmachineGun,10,i.Hidden],[i.CSkill.Aircraft,0,i.Hidden],[i.CSkill.Boat,5,i.Hidden],[i.CSkill.Astronomy,0,i.Hidden],[i.CSkill.Biology,30,i.Hidden],[i.CSkill.Botany,20,i.Hidden]]),e.combat.addClassLevels(i.AdventurerClass.Rogue,5),e.combat.bonusHP=5,e.combat.computeHP(),e.combat.setSave(i.DStat.Int),e.combat.setSave(i.DStat.Dex),e.combat.setSpeed(i.Speed.Walking,30),e.combat.setSense(i.Sense.Darkvision,60),e.combat.setRes(i.DamageType.Cold,50),e.combat.addAction(new o.Action(i.Activation.Special,"\n        <p><strong><em>Psionic Knife.</em></strong> Though he never learnt how, Jaye seems to have formed a \n        cognitive bond with his favorite cooking knife. Weapon attacks with it deal additional psychic damage\n        and the knife can cut through non-sentient matter rather easily if Jaye wills so. Also, he can throw the\n        knife point first and mentally command it to return to his hand (also point first if possible). The return\n        of the knife obeys the conservation of momentum and seems to carry great inertia (much more than its \n        momentum). It would take a DC 27 Str check or 400 kgs wt. equivalent of force to keep the knife and Jaye\n        separate </p>")),e.combat.addAction(new o.Action(i.Activation.Special,`\n        <p><strong><em>Expert Hands.</em></strong> Jaye is extremely skilled in handling his favorite cooking knife.\n        He performs attacks with it with expertise and can use it to parry minor blows. Also, if his offhand is \n        free, he can transfer the knife between his main hand and his offhand and make an extra attack as a bonus \n        action. If his primary attack that turn was a feint, the secondary attack is at advantage and has a \n        ${(0,r.wrapRoll)(n.D8)} superiority dice added to the to-hit roll.</p>`)),e.combat.addAction(new o.Action(i.Activation.Special,`\n        <p><strong><em>Predatory Hyperfocus.</em></strong> Everytime he deals damage, Jaye must make a DC \n        ${e.dc(i.DStat.Con)} Wis save. On failure, Jaye's beastial instincts of an apex predator kick in, and he \n        enters a vampiric hyperfocused state. While in that state, each of Jaye's attacks heals himself or a \n        creature of his choice within 5ft by half the damage dealt. Also, anyone hit by his attacks must make a DC\n        ${e.dc(i.DStat.Con)} Cha save or be ${(0,r.wrapCondition)(i.Condition.Silenced)} until the end of their next turn.\n        The downside of this is that in this state, at the start of his turn one creature within 5ft ft of himself\n        takes ${(0,r.wrapRoll)([10,n.D1])} ${(0,r.wrapDamageType)(i.DamageType.Psychic)} damage. If no creature is within that \n        range, Jaye himself takes that damage.</p>`)),e.combat.addAction(new o.Action(i.Activation.Special,`\n        <p><strong><em>Sneak Attack.</em></strong> Once per turn, Jaye can boost a finesse/ranged weapon attack by \n        ${(0,r.wrapRoll)([3,n.D6])} as per regular sneak attack rules.</p>`)),e.combat.addAction(new o.Action(i.Activation.Action,`\n        <p><strong><em>Cooking Knife.</em></strong> Melee Weapon Attack: ${(0,r.wrapRoll)(e.DEX+e.Expertise)}, \n        reach 5 ft. (or a 60ft Ranged throw), one target. Hit: ${(0,r.wrapRoll)([[1,n.D6],[e.DEX,n.D1]])} \n        ${(0,r.wrapDamageType)(i.DamageType.Slashing)} (slash) or ${(0,r.wrapDamageType)(i.DamageType.Piercing)} damage (stab) \n        plus ${(0,r.wrapRoll)(n.D6)} ${(0,r.wrapDamageType)(i.DamageType.Psychic)} damage. Jaye can choose to feint instead of\n        attempting to hit with this attack.</p>`)),e.combat.addAction(new o.Action(i.Activation.BonusAction,`\n            <p><strong><em>Cooking Knife.</em> (Offhand)</strong> Melee Weapon Attack: ${(0,r.wrapRoll)(e.DEX+e.Expertise)}, \n            reach 5 ft. (or a 60ft Ranged throw), one target. Hit: ${(0,r.wrapRoll)([[1,n.D4],[e.DEX,n.D1]])} \n            ${(0,r.wrapDamageType)(i.DamageType.Slashing)} (slash) or ${(0,r.wrapDamageType)(i.DamageType.Piercing)} damage (stab) \n            plus ${(0,r.wrapRoll)(n.D4)} ${(0,r.wrapDamageType)(i.DamageType.Psychic)} damage.</p>`)),e.combat.addAction(new o.Action(i.Activation.BonusAction,"\n            <p><strong><em>Cunning Action.</em></strong> Can use a bonus action to take the Dash, Disengage, or Hide\n            action.</p>")),e.combat.addAction(new o.Action(i.Activation.Reaction,"\n            <p><strong><em>Parry.</em></strong> If he carries a knife, Jaye can add a +2 to his AC against an attack \n            that would hit him and cause it to miss. The AC increase is a +3 instead if the knife is his favorite \n            cooking knife</p>")),e.combat.addAction(new o.Action(i.Activation.Reaction,"\n            <p><strong><em>Command Return.</em></strong> At will, Jaye can command his favorite cooking knife to return \n            to his hands if it is within 240 ft of him. It deals the damage equivalent of a main-hand stab to all \n            creatures in its path and can pull objects along with it. If possible, sneak attack may only be applied \n            to first creature to be hit.</p>")),e.sheet.cr=new i.CRValue(5),e.sheet.size=i.CreatureSize.Medium,e.sheet.subtitle=" Humanoid (Ursine | Polar), Neutral Good",e.sheet.acDesc="(Natural Dex)",e.sheet.category="human"}},5031:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupJordi=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupJordi=function(){const e=new s.Character(i.NpcID.Jordi);e.core.name="Jordi",e.core.imgPath="character_tokens/C2/Arc1/Jordi.png",e.dStats.initializeStats(10,13,14,13,17,8),e.dStats.pb=n.Prof.get(3),e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,1),e.card.addCardTag("M23")}},9267:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupKastor=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupKastor=function(){const e=new s.Character(i.NpcID.Kastor);e.core.name="Kastor",e.core.imgPath="character_tokens/C2/Arc1/Kastor.png",e.dStats.initializeStats(16,14,14,8,11,14),e.dStats.pb=n.Prof.get(3),e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("M26")}},7573:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupRoberta=void 0;const n=a(5480),i=a(3998),s=a(4492),o=a(7922);t.setupRoberta=function(){const e=new s.Character(i.NpcID.Roberta);e.core.name="Roberta",e.core.imgPath="character_tokens/C2/Arc1/Roberta.png",e.dStats.initializeStats(10,13,13,19,10,16),e.dStats.pb=n.Prof.get(4),e.dSKills.setSkillProficiency(n.DSkill.Performance,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Investigation,n.Hidden,n.ProficiencyLevel.Half),e.dSKills.setSkillProficiency(n.DSkill.Nature,n.Hidden,n.ProficiencyLevel.Half),e.dSKills.setSkillProficiency(n.DSkill.SlightOfHand,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Medicine,n.Hidden),e.opinions.isOpinionated=!0,e.operator.morale=o.Morale.Comfortable,e.dSKills.finalizeSkills(),e.operator.fatigue=0,e.operator.ratings={damage:"D",control:"C",survival:"C+",pro:"S+"},e.operator.era=n.Era.Future,e.operator.professions=["Makeup artist / Doctor(?)","Herbalist (Just chilling tbh)"],e.operator.addNotableStuff("Major Damage Type","Acid / Poison / Lightning"),e.operator.addNotableStuff("Strong against","Insectoids, Plants, Cyberpunks"),e.operator.addNotableStuff("Weak against","Monsters of almost any sort"),e.operator.addNotableStuff("Terrible against","Undead, Aberrations"),e.operator.addNotableStuff("Combat Experience","D Grade (None)"),e.operator.addNotableStuff("Challenge Rating","5"),e.operator.setChemistryWith(i.NpcID.Vitacia,18,"(Cousin) Though the two belonged to completely different worlds 'back home', and rarely interacted, they always had a decent level of mutual respect. Became much closer after moving into the village of Po'Shan."),e.operator.setChemistryWith(i.NpcID.Dawn,16,"Trusts Dawn quite a bit and so often treats her as a personal therapist. Greatly respects her for always lending a ear, despite any superficial attempts to wriggle out."),e.operator.setChemistryWith(i.NpcID.Tomasa,14,"Pretty much considers her a 'best friend'."),e.operator.setChemistryWith(i.NpcID.Jaye,10,"As a neighbour, she is one of his few regular customers. Loves his sandwiches."),e.operator.setChemistryWith(i.NpcID.Kastor,10,"Had a minor crush on him at first, but soon realized he was quite emotionally insecure. Despite that she feels he's a good person caught up in a bad mess and doesn't mind spending time with him."),e.cSkills.setSkillValues([[n.CSkill.Accounting,5,n.Vague],[n.CSkill.Anthropology,0,n.Vague],[n.CSkill.Appraise,0,n.Vague],[n.CSkill.Archaeology,0,n.Vague],[n.CSkill.Artillery,0,n.Vague],[n.CSkill.Charm,70,n.Vague],[n.CSkill.ComputerUse,35,n.Vague],[n.CSkill.Demolitions,0,n.Vague],[n.CSkill.Disguise,90,n.Vague],[n.CSkill.Diving,0,n.Vague],[n.CSkill.DriveAuto,20,n.Vague],[n.CSkill.ElectricalRepair,10,n.Vague],[n.CSkill.Electronics,70,n.Vague],[n.CSkill.FirstAid,80,n.Vague],[n.CSkill.Hypnosis,0,n.Vague],[n.CSkill.Law,5,n.Vague],[n.CSkill.LibraryUse,20,n.Vague],[n.CSkill.Locksmith,0,n.Vague],[n.CSkill.MechanicalRepair,10,n.Vague],[n.CSkill.ModernMedicine,50,n.Vague],[n.CSkill.NaturalWorld,30,n.Vague],[n.CSkill.Navigate,10,n.Vague],[n.CSkill.Occult,5,n.Vague],[n.CSkill.OperateHeavyMachinery,0,n.Vague],[n.CSkill.Psychoanalysis,0,n.Vague],[n.CSkill.ReadLips,0,n.Vague],[n.CSkill.Ride,15,n.Vague],[n.CSkill.Throw,20,n.Vague],[n.CSkill.Acting,35,n.Vague],[n.CSkill.Calligraphy,0,n.Vague],[n.CSkill.Carpentry,10,n.Vague],[n.CSkill.Cooking,20,n.Vague],[n.CSkill.Dancing,5,n.Vague],[n.CSkill.FineArt,50,n.Vague],[n.CSkill.Forgery,0,n.Vague],[n.CSkill.Writing,5,n.Vague],[n.CSkill.Singing,5,n.Vague],[n.CSkill.Painting,5,n.Vague],[n.CSkill.Photography,50,n.Vague],[n.CSkill.Sculpting,20,n.Vague],[n.CSkill.Chainsaw,10,n.Vague],[n.CSkill.HeavyWeapons,10,n.Vague],[n.CSkill.Flamethrower,10,n.Vague],[n.CSkill.MachineGun,10,n.Vague],[n.CSkill.SubmachineGun,10,n.Vague],[n.CSkill.Aircraft,0,n.Vague],[n.CSkill.Boat,5,n.Vague],[n.CSkill.Astronomy,0,n.Vague],[n.CSkill.Biology,95,n.Vague],[n.CSkill.Botany,50,n.Vague],[n.CSkill.Chemistry,70,n.Vague],[n.CSkill.Cryptography,0,n.Vague],[n.CSkill.Engineering,0,n.Vague],[n.CSkill.Forensics,0,n.Vague],[n.CSkill.Geology,0,n.Vague],[n.CSkill.Mathematics,10,n.Vague],[n.CSkill.Meteorology,0,n.Vague],[n.CSkill.Pharmacy,70,n.Vague],[n.CSkill.Physics,0,n.Vague],[n.CSkill.Zoology,0,n.Vague]]),e.card.setCampaignArc(2,1),e.card.addCardTag("F25")}},4573:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupSasha=void 0;const n=a(3998),i=a(4492);t.setupSasha=function(){const e=new i.Character(n.NpcID.Sasha);e.core.name="Sasha",e.core.imgPath="character_tokens/C2/Arc1/Sasha.png",e.card.setCampaignArc(2,1),e.card.addCardTag("M13"),e.card.summary=()=>"???",e.opinions.isOpinionated=!1}},8066:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupSybilla=void 0;const n=a(3998),i=a(4492);t.setupSybilla=function(){const e=new i.Character(n.NpcID.Sybilla);e.core.name="Sybilla",e.core.imgPath="character_tokens/C2/Arc1/Sybilla.png",e.card.setCampaignArc(2,1),e.card.addCardTag("F34"),e.card.summary=()=>"???",e.opinions.isOpinionated=!1}},5443:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupTomasa=void 0;const n=a(3998),i=a(4492);t.setupTomasa=function(){const e=new i.Character(n.NpcID.Tomasa);e.core.name="Tomasa",e.core.imgPath="character_tokens/C2/Arc1/Tomasa.png",e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,1),e.card.addCardTag("F27")}},5563:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupVerna=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupVerna=function(){const e=new s.Character(i.NpcID.Verna);e.core.name="Verna",e.core.imgPath="character_tokens/C2/Arc1/Verna.png",e.dStats.initializeStats(18,12,18,8,10,14),e.dStats.pb=n.Prof.get(4),e.dSKills.setSkillProficiency(n.DSkill.Athletics,n.Hidden),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("F24"),e.card.addCardTag("Race | Leonin"),e.card.addCardTag("Class | <span class='verbose'>Battlemaster </span>Fighter"),e.card.addCardTag("CR | 10")}},7282:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupVitacia=void 0;const n=a(3998),i=a(4492);t.setupVitacia=function(){const e=new i.Character(n.NpcID.Vitacia);e.core.name="Vitacia",e.core.imgPath="character_tokens/C2/Arc1/Vitacia.png",e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,1),e.card.addCardTag("F25")}},5157:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupYuki=void 0;const n=a(5480),i=a(3998),s=a(4492);t.setupYuki=function(){const e=new s.Character(i.NpcID.Yuki);e.core.name="Yuki",e.core.imgPath="character_tokens/C2/Arc1/Yuki.png",e.dStats.initializeStats(11,12,14,8,12,20),e.dStats.pb=n.Prof.get(4),e.dSKills.setSkillProficiency(n.DSkill.Stealth,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Deception,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Intimidation,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Insight,n.Hidden),e.dSKills.setSkillProficiency(n.DSkill.Perception,n.Hidden),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.setCampaignArc(2,1),e.card.addCardTag("M27")}},3838:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupC2A2=void 0;const n=a(9351),i=a(7253),s=a(4897),o=a(2202),r=a(9407),l=a(7279);t.setupC2A2=function(){(0,s.setupRuzaki)(),(0,n.setupElliot)(),(0,l.setupYoeric)(),(0,r.setupTeiai)(),(0,o.setupShuo)(),(0,i.setupGnosis)()}},9351:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupElliot=void 0;const n=a(3998),i=a(4492);t.setupElliot=function(){const e=new i.Character(n.NpcID.Elliot);e.core.name="The Sand Soldier",e.core.imgPath="character_tokens/C2/Arc2/Elliot.png",e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,2),e.card.addCardTag("M37"),e.card.addCardTag("Race | Human &times; Air Genasi"),e.card.addCardTag("From | Honor (Ashyn)"),e.card.addCardTag("CR | 17")}},7253:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupGnosis=void 0;const n=a(3998),i=a(4492);t.setupGnosis=function(){const e=new i.Character(n.NpcID.Gnosis);e.core.name="Sir Gnosis Edelweiss",e.core.imgPath="character_tokens/C2/Arc2/Gnosis.png",e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,2),e.card.addCardTag("M41"),e.card.addCardTag("Race | Human(?)"),e.card.addCardTag("From | Devotion (Nix)"),e.card.addCardTag("CR | 13")}},4897:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupRuzaki=void 0;const n=a(3998),i=a(4492);t.setupRuzaki=function(){const e=new i.Character(n.NpcID.Ruzaki);e.core.name="Ruzaki",e.core.imgPath="character_tokens/C2/Arc2/Ruzaki.png",e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,2),e.card.addCardTag("M58"),e.card.addCardTag("Race | Human"),e.card.addCardTag("From | Innovation / Honor (Ashyn)"),e.card.addCardTag("HoD Genetic Engineering, RyneTech Labs"),e.card.addCardTag("CR | 0")}},2202:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupShuo=void 0;const n=a(3998),i=a(4492);t.setupShuo=function(){const e=new i.Character(n.NpcID.Shuo);e.core.name="Shuo",e.core.imgPath="character_tokens/C2/Arc2/Shuo.png",e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,2),e.card.addCardTag("M"),e.card.addCardTag("From | Honor"),e.card.addCardTag("Race | Titan <span class='verbose'>&times; Black/Gold Dragon</span>"),e.card.addCardTag("<span>Primordial | Outsider <span class='verbose'>(1<sup>st</sup> Fragment of Sui)</span></span>"),e.card.addCardTag("The First Martial Artist"),e.card.addCardTag("CR | 24 / 28")}},9407:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupTeiai=void 0;const n=a(3998),i=a(4492);t.setupTeiai=function(){const e=new i.Character(n.NpcID.Teiai);e.core.name="Teiai",e.core.imgPath="character_tokens/C2/Arc2/Teiai.png",e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,2),e.card.addCardTag("F30"),e.card.addCardTag("Race | Human"),e.card.addCardTag("From | Honor (Ashyn)"),e.card.addCardTag("Class | Artificer"),e.card.addCardTag("CR | 6")}},7279:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupYoeric=void 0;const n=a(3998),i=a(4492);t.setupYoeric=function(){const e=new i.Character(n.NpcID.Yoeric);e.core.name="Yoeric",e.core.imgPath="character_tokens/C2/Arc2/Yoeric.png",e.opinions.isOpinionated=!1,e.card.setCampaignArc(2,2),e.card.addCardTag("M62"),e.card.addCardTag("Race | Human"),e.card.addCardTag("From | Honor (Ashyn)"),e.card.addCardTag("Class | <span class='verbose'>Champion</span> Fighter"),e.card.addCardTag("CR | 14")}},3956:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMobs=void 0;const n=a(640),i=a(8225),s=a(8583),o=a(7024),r=a(4491),l=a(5898),d=a(6205);t.setupMobs=function(){(0,s.setupNetherseaBrand)(),(0,n.setupEphremis)(),(0,r.setupSlider)(),(0,l.setupUrchin)(),(0,d.setupUrchinN)(),(0,i.setupHarpooner)(),(0,o.setupShriekerN)()}},640:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupEphremis=void 0;const n=a(5947),i=a(5480),s=a(3998),o=a(8129),r=a(2870),l=a(4492);t.setupEphremis=function(e){const t=new l.Character(s.NpcID.Ephremis);t.core.name="Ephremis (<i>Beta</i>)",t.core.imgPath="mob_tokens/seaborn/Ephremis.png",e?t.dStats.initializeStats(e.get("STR"),e.get("DEX"),e.get("CON"),e.get("INT"),e.get("WIS"),e.get("CHA")):t.dStats.initializeStats(30,24,29,21,18,28),t.dStats.pb=i.Prof.get(8),t.dSKills.setSkillProficiency(i.DSkill.Stealth,i.Hidden,i.ProficiencyLevel.Prof),t.dSKills.setSkillProficiency(i.DSkill.Athletics,i.Hidden,i.ProficiencyLevel.Prof),t.dSKills.setSkillProficiency(i.DSkill.Perception,i.Hidden,i.ProficiencyLevel.Prof),t.dSKills.setSkillProficiency(i.DSkill.Performance,i.Hidden,i.ProficiencyLevel.Prof),t.dSKills.finalizeSkills(),t.opinions.isOpinionated=!1,t.combat.addBioHpDice(n.D10.countHavingE(480,i.StatValue.mod(29)),n.D10),t.combat.addClassLevels(i.AdventurerClass.Barbarian,1),t.combat.computeHP(),t.combat.setSave(i.DStat.Str,e&&30!=e.get("STR")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Dex,e&&24!=e.get("DEX")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Con,e&&29!=e.get("CON")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Int,e&&21!=e.get("INT")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Wis,e&&18!=e.get("WIS")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Cha,e&&28!=e.get("CHA")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSpeed(i.Speed.Walking,30),t.combat.setSpeed(i.Speed.Swimming,80),t.combat.setRes(i.DamageType.Hellfire,-100),t.combat.setRes(i.DamageType.Lightning,-100),t.combat.setRes(i.DamageType.Necrotic,50),t.combat.setRes(i.DamageType.Psychic,50),t.combat.setRes(i.DamageType.Radiant,50),t.combat.setRes(i.DamageType.Thunder,50),t.combat.setRes(i.DamageType.Slashing,50),t.combat.setRes(i.DamageType.Piercing,50),t.combat.setRes(i.DamageType.Bludgeoning,50),t.combat.setRes(i.DamageType.Acid,100),t.combat.setRes(i.DamageType.Cold,100),t.combat.setRes(i.DamageType.Fire,100),t.combat.setRes(i.DamageType.Physical,100),t.combat.addConditionImmunity(i.Condition.Charmed),t.combat.addConditionImmunity(i.Condition.Grappled),t.combat.addConditionImmunity(i.Condition.Paralyzed),t.combat.addConditionImmunity(i.Condition.Restrained),t.combat.addConditionImmunity(i.Condition.Stunned),t.combat.setSense(i.Sense.BlindSight,120),t.combat.addAction(new o.Action(i.Activation.Special,"<p><em><strong>Amphibious.</strong></em>Ephremis can breathe air and \n         water.</p>")),t.combat.addAction(new o.Action(i.Activation.Special,"<p><em><strong>Nethersea Sight.&nbsp;</strong></em>Ephremis has 600ft \n         tremorsense on any spot occupied by the nethersea brand.</p>")),t.combat.addAction(new o.Action(i.Activation.Special,"<p><em><strong>Legendary Resistance (3/Day).</strong></em> If Ephremis \n         fails a saving throw, it can choose to succeed instead.</p>")),t.combat.addAction(new o.Action(i.Activation.Special,"<p><em><strong>Spell-Resistant Carapace.</strong></em> Ephremis has \n         advantage on saving throws against spells, and any creature that makes\n         a spell attack against Ephremis has disadvantage on the attack roll.\n         </p>")),t.combat.addAction(new o.Action(i.Activation.Special,`<p><strong>Call of the firstborn.</strong> Four times, for every four \n         turns it lives, Ephremis gets a new trait, assuming it has dealt at\n         least 40 damage in those 4 turns. If it survives the 17th turn and is \n         in its final form, it summons the Tsunami of Primordial Life, dying and\n         absorbing all life within a 100mile radius. The four traits are -</p>\n        <ol>\n            <li>\n                <strong>Assimilation.</strong> Ephremis now can cast \n                <strong>hunger of we many</strong> as an action.\n            </li>\n            <li>\n                <strong>Survival.</strong> Ephremis now regenerates \n                ${5*t.CON} HP while connected to the sea or \n                the nethersea brand at initiative count 20 every round. They can\n                now use the <strong>Nethersea Growth</strong> legendary action.\n            </li>\n            <li>\n                <strong>Migration.</strong>Ephremis' movement speed increases by \n                50%. They gain a flying speed equal to their walking speed. They\n                can now cast <strong>Nethersea Step</strong> as a bonus action \n                or a legendary action with 1 cost.\n            </li>\n            <li>\n                <strong>Reproduction.</strong>Ephremis creates ${(0,r.wrapRoll)(n.D4)} copies of \n                itself from the primordial soup. These teleport far away at the \n                start of the next round. At the end of that round, if Ephremis is \n                still alive, it's game over.\n            </li>\n        </ol>`)),t.combat.addAction(new o.Action(i.Activation.Action,`<p><em><strong>Claw. (2 attacks)</strong> Melee Weapon Attack:</em> \n         ${(0,r.wrapRoll)(t.STR+t.Prof)} to hit, reach 10 ft., one \n         target. <em>Hit:</em> ${(0,r.wrapRoll)([[3,n.D8],[t.STR,n.D1]])} \n         ${(0,r.wrapDamageType)(i.DamageType.Slashing)} damage (magical), and if the target is a\n         creature, it must make a DC ${t.dc(i.DStat.Str)} STR save. On \n         failure, it is pushed 5ft away, if it fails by 10 or more it is also \n         knocked ${(0,r.wrapCondition)(i.Condition.Prone)}.</p>`)),t.combat.addAction(new o.Action(i.Activation.Action,`<p><em><strong>Hunger of we many. (Recharge 5/${(0,r.wrapRoll)(n.D6)})</strong>\n         </em><strong>[Requires the Assimilation Trait]</strong> Ephremis \n         launches ${t.CON} Corrosive Vacuoles which lock on to a target \n         within 30 ft of itself. At initiative count 20, each corrosive vacuole \n         ${(0,r.wrapRoll)(n.D12)} ${(0,r.wrapDamageType)(i.DamageType.Necrotic)} damage. <br />\n         If the target is surrounded by 4 or more vacuoles and stands on the \n         nethersea brand and is below 50 HP, then 4 vacuoles merge together to \n         form a single large one which swallows the target and merges into the \n         brand.<br />\n         While swallowed, the creature takes ${(0,r.wrapRoll)([12,n.D6])} \n         ${(0,r.wrapDamageType)(i.DamageType.Corrosion)} damage at the start of each of \n         Ephremis' turns. If it deals 40 damage to the vacuoles, it appears on a\n         random location upon the brand.</p>`)),t.combat.addAction(new o.Action(i.Activation.BonusAction,`<p><em><strong>Whispers of we many. </strong>Ranged Spell Attack:</em>\n         ${(0,r.wrapRoll)(t.CHA+t.Prof)} to hit, reach 20 ft., one \n         creature. <em>Hit:</em> ${(0,r.wrapRoll)([[3,n.D6],[t.CHA,n.D1]])}\n         ${(0,r.wrapDamageType)(i.DamageType.Neural)} damage.</p>`)),t.combat.addAction(new o.Action(i.Activation.BonusAction,`<p><strong><em>Nethersea Step. </em>\n         [Requires the Migration Trait] </strong>Ephremis deals \n         ${(0,r.wrapRoll)([[1,n.D8],[t.CON,n.D1]])}\n         ${(0,r.wrapDamageType)(i.DamageType.Corrosion)} and teleports to an unoccupied \n         spot within ${15*t.INT}ft of itself which it can see or where \n         the Nethersea brand has spread.</p>`)),t.combat.addAction(new o.Action(i.Activation.LegendaryAction,"<p>Ephremis can take 3 legendary actions, choosing from the options \n         below. Only one legendary action option can be used at a time and only \n         at the end of another creature's turn. Ephremis regains spent legendary\n         actions at the start of its turn.</p>")),t.combat.addAction(new o.Action(i.Activation.LegendaryAction,"<p><em><strong>Slash.</strong></em> Ephremis makes one slash attack.</p>")),t.combat.addAction(new o.Action(i.Activation.LegendaryAction,"<p><em><strong>Move.</strong></em> Ephremis moves up to half its speed. \n         After the Migration trait is unlocked it can move its full speed or use\n         Nethersea step.</p>")),t.combat.addAction(new o.Action(i.Activation.LegendaryAction,`<p><strong><em>Nethersea Growth (Costs 2 Actions).</em> \n         [Requires the Survival Trait]</strong> Each creature within 10 feet of\n         Ephremis must make a DC ${t.dc(i.DStat.Cha)} Dexterity saving \n         throw, taking ${(0,r.wrapRoll)([3,n.D8])} slashing damage on a failed save, or\n         half as much damage on a successful one. Until the start of its next \n         turn, Ephremis gains a +2 bonus to AC. The room enters the blemished \n         stage, if it isn't already blemished, infected, corrupted or \n         sunken.</p>`)),t.sheet.cr=new i.CRValue(25),t.sheet.size=i.CreatureSize.Large,t.sheet.subtitle=" Seaborn, Neutral Evil",t.sheet.acDesc=" (Con/Dex)"}},8225:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupHarpooner=void 0;const n=a(5480),i=a(3998),s=a(5947),o=a(8129),r=a(2870),l=a(4492);t.setupHarpooner=function(){const e=new l.Character(i.NpcID.Harpooner);e.core.name="Harpooner",e.core.imgPath="mob_tokens/seaborn/Harpooner.png",e.dStats.initializeStats(20,14,12,13,10,11),e.dStats.pb=n.Prof.get(3),e.dSKills.setSkillProficiency(n.DSkill.Athletics,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!1,e.combat.addBioHpDice(s.D8.countHavingE(90,e.CON),s.D8),e.combat.computeHP(),e.combat.setSave(n.DStat.Int,n.ProficiencyLevel.Prof),e.combat.setSpeed(n.Speed.Walking,25),e.combat.setSpeed(n.Speed.Swimming,35),e.combat.setRes(n.DamageType.Hellfire,-100),e.combat.setRes(n.DamageType.Lightning,-100),e.combat.setRes(n.DamageType.Fire,-100),e.combat.setRes(n.DamageType.Psychic,50),e.combat.setRes(n.DamageType.Physical,50),e.combat.setRes(n.DamageType.Cold,50),e.combat.setRes(n.DamageType.Acid,100),e.combat.setRes(n.DamageType.Poison,100),e.combat.setSense(n.Sense.BlindSight,20),e.combat.addAction(new o.Action(n.Activation.Special,"<p><em><strong>Investiture Radar.</strong></em> The harpooner doesn't \n        have regular sight but can detect the amounts of investiture(HP) creatures\n        within 300 ft of it have. It will try to target the creature with the \n        least HP within range, unless there is any magical barrier between them \n        (e.g. Wall of Force, Shield spell) or a physical obstacle within the \n        harpooner's blindsight range or the harpooner feels the attack will \n        fail (e.g. the last attack didn't reduce the target's HP and neither \n        have moved since then).</p>")),e.combat.addAction(new o.Action(n.Activation.Action,`<p><em><strong>Harpoon!!.</strong></em> The harpooner launches its \n        harpoon in a straight line towards the target with great force. All \n        creatures in a 300 ft line must make a DC ${e.dc(n.DStat.Str)} DEX \n        save. On failure, they take ${(0,r.wrapRoll)([[5,s.D12],[e.STR,s.D1]])} \n        ${(0,r.wrapDamageType)(n.DamageType.Piercing)} damage. The harpoon is blocked if\n        it encounters an obstacle immune to piercing damage. \n         </p>`)),e.combat.addAction(new o.Action(n.Activation.BonusAction,`<p><em><strong>Harpoon...</strong></em> The harpooner launches its \n        harpoon in a straight line towards the target with moderate force. All \n        creatures in a 120 ft line must make a DC ${e.dc(n.DStat.Str)-2} DEX \n        save. On failure, they take ${(0,r.wrapRoll)([[5,s.D8],[e.STR,s.D1]])} \n        ${(0,r.wrapDamageType)(n.DamageType.Piercing)} damage. The harpoon is blocked if\n        it encounters an obstacle immune to piercing damage. \n         </p>`)),e.sheet.cr=new n.CRValue(5),e.sheet.size=n.CreatureSize.Medium,e.sheet.subtitle=" Seaborn, Neutral Evil",e.sheet.acDesc=" (Natural Armor)",e.sheet.category="seaborn",e.finalize()}},8583:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupNetherseaBrand=void 0;const n=a(5480),i=a(3998),s=a(5947),o=a(8129),r=a(2870),l=a(4492);t.setupNetherseaBrand=function(){const e=new l.Character(i.NpcID.NSBrand);e.core.name="Nethersea Brand",e.core.imgPath="mob_tokens/seaborn/NetherseaBrand.png",e.dStats.initializeStats(30,1,30,30,30,30),e.dStats.pb=n.Prof.get(10),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!1,e.combat.addBioHpDice(s.D100.countHavingE(1e6,e.CON),s.D100),e.combat.computeHP(),e.combat.setSave(n.DStat.Str,n.ProficiencyLevel.Expert),e.combat.setSave(n.DStat.Con,n.ProficiencyLevel.Expert),e.combat.setSave(n.DStat.Int,n.ProficiencyLevel.Expert),e.combat.setSave(n.DStat.Wis,n.ProficiencyLevel.Expert),e.combat.setSave(n.DStat.Cha,n.ProficiencyLevel.Expert),e.combat.setRes(n.DamageType.All,100),e.combat.addAction(new o.Action(n.Activation.Special,`<p><em><strong>Domain of the Sea.</strong></em> <strong>[Land Specific Ability]</strong> \n        Already occpying almost the entire ocean-floor of the plane of water and extending in vast\n        patches over numerous other planes, the nethersea brand marks\n        an area as belonging to the sea, and to all the terrors that arise from it.\n        What seaborn invade, the nethersea brand occupies. Where the nethersea brand\n        spreads, the ocean, ever-rising, follows.<br/>\n        While on land, any seaborn standing on the brand basks in its refuge as it\n        draws nourishment from it. Any seaborn gets at least, ${(0,r.wrapRoll)([3,s.D8])} regeneration / round, +15 ft\n        movement and 600 ft tremorsense (only within the brand). More powerful \n        seaborn may gain other abilities.</p>`)),e.combat.addAction(new o.Action(n.Activation.Special,"<p><em><strong>Near Invulnerability.</strong></em> While it does occasionally\n        wither and retreat by itself at times (particularly following failed invasions).\n        Forcing it to retreat is nearly impossible. And destroying it entirely might even\n        not be possible for Ruin. It is invulnerable to all damage \n        except Almighty (Radiant+) damage and while taking that damage will cause local \n        patches to burn or retreat, the whole regenerates HP infinitely fast (even local \n        patches are destroyed only because it takes time for the investiture to reach \n        them).</p>")),e.combat.addAction(new o.Action(n.Activation.LairAction,`<p><em><strong>Predatory Expansion.</strong></em> <strong>[Land Specific Ability]</strong> While on land, every round at\n        initiative count 20, the nethersea brand may attempt to expand in all neighbouring horizontal tiles \n        it prefers. If there are no such tiles, it may attempt to expand in all neighbouring\n        sloped / vertical tiles. It can not expand from in an area if someone is standing \n        upon it there, instead it attempts to suck investiture out of them, till they die - dealing them \n        ${(0,r.wrapRoll)(s.D12)} necrotic (void) damage and ${(0,r.wrapRoll)(s.D12)} ${(0,r.wrapDamageType)(n.DamageType.Neural)} \n        damage every round they remain standing.</p>`)),e.sheet.cr=new n.CRValue(30),e.combat.addAcBonus(35),e.sheet.size=n.CreatureSize.Cosmic,e.sheet.subtitle=" Seaborn, Unaligned",e.sheet.acDesc="",e.sheet.category="seaborn",e.finalize()}},7024:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupShriekerN=void 0;const n=a(5480),i=a(3998),s=a(5947),o=a(8129),r=a(2870),l=a(4492);t.setupShriekerN=function(){const e=new l.Character(i.NpcID.ShriekerN);e.core.name="Nourished Shrieker",e.core.imgPath="mob_tokens/seaborn/ShriekerN.png",e.dStats.initializeStats(23,16,24,11,17,21),e.dStats.pb=n.Prof.get(5),e.dSKills.setSkillProficiency(n.DSkill.Athletics,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Performance,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!1,e.combat.addBioHpDice(s.D8.countHavingE(250,e.CON),s.D8),e.combat.computeHP(),e.combat.setSave(n.DStat.Wis),e.combat.setSave(n.DStat.Cha),e.combat.setSpeed(n.Speed.Walking,40),e.combat.setSpeed(n.Speed.Swimming,60),e.combat.setRes(n.DamageType.Hellfire,-100),e.combat.setRes(n.DamageType.Lightning,-100),e.combat.setRes(n.DamageType.Psychic,50),e.combat.setRes(n.DamageType.Cold,50),e.combat.setRes(n.DamageType.Physical,50),e.combat.setRes(n.DamageType.Acid,100),e.combat.setRes(n.DamageType.Poison,100),e.combat.setSense(n.Sense.BlindSight,300),e.combat.addAction(new o.Action(n.Activation.Special,`<p><em><strong>Sated Humming.</strong></em> The shrieker roams around, \n        apparently aimless (but with a tendency to move towards other seaborn), at a \n        walking/swimming speed of 20 ft, until it takes damage...<br/>\n        While in this state, it restores ${(0,r.wrapRoll)([e.CON,s.D12])} HP per \n        round to all seaborn that get within 20 ft of it at any point of time.</p>`)),e.combat.addAction(new o.Action(n.Activation.Special,`<p><em><strong>Frenzied Shrieking.</strong></em> The shrieker dashes \n        (apparantly) randomly (but with a tendancy to move towards the highest \n        concentration of non-seaborn it can detect). While in \n        this state it deals ${(0,r.wrapRoll)([[2*e.CON,s.D12],[e.CON,s.D1]])} \n        ${(0,r.wrapDamageType)(n.DamageType.Neural)} damage per round (halved on a DC \n        ${e.dc(n.DStat.Cha)+e.Prof} WIS save) to all non-seaborn\n        that get within 60 ft of it at any point of time. At the end of each of \n        its turns it takes 50 true damage.</p>`)),e.sheet.cr=new n.CRValue(13),e.sheet.size=n.CreatureSize.Medium,e.sheet.subtitle=" Seaborn, Chaotic Evil",e.sheet.acDesc=" (Natural Armor)",e.sheet.category="seaborn",e.finalize()}},4491:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupSlider=void 0;const n=a(5480),i=a(3998),s=a(5947),o=a(8129),r=a(2870),l=a(4492);t.setupSlider=function(){const e=new l.Character(i.NpcID.Slider);e.core.name="Slider",e.core.imgPath="mob_tokens/seaborn/Slider.png",e.dStats.initializeStats(16,16,13,9,11,10),e.dStats.pb=n.Prof.get(2),e.dSKills.setSkillProficiency(n.DSkill.Performance,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!1,e.combat.addBioHpDice(s.D8.countHavingE(28,e.CON),s.D8),e.combat.computeHP(),e.combat.setSave(n.DStat.Wis),e.combat.setSave(n.DStat.Cha),e.combat.setSpeed(n.Speed.Walking,40),e.combat.setSpeed(n.Speed.Swimming,40),e.combat.setRes(n.DamageType.Hellfire,-100),e.combat.setRes(n.DamageType.Lightning,-100),e.combat.setRes(n.DamageType.Psychic,50),e.combat.setRes(n.DamageType.Cold,50),e.combat.setRes(n.DamageType.Physical,50),e.combat.setRes(n.DamageType.Acid,100),e.combat.setRes(n.DamageType.Poison,100),e.combat.setSense(n.Sense.Darkvision,90),e.combat.addAction(new o.Action(n.Activation.Action,`<p><em><strong>Tentacle wrap.</strong></em> The slider attempts to wrap\n        one of its appendages around a target upto two times. For each time, the target must \n        make a DC ${e.dc(n.DStat.Dex)} DEX save. If all rolls succeed,\n        the slider has missed and nothing happens. If any fails, the target \n        must then make a DC ${e.dc(n.DStat.Con)} CON save to attempt to \n        resist the neurotoxin it injects. On failure, the target takes ${(0,r.wrapRoll)([8,s.D6])} \n        ${(0,r.wrapDamageType)(n.DamageType.Neural)} damage. On success, they take half damage.</p>`)),e.sheet.cr=new n.CRValue(2),e.sheet.size=n.CreatureSize.Medium,e.sheet.subtitle=" Seaborn, Chaotic Evil",e.sheet.acDesc=" (Natural Armor)",e.sheet.category="seaborn",e.finalize()}},5898:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupUrchin=void 0;const n=a(5480),i=a(3998),s=a(5947),o=a(8129),r=a(2870),l=a(4492);t.setupUrchin=function(){const e=new l.Character(i.NpcID.Urchin);e.core.name="Urchin",e.core.imgPath="mob_tokens/seaborn/Urchin.png",e.dStats.initializeStats(20,1,24,1,1,1),e.dStats.pb=n.Prof.get(3),e.dSKills.setSkillProficiency(n.DSkill.Athletics,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Perception,n.Hidden,n.ProficiencyLevel.Prof),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!1,e.combat.addBioHpDice(s.D8.countHavingE(250,e.CON),s.D8),e.combat.computeHP(),e.combat.setSave(n.DStat.Str,n.ProficiencyLevel.Expert),e.combat.setSave(n.DStat.Con,n.ProficiencyLevel.Expert),e.combat.setSpeed(n.Speed.Walking,5),e.combat.setSpeed(n.Speed.Swimming,10),e.combat.setRes(n.DamageType.Hellfire,-100),e.combat.setRes(n.DamageType.Lightning,-100),e.combat.setRes(n.DamageType.Thunder,-100),e.combat.setRes(n.DamageType.Piercing,-100),e.combat.setRes(n.DamageType.Fire,-100),e.combat.setRes(n.DamageType.Psychic,50),e.combat.setRes(n.DamageType.Slashing,100),e.combat.setRes(n.DamageType.Bludgeoning,100),e.combat.setRes(n.DamageType.Acid,100),e.combat.setRes(n.DamageType.Cold,100),e.combat.setRes(n.DamageType.Poison,100),e.combat.addConditionImmunity(n.Condition.Charmed),e.combat.addConditionImmunity(n.Condition.Frightened),e.combat.setSense(n.Sense.TremorSense,120),e.combat.addAction(new o.Action(n.Activation.Special,"<p><em><strong>Fossilized Existence.</strong></em> The sea urchin will \n        never take damage due to water pressure and moves exceedingly slowly on\n        hundreds of tiny tube feet. The sea urchin may never dash, and its \n        movement speed only increases by 5ft on the Nethersea brand, instead of the usual 15ft.</p>")),e.combat.addAction(new o.Action(n.Activation.Special,`<p><em><strong>Dense toxins.</strong></em> The sea urchin has a transparent\n        outer shell exposing its viscera and a dense body filled with impurities\n        that they release in self-defense. Whenever the urchin's HP falls below\n        a multiple of 50, it releases toxins that deals \n        ${(0,r.wrapRoll)([e.CON,s.D20])} ${(0,r.wrapDamageType)(n.DamageType.Corrosion)} damage to all\n        non-seaborn creatures within 20 ft. If it's HP falls through more \n        than one multiple in a single hit the damage does not compound. \n         </p>`)),e.sheet.cr=new n.CRValue(5),e.sheet.size=n.CreatureSize.Medium,e.sheet.subtitle=" Seaborn, Neutral",e.sheet.acDesc=" (Natural Armor)",e.sheet.category="seaborn",e.finalize()}},6205:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupUrchinN=void 0;const n=a(5480),i=a(3998),s=a(5947),o=a(8129),r=a(2870),l=a(4492);t.setupUrchinN=function(){const e=new l.Character(i.NpcID.UrchinN);e.core.name="Nourished Urchin",e.core.imgPath="mob_tokens/seaborn/UrchinN.png",e.dStats.initializeStats(25,1,30,1,1,1),e.dStats.pb=n.Prof.get(5),e.dSKills.setSkillProficiency(n.DSkill.Athletics,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.DSkill.Perception,n.Hidden,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!1,e.combat.addBioHpDice(s.D8.countHavingE(400,e.CON),s.D8),e.combat.computeHP(),e.combat.setSave(n.DStat.Str,n.ProficiencyLevel.Expert),e.combat.setSave(n.DStat.Con,n.ProficiencyLevel.Expert),e.combat.setSpeed(n.Speed.Walking,5),e.combat.setSpeed(n.Speed.Swimming,10),e.combat.setRes(n.DamageType.Hellfire,-100),e.combat.setRes(n.DamageType.Lightning,-100),e.combat.setRes(n.DamageType.Thunder,-100),e.combat.setRes(n.DamageType.Fire,100),e.combat.setRes(n.DamageType.Psychic,100),e.combat.setRes(n.DamageType.Slashing,100),e.combat.setRes(n.DamageType.Bludgeoning,100),e.combat.setRes(n.DamageType.Acid,100),e.combat.setRes(n.DamageType.Cold,100),e.combat.setRes(n.DamageType.Poison,100),e.combat.addConditionImmunity(n.Condition.Charmed),e.combat.addConditionImmunity(n.Condition.Frightened),e.combat.setSense(n.Sense.TremorSense,120),e.combat.addAction(new o.Action(n.Activation.Special,"<p><em><strong>Fossilized Existence.</strong></em> The sea urchin will \n        never take damage due to water pressure and moves exceedingly slowly on\n        hundreds of tiny tube feet. The sea urchin may never dash, and its \n        movement speed only increases by 5ft on the Nethersea brand, instead of the usual 15ft.</p>")),e.combat.addAction(new o.Action(n.Activation.Special,`<p><em><strong>Dense toxins.</strong></em> The nourished sea urchin has \n        a transparent outer shell exposing its viscera and a dense body filled \n        with impurities that they release in self-defense. Whenever the urchin's\n        HP falls below a multiple of 40, it releases toxins that deals \n        ${(0,r.wrapRoll)([e.CON,s.D12])} ${(0,r.wrapDamageType)(n.DamageType.Corrosion)} \n        damage and ${(0,r.wrapRoll)([e.CON,s.D12])} ${(0,r.wrapDamageType)(n.DamageType.Neural)}\n        to all non-seaborn creatures within 60 ft. If it's HP falls through more \n        than one multiple in a single hit the damage does not compound.\n         </p>`)),e.combat.addAction(new o.Action(n.Activation.Special,`<p><em><strong>Spiky Caprice.</strong></em> A creature that attempts to \n        attack the urchin from a 5ft range takes ${(0,r.wrapRoll)(s.D10)} piercing damage.\n        This damage is ignored if the hit was a critical hit.\n         </p>`)),e.sheet.cr=new n.CRValue(9),e.sheet.size=n.CreatureSize.Medium,e.sheet.subtitle=" Seaborn, Neutral",e.sheet.acDesc=" (Natural Armor)",e.sheet.category="seaborn",e.finalize()}},7768:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testDamageTree=t.DamageTree=void 0;const n=a(5480),i=a(5512),s=a(9949),o=a(225),r=a(2813);class l{constructor(e){this.root=e}applyBuff(e){this.root.applyBuff(e)}resetBuffs(){this.root.resetBuffs()}computeDPR(e=15,t=new Map){return this.root.computeDPR(e,t)}}t.DamageTree=l,t.testDamageTree=function(){const e=new l(new s.DamageTreeNode(r.DamageTreeNodeType.And,[new s.DamageTreeNode(r.DamageTreeNodeType.Or,[new s.DamageTreeNode(r.DamageTreeNodeType.And,[new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Slashing,{damagePerAttack:10.5,attacksPerRound:2,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.WeaponAttack,o.DamageTreeNodeTag.MeleeAttack,o.DamageTreeNodeTag.OnAction]),"Longsword"),new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Radiant,{damagePerAttack:9,attacksPerRound:.25,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.WeaponAttack,o.DamageTreeNodeTag.SpellAttack]),"Divine Smite")]),new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Radiant,{damagePerAttack:10,attacksPerRound:1,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.RangedAttack,o.DamageTreeNodeTag.SpellAttack,o.DamageTreeNodeTag.OnAction]),"Cantrip [Range:120]")]),new s.DamageTreeNode(r.DamageTreeNodeType.Or,[new s.DamageTreeNode(r.DamageTreeNodeType.And,[new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Slashing,{damagePerAttack:10.5,attacksPerRound:1,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.WeaponAttack,o.DamageTreeNodeTag.MeleeAttack,o.DamageTreeNodeTag.OnBonusAction]),"Longsword"),new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Radiant,{damagePerAttack:9,attacksPerRound:.125,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.WeaponAttack,o.DamageTreeNodeTag.SpellAttack]),"Divine Smite")])])]));let t=e.computeDPR(15);console.assert(23.625==t.get(n.DamageType.Slashing),`Expected slashing damage: 0, Actual slashing damage ${t.get(n.DamageType.Slashing)}`),console.assert(2.53125==t.get(n.DamageType.Radiant),`Expected radiant damage: 0,Actual radiant damage: ${t.get(n.DamageType.Radiant)}`),t=e.computeDPR(15,new Map([[n.DamageType.Slashing,.75],[n.DamageType.Radiant,0]])),console.assert(1.96875==t.get(n.DamageType.Slashing),`Expected slashing damage: 0, Actual slashing damage ${t.get(n.DamageType.Slashing)}`),console.assert(8.34375==t.get(n.DamageType.Radiant),`Expected radiant damage: 0,Actual radiant damage: ${t.get(n.DamageType.Radiant)}`),e.applyBuff(new i.DamageTreeLeafNodeBuff((e=>e.tags.has(o.DamageTreeNodeTag.WeaponAttack)&&e.tags.has(o.DamageTreeNodeTag.OnAction)),(e=>{const t=new Map;for(const[a,n]of e.entries())t.set(a,{accuracyRating:n.accuracyRating,attacksPerRound:n.attacksPerRound+1,damagePerAttack:n.damagePerAttack});return t}))),t=e.computeDPR(15,new Map([[n.DamageType.Slashing,.75],[n.DamageType.Radiant,0]])),console.assert(7.875==t.get(n.DamageType.Slashing),`Expected slashing damage: 0, Actual slashing damage ${t.get(n.DamageType.Slashing)}`),console.assert(2.53125==t.get(n.DamageType.Radiant),`Expected radiant damage: 0,Actual radiant damage: ${t.get(n.DamageType.Radiant)}`),e.resetBuffs(),console.log("Damage Computation Tests performed.")}},5512:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DamageTreeLeafNodeBuff=void 0,t.DamageTreeLeafNodeBuff=class{constructor(e,t){this.shouldApply=e,this.apply=t}}},9949:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DamageTreeNode=void 0;const n=a(2813);t.DamageTreeNode=class{constructor(e,t,a=null,i=null,s=""){if(this._nodeType=e,this._children=t,this._selfDamage=a,this._tags=i,this.comment=s,this._nodeType==n.DamageTreeNodeType.Leaf){if(this._children.length>0)throw new Error("Can't have children on a leaf node.")}else if(null!=this._selfDamage||null!=this._tags||this.comment.length>0)throw new Error("Only leaf nodes can have these,");this._buffs=new Set}computeDPR(e,t){if(this._nodeType==n.DamageTreeNodeType.Leaf){const a=new Map;let n=this._selfDamage;for(const e of this._buffs)e.shouldApply(this)&&(n=e.apply(n));for(const[i,s]of n.entries())a.set(i,s.damagePerAttack*s.attacksPerRound*Math.min(.95,Math.max(.05,(21+s.accuracyRating-e)/20))),t.has(i)&&a.set(i,a.get(i)*(1-t.get(i)));return a}if(this._nodeType==n.DamageTreeNodeType.Or){let a=new Map,n=0;for(const i of this._children){const s=i.computeDPR(e,t);let o=0;for(const e of s.values())o+=e;o>n&&(n=o,a=s)}return a}if(this._nodeType==n.DamageTreeNodeType.And){const a=new Map;for(const n of this._children){const i=n.computeDPR(e,t);for(const[e,t]of i.entries()){const n=a.has(e)?a.get(e):0;a.set(e,n+t)}}return a}throw new Error("Unrecognized node type.")}applyBuff(e){if(this._nodeType==n.DamageTreeNodeType.Leaf)this._buffs.add(e);else for(const t of this._children)t.applyBuff(e)}removeBuff(e){if(this._nodeType==n.DamageTreeNodeType.Leaf)this._buffs.delete(e);else for(const t of this._children)t.removeBuff(e)}resetBuffs(){this._buffs.clear()}get tags(){return this._tags}get children(){return this._children}get nodeType(){return this._nodeType}get selfDamage(){return this._selfDamage}}},225:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.DamageTreeNodeTag=void 0,(a=t.DamageTreeNodeTag||(t.DamageTreeNodeTag={}))[a.WeaponAttack=0]="WeaponAttack",a[a.SpellAttack=1]="SpellAttack",a[a.MeleeAttack=2]="MeleeAttack",a[a.RangedAttack=3]="RangedAttack",a[a.OnAction=4]="OnAction",a[a.OnBonusAction=5]="OnBonusAction"},2813:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.DamageTreeNodeType=void 0,(a=t.DamageTreeNodeType||(t.DamageTreeNodeType={}))[a.Leaf=0]="Leaf",a[a.And=1]="And",a[a.Or=2]="Or"}},t={};function a(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,a),s.exports}(()=>{const e=a(9758),t=a(9676),n=a(7075),i=a(8547),s=a(4035),o=a(9086),r=a(2224),l=a(6453),d=a(8235),c=a(7187),h=a(2870),p=a(957),u=a(6091),m=a(4190),g=a(3956),f=a(7768),v=a(7527),y=a(8581),w=a(6817),S=a(698),b=a(7660),D=a(8254);$((()=>{(0,y.test)(),(0,t.test)(),(0,b.test)(),(0,f.testDamageTree)(),(0,S.setupMonsters)(),(0,m.setupCharacters)(),(0,g.setupMobs)(),(0,n.setupNav)(),(0,i.setupCards)(),(0,v.setupHistory)(),(0,s.setupCountries)(),(0,D.setupUI)(),(0,h.enableRolling)(),(0,w.renderContracts)(),(0,c.activateCombatScenarios)(),u.CardAspect.setupCardLogic(),(0,l.setupMapGraph)($("#map_graph_area"),o.devotionMap),(0,d.setupUpgradeGraph)($("#skill_graph_area"),r.skillMap),(0,e.setupGraphNav)(),(0,p.setupBaseLogic)()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUEsRUFBYyxPQUFJLElBQU0sU0FDOUJBLEVBQU1BLEVBQWUsUUFBSSxJQUFNLFVBQy9CQSxFQUFNQSxFQUFZLEtBQUksSUFBTSxPQUM1QkEsRUFBTUEsRUFBWSxLQUFJLElBQU0sT0FDNUJBLEVBQU1BLEVBQWEsTUFBSSxJQUFNLFFBQzdCQSxFQUFNQSxFQUFjLE9BQUksSUFBTSxTQUM5QkEsRUFBTUEsRUFBYSxNQUFJLElBQU0sUUFDN0JBLEVBQU1BLEVBQWUsUUFBSSxJQUFNLFVBQy9CQSxFQUFNQSxFQUFjLE9BQUksSUFBTSxTQUM5QkEsRUFBTUEsRUFBZSxRQUFJLElBQU0sVUFDL0JBLEVBQU1BLEVBQWEsTUFBSSxJQUFNLFFBQzdCQSxFQUFNQSxFQUFjLE9BQUksSUFBTSxTQUM5QkEsRUFBTUEsRUFBVyxJQUFJLElBQU0sTUFDM0JBLEVBQU1BLEVBQVksS0FBSSxJQUFNLE9BQzVCQSxFQUFNQSxFQUFjLE9BQUksSUFBTSxTQUM5QkEsRUFBTUEsRUFBWSxLQUFJLElBQU0sT0FDNUJBLEVBQU1BLEVBQVksS0FBSSxJQUFNLE9BQzVCQSxFQUFNQSxFQUFhLE1BQUksSUFBTSxRQUM3QkEsRUFBTUEsRUFBYyxPQUFJLElBQU0sU0FDOUJBLEVBQU1BLEVBQWEsTUFBSSxJQUFNLFFBQzdCQSxFQUFNQSxFQUFlLFFBQUksSUFBTSxVQUMvQkEsRUFBTUEsRUFBYSxNQUFJLElBQU0sUUFDN0JBLEVBQU1BLEVBQWUsUUFBSSxJQUFNLFVBRS9CQSxFQUFNQSxFQUFjLE9BQUksSUFBTSxTQUM5QkEsRUFBTUEsRUFBYSxNQUFJLElBQU0sUUFDN0JBLEVBQU1BLEVBQWUsUUFBSSxJQUFNLFVBQy9CQSxFQUFNQSxFQUFZLEtBQUksSUFBTSxPQUM1QkEsRUFBTUEsRUFBYSxNQUFJLElBQU0sUUFDN0JBLEVBQU1BLEVBQWMsT0FBSSxJQUFNLFNBQzlCQSxFQUFNQSxFQUFjLE9BQUksSUFBTSxTQUM5QkEsRUFBTUEsRUFBYyxPQUFJLElBQU0sU0FDOUJBLEVBQU1BLEVBQWEsTUFBSSxJQUFNLFFBQzdCQSxFQUFNQSxF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QkFDZCxFQUFJbW9ELEVBQVU3K0IsWUFDZCxFQUFJNUwsRUFBTzBlLGtCQUNYLEVBQUl6VCxFQUFZNUcsb0JBQ2hCLEVBQUlpbUMsRUFBMEJuc0IsMkJBQzlCMEUsRUFBYWtELFdBQVcya0Isa0JBQ3hCLEVBQUkxd0MsRUFBVy9PLGVBQWV2VixFQUFFLG1CQUFvQjAwRCxFQUFjdndDLGNBQ2xFLEVBQUk0RSxFQUFldkwsbUJBQW1CeGQsRUFBRSxxQkFBc0IyMEQsRUFBVzlyQyxXQUN6RSxFQUFJMHJDLEVBQW9CejBELGtCQUN4QixFQUFJMlYsRUFBTzAyQixzQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2NvZGUvYnVpbGQvY29tbW9uL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2NvbW1vbi9ncmFwaHNfbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2NvbW1vbi9uYXZpZ2F0aW9uLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvQmFzZVVuaXF1ZURPTUdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L0dhbWVUaW1lc3RhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9jYXJkLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvZGF0YS9SYXJpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9kYXRhL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L2RhdGEvY291bnRyeS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L2RhdGEvaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L2RhdGEvbnBjSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9kYXRhL3BjSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9tYXAvRWRnZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L21hcC9HcmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L21hcC9NYXBFZGdlLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvbWFwL01hcEdyYXBoLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvbWFwL01hcFRyYW5zcG9ydGF0aW9uLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvbWFwL01hcFZlcnRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L21hcC9NYXBWZXJ0ZXhTdGF0dXMuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9tYXAvU2lkZVBhbmVsLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvbWFwL1VwZ3JhZGVFZGdlLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvbWFwL1VwZ3JhZGVHcmFwaC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L21hcC9VcGdyYWRlVmVydGV4LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvbWFwL1VwZ3JhZGVWZXJ0ZXhDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9tYXAvVmVydGV4LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvbWFwL2luc3RhbmNlcy9kZXZvdGlvbk1hcC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L21hcC9pbnN0YW5jZXMvc2tpbGxNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9tb25zdGVycy9hdHRhY2suanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9tb25zdGVycy9jb250cmFjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9tb25zdGVycy9pbmtsaW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L21vbnN0ZXJzL2luc3RhbmNlcy5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L21vbnN0ZXJzL3NldHVwVUkuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9tb25zdGVycy9zaGVldC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL0F0dGl0dWRlSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL0J1ZmZlcmVkQXR0aXR1ZGVMaXN0QmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL0R5bmFtaWNCdWZmZXJTbG90LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvb3BpbmlvbnMvRml4ZWRTaXplU2xvdC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL05wY0ludGVyYWN0aW9uRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9vcGluaW9ucy9OcGNPcGluaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL1Bvc2l0aXZlRW1vdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL1Nsb3RCYXNlLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvb3BpbmlvbnMvU3RhbmRhcmRBdHRpdHVkZUhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9vcGluaW9ucy9TdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvb3BpbmlvbnMvVGltZXNraXBFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL3Nlc3Npb25zL2FyY18yMS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL3Nlc3Npb25zL2FyY18yMi5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL3Nlc3Npb25zL3MxMC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL3Nlc3Npb25zL3MxMS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL3Nlc3Npb25zL3MyLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvb3BpbmlvbnMvc2Vzc2lvbnMvczMuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9vcGluaW9ucy9zZXNzaW9ucy9zNC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL3Nlc3Npb25zL3M1LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvb3BpbmlvbnMvc2Vzc2lvbnMvczYuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9vcGluaW9ucy9zZXNzaW9ucy9zNy5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L29waW5pb25zL3Nlc3Npb25zL3M4LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvb3BpbmlvbnMvc2Vzc2lvbnMvczkuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9yb2xsaW5nL0RpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9yb2xsaW5nL1JvbGxhYmxlLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2NlbmFyaW9zL2FjdGl2YXRlQ29tYmF0U2NlbmFyaW9zLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9hY3Rpb24vQWN0aW9uLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9hY3Rpb24vQWN0aW9uQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vYWN0aW9uL1dyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2Jhc2UvQWNoaWV2ZW1lbnRzLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9iYXNlL0Jhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2Jhc2UvT3BlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2Jhc2UvYnVpbGRpbmdJbnN0YW5jZXMuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL01vcmFsZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9hc3BlY3RzL0FzcGVjdEZhY3RvcnlGbGFnLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2FzcGVjdHMvQXNwZWN0Tm90U2V0dXBFeGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvYXNwZWN0cy9CYXNlQXNwZWN0LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2FzcGVjdHMvQ1NraWxsc0FzcGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9hc3BlY3RzL0NhcmRBc3BlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvYXNwZWN0cy9Db21iYXRBc3BlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvYXNwZWN0cy9Db3JlQXNwZWN0LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2FzcGVjdHMvRFNraWxsc0FzcGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9hc3BlY3RzL0RTdGF0c0FzcGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9hc3BlY3RzL0R1cGxpY2F0ZVNldHVwRXhjZXB0aW9uLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2FzcGVjdHMvT3BlcmF0b3JBc3BlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvYXNwZWN0cy9PcGluaW9uQXNwZWN0LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2FzcGVjdHMvU2hlZXRBc3BlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL19pbml0LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMxL19pbml0LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMxL2NhZWx5bm4uanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzEvZGF2ZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMS9lYmVuZXphci5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMS9pcmVuZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMS9sZXNsZXkuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzEvbGlhLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMxL2xpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzEvbHVjaWFuLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMxL21hc3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMS91bHJpY2guanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzEvdmFoYXJldGguanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzIvX2luaXQuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzIvYW1haWEuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzIvYmFwaG9tZXQuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzIvZGVjcm9hLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL2ZpZXN0LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL2dkZWYuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzIvZ2VuLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL2tqZXJhLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL2xlbXVlbi5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMi9sb2dvcy5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMi9tYW5kcmFnb3JhLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL21vc3RpbWEuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MxL2FyYzIvbW91dGhwaWVjZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMi9tdWVsc3lzZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMi9vdGhlbGxvLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL3Nhbmd1aW5lQXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzEvYXJjMi9zaGFtYXJlLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL3NoaW1ha2VuLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL3NoaW1hcmluLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMS9hcmMyL3ZlcnJhZGVyLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL19pbml0LmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2FuZG9haW4uanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzEvYW5kcmkuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzEvYXRobG9uLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2Jqb3JuLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2NlY2lsaWEuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzEvY29yb3RvLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2Rhd24uanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzEvZHVzay5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzIvYXJjMS9lbHlzaXVtLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2VyaWNhLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2V6ZWxsLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2dlbmVmZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzIvYXJjMS9oYXYuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzEvaGluYS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzIvYXJjMS9pbmdyaWQuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzEvaW9uYS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzIvYXJjMS9qYXllLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2pvcmRpLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL2thc3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzIvYXJjMS9yb2JlcnRhLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL3Nhc2hhLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL3N5YmlsbGEuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzEvdG9tYXNhLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL3Zlcm5hLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMxL3ZpdGFjaWEuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzEveXVraS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzIvYXJjMi9faW5pdC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzIvYXJjMi9lbGxpb3QuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL2MyL2FyYzIvZ25vc2lzLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMyL3J1emFraS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvYzIvYXJjMi9zaHVvLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMyL3RlaWFpLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9jMi9hcmMyL3lvZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvbW9icy9faW5pdC5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9pbnN0YW5jZXMvbW9icy9zZWFib3JuL0VwaHJlbWlzLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9tb2JzL3NlYWJvcm4vSGFycG9vbmVyLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9tb2JzL3NlYWJvcm4vTmV0aGVyc2VhQnJhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL21vYnMvc2VhYm9ybi9TaHJpZWtlck4uanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL21vYnMvc2VhYm9ybi9TbGlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL21vYnMvc2VhYm9ybi9VcmNoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL21vYnMvc2VhYm9ybi9VcmNoaW5OLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9kYW1hZ2UvRGFtYWdlVHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vZGFtYWdlL0RhbWFnZVRyZWVMZWFmTm9kZUJ1ZmYuanMiLCJ3ZWJwYWNrOi8vLy4vY29kZS9idWlsZC9nYW1lcGxheS9zaW11bGF0aW9uL2RhbWFnZS9EYW1hZ2VUcmVlTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2dhbWVwbGF5L3NpbXVsYXRpb24vZGFtYWdlL0RhbWFnZVRyZWVOb2RlVGFnLmpzIiwid2VicGFjazovLy8uL2NvZGUvYnVpbGQvZ2FtZXBsYXkvc2ltdWxhdGlvbi9kYW1hZ2UvRGFtYWdlVHJlZU5vZGVUeXBlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9jb2RlL2J1aWxkL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudXBkYXRlTWFwID0gZXhwb3J0cy5nZXROdW1iZXJTdWZmaXggPSBleHBvcnRzLmdldEVudW1JdGVyYXRvciA9IGV4cG9ydHMuZ2V0RW51bUxlbmd0aCA9IGV4cG9ydHMubWVtb2l6ZSA9IGV4cG9ydHMuRVEgPSBleHBvcnRzLndhaXRGb3JGaW5hbEV2ZW50ID0gdm9pZCAwO1xyXG5leHBvcnRzLndhaXRGb3JGaW5hbEV2ZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IHRpbWVycyA9IHt9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaywgbXMsIHVuaXF1ZUlkKSB7XHJcbiAgICAgICAgaWYgKCF1bmlxdWVJZCkge1xyXG4gICAgICAgICAgICB1bmlxdWVJZCA9IFwiRG9uJ3QgY2FsbCB0aGlzIHR3aWNlIHdpdGhvdXQgYSB1bmlxdWVJZFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGltZXJzW3VuaXF1ZUlkXSkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJzW3VuaXF1ZUlkXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRpbWVyc1t1bmlxdWVJZF0gPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCBtcyk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4vLyBVc2FnZTpcclxuLy8gJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbiAoKSB7XHJcbi8vICAgICB3YWl0Rm9yRmluYWxFdmVudChmdW5jdGlvbigpe1xyXG4vLyAgICAgICBhbGVydCgnUmVzaXplLi4uJyk7XHJcbi8vICAgICAgIC8vLi4uXHJcbi8vICAgICB9LCA1MDAsIFwic29tZSB1bmlxdWUgc3RyaW5nXCIpO1xyXG4vLyB9KTtcclxuZnVuY3Rpb24gRVEoYSwgYikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8IDAuMDAwMDE7XHJcbn1cclxuZXhwb3J0cy5FUSA9IEVRO1xyXG4vKipcclxuICogU2ltcGxlIG1lbW9pemF0aW9uIGltcGxlbWVudGF0aW9uLiBTaG91bGQgb25seSBiZSB1c2VkIGlmIHdlIGFudGljaXBhdGUgYSBsb3RcclxuICogb2YgY2FsbHMgdG8gdGhlIHNhbWUgbWV0aG9kIHdpdGggdGhlIHNhbWUgYXJndW1lbnRzLlxyXG4gKi9cclxuZnVuY3Rpb24gbWVtb2l6ZShmbikge1xyXG4gICAgY29uc3QgbWVtb2l6ZWRBcmd1bWVudHMgPSBuZXcgTWFwKCk7XHJcbiAgICAvLyBUaGlzIDxhbnk+IGNhc3QgaXMgZHVlIHRvIHRzIGhhbmRsaW5nICdGdW5jdGlvbicgZGlmZmVyZW50bHkgZnJvbVxyXG4gICAgLy8gKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkuIFRoaXMgd2FzIHRoZSBzaW1wbGVzdCB3YXkgSSBjb3VsZCByZXNvbHZlIHRoaXMuXHJcbiAgICAvLyBTZWU6XHJcbiAgICAvLyAgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjg5OTg0MTcvY3JlYXRlLWEtZ2VuZXJpYy1mdW5jdGlvbi1yZXR1cm5pbmctYS1mdW5jdGlvbi13aXRoLXRoZS1zYW1lLXNpZ25hdHVyZVxyXG4gICAgLy8gIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY0MzgwOTA1L2RpZmZlcmVuY2UtYmV0d2Vlbi1mdW5jdGlvbi1hbmQtYXJncy1hbnktYW55XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICBpZiAobWVtb2l6ZWRBcmd1bWVudHMuaGFzKGFyZ3MpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtZW1vaXplZEFyZ3VtZW50cy5nZXQoYXJncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZuKGFyZ3MpO1xyXG4gICAgICAgIG1lbW9pemVkQXJndW1lbnRzLnNldChhcmdzLCByZXN1bHQpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMubWVtb2l6ZSA9IG1lbW9pemU7XHJcbmZ1bmN0aW9uIF9nZXRFbnVtTGVuZ3RoKGVuKSB7XHJcbiAgICAvLyBOb3RpbmcgdGhhdCB0cyBjb21waWxlcyBlbnVtcyBpbnRvIHZhbC9pZHgtPmlkeC92YWwgb2JqZWN0cy4uLlxyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVuKS5sZW5ndGggLyAyO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYSBwdXJlbHkgbnVtZXJpY2FsIGVudW0uXHJcbiAqL1xyXG5leHBvcnRzLmdldEVudW1MZW5ndGggPSBtZW1vaXplKF9nZXRFbnVtTGVuZ3RoKTtcclxuZnVuY3Rpb24qIF9nZXRFbnVtSXRlcmF0b3IoYXJncykge1xyXG4gICAgZm9yIChsZXQgaXRlbSBpbiBhcmdzWzBdKSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKE51bWJlcihpdGVtKSkpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHlpZWxkIE51bWJlcihpdGVtKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgaXRlcmF0b3Igb3ZlciB0aGUgbnVtZXJpY2FsIHZhbHVlcyBpbiBhbiBlbnVtLCBpLmUuIGFuIGl0ZXJhdG9yXHJcbiAqIG92ZXIgc2F5IFswLCAxLCAyLCAzLCAuLi5dIHdoaWNoIGlzIGlkZW50aWNhbCB0byBbZW4uRWxlbUEsIGVuLmVsZW1CLCAuLi5dLlxyXG4gKi9cclxuZXhwb3J0cy5nZXRFbnVtSXRlcmF0b3IgPSBtZW1vaXplKF9nZXRFbnVtSXRlcmF0b3IpO1xyXG5mdW5jdGlvbiBnZXROdW1iZXJTdWZmaXgobikge1xyXG4gICAgaWYgKG4gPCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3VmZml4ZXMgbm90IHN1cHBvcnRlZCBmb3IgbmVnYXRpdmUgbnVtYmVyc1wiKTtcclxuICAgIH1cclxuICAgIGlmIChuICUgMTAgPT0gMSkge1xyXG4gICAgICAgIHJldHVybiBuID09IDExID8gXCJ0aFwiIDogXCJzdFwiO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobiAlIDEwID09IDIpIHtcclxuICAgICAgICByZXR1cm4gbiA9PSAxMiA/IFwidGhcIiA6IFwibmRcIjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG4gJSAxMCA9PSAzKSB7XHJcbiAgICAgICAgcmV0dXJuIG4gPT0gMTMgPyBcInRoXCIgOiBcInJkXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gXCJ0aFwiO1xyXG59XHJcbmV4cG9ydHMuZ2V0TnVtYmVyU3VmZml4ID0gZ2V0TnVtYmVyU3VmZml4O1xyXG5mdW5jdGlvbiB1cGRhdGVNYXAobSwga2V5LCB2YWwpIHtcclxuICAgIG0uc2V0KGtleSwgKG0uaGFzKGtleSkgPyBtLmdldChrZXkpIDogMCkgKyB2YWwpO1xyXG59XHJcbmV4cG9ydHMudXBkYXRlTWFwID0gdXBkYXRlTWFwO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEdyYXBoTmF2ID0gdm9pZCAwO1xyXG5jb25zdCBTaWRlUGFuZWxfMSA9IHJlcXVpcmUoXCIuLi9nYW1lcGxheS9tYXAvU2lkZVBhbmVsXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEdyYXBoTmF2KCkge1xyXG4gICAgJChcIiNncmFwaF9sYWJlbHNcIikub24oXCJjbGlja1wiLCBcIi5ncmFwaF9sYWJlbFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoXCJzZWxlY3RlZFwiKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0ICRzaWRlQmFubmVyID0gJChcIiNzaWRlX2Jhbm5lclwiKTtcclxuICAgICAgICBjb25zdCBzaWRlUGFuZWwgPSBuZXcgU2lkZVBhbmVsXzEuU2lkZVBhbmVsKCRzaWRlQmFubmVyKTtcclxuICAgICAgICAkKFwiLmdyYXBoX2xhYmVsXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICQoXCIuZ3JhcGhfYXJlYVwiKS5oaWRlKCk7XHJcbiAgICAgICAgJChgIyR7JCh0aGlzKS5kYXRhKFwiZ3JhcGhJZFwiKX1gKS5zaG93KCk7XHJcbiAgICAgICAgc2lkZVBhbmVsLnJlc2V0KCk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNldHVwR3JhcGhOYXYgPSBzZXR1cEdyYXBoTmF2O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncmFwaHNfbmF2aWdhdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwTmF2ID0gdm9pZCAwO1xyXG5jb25zdCBpZFRvTmF2SWNvbiA9IG5ldyBNYXAoW1xyXG4gICAgW1wiY2hhcklkeFwiLCBbYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtYWRkcmVzcy1ib29rXCI+PC9pPmBdXSxcclxuICAgIFtcIm1hdGVyaWFsXCIsIFtgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1nbG9iZS1zdGFuZFwiPjwvaT5gXV0sXHJcbiAgICBbXCJzaGFyZHNcIiwgW2A8aSBjbGFzcz1cImZhLWR1b3RvbmUgZmEtc29sYXItc3lzdGVtXCI+PC9pPmBdXSxcclxuICAgIFtcImhpc3RvcnlcIiwgW2A8aSBjbGFzcz1cImZhLXJlZ3VsYXIgZmEtdGltZWxpbmUtYXJyb3dcIj48L2k+YF1dLFxyXG4gICAgW1wicnVsZXNcIiwgW2A8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWdhdmVsXCI+PC9pPmBdXSxcclxuICAgIFtcImludGVyYWN0aW9uc1wiLCBbYDxpIGNsYXNzPVwiZmEtZHVvdG9uZSBmYS11c2VyLXNlY3JldFwiPjwvaT5gXV0sXHJcbiAgICBbXCJiZWFzdGlhcnlcIiwgW2A8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXN3b3Jkc1wiPjwvaT5gXV0sXHJcbl0pO1xyXG5mdW5jdGlvbiBzZXR1cE5hdigpIHtcclxuICAgIGNvbnN0ICRwYWdlTmF2ID0gJChcIiNwYWdlX25hdlwiKTtcclxuICAgICQoXCIucGFnZVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBpZCA9ICQodGhpcykuZGF0YShcIm5hdklkXCIpO1xyXG4gICAgICAgICRwYWdlTmF2LmFwcGVuZChgPGRpdiBjbGFzcz1cInBhZ2VfbmF2X2xpbmtcIiBkYXRhLW5hdi10bz1cIiR7aWR9XCI+XHJcbiAgICAgICAgICAgICAgICAke2lkVG9OYXZJY29uLmdldChpZCl9JHskKHRoaXMpLmZpbmQoXCIucGFnZV9oZWFkZXJcIikudGV4dCgpfVxyXG4gICAgICAgICAgICA8L2Rpdj5gKTtcclxuICAgIH0pO1xyXG4gICAgJHBhZ2VOYXYuYXBwZW5kKFwiPGRpdiBjbGFzcz0nc3BhY2VfZmlsbGVyJz48L2Rpdj5cIik7XHJcbiAgICAkcGFnZU5hdi5vbihcImNsaWNrXCIsIFwiLnBhZ2VfbmF2X2xpbmtcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IG5hdlRvID0gJCh0aGlzKS5kYXRhKFwibmF2VG9cIik7XHJcbiAgICAgICAgY29uc3QgJG5hdlRvID0gJChgLnBhZ2VbZGF0YS1uYXYtaWQ9JyR7bmF2VG99J11gKTtcclxuICAgICAgICAkbmF2VG9bMF0uc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBOYXYgPSBzZXR1cE5hdjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF2aWdhdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkJhc2VVbmlxdWVET01HZW5lcmF0b3IgPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRhdGlvbiBjb21tb24gdG8gYWxsIHtAbGluayBJVW5pcXVlRE9NR2VuZXJhdG9yfXMuXHJcbiAqL1xyXG5jbGFzcyBCYXNlVW5pcXVlRE9NR2VuZXJhdG9yIHtcclxuICAgIC8qKlxyXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgZ2VuZXJhdGVkIGJ5IHRoaXMgb2JqZWN0LiBOdWxsIGlmIG5vIGVsZW1lbnRcclxuICAgICAqIGhhcyBiZWVuIGdlbmVyYXRlZCB5ZXQuIEl0IGlzIGFkdmlzYWJsZSB0byBjYWNoZSB0aGlzIHZhbHVlIHRvIGF2b2lkXHJcbiAgICAgKiBmcml2b2xvdXMgbG9va3Vwcy5cclxuICAgICAqL1xyXG4gICAgZ2V0ICRlbGVtZW50KCkge1xyXG4gICAgICAgIGNvbnN0ICRtYXRjaGVzID0gJChgIyR7dGhpcy5pZH1gKTtcclxuICAgICAgICByZXR1cm4gJG1hdGNoZXMubGVuZ3RoID09IDAgPyBudWxsIDogJG1hdGNoZXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIHJlZnJlc2hSZW5kZXJlZEVsZW1lbnQoKSB7XHJcbiAgICAgICAgY29uc3QgJGVsZW1lbnQgPSB0aGlzLiRlbGVtZW50O1xyXG4gICAgICAgIGlmICgkZWxlbWVudCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kb1JlZnJlc2hSZW5kZXJlZEVsZW1lbnQoJGVsZW1lbnQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYWN0dWFsIHJlZnJlc2ggbG9naWMuXHJcbiAgICAgKi9cclxuICAgIGRvUmVmcmVzaFJlbmRlcmVkRWxlbWVudCgkZWxlbWVudCkgeyB9XHJcbn1cclxuZXhwb3J0cy5CYXNlVW5pcXVlRE9NR2VuZXJhdG9yID0gQmFzZVVuaXF1ZURPTUdlbmVyYXRvcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZVVuaXF1ZURPTUdlbmVyYXRvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlRfTk9XID0gZXhwb3J0cy5HYW1lVGltZXN0YW1wID0gdm9pZCAwO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vY29tbW9uXCIpO1xyXG4vKipcclxuICogVGhlIHRpbWVzdGFtcCBpbiBpbi1nYW1lIHRlcm1zLlxyXG4gKlxyXG4gKiBGb3IgdGhlIHB1cnBvc2VzIG9mIENhbXBhaWduIzIsIEknbSBnb2luZyB0byBhc3N1bWUgdGltZSB3cnQuIHRoZSBwbGFuZSBvZlxyXG4gKiBEZXZvdGlvbiBhbmQgd2l0aCB0PTAgYXMgd2hlbiB0aGV5IGVudGVyZWQuXHJcbiAqL1xyXG5jbGFzcyBHYW1lVGltZXN0YW1wIHtcclxuICAgIGNvbnN0cnVjdG9yKHllYXIgPSAwLCAvLyBJbiBkZXZvdGlvbiB0ZXJtcyB0aGlzIGlzIDEwMCBkYXlzIGxvbmcuXHJcbiAgICBkYXkgPSAwLCAvLyBKdXN0IGEgbWV0cmljIG9mIHRpbWUuIDI0IGhvdXJzIGxvbmcuXHJcbiAgICBob3VyID0gMCwgbWludXRlID0gMCwgc2Vjb25kID0gMCwgbXMgPSAwKSB7XHJcbiAgICAgICAgdGhpcy55ZWFyID0geWVhcjtcclxuICAgICAgICB0aGlzLmRheSA9IGRheTtcclxuICAgICAgICB0aGlzLmhvdXIgPSBob3VyO1xyXG4gICAgICAgIHRoaXMubWludXRlID0gbWludXRlO1xyXG4gICAgICAgIHRoaXMuc2Vjb25kID0gc2Vjb25kO1xyXG4gICAgICAgIHRoaXMubXMgPSBtcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRmFjdG9yeSBtZXRob2QgdG8gZ2V0IHRpbWVzdGFtcCBvYmplY3RzIHdpdGggb25seSBhIGRpc2NyZXRlIG51bWJlciBvZlxyXG4gICAgICogZGF5cy5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGZyb21EYXlzKG5EYXlzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBHYW1lVGltZXN0YW1wKDAsIG5EYXlzKTtcclxuICAgIH1cclxuICAgIGdldCB0b3RhbE1pbGxpcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tcyArIDEwMDAgKiAodGhpcy5zZWNvbmQgKyA2MCAqICh0aGlzLm1pbnV0ZSArIDYwICogKHRoaXMuaG91ciArIDI0ICogKHRoaXMuZGF5ICsgMTAwICpcclxuICAgICAgICAgICAgdGhpcy55ZWFyKSkpKTtcclxuICAgIH1cclxuICAgIGdldCB0b3RhbERheXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5ICsgMTAwICogdGhpcy55ZWFyO1xyXG4gICAgfVxyXG4gICAgZ2VuZXJhdGVET01TdHJpbmcoKSB7XHJcbiAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHdyb25nIHNpbmNlIDI0MDAgaG91cnMgd2lsbCBjYXVzZSB0aGUgZGF5IHRvIGdvIGJhZCxcclxuICAgICAgICAvLyBidXQgdGhhdCBjYW4gYmUgZml4ZWQgbGF0ZXIuXHJcbiAgICAgICAgY29uc3QgeWVhciA9IHRoaXMueWVhciArIE1hdGguZmxvb3IodGhpcy5kYXkgLyAxMDApO1xyXG4gICAgICAgIGNvbnN0IGRheSA9IHRoaXMuZGF5ICUgMTAwICsgTWF0aC5mbG9vcih0aGlzLmhvdXIgLyAyNCk7XHJcbiAgICAgICAgY29uc3QgaG91ciA9IHRoaXMuaG91ciAlIDI0ICsgTWF0aC5mbG9vcih0aGlzLm1pbnV0ZSAvIDYwKTtcclxuICAgICAgICBjb25zdCBtaW51dGUgPSB0aGlzLm1pbnV0ZSAlIDYwICsgTWF0aC5mbG9vcih0aGlzLnNlY29uZCAvIDYwKTtcclxuICAgICAgICBjb25zdCBob3VyU3RyID0gU3RyaW5nKGhvdXIpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICAgICAgY29uc3QgbWluU3RyID0gU3RyaW5nKG1pbnV0ZSkucGFkU3RhcnQoMiwgJzAnKTtcclxuICAgICAgICByZXR1cm4gYCR7ZGF5fTxzdXA+JHsoMCwgY29tbW9uXzEuZ2V0TnVtYmVyU3VmZml4KShkYXkpfTwvc3VwPiBvZiBZZWFyICR7eWVhcn0sICR7aG91clN0cn06JHttaW5TdHJ9YDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkdhbWVUaW1lc3RhbXAgPSBHYW1lVGltZXN0YW1wO1xyXG5HYW1lVGltZXN0YW1wLkRBWSA9IDI0ICogNjAgKiA2MCAqIDEwMDA7XHJcbmV4cG9ydHMuVF9OT1cgPSBuZXcgR2FtZVRpbWVzdGFtcCgwLCA2LCAxMiwgMTUpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1HYW1lVGltZXN0YW1wLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBDYXJkcyA9IGV4cG9ydHMuQ2FyZCA9IHZvaWQgMDtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2NvbW1vblwiKTtcclxuLyoqXHJcbiAqIERlZmluZXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIGluZGV4ZWQuIEhvdmVyaW5nIG9uIGl0IHdpbGwgZGlzcGxheSBhIHNuaXBwZXRcclxuICogaW4gY2FyZCBzdHlsZSBhbmQgY2xpY2tpbmcgb24gaXQgd2lsbCBuYXZpZ2F0ZSB0byBzb21lIHNlY3Rpb24gb2YgdGhlIHBhZ2UuXHJcbiAqXHJcbiAqIFRoZSBhY3R1YWwgdXNhZ2UgaXMgbm93IGRlcHJlY2F0ZWQgYW5kIHRoaXMganVzdCBhY3RzIGFzIGEgcGxhY2Vob2xkZXIgZm9yXHJcbiAqIGNhcmQgcmVsYXRlZCBsb2dpYy5cclxuICovXHJcbmNsYXNzIENhcmQge1xyXG4gICAgc3RhdGljIGxvYWRGcm9tRE9NKCkge1xyXG4gICAgICAgIENhcmQuJGNvbW1vbkNlbnRyYWxWaWV3ID0gJChcIiNjaGFyYWN0ZXJfaWR4IC5jZW50cmFsX3ZpZXdcIik7XHJcbiAgICAgICAgQ2FyZC4kdG9rZW5TcGFjZSA9ICQoXCIjdG9rZW5zXCIpO1xyXG4gICAgICAgIENhcmQuJGNvbW1vbkNlbnRyYWxWaWV3Lm9uKFwiY2xpY2tcIiwgXCIudG9rZW5fc2VsZWN0b3JcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCAkdG9rZW5zID0gJCh0aGlzKS5wYXJlbnQoKS5zaWJsaW5ncyhcIi50b2tlbnNcIik7XHJcbiAgICAgICAgICAgICR0b2tlbnMuY2hpbGRyZW4oKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICR0b2tlbnMuY2hpbGRyZW4oYFtkYXRhLXRva2VuPSckeyQodGhpcykuZGF0YShcInRva2VuXCIpfSddYCkuc2hvdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuJGZsb2F0aW5nQ2FyZCA9ICQoXCIjZmxvYXRpbmdfY2FyZFwiKTtcclxuICAgICAgICB0aGlzLiRjYXJkR3JhdmV5YXJkID0gJChcIiNjYXJkX2dyYXZleWFyZFwiKTtcclxuICAgICAgICB0aGlzLnNuYXBXaW5kb3dEaW1lbnNpb25zKCk7XHJcbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEpTRGVwcmVjYXRlZFN5bWJvbHNcclxuICAgICAgICAkKHdpbmRvdykucmVzaXplKCgpID0+IHtcclxuICAgICAgICAgICAgKDAsIGNvbW1vbl8xLndhaXRGb3JGaW5hbEV2ZW50KSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNuYXBXaW5kb3dEaW1lbnNpb25zKCk7XHJcbiAgICAgICAgICAgIH0sIDUwMCwgXCJJbmRleGlibGUubG9hZEZyb21ET01cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgdmVyYm9zZShzKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cInZlcmJvc2VcIj4ke3N9PC9zcGFuPmA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgbGluayhpbmRleEtleSwgZGlzcGxheVRleHQpIHtcclxuICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiY2FyZF9saW5rXCIgZGF0YS1pbmRleC1rZXk9XCIke2luZGV4S2V5fVwiPiR7ZGlzcGxheVRleHR9PC9zcGFuPmA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgc25hcFdpbmRvd0RpbWVuc2lvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgJHdpbmRvdyA9ICQod2luZG93KTtcclxuICAgICAgICB0aGlzLnZpZXdwb3J0SGVpZ2h0SW5QeCA9ICR3aW5kb3cuaGVpZ2h0KCk7XHJcbiAgICAgICAgdGhpcy52aWV3cG9ydFdpZHRoSW5QeCA9ICR3aW5kb3cud2lkdGgoKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyByZXZlYWxGbG9hdGluZ0NhcmQoKSB7XHJcbiAgICAgICAgdGhpcy4kZmxvYXRpbmdDYXJkLnNob3coKTtcclxuICAgICAgICB0aGlzLmZsb2F0aW5nQ2FyZFdpZHRoID0gdGhpcy4kZmxvYXRpbmdDYXJkLndpZHRoKCk7XHJcbiAgICAgICAgdGhpcy5mbG9hdGluZ0NhcmRIZWlnaHQgPSB0aGlzLiRmbG9hdGluZ0NhcmQuaGVpZ2h0KCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaGlkZUZsb2F0aW5nQ2FyZCgpIHtcclxuICAgICAgICB0aGlzLiRmbG9hdGluZ0NhcmQuaGlkZSgpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIG1vdmVGbG9hdGluZ0NhcmQoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IHBvc3RYID0geCArIHRoaXMuZmxvYXRpbmdDYXJkV2lkdGggKyAyNCA8IHRoaXMudmlld3BvcnRXaWR0aEluUHg7XHJcbiAgICAgICAgY29uc3QgcHJlWCA9IHggPiB0aGlzLmZsb2F0aW5nQ2FyZFdpZHRoICsgMjQ7XHJcbiAgICAgICAgY29uc3QgcG9zdFkgPSB5ICsgdGhpcy5mbG9hdGluZ0NhcmRIZWlnaHQgKyAyNCA8IHRoaXMudmlld3BvcnRIZWlnaHRJblB4O1xyXG4gICAgICAgIGNvbnN0IHByZVkgPSB5ID4gdGhpcy5mbG9hdGluZ0NhcmRIZWlnaHQgKyAyNDtcclxuICAgICAgICBpZiAocG9zdFgpIHtcclxuICAgICAgICAgICAgaWYgKHBvc3RZKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRmbG9hdGluZ0NhcmQuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHkgKyAxMixcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB4ICsgMTIsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwcmVZKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRmbG9hdGluZ0NhcmQuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHkgLSAxMiAtIHRoaXMuZmxvYXRpbmdDYXJkSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHggKyAxMixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZmxvYXRpbmdDYXJkLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcmVYKSB7XHJcbiAgICAgICAgICAgIGlmIChwb3N0WSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZmxvYXRpbmdDYXJkLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB5ICsgMTIsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogeCAtIDEyIC0gdGhpcy5mbG9hdGluZ0NhcmRXaWR0aCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHByZVkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGZsb2F0aW5nQ2FyZC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogeSAtIDEyIC0gdGhpcy5mbG9hdGluZ0NhcmRIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogeCAtIDEyIC0gdGhpcy5mbG9hdGluZ0NhcmRXaWR0aCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZmxvYXRpbmdDYXJkLmhpZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gUmlza3k/IEkgZG9uJ3QgZXhwZWN0IHRoZSBjb2RlIHRvIGV2ZXIgYWN0dWFsbHkgcmVhY2ggaGVyZSwgc2luY2VcclxuICAgICAgICAgICAgLy8gSSdtIG5vdCBwbGFubmluZyBmb3IgbW9iaWxlIGRldmljZXMuXHJcbiAgICAgICAgICAgIHRoaXMuJGZsb2F0aW5nQ2FyZC5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldEluZGV4aWJsZShrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5JbmRleC5nZXQoa2V5KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzaG93Q2FyZEZ1bGxTaXplKGNhcmQpIHtcclxuICAgICAgICBDYXJkLiRjb21tb25DZW50cmFsVmlldy5jaGlsZHJlbigpLmhpZGUoKTtcclxuICAgICAgICBjb25zdCBjYXJkSW5kZXggPSBjYXJkLmdldENhcmRJbmRleCgpO1xyXG4gICAgICAgIGNvbnN0ICRleGlzdGluZ0NhcmQgPSBDYXJkLiRjb21tb25DZW50cmFsVmlldy5jaGlsZHJlbihgW2RhdGEtaW5kZXgta2V5PScke2NhcmRJbmRleH0nXWApO1xyXG4gICAgICAgIGlmICgkZXhpc3RpbmdDYXJkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgJGV4aXN0aW5nQ2FyZC5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCAkY2FyZCA9ICQoY2FyZC5nZW5lcmF0ZUNhcmQoZmFsc2UpKTtcclxuICAgICAgICAgICAgQ2FyZC4kY29tbW9uQ2VudHJhbFZpZXcuYXBwZW5kKCRjYXJkKTtcclxuICAgICAgICAgICAgJGNhcmQuc2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBzaG93Q2FyZEZsb2F0aW5nKGNhcmQpIHtcclxuICAgICAgICBDYXJkLiRmbG9hdGluZ0NhcmQuY2hpbGRyZW4oKS5oaWRlKCk7XHJcbiAgICAgICAgY29uc3QgY2FyZEluZGV4ID0gY2FyZC5nZXRDYXJkSW5kZXgoKTtcclxuICAgICAgICBjb25zdCAkZXhpc3RpbmdDYXJkID0gQ2FyZC4kZmxvYXRpbmdDYXJkLmNoaWxkcmVuKGBbZGF0YS1pbmRleC1rZXk9JyR7Y2FyZEluZGV4fSddYCk7XHJcbiAgICAgICAgaWYgKCRleGlzdGluZ0NhcmQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAkZXhpc3RpbmdDYXJkLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0ICRjYXJkID0gJChjYXJkLmdlbmVyYXRlQ2FyZCh0cnVlKSk7XHJcbiAgICAgICAgICAgICRjYXJkLmFkZENsYXNzKFwiZmxvYXRpbmdcIik7XHJcbiAgICAgICAgICAgIENhcmQuJGZsb2F0aW5nQ2FyZC5hcHBlbmQoJGNhcmQpO1xyXG4gICAgICAgICAgICAkY2FyZC5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIHJlZ2lzdGVyKGNhcmQpIHtcclxuICAgICAgICBDYXJkLkluZGV4LnNldChjYXJkLmdldENhcmRJbmRleCgpLCBjYXJkKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNhcmQgPSBDYXJkO1xyXG5DYXJkLiRjb21tb25DZW50cmFsVmlldyA9IG51bGw7XHJcbkNhcmQuJHRva2VuU3BhY2UgPSBudWxsO1xyXG5DYXJkLkluZGV4ID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBzZXR1cENhcmRzKCkge1xyXG4gICAgQ2FyZC5sb2FkRnJvbURPTSgpO1xyXG4gICAgY29uc3QgJHRva2VucyA9ICQoXCIjdG9rZW5zXCIpO1xyXG4gICAgJHRva2Vucy5vbihcIm1vdXNlZW50ZXJcIiwgXCIudG9rZW5cIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBjb25zdCBpbmRleEtleSA9ICQodGhpcykuZGF0YShcImluZGV4S2V5XCIpO1xyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBDYXJkLmdldEluZGV4aWJsZShpbmRleEtleSk7XHJcbiAgICAgICAgQ2FyZC5zaG93Q2FyZEZsb2F0aW5nKGNhcmQpO1xyXG4gICAgICAgIENhcmQucmV2ZWFsRmxvYXRpbmdDYXJkKCk7XHJcbiAgICAgICAgQ2FyZC5tb3ZlRmxvYXRpbmdDYXJkKGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgIH0pO1xyXG4gICAgJHRva2Vucy5vbihcIm1vdXNlbGVhdmVcIiwgXCIudG9rZW5cIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIENhcmQuaGlkZUZsb2F0aW5nQ2FyZCgpO1xyXG4gICAgfSk7XHJcbiAgICAkdG9rZW5zLm9uKFwibW91c2Vtb3ZlXCIsIFwiLnRva2VuXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgQ2FyZC5tb3ZlRmxvYXRpbmdDYXJkKGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgIH0pO1xyXG4gICAgJHRva2Vucy5vbihcImNsaWNrXCIsIFwiLnRva2VuXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBDYXJkLmhpZGVGbG9hdGluZ0NhcmQoKTtcclxuICAgICAgICBjb25zdCBpbmRleEtleSA9ICQodGhpcykuZGF0YShcImluZGV4S2V5XCIpO1xyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBDYXJkLmdldEluZGV4aWJsZShpbmRleEtleSk7XHJcbiAgICAgICAgQ2FyZC5zaG93Q2FyZEZ1bGxTaXplKGNhcmQpO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCAkY2FyZF9saW5rcyA9ICQoXCIucGFnZVwiKTtcclxuICAgICRjYXJkX2xpbmtzLm9uKFwibW91c2VlbnRlclwiLCBcIi5jYXJkX2xpbmtcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBjb25zdCBpbmRleEtleSA9ICQodGhpcykuZGF0YShcImluZGV4S2V5XCIpO1xyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBDYXJkLmdldEluZGV4aWJsZShpbmRleEtleSk7XHJcbiAgICAgICAgQ2FyZC5zaG93Q2FyZEZsb2F0aW5nKGNhcmQpO1xyXG4gICAgICAgIENhcmQucmV2ZWFsRmxvYXRpbmdDYXJkKCk7XHJcbiAgICAgICAgQ2FyZC5tb3ZlRmxvYXRpbmdDYXJkKGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgIH0pO1xyXG4gICAgJGNhcmRfbGlua3Mub24oXCJtb3VzZWxlYXZlXCIsIFwiLmNhcmRfbGlua1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgQ2FyZC5oaWRlRmxvYXRpbmdDYXJkKCk7XHJcbiAgICB9KTtcclxuICAgICRjYXJkX2xpbmtzLm9uKFwibW91c2Vtb3ZlXCIsIFwiLmNhcmRfbGlua1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIENhcmQubW92ZUZsb2F0aW5nQ2FyZChlLmNsaWVudFgsIGUuY2xpZW50WSk7XHJcbiAgICB9KTtcclxuICAgICRjYXJkX2xpbmtzLm9uKFwiY2xpY2tcIiwgXCIuY2FyZF9saW5rXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBDYXJkLmhpZGVGbG9hdGluZ0NhcmQoKTtcclxuICAgICAgICBjb25zdCBpbmRleEtleSA9ICQodGhpcykuZGF0YShcImluZGV4S2V5XCIpO1xyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBDYXJkLmdldEluZGV4aWJsZShpbmRleEtleSk7XHJcbiAgICAgICAgQ2FyZC5zaG93Q2FyZEZ1bGxTaXplKGNhcmQpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cENhcmRzID0gc2V0dXBDYXJkcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FyZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gVmFyaW91cyBtZWFzdXJlcyBvZiBxdWFsaXR5Li4uXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5SYXRpbmcgPSBleHBvcnRzLlJhcml0eSA9IHZvaWQgMDtcclxudmFyIFJhcml0eTtcclxuKGZ1bmN0aW9uIChSYXJpdHkpIHtcclxuICAgIFJhcml0eVtSYXJpdHlbXCJCbGFja1wiXSA9IDBdID0gXCJCbGFja1wiO1xyXG4gICAgUmFyaXR5W1Jhcml0eVtcIkNvbW1vblwiXSA9IDFdID0gXCJDb21tb25cIjtcclxuICAgIFJhcml0eVtSYXJpdHlbXCJVbmNvbW1vblwiXSA9IDJdID0gXCJVbmNvbW1vblwiO1xyXG4gICAgUmFyaXR5W1Jhcml0eVtcIlJhcmVcIl0gPSAzXSA9IFwiUmFyZVwiO1xyXG4gICAgUmFyaXR5W1Jhcml0eVtcIkVwaWNcIl0gPSA0XSA9IFwiRXBpY1wiO1xyXG4gICAgUmFyaXR5W1Jhcml0eVtcIkxlZ2VuZGFyeVwiXSA9IDVdID0gXCJMZWdlbmRhcnlcIjtcclxuICAgIFJhcml0eVtSYXJpdHlbXCJBcnRlZmFjdFwiXSA9IDZdID0gXCJBcnRlZmFjdFwiO1xyXG59KShSYXJpdHkgPSBleHBvcnRzLlJhcml0eSB8fCAoZXhwb3J0cy5SYXJpdHkgPSB7fSkpO1xyXG52YXIgUmF0aW5nO1xyXG4oZnVuY3Rpb24gKFJhdGluZykge1xyXG4gICAgUmF0aW5nW1JhdGluZ1tcIkZcIl0gPSAwXSA9IFwiRlwiO1xyXG4gICAgUmF0aW5nW1JhdGluZ1tcIkVcIl0gPSAxXSA9IFwiRVwiO1xyXG4gICAgUmF0aW5nW1JhdGluZ1tcIkRcIl0gPSAyXSA9IFwiRFwiO1xyXG4gICAgUmF0aW5nW1JhdGluZ1tcIkNcIl0gPSAzXSA9IFwiQ1wiO1xyXG4gICAgUmF0aW5nW1JhdGluZ1tcIkJcIl0gPSA0XSA9IFwiQlwiO1xyXG4gICAgUmF0aW5nW1JhdGluZ1tcIkFcIl0gPSA1XSA9IFwiQVwiO1xyXG4gICAgUmF0aW5nW1JhdGluZ1tcIlNcIl0gPSA2XSA9IFwiU1wiO1xyXG4gICAgUmF0aW5nW1JhdGluZ1tcIlNTXCJdID0gN10gPSBcIlNTXCI7XHJcbiAgICBSYXRpbmdbUmF0aW5nW1wiU1NTXCJdID0gOF0gPSBcIlNTU1wiO1xyXG59KShSYXRpbmcgPSBleHBvcnRzLlJhdGluZyB8fCAoZXhwb3J0cy5SYXRpbmcgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SYXJpdHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5TaG93biA9IGV4cG9ydHMuVmFndWUgPSBleHBvcnRzLkhpbnRlZCA9IGV4cG9ydHMuSGlkZGVuID0gZXhwb3J0cy5WaXNpYmlsaXR5TGV2ZWwgPSBleHBvcnRzLkVyYSA9IGV4cG9ydHMuQ1NraWxsID0gZXhwb3J0cy5DUlZhbHVlID0gZXhwb3J0cy5Qcm9mID0gZXhwb3J0cy5TdGF0VmFsdWUgPSBleHBvcnRzLkUgPSBleHBvcnRzLkFjdGl2YXRpb24gPSBleHBvcnRzLkNsYXNzSGl0RGljZSA9IGV4cG9ydHMuQ29uZGl0aW9uID0gZXhwb3J0cy5EYW1hZ2VUeXBlID0gZXhwb3J0cy5BZHZlbnR1cmVyQ2xhc3MgPSBleHBvcnRzLlNwZWVkID0gZXhwb3J0cy5TdGF0Rm9yU2tpbGwgPSBleHBvcnRzLkRTa2lsbCA9IGV4cG9ydHMuU2l6ZVRvRGljZSA9IGV4cG9ydHMuQ3JlYXR1cmVTaXplID0gZXhwb3J0cy5zZW5zZVN0ciA9IGV4cG9ydHMuU2Vuc2UgPSBleHBvcnRzLlByb2ZpY2llbmN5TGV2ZWwgPSBleHBvcnRzLkRTdGF0ID0gdm9pZCAwO1xyXG5jb25zdCBEaWNlXzEgPSByZXF1aXJlKFwiLi4vcm9sbGluZy9EaWNlXCIpO1xyXG52YXIgRFN0YXQ7XHJcbihmdW5jdGlvbiAoRFN0YXQpIHtcclxuICAgIERTdGF0W0RTdGF0W1wiU3RyXCJdID0gMF0gPSBcIlN0clwiO1xyXG4gICAgRFN0YXRbRFN0YXRbXCJEZXhcIl0gPSAxXSA9IFwiRGV4XCI7XHJcbiAgICBEU3RhdFtEU3RhdFtcIkNvblwiXSA9IDJdID0gXCJDb25cIjtcclxuICAgIERTdGF0W0RTdGF0W1wiSW50XCJdID0gM10gPSBcIkludFwiO1xyXG4gICAgRFN0YXRbRFN0YXRbXCJXaXNcIl0gPSA0XSA9IFwiV2lzXCI7XHJcbiAgICBEU3RhdFtEU3RhdFtcIkNoYVwiXSA9IDVdID0gXCJDaGFcIjtcclxufSkoRFN0YXQgPSBleHBvcnRzLkRTdGF0IHx8IChleHBvcnRzLkRTdGF0ID0ge30pKTtcclxuLy8gVGhlIG9yZGVyIG1hdHRlcnMgaGVyZS5cclxudmFyIFByb2ZpY2llbmN5TGV2ZWw7XHJcbihmdW5jdGlvbiAoUHJvZmljaWVuY3lMZXZlbCkge1xyXG4gICAgUHJvZmljaWVuY3lMZXZlbFtQcm9maWNpZW5jeUxldmVsW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XHJcbiAgICBQcm9maWNpZW5jeUxldmVsW1Byb2ZpY2llbmN5TGV2ZWxbXCJIYWxmXCJdID0gMV0gPSBcIkhhbGZcIjtcclxuICAgIFByb2ZpY2llbmN5TGV2ZWxbUHJvZmljaWVuY3lMZXZlbFtcIlByb2ZcIl0gPSAyXSA9IFwiUHJvZlwiO1xyXG4gICAgUHJvZmljaWVuY3lMZXZlbFtQcm9maWNpZW5jeUxldmVsW1wiRXhwZXJ0XCJdID0gM10gPSBcIkV4cGVydFwiO1xyXG59KShQcm9maWNpZW5jeUxldmVsID0gZXhwb3J0cy5Qcm9maWNpZW5jeUxldmVsIHx8IChleHBvcnRzLlByb2ZpY2llbmN5TGV2ZWwgPSB7fSkpO1xyXG52YXIgU2Vuc2U7XHJcbihmdW5jdGlvbiAoU2Vuc2UpIHtcclxuICAgIFNlbnNlW1NlbnNlW1wiRGFya3Zpc2lvblwiXSA9IDBdID0gXCJEYXJrdmlzaW9uXCI7XHJcbiAgICBTZW5zZVtTZW5zZVtcIkJsaW5kU2lnaHRcIl0gPSAxXSA9IFwiQmxpbmRTaWdodFwiO1xyXG4gICAgU2Vuc2VbU2Vuc2VbXCJUcmVtb3JTZW5zZVwiXSA9IDJdID0gXCJUcmVtb3JTZW5zZVwiO1xyXG4gICAgU2Vuc2VbU2Vuc2VbXCJUcnVlU2lnaHRcIl0gPSAzXSA9IFwiVHJ1ZVNpZ2h0XCI7XHJcbiAgICBTZW5zZVtTZW5zZVtcIkRldmlsU2lnaHRcIl0gPSA0XSA9IFwiRGV2aWxTaWdodFwiO1xyXG4gICAgU2Vuc2VbU2Vuc2VbXCJfTm9uU3RhbmRhcmRcIl0gPSA1XSA9IFwiX05vblN0YW5kYXJkXCI7XHJcbiAgICBTZW5zZVtTZW5zZVtcIlN0ZWVsU2lnaHRcIl0gPSA2XSA9IFwiU3RlZWxTaWdodFwiO1xyXG59KShTZW5zZSA9IGV4cG9ydHMuU2Vuc2UgfHwgKGV4cG9ydHMuU2Vuc2UgPSB7fSkpO1xyXG5leHBvcnRzLnNlbnNlU3RyID0gbmV3IE1hcChbXHJcbiAgICBbU2Vuc2UuRGFya3Zpc2lvbiwgXCJEYXJrdmlzaW9uXCJdLFxyXG4gICAgW1NlbnNlLkJsaW5kU2lnaHQsIFwiQmxpbmRzaWdodFwiXSxcclxuICAgIFtTZW5zZS5UcmVtb3JTZW5zZSwgXCJUcmVtb3IgU2Vuc2VcIl0sXHJcbiAgICBbU2Vuc2UuVHJ1ZVNpZ2h0LCBcIlRydWVzaWdodFwiXSxcclxuICAgIFtTZW5zZS5EZXZpbFNpZ2h0LCBcIkRldmlsJ3MgU2lnaHRcIl0sXHJcbiAgICBbU2Vuc2UuU3RlZWxTaWdodCwgXCJTdGVlbHNpZ2h0XCJdLFxyXG5dKTtcclxudmFyIENyZWF0dXJlU2l6ZTtcclxuKGZ1bmN0aW9uIChDcmVhdHVyZVNpemUpIHtcclxuICAgIENyZWF0dXJlU2l6ZVtDcmVhdHVyZVNpemVbXCJUaW55XCJdID0gMF0gPSBcIlRpbnlcIjtcclxuICAgIENyZWF0dXJlU2l6ZVtDcmVhdHVyZVNpemVbXCJTbWFsbFwiXSA9IDFdID0gXCJTbWFsbFwiO1xyXG4gICAgQ3JlYXR1cmVTaXplW0NyZWF0dXJlU2l6ZVtcIk1lZGl1bVwiXSA9IDJdID0gXCJNZWRpdW1cIjtcclxuICAgIENyZWF0dXJlU2l6ZVtDcmVhdHVyZVNpemVbXCJMYXJnZVwiXSA9IDNdID0gXCJMYXJnZVwiO1xyXG4gICAgQ3JlYXR1cmVTaXplW0NyZWF0dXJlU2l6ZVtcIkh1Z2VcIl0gPSA0XSA9IFwiSHVnZVwiO1xyXG4gICAgQ3JlYXR1cmVTaXplW0NyZWF0dXJlU2l6ZVtcIkdhcmdhbnR1YW5cIl0gPSA1XSA9IFwiR2FyZ2FudHVhblwiO1xyXG4gICAgQ3JlYXR1cmVTaXplW0NyZWF0dXJlU2l6ZVtcIl9Ob25TdGFuZGFyZFwiXSA9IDZdID0gXCJfTm9uU3RhbmRhcmRcIjtcclxuICAgIENyZWF0dXJlU2l6ZVtDcmVhdHVyZVNpemVbXCJDb3NtaWNcIl0gPSA3XSA9IFwiQ29zbWljXCI7XHJcbn0pKENyZWF0dXJlU2l6ZSA9IGV4cG9ydHMuQ3JlYXR1cmVTaXplIHx8IChleHBvcnRzLkNyZWF0dXJlU2l6ZSA9IHt9KSk7XHJcbmV4cG9ydHMuU2l6ZVRvRGljZSA9IG5ldyBNYXAoW1xyXG4gICAgW0NyZWF0dXJlU2l6ZS5UaW55LCBEaWNlXzEuRDRdLFxyXG4gICAgW0NyZWF0dXJlU2l6ZS5TbWFsbCwgRGljZV8xLkQ2XSxcclxuICAgIFtDcmVhdHVyZVNpemUuTWVkaXVtLCBEaWNlXzEuRDhdLFxyXG4gICAgW0NyZWF0dXJlU2l6ZS5MYXJnZSwgRGljZV8xLkQxMF0sXHJcbiAgICBbQ3JlYXR1cmVTaXplLkh1Z2UsIERpY2VfMS5EMTJdLFxyXG4gICAgW0NyZWF0dXJlU2l6ZS5HYXJnYW50dWFuLCBEaWNlXzEuRDIwXSxcclxuICAgIFtDcmVhdHVyZVNpemUuQ29zbWljLCBEaWNlXzEuRDEwMF0sXHJcbl0pO1xyXG52YXIgRFNraWxsO1xyXG4oZnVuY3Rpb24gKERTa2lsbCkge1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIkFjcm9iYXRpY3NcIl0gPSAwXSA9IFwiQWNyb2JhdGljc1wiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIkFuaW1hbEhhbmRsaW5nXCJdID0gMV0gPSBcIkFuaW1hbEhhbmRsaW5nXCI7XHJcbiAgICBEU2tpbGxbRFNraWxsW1wiQXJjYW5hXCJdID0gMl0gPSBcIkFyY2FuYVwiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIkF0aGxldGljc1wiXSA9IDNdID0gXCJBdGhsZXRpY3NcIjtcclxuICAgIERTa2lsbFtEU2tpbGxbXCJEZWNlcHRpb25cIl0gPSA0XSA9IFwiRGVjZXB0aW9uXCI7XHJcbiAgICBEU2tpbGxbRFNraWxsW1wiSGlzdG9yeVwiXSA9IDVdID0gXCJIaXN0b3J5XCI7XHJcbiAgICBEU2tpbGxbRFNraWxsW1wiSW5zaWdodFwiXSA9IDZdID0gXCJJbnNpZ2h0XCI7XHJcbiAgICBEU2tpbGxbRFNraWxsW1wiSW50aW1pZGF0aW9uXCJdID0gN10gPSBcIkludGltaWRhdGlvblwiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIkludmVzdGlnYXRpb25cIl0gPSA4XSA9IFwiSW52ZXN0aWdhdGlvblwiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIk1lZGljaW5lXCJdID0gOV0gPSBcIk1lZGljaW5lXCI7XHJcbiAgICBEU2tpbGxbRFNraWxsW1wiTmF0dXJlXCJdID0gMTBdID0gXCJOYXR1cmVcIjtcclxuICAgIERTa2lsbFtEU2tpbGxbXCJQZXJjZXB0aW9uXCJdID0gMTFdID0gXCJQZXJjZXB0aW9uXCI7XHJcbiAgICBEU2tpbGxbRFNraWxsW1wiUGVyZm9ybWFuY2VcIl0gPSAxMl0gPSBcIlBlcmZvcm1hbmNlXCI7XHJcbiAgICBEU2tpbGxbRFNraWxsW1wiUGVyc3Vhc2lvblwiXSA9IDEzXSA9IFwiUGVyc3Vhc2lvblwiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIlJlbGlnaW9uXCJdID0gMTRdID0gXCJSZWxpZ2lvblwiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIlNsaWdodE9mSGFuZFwiXSA9IDE1XSA9IFwiU2xpZ2h0T2ZIYW5kXCI7XHJcbiAgICBEU2tpbGxbRFNraWxsW1wiU3RlYWx0aFwiXSA9IDE2XSA9IFwiU3RlYWx0aFwiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIlN1cnZpdmFsXCJdID0gMTddID0gXCJTdXJ2aXZhbFwiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIl9BTExcIl0gPSAxOF0gPSBcIl9BTExcIjtcclxuICAgIERTa2lsbFtEU2tpbGxbXCJfTm9uU3RhbmRhcmRcIl0gPSAxOV0gPSBcIl9Ob25TdGFuZGFyZFwiO1xyXG4gICAgRFNraWxsW0RTa2lsbFtcIkhvbm9yXCJdID0gMjBdID0gXCJIb25vclwiO1xyXG59KShEU2tpbGwgPSBleHBvcnRzLkRTa2lsbCB8fCAoZXhwb3J0cy5EU2tpbGwgPSB7fSkpO1xyXG5leHBvcnRzLlN0YXRGb3JTa2lsbCA9IG5ldyBNYXAoW1xyXG4gICAgW0RTa2lsbC5BY3JvYmF0aWNzLCBEU3RhdC5EZXhdLFxyXG4gICAgW0RTa2lsbC5BbmltYWxIYW5kbGluZywgRFN0YXQuV2lzXSxcclxuICAgIFtEU2tpbGwuQXJjYW5hLCBEU3RhdC5JbnRdLFxyXG4gICAgW0RTa2lsbC5BdGhsZXRpY3MsIERTdGF0LlN0cl0sXHJcbiAgICBbRFNraWxsLkRlY2VwdGlvbiwgRFN0YXQuQ2hhXSxcclxuICAgIFtEU2tpbGwuSGlzdG9yeSwgRFN0YXQuSW50XSxcclxuICAgIFtEU2tpbGwuSW5zaWdodCwgRFN0YXQuV2lzXSxcclxuICAgIFtEU2tpbGwuSW50aW1pZGF0aW9uLCBEU3RhdC5DaGFdLFxyXG4gICAgW0RTa2lsbC5JbnZlc3RpZ2F0aW9uLCBEU3RhdC5JbnRdLFxyXG4gICAgW0RTa2lsbC5NZWRpY2luZSwgRFN0YXQuV2lzXSxcclxuICAgIFtEU2tpbGwuTmF0dXJlLCBEU3RhdC5JbnRdLFxyXG4gICAgW0RTa2lsbC5QZXJjZXB0aW9uLCBEU3RhdC5XaXNdLFxyXG4gICAgW0RTa2lsbC5QZXJmb3JtYW5jZSwgRFN0YXQuQ2hhXSxcclxuICAgIFtEU2tpbGwuUGVyc3Vhc2lvbiwgRFN0YXQuQ2hhXSxcclxuICAgIFtEU2tpbGwuUmVsaWdpb24sIERTdGF0LkludF0sXHJcbiAgICBbRFNraWxsLlNsaWdodE9mSGFuZCwgRFN0YXQuRGV4XSxcclxuICAgIFtEU2tpbGwuU3RlYWx0aCwgRFN0YXQuRGV4XSxcclxuICAgIFtEU2tpbGwuU3Vydml2YWwsIERTdGF0Lldpc10sXHJcbiAgICBbRFNraWxsLkhvbm9yLCBEU3RhdC5DaGFdLFxyXG5dKTtcclxudmFyIFNwZWVkO1xyXG4oZnVuY3Rpb24gKFNwZWVkKSB7XHJcbiAgICBTcGVlZFtTcGVlZFtcIldhbGtpbmdcIl0gPSAwXSA9IFwiV2Fsa2luZ1wiO1xyXG4gICAgU3BlZWRbU3BlZWRbXCJTd2ltbWluZ1wiXSA9IDFdID0gXCJTd2ltbWluZ1wiO1xyXG4gICAgU3BlZWRbU3BlZWRbXCJGbHlpbmdcIl0gPSAyXSA9IFwiRmx5aW5nXCI7XHJcbiAgICBTcGVlZFtTcGVlZFtcIkNsaW1iaW5nXCJdID0gM10gPSBcIkNsaW1iaW5nXCI7XHJcbiAgICBTcGVlZFtTcGVlZFtcIkJ1cnJvd2luZ1wiXSA9IDRdID0gXCJCdXJyb3dpbmdcIjtcclxuICAgIFNwZWVkW1NwZWVkW1wiX05vblN0YW5kYXJkXCJdID0gNV0gPSBcIl9Ob25TdGFuZGFyZFwiO1xyXG59KShTcGVlZCA9IGV4cG9ydHMuU3BlZWQgfHwgKGV4cG9ydHMuU3BlZWQgPSB7fSkpO1xyXG52YXIgQWR2ZW50dXJlckNsYXNzO1xyXG4oZnVuY3Rpb24gKEFkdmVudHVyZXJDbGFzcykge1xyXG4gICAgQWR2ZW50dXJlckNsYXNzW0FkdmVudHVyZXJDbGFzc1tcIkFydGlmaWNlclwiXSA9IDBdID0gXCJBcnRpZmljZXJcIjtcclxuICAgIEFkdmVudHVyZXJDbGFzc1tBZHZlbnR1cmVyQ2xhc3NbXCJCYXJiYXJpYW5cIl0gPSAxXSA9IFwiQmFyYmFyaWFuXCI7XHJcbiAgICBBZHZlbnR1cmVyQ2xhc3NbQWR2ZW50dXJlckNsYXNzW1wiQmFyZFwiXSA9IDJdID0gXCJCYXJkXCI7XHJcbiAgICBBZHZlbnR1cmVyQ2xhc3NbQWR2ZW50dXJlckNsYXNzW1wiQ2xlcmljXCJdID0gM10gPSBcIkNsZXJpY1wiO1xyXG4gICAgQWR2ZW50dXJlckNsYXNzW0FkdmVudHVyZXJDbGFzc1tcIkRydWlkXCJdID0gNF0gPSBcIkRydWlkXCI7XHJcbiAgICBBZHZlbnR1cmVyQ2xhc3NbQWR2ZW50dXJlckNsYXNzW1wiRmlnaHRlclwiXSA9IDVdID0gXCJGaWdodGVyXCI7XHJcbiAgICBBZHZlbnR1cmVyQ2xhc3NbQWR2ZW50dXJlckNsYXNzW1wiTW9ua1wiXSA9IDZdID0gXCJNb25rXCI7XHJcbiAgICBBZHZlbnR1cmVyQ2xhc3NbQWR2ZW50dXJlckNsYXNzW1wiUGFsYWRpblwiXSA9IDddID0gXCJQYWxhZGluXCI7XHJcbiAgICBBZHZlbnR1cmVyQ2xhc3NbQWR2ZW50dXJlckNsYXNzW1wiUmFuZ2VyXCJdID0gOF0gPSBcIlJhbmdlclwiO1xyXG4gICAgQWR2ZW50dXJlckNsYXNzW0FkdmVudHVyZXJDbGFzc1tcIlJvZ3VlXCJdID0gOV0gPSBcIlJvZ3VlXCI7XHJcbiAgICBBZHZlbnR1cmVyQ2xhc3NbQWR2ZW50dXJlckNsYXNzW1wiU29yY2VyZXJcIl0gPSAxMF0gPSBcIlNvcmNlcmVyXCI7XHJcbiAgICBBZHZlbnR1cmVyQ2xhc3NbQWR2ZW50dXJlckNsYXNzW1wiV2FybG9ja1wiXSA9IDExXSA9IFwiV2FybG9ja1wiO1xyXG4gICAgQWR2ZW50dXJlckNsYXNzW0FkdmVudHVyZXJDbGFzc1tcIldpemFyZFwiXSA9IDEyXSA9IFwiV2l6YXJkXCI7XHJcbn0pKEFkdmVudHVyZXJDbGFzcyA9IGV4cG9ydHMuQWR2ZW50dXJlckNsYXNzIHx8IChleHBvcnRzLkFkdmVudHVyZXJDbGFzcyA9IHt9KSk7XHJcbnZhciBEYW1hZ2VUeXBlO1xyXG4oZnVuY3Rpb24gKERhbWFnZVR5cGUpIHtcclxuICAgIERhbWFnZVR5cGVbRGFtYWdlVHlwZVtcIkFjaWRcIl0gPSAwXSA9IFwiQWNpZFwiO1xyXG4gICAgRGFtYWdlVHlwZVtEYW1hZ2VUeXBlW1wiQmx1ZGdlb25pbmdcIl0gPSAxXSA9IFwiQmx1ZGdlb25pbmdcIjtcclxuICAgIERhbWFnZVR5cGVbRGFtYWdlVHlwZVtcIkNvbGRcIl0gPSAyXSA9IFwiQ29sZFwiO1xyXG4gICAgRGFtYWdlVHlwZVtEYW1hZ2VUeXBlW1wiRmlyZVwiXSA9IDNdID0gXCJGaXJlXCI7XHJcbiAgICBEYW1hZ2VUeXBlW0RhbWFnZVR5cGVbXCJGb3JjZVwiXSA9IDRdID0gXCJGb3JjZVwiO1xyXG4gICAgRGFtYWdlVHlwZVtEYW1hZ2VUeXBlW1wiTGlnaHRuaW5nXCJdID0gNV0gPSBcIkxpZ2h0bmluZ1wiO1xyXG4gICAgRGFtYWdlVHlwZVtEYW1hZ2VUeXBlW1wiTmVjcm90aWNcIl0gPSA2XSA9IFwiTmVjcm90aWNcIjtcclxuICAgIERhbWFnZVR5cGVbRGFtYWdlVHlwZVtcIlBpZXJjaW5nXCJdID0gN10gPSBcIlBpZXJjaW5nXCI7XHJcbiAgICBEYW1hZ2VUeXBlW0RhbWFnZVR5cGVbXCJQb2lzb25cIl0gPSA4XSA9IFwiUG9pc29uXCI7XHJcbiAgICBEYW1hZ2VUeXBlW0RhbWFnZVR5cGVbXCJQc3ljaGljXCJdID0gOV0gPSBcIlBzeWNoaWNcIjtcclxuICAgIERhbWFnZVR5cGVbRGFtYWdlVHlwZVtcIlJhZGlhbnRcIl0gPSAxMF0gPSBcIlJhZGlhbnRcIjtcclxuICAgIERhbWFnZVR5cGVbRGFtYWdlVHlwZVtcIlNsYXNoaW5nXCJdID0gMTFdID0gXCJTbGFzaGluZ1wiO1xyXG4gICAgRGFtYWdlVHlwZVtEYW1hZ2VUeXBlW1wiVGh1bmRlclwiXSA9IDEyXSA9IFwiVGh1bmRlclwiO1xyXG4gICAgRGFtYWdlVHlwZVtEYW1hZ2VUeXBlW1wiUGh5c2ljYWxcIl0gPSAxM10gPSBcIlBoeXNpY2FsXCI7XHJcbiAgICBEYW1hZ2VUeXBlW0RhbWFnZVR5cGVbXCJBbGxcIl0gPSAxNF0gPSBcIkFsbFwiO1xyXG4gICAgRGFtYWdlVHlwZVtEYW1hZ2VUeXBlW1wiX05vblN0YW5kYXJkXCJdID0gMTVdID0gXCJfTm9uU3RhbmRhcmRcIjtcclxuICAgIERhbWFnZVR5cGVbRGFtYWdlVHlwZVtcIkJpb2NoZW1pY2FsXCJdID0gMTZdID0gXCJCaW9jaGVtaWNhbFwiO1xyXG4gICAgRGFtYWdlVHlwZVtEYW1hZ2VUeXBlW1wiQ29ycm9zaW9uXCJdID0gMTddID0gXCJDb3Jyb3Npb25cIjtcclxuICAgIERhbWFnZVR5cGVbRGFtYWdlVHlwZVtcIk5ldXJhbFwiXSA9IDE4XSA9IFwiTmV1cmFsXCI7XHJcbiAgICBEYW1hZ2VUeXBlW0RhbWFnZVR5cGVbXCJIZWxsZmlyZVwiXSA9IDE5XSA9IFwiSGVsbGZpcmVcIjtcclxufSkoRGFtYWdlVHlwZSA9IGV4cG9ydHMuRGFtYWdlVHlwZSB8fCAoZXhwb3J0cy5EYW1hZ2VUeXBlID0ge30pKTtcclxudmFyIENvbmRpdGlvbjtcclxuKGZ1bmN0aW9uIChDb25kaXRpb24pIHtcclxuICAgIENvbmRpdGlvbltDb25kaXRpb25bXCJCbGluZGVkXCJdID0gMF0gPSBcIkJsaW5kZWRcIjtcclxuICAgIENvbmRpdGlvbltDb25kaXRpb25bXCJDaGFybWVkXCJdID0gMV0gPSBcIkNoYXJtZWRcIjtcclxuICAgIENvbmRpdGlvbltDb25kaXRpb25bXCJEZWFmZW5lZFwiXSA9IDJdID0gXCJEZWFmZW5lZFwiO1xyXG4gICAgQ29uZGl0aW9uW0NvbmRpdGlvbltcIkZyaWdodGVuZWRcIl0gPSAzXSA9IFwiRnJpZ2h0ZW5lZFwiO1xyXG4gICAgQ29uZGl0aW9uW0NvbmRpdGlvbltcIkdyYXBwbGVkXCJdID0gNF0gPSBcIkdyYXBwbGVkXCI7XHJcbiAgICBDb25kaXRpb25bQ29uZGl0aW9uW1wiSW5jYXBhY2l0YXRlZFwiXSA9IDVdID0gXCJJbmNhcGFjaXRhdGVkXCI7XHJcbiAgICBDb25kaXRpb25bQ29uZGl0aW9uW1wiSW52aXNpYmxlXCJdID0gNl0gPSBcIkludmlzaWJsZVwiO1xyXG4gICAgQ29uZGl0aW9uW0NvbmRpdGlvbltcIlBhcmFseXplZFwiXSA9IDddID0gXCJQYXJhbHl6ZWRcIjtcclxuICAgIENvbmRpdGlvbltDb25kaXRpb25bXCJQZXRyaWZpZWRcIl0gPSA4XSA9IFwiUGV0cmlmaWVkXCI7XHJcbiAgICBDb25kaXRpb25bQ29uZGl0aW9uW1wiUG9pc29uZWRcIl0gPSA5XSA9IFwiUG9pc29uZWRcIjtcclxuICAgIENvbmRpdGlvbltDb25kaXRpb25bXCJQcm9uZVwiXSA9IDEwXSA9IFwiUHJvbmVcIjtcclxuICAgIENvbmRpdGlvbltDb25kaXRpb25bXCJSZXN0cmFpbmVkXCJdID0gMTFdID0gXCJSZXN0cmFpbmVkXCI7XHJcbiAgICBDb25kaXRpb25bQ29uZGl0aW9uW1wiU3R1bm5lZFwiXSA9IDEyXSA9IFwiU3R1bm5lZFwiO1xyXG4gICAgQ29uZGl0aW9uW0NvbmRpdGlvbltcIlVuY29uc2Npb3VzXCJdID0gMTNdID0gXCJVbmNvbnNjaW91c1wiO1xyXG4gICAgQ29uZGl0aW9uW0NvbmRpdGlvbltcIkV4aGF1c3Rpb25cIl0gPSAxNF0gPSBcIkV4aGF1c3Rpb25cIjtcclxuICAgIENvbmRpdGlvbltDb25kaXRpb25bXCJfTm9uU3RhbmRhcmRcIl0gPSAxNV0gPSBcIl9Ob25TdGFuZGFyZFwiO1xyXG4gICAgQ29uZGl0aW9uW0NvbmRpdGlvbltcIkZyYWdpbGVcIl0gPSAxNl0gPSBcIkZyYWdpbGVcIjtcclxuICAgIENvbmRpdGlvbltDb25kaXRpb25bXCJTaWxlbmNlZFwiXSA9IDE3XSA9IFwiU2lsZW5jZWRcIjtcclxufSkoQ29uZGl0aW9uID0gZXhwb3J0cy5Db25kaXRpb24gfHwgKGV4cG9ydHMuQ29uZGl0aW9uID0ge30pKTtcclxuZXhwb3J0cy5DbGFzc0hpdERpY2UgPSBuZXcgTWFwKFtcclxuICAgIFtBZHZlbnR1cmVyQ2xhc3MuQXJ0aWZpY2VyLCBEaWNlXzEuRDhdLFxyXG4gICAgW0FkdmVudHVyZXJDbGFzcy5CYXJiYXJpYW4sIERpY2VfMS5EMTJdLFxyXG4gICAgW0FkdmVudHVyZXJDbGFzcy5CYXJkLCBEaWNlXzEuRDhdLFxyXG4gICAgW0FkdmVudHVyZXJDbGFzcy5DbGVyaWMsIERpY2VfMS5EOF0sXHJcbiAgICBbQWR2ZW50dXJlckNsYXNzLkRydWlkLCBEaWNlXzEuRDhdLFxyXG4gICAgW0FkdmVudHVyZXJDbGFzcy5GaWdodGVyLCBEaWNlXzEuRDEwXSxcclxuICAgIFtBZHZlbnR1cmVyQ2xhc3MuTW9uaywgRGljZV8xLkQ4XSxcclxuICAgIFtBZHZlbnR1cmVyQ2xhc3MuUGFsYWRpbiwgRGljZV8xLkQxMF0sXHJcbiAgICBbQWR2ZW50dXJlckNsYXNzLlJhbmdlciwgRGljZV8xLkQxMF0sXHJcbiAgICBbQWR2ZW50dXJlckNsYXNzLlJvZ3VlLCBEaWNlXzEuRDhdLFxyXG4gICAgW0FkdmVudHVyZXJDbGFzcy5Tb3JjZXJlciwgRGljZV8xLkQ2XSxcclxuICAgIFtBZHZlbnR1cmVyQ2xhc3MuV2FybG9jaywgRGljZV8xLkQ4XSxcclxuICAgIFtBZHZlbnR1cmVyQ2xhc3MuV2l6YXJkLCBEaWNlXzEuRDZdLFxyXG5dKTtcclxudmFyIEFjdGl2YXRpb247XHJcbihmdW5jdGlvbiAoQWN0aXZhdGlvbikge1xyXG4gICAgQWN0aXZhdGlvbltBY3RpdmF0aW9uW1wiQWN0aW9uXCJdID0gMF0gPSBcIkFjdGlvblwiO1xyXG4gICAgQWN0aXZhdGlvbltBY3RpdmF0aW9uW1wiQm9udXNBY3Rpb25cIl0gPSAxXSA9IFwiQm9udXNBY3Rpb25cIjtcclxuICAgIEFjdGl2YXRpb25bQWN0aXZhdGlvbltcIlJlYWN0aW9uXCJdID0gMl0gPSBcIlJlYWN0aW9uXCI7XHJcbiAgICBBY3RpdmF0aW9uW0FjdGl2YXRpb25bXCJTcGVjaWFsXCJdID0gM10gPSBcIlNwZWNpYWxcIjtcclxuICAgIEFjdGl2YXRpb25bQWN0aXZhdGlvbltcIkxlZ2VuZGFyeUFjdGlvblwiXSA9IDRdID0gXCJMZWdlbmRhcnlBY3Rpb25cIjtcclxuICAgIEFjdGl2YXRpb25bQWN0aXZhdGlvbltcIk15dGhpY0FjdGlvblwiXSA9IDVdID0gXCJNeXRoaWNBY3Rpb25cIjtcclxuICAgIEFjdGl2YXRpb25bQWN0aXZhdGlvbltcIkxhaXJBY3Rpb25cIl0gPSA2XSA9IFwiTGFpckFjdGlvblwiO1xyXG4gICAgQWN0aXZhdGlvbltBY3RpdmF0aW9uW1wiX05vblN0YW5kYXJkXCJdID0gN10gPSBcIl9Ob25TdGFuZGFyZFwiO1xyXG59KShBY3RpdmF0aW9uID0gZXhwb3J0cy5BY3RpdmF0aW9uIHx8IChleHBvcnRzLkFjdGl2YXRpb24gPSB7fSkpO1xyXG5mdW5jdGlvbiBFKGRpY2UpIHtcclxuICAgIGlmIChkaWNlIGluc3RhbmNlb2YgTWFwKSB7XHJcbiAgICAgICAgbGV0IGUgPSAwO1xyXG4gICAgICAgIGZvciAoY29uc3QgW2RpZSwgY291bnRdIG9mIGRpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGUgKz0gY291bnQgKiBFKGRpZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChkaWNlLnNpZGVzICsgMSkgLyAyO1xyXG59XHJcbmV4cG9ydHMuRSA9IEU7XHJcbmNsYXNzIFN0YXRWYWx1ZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWwpIHtcclxuICAgICAgICB0aGlzLnZhbCA9IE1hdGgucm91bmQoTWF0aC5taW4oMzAsIE1hdGgubWF4KDAsIHZhbCkpKTtcclxuICAgIH1cclxuICAgIGFkanVzdFN0YXQoYnkpIHtcclxuICAgICAgICB0aGlzLnZhbCA9IE1hdGgucm91bmQoTWF0aC5taW4oMzAsIE1hdGgubWF4KDAsIHRoaXMudmFsICsgYnkpKSk7XHJcbiAgICB9XHJcbiAgICBnZXQgc3RhdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgbW9kKCkge1xyXG4gICAgICAgIHJldHVybiBTdGF0VmFsdWUubW9kKHRoaXMudmFsKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBtb2QobnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyIC8gMikgLSA1O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3RhdFZhbHVlID0gU3RhdFZhbHVlO1xyXG5jbGFzcyBQcm9mIHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbCkge1xyXG4gICAgICAgIHRoaXMudmFsID0gdmFsO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldCh2YWwpIHtcclxuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZXMuaGFzKHZhbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzLmdldCh2YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsIDwgMiB8fCB2YWwgPiAxMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFzb25hYmxlIHByb2YgYm9udXMgbGV2ZWxzIGNyb3NzZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcih2YWwpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBvbmx5IGhhdmUgaW50ZWdyYWwgcHJvZmljaWVuY2llc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgUHJvZih2YWwpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzLnNldCh2YWwsIGluc3RhbmNlKTtcclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBtb2QobGV2ZWwgPSBQcm9maWNpZW5jeUxldmVsLlByb2YpIHtcclxuICAgICAgICBpZiAobGV2ZWwgPT0gUHJvZmljaWVuY3lMZXZlbC5Ob25lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsZXZlbCA9PSBQcm9maWNpZW5jeUxldmVsLkhhbGYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWwgLyAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGV2ZWwgPT0gUHJvZmljaWVuY3lMZXZlbC5Qcm9mKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGV2ZWwgPT0gUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDIgKiB0aGlzLnZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvZiBsZXZlbCB1bmtub3duXCIpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUHJvZiA9IFByb2Y7XHJcblByb2YuaW5zdGFuY2VzID0gbmV3IE1hcCgpO1xyXG5jbGFzcyBDUlZhbHVlIHtcclxuICAgIGNvbnN0cnVjdG9yKHZhbCwgcHJvZk92ZXJyaWRlID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMucHJvZk92ZXJyaWRlID0gcHJvZk92ZXJyaWRlO1xyXG4gICAgICAgIHRoaXMudmFsID0gTWF0aC5yb3VuZChNYXRoLm1pbigzMCwgTWF0aC5tYXgoMCwgdmFsKSkpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbDtcclxuICAgIH1cclxuICAgIGdldCBwcm9mKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb2ZPdmVycmlkZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2ZPdmVycmlkZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb2YuZ2V0KE1hdGguY2VpbChNYXRoLm1heCgxLCB0aGlzLnZhbCkgLyA0KSArIDEpO1xyXG4gICAgfVxyXG4gICAgY29tcGFyZVRvU3RhdHMoKSB7XHJcbiAgICAgICAgLy8gdG9kbzogQ29tcGFyZSB0byB0aGUgb2ZmZW5zaXZlL2RlZmVuc2l2ZSBzdGF0cyBhcyBwZXIgdGhlIERNRyBhbmRcclxuICAgICAgICAvLyAgb2Zmc2V0IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gZXhwZWN0ZWQgYW5kIHRydWUgc3RhdHMuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNSVmFsdWUgPSBDUlZhbHVlO1xyXG52YXIgQ1NraWxsO1xyXG4oZnVuY3Rpb24gKENTa2lsbCkge1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkFjY291bnRpbmdcIl0gPSAwXSA9IFwiQWNjb3VudGluZ1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkFudGhyb3BvbG9neVwiXSA9IDFdID0gXCJBbnRocm9wb2xvZ3lcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJBcHByYWlzZVwiXSA9IDJdID0gXCJBcHByYWlzZVwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkFyY2hhZW9sb2d5XCJdID0gM10gPSBcIkFyY2hhZW9sb2d5XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiQXJ0aWxsZXJ5XCJdID0gNF0gPSBcIkFydGlsbGVyeVwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkNoYXJtXCJdID0gNV0gPSBcIkNoYXJtXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiQ29tcHV0ZXJVc2VcIl0gPSA2XSA9IFwiQ29tcHV0ZXJVc2VcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJEZW1vbGl0aW9uc1wiXSA9IDddID0gXCJEZW1vbGl0aW9uc1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkRpc2d1aXNlXCJdID0gOF0gPSBcIkRpc2d1aXNlXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiRGl2aW5nXCJdID0gOV0gPSBcIkRpdmluZ1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkRyaXZlQXV0b1wiXSA9IDEwXSA9IFwiRHJpdmVBdXRvXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiRWxlY3RyaWNhbFJlcGFpclwiXSA9IDExXSA9IFwiRWxlY3RyaWNhbFJlcGFpclwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkVsZWN0cm9uaWNzXCJdID0gMTJdID0gXCJFbGVjdHJvbmljc1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkZpcnN0QWlkXCJdID0gMTNdID0gXCJGaXJzdEFpZFwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkh5cG5vc2lzXCJdID0gMTRdID0gXCJIeXBub3Npc1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkxhd1wiXSA9IDE1XSA9IFwiTGF3XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiTGlicmFyeVVzZVwiXSA9IDE2XSA9IFwiTGlicmFyeVVzZVwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkxvY2tzbWl0aFwiXSA9IDE3XSA9IFwiTG9ja3NtaXRoXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiTWVjaGFuaWNhbFJlcGFpclwiXSA9IDE4XSA9IFwiTWVjaGFuaWNhbFJlcGFpclwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIk1vZGVybk1lZGljaW5lXCJdID0gMTldID0gXCJNb2Rlcm5NZWRpY2luZVwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIk5hdHVyYWxXb3JsZFwiXSA9IDIwXSA9IFwiTmF0dXJhbFdvcmxkXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiTmF2aWdhdGVcIl0gPSAyMV0gPSBcIk5hdmlnYXRlXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiT2NjdWx0XCJdID0gMjJdID0gXCJPY2N1bHRcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJPcGVyYXRlSGVhdnlNYWNoaW5lcnlcIl0gPSAyM10gPSBcIk9wZXJhdGVIZWF2eU1hY2hpbmVyeVwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIlBzeWNob2FuYWx5c2lzXCJdID0gMjRdID0gXCJQc3ljaG9hbmFseXNpc1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIlJlYWRMaXBzXCJdID0gMjVdID0gXCJSZWFkTGlwc1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIlJpZGVcIl0gPSAyNl0gPSBcIlJpZGVcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJUaHJvd1wiXSA9IDI3XSA9IFwiVGhyb3dcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJBY3RpbmdcIl0gPSAyOF0gPSBcIkFjdGluZ1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkNhbGxpZ3JhcGh5XCJdID0gMjldID0gXCJDYWxsaWdyYXBoeVwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkNhcnBlbnRyeVwiXSA9IDMwXSA9IFwiQ2FycGVudHJ5XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiQ29va2luZ1wiXSA9IDMxXSA9IFwiQ29va2luZ1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkRhbmNpbmdcIl0gPSAzMl0gPSBcIkRhbmNpbmdcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJGaW5lQXJ0XCJdID0gMzNdID0gXCJGaW5lQXJ0XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiRm9yZ2VyeVwiXSA9IDM0XSA9IFwiRm9yZ2VyeVwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIldyaXRpbmdcIl0gPSAzNV0gPSBcIldyaXRpbmdcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJTaW5naW5nXCJdID0gMzZdID0gXCJTaW5naW5nXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiUGFpbnRpbmdcIl0gPSAzN10gPSBcIlBhaW50aW5nXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiUGhvdG9ncmFwaHlcIl0gPSAzOF0gPSBcIlBob3RvZ3JhcGh5XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiU2N1bHB0aW5nXCJdID0gMzldID0gXCJTY3VscHRpbmdcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJDaGFpbnNhd1wiXSA9IDQwXSA9IFwiQ2hhaW5zYXdcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJIZWF2eVdlYXBvbnNcIl0gPSA0MV0gPSBcIkhlYXZ5V2VhcG9uc1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkZsYW1ldGhyb3dlclwiXSA9IDQyXSA9IFwiRmxhbWV0aHJvd2VyXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiTWFjaGluZUd1blwiXSA9IDQzXSA9IFwiTWFjaGluZUd1blwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIlN1Ym1hY2hpbmVHdW5cIl0gPSA0NF0gPSBcIlN1Ym1hY2hpbmVHdW5cIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJBaXJjcmFmdFwiXSA9IDQ1XSA9IFwiQWlyY3JhZnRcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJCb2F0XCJdID0gNDZdID0gXCJCb2F0XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiQXN0cm9ub215XCJdID0gNDddID0gXCJBc3Ryb25vbXlcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJCaW9sb2d5XCJdID0gNDhdID0gXCJCaW9sb2d5XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiQm90YW55XCJdID0gNDldID0gXCJCb3RhbnlcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJDaGVtaXN0cnlcIl0gPSA1MF0gPSBcIkNoZW1pc3RyeVwiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIkNyeXB0b2dyYXBoeVwiXSA9IDUxXSA9IFwiQ3J5cHRvZ3JhcGh5XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiRW5naW5lZXJpbmdcIl0gPSA1Ml0gPSBcIkVuZ2luZWVyaW5nXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiRm9yZW5zaWNzXCJdID0gNTNdID0gXCJGb3JlbnNpY3NcIjtcclxuICAgIENTa2lsbFtDU2tpbGxbXCJHZW9sb2d5XCJdID0gNTRdID0gXCJHZW9sb2d5XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiTWF0aGVtYXRpY3NcIl0gPSA1NV0gPSBcIk1hdGhlbWF0aWNzXCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiTWV0ZW9yb2xvZ3lcIl0gPSA1Nl0gPSBcIk1ldGVvcm9sb2d5XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiUGhhcm1hY3lcIl0gPSA1N10gPSBcIlBoYXJtYWN5XCI7XHJcbiAgICBDU2tpbGxbQ1NraWxsW1wiUGh5c2ljc1wiXSA9IDU4XSA9IFwiUGh5c2ljc1wiO1xyXG4gICAgQ1NraWxsW0NTa2lsbFtcIlpvb2xvZ3lcIl0gPSA1OV0gPSBcIlpvb2xvZ3lcIjtcclxufSkoQ1NraWxsID0gZXhwb3J0cy5DU2tpbGwgfHwgKGV4cG9ydHMuQ1NraWxsID0ge30pKTtcclxudmFyIEVyYTtcclxuKGZ1bmN0aW9uIChFcmEpIHtcclxuICAgIEVyYVtFcmFbXCJGdXR1cmVcIl0gPSAwXSA9IFwiRnV0dXJlXCI7XHJcbiAgICBFcmFbRXJhW1wiSW5mb3JtYXRpb25cIl0gPSAxXSA9IFwiSW5mb3JtYXRpb25cIjtcclxuICAgIEVyYVtFcmFbXCJBdG9taWNcIl0gPSAyXSA9IFwiQXRvbWljXCI7XHJcbiAgICBFcmFbRXJhW1wiTW9kZXJuXCJdID0gM10gPSBcIk1vZGVyblwiO1xyXG4gICAgRXJhW0VyYVtcIkluZHVzdHJpYWxcIl0gPSA0XSA9IFwiSW5kdXN0cmlhbFwiO1xyXG4gICAgRXJhW0VyYVtcIlJlbmFpc3NhbmNlXCJdID0gNV0gPSBcIlJlbmFpc3NhbmNlXCI7XHJcbiAgICBFcmFbRXJhW1wiTWVkaWV2YWxcIl0gPSA2XSA9IFwiTWVkaWV2YWxcIjtcclxuICAgIEVyYVtFcmFbXCJDbGFzc2ljYWxcIl0gPSA3XSA9IFwiQ2xhc3NpY2FsXCI7XHJcbiAgICBFcmFbRXJhW1wiQW5jaWVudFwiXSA9IDhdID0gXCJBbmNpZW50XCI7XHJcbiAgICBFcmFbRXJhW1wiVGltZWxlc3NcIl0gPSA5XSA9IFwiVGltZWxlc3NcIjtcclxufSkoRXJhID0gZXhwb3J0cy5FcmEgfHwgKGV4cG9ydHMuRXJhID0ge30pKTtcclxuLyoqXHJcbiAqIEhvdyBtdWNoIHRoZSBQQ3Mga25vdyBhYm91dCBhIE5QQydzIGNlcnRhaW4gY2hhcmFjdGVyaXN0aWMsIGJlIGl0IGEgY29tYmF0XHJcbiAqIG1vdmUsIHNraWxsIG1vZGlmaWVyLCBtb3ZlbWVudCBzcGVlZCBhbnl0aGluZy5cclxuICovXHJcbnZhciBWaXNpYmlsaXR5TGV2ZWw7XHJcbihmdW5jdGlvbiAoVmlzaWJpbGl0eUxldmVsKSB7XHJcbiAgICBWaXNpYmlsaXR5TGV2ZWxbVmlzaWJpbGl0eUxldmVsW1wiSGlkZGVuXCJdID0gMF0gPSBcIkhpZGRlblwiO1xyXG4gICAgVmlzaWJpbGl0eUxldmVsW1Zpc2liaWxpdHlMZXZlbFtcIkhpbnRlZFwiXSA9IDFdID0gXCJIaW50ZWRcIjtcclxuICAgIFZpc2liaWxpdHlMZXZlbFtWaXNpYmlsaXR5TGV2ZWxbXCJWYWd1ZVwiXSA9IDJdID0gXCJWYWd1ZVwiO1xyXG4gICAgVmlzaWJpbGl0eUxldmVsW1Zpc2liaWxpdHlMZXZlbFtcIlNob3duXCJdID0gM10gPSBcIlNob3duXCI7XHJcbn0pKFZpc2liaWxpdHlMZXZlbCA9IGV4cG9ydHMuVmlzaWJpbGl0eUxldmVsIHx8IChleHBvcnRzLlZpc2liaWxpdHlMZXZlbCA9IHt9KSk7XHJcbi8vIEJ5IGNvbnRyb2xsaW5nIHRoZXNlIEkgY2FuIHN3aXRjaCBiZXR3ZWVuIHBsYXllciBhbmQgRE0gbW9kZS5cclxuZXhwb3J0cy5IaWRkZW4gPSBWaXNpYmlsaXR5TGV2ZWwuSGlkZGVuO1xyXG5leHBvcnRzLkhpbnRlZCA9IFZpc2liaWxpdHlMZXZlbC5IaW50ZWQ7XHJcbmV4cG9ydHMuVmFndWUgPSBWaXNpYmlsaXR5TGV2ZWwuVmFndWU7XHJcbmV4cG9ydHMuU2hvd24gPSBWaXNpYmlsaXR5TGV2ZWwuU2hvd247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwQ291bnRyaWVzID0gdm9pZCAwO1xyXG52YXIgQ2l0eVRhZztcclxuKGZ1bmN0aW9uIChDaXR5VGFnKSB7XHJcbiAgICBDaXR5VGFnW0NpdHlUYWdbXCJHaG9zdCBUb3duXCJdID0gMF0gPSBcIkdob3N0IFRvd25cIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIlJ1aW5zXCJdID0gMV0gPSBcIlJ1aW5zXCI7XHJcbiAgICBDaXR5VGFnW0NpdHlUYWdbXCJVbmRlZmVuZGVkXCJdID0gMl0gPSBcIlVuZGVmZW5kZWRcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIk9wZW5cIl0gPSAzXSA9IFwiT3BlblwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiV2FsbGVkXCJdID0gNF0gPSBcIldhbGxlZFwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiRm9ydGlmaWVkXCJdID0gNV0gPSBcIkZvcnRpZmllZFwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiSW1wcmVnbmFibGVcIl0gPSA2XSA9IFwiSW1wcmVnbmFibGVcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIlNwcmF3bGluZ1wiXSA9IDddID0gXCJTcHJhd2xpbmdcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIk9yZ2FuaXplZFwiXSA9IDhdID0gXCJPcmdhbml6ZWRcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIlNwYWNlIENydW5jaFwiXSA9IDldID0gXCJTcGFjZSBDcnVuY2hcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIkNsdXR0ZXJlZFwiXSA9IDEwXSA9IFwiQ2x1dHRlcmVkXCI7XHJcbiAgICBDaXR5VGFnW0NpdHlUYWdbXCJNZXJjaGFudCBHdWlsZHNcIl0gPSAxMV0gPSBcIk1lcmNoYW50IEd1aWxkc1wiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiQ2VudHJhbCBNYXJrZXRcIl0gPSAxMl0gPSBcIkNlbnRyYWwgTWFya2V0XCI7XHJcbiAgICBDaXR5VGFnW0NpdHlUYWdbXCJDb21tZXJjaWFsIEh1YlwiXSA9IDEzXSA9IFwiQ29tbWVyY2lhbCBIdWJcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIlRyYWRlIEhvdHNwb3RcIl0gPSAxNF0gPSBcIlRyYWRlIEhvdHNwb3RcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIkFjYWRlbWljIEZvY3VzXCJdID0gMTVdID0gXCJBY2FkZW1pYyBGb2N1c1wiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiUmVzZWFyY2ggQ2VudHJlXCJdID0gMTZdID0gXCJSZXNlYXJjaCBDZW50cmVcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIkNyYWZ0c21hbidzIEd1aWxkc1wiXSA9IDE3XSA9IFwiQ3JhZnRzbWFuJ3MgR3VpbGRzXCI7XHJcbiAgICBDaXR5VGFnW0NpdHlUYWdbXCJJbmR1c3RyaWFsIFpvbmVcIl0gPSAxOF0gPSBcIkluZHVzdHJpYWwgWm9uZVwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiTWluaW5nIE9wc1wiXSA9IDE5XSA9IFwiTWluaW5nIE9wc1wiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiTWFmaWEgQ29udHJvbFwiXSA9IDIwXSA9IFwiTWFmaWEgQ29udHJvbFwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiTGF3bGVzc1wiXSA9IDIxXSA9IFwiTGF3bGVzc1wiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiRWZmaWNpZW50IFBvbGljZVwiXSA9IDIyXSA9IFwiRWZmaWNpZW50IFBvbGljZVwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiTWlsaXRhcnkgQ3VyZmV3XCJdID0gMjNdID0gXCJNaWxpdGFyeSBDdXJmZXdcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIlVuaHlnaWVuaWNcIl0gPSAyNF0gPSBcIlVuaHlnaWVuaWNcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIlNld2FnZSBTeXN0ZW1cIl0gPSAyNV0gPSBcIlNld2FnZSBTeXN0ZW1cIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIkZyZXNoIFdhdGVyXCJdID0gMjZdID0gXCJGcmVzaCBXYXRlclwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiUGVyZm9ybWluZyBBcnRpc3RzXCJdID0gMjddID0gXCJQZXJmb3JtaW5nIEFydGlzdHNcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIkN1bHR1cmFsIEh1YlwiXSA9IDI4XSA9IFwiQ3VsdHVyYWwgSHViXCI7XHJcbiAgICBDaXR5VGFnW0NpdHlUYWdbXCJUb3VyaXN0IEhvdHNwb3RcIl0gPSAyOV0gPSBcIlRvdXJpc3QgSG90c3BvdFwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiU2x1bXNcIl0gPSAzMF0gPSBcIlNsdW1zXCI7XHJcbiAgICBDaXR5VGFnW0NpdHlUYWdbXCJVbmRlcmdyb3VuZFwiXSA9IDMxXSA9IFwiVW5kZXJncm91bmRcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIlVuZGVyd29ybGRcIl0gPSAzMl0gPSBcIlVuZGVyd29ybGRcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIk9yZ2FuaXplZCBDcmltZVwiXSA9IDMzXSA9IFwiT3JnYW5pemVkIENyaW1lXCI7XHJcbiAgICBDaXR5VGFnW0NpdHlUYWdbXCJIYXJib3JcIl0gPSAzNF0gPSBcIkhhcmJvclwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiU2VhcG9ydFwiXSA9IDM1XSA9IFwiU2VhcG9ydFwiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiR3JlZW5zXCJdID0gMzZdID0gXCJHcmVlbnNcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIkVudGVydGFpbm1lbnQgSW5mcmFcIl0gPSAzN10gPSBcIkVudGVydGFpbm1lbnQgSW5mcmFcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIk1lZGljYWwgSW5mcmFcIl0gPSAzOF0gPSBcIk1lZGljYWwgSW5mcmFcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIkNoYXJtaW5nXCJdID0gMzldID0gXCJDaGFybWluZ1wiO1xyXG4gICAgQ2l0eVRhZ1tDaXR5VGFnW1wiQnJlYXRodGFraW5nXCJdID0gNDBdID0gXCJCcmVhdGh0YWtpbmdcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIk1hZ2UgUHJlc2VuY2VcIl0gPSA0MV0gPSBcIk1hZ2UgUHJlc2VuY2VcIjtcclxuICAgIENpdHlUYWdbQ2l0eVRhZ1tcIkhvbHkgU2l0ZXNcIl0gPSA0Ml0gPSBcIkhvbHkgU2l0ZXNcIjtcclxufSkoQ2l0eVRhZyB8fCAoQ2l0eVRhZyA9IHt9KSk7XHJcbmNsYXNzIENvdW50cnkge1xyXG4gICAgY29uc3RydWN0b3IoYXJncykge1xyXG4gICAgICAgIHRoaXMuJG15TmFtZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy4kbXlEZXNjID0gbnVsbDtcclxuICAgICAgICBpZiAoQ291bnRyeS4kY291bnRyeU5hbWVzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0YXRpYyBlbGVtZW50cyBub3QgbG9hZGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBsYW5ldCA9IGFyZ3MucGxhbmV0O1xyXG4gICAgICAgIHRoaXMubmFtZSA9IGFyZ3MubmFtZTtcclxuICAgICAgICB0aGlzLmZ1bGxOYW1lID0gYXJncy5mdWxsTmFtZTtcclxuICAgICAgICB0aGlzLmNhcGl0YWwgPSBhcmdzLmNhcGl0YWw7XHJcbiAgICAgICAgdGhpcy5sZWFkZXIgPSBhcmdzLmxlYWRlcjtcclxuICAgICAgICB0aGlzLmdvdmVybm1lbnQgPSBhcmdzLmdvdmVybm1lbnQ7XHJcbiAgICAgICAgdGhpcy5wb3B1bGF0aW9uID0gYXJncy5wb3B1bGF0aW9uO1xyXG4gICAgICAgIHRoaXMucHJpbWFyeUN1bHR1cmUgPSBhcmdzLnByaW1hcnlDdWx0dXJlO1xyXG4gICAgICAgIHRoaXMuYXJlYSA9IGFyZ3MuYXJlYTtcclxuICAgICAgICB0aGlzLmNhcGl0YWxQb3B1bGF0aW9uID0gYXJncy5jYXBpdGFsUG9wdWxhdGlvbjtcclxuICAgICAgICB0aGlzLmNhcGl0YWxUZW1wZXJhdHVyZSA9IGFyZ3MuY2FwaXRhbFRlbXBlcmF0dXJlO1xyXG4gICAgICAgIHRoaXMuY2FwaXRhbEVsZXZhdGlvbiA9IGFyZ3MuY2FwaXRhbEVsZXZhdGlvbjtcclxuICAgICAgICB0aGlzLnJhY2VzID0gYXJncy5yYWNlcztcclxuICAgICAgICB0aGlzLmV4b3RpY1JhY2VzID0gYXJncy5leG90aWNSYWNlcztcclxuICAgICAgICB0aGlzLmV4Y2x1c2l2ZVJhY2VzID0gYXJncy5leGNsdXNpdmVSYWNlcztcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gYXJncy5kZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLnRhZ3MgPSBhcmdzLnRhZ3M7XHJcbiAgICAgICAgdGhpcy5jYXBpdGFsVGFncyA9IGFyZ3MuY2FwaXRhbFRhZ3M7XHJcbiAgICAgICAgdGhpcy5jYXBpdGFsU3VtbWFyeSA9IGFyZ3MuY2FwaXRhbFN1bW1hcnk7XHJcbiAgICAgICAgdGhpcy5sZWFkZXJEZXNjcmlwdGlvbiA9IGFyZ3MubGVhZGVyRGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGAke3RoaXMucGxhbmV0fXwke3RoaXMubmFtZX1gO1xyXG4gICAgICAgIGlmIChDb3VudHJ5LmNvdW50cmllc0luZGV4Lmhhcyh0aGlzLmluZGV4KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEdXBsaWNhdGUgY291bnRyeVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQ291bnRyeS5jb3VudHJpZXNJbmRleC5zZXQodGhpcy5pbmRleCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy4kbXlOYW1lID1cclxuICAgICAgICAgICAgJChgPGRpdiBjbGFzcz0nY291bnRyeV9uYW1lJyBkYXRhLWluZGV4LWtleT0nJHt0aGlzLmluZGV4fSc+JHt0aGlzLm5hbWV9PC9kaXY+YCk7XHJcbiAgICAgICAgdGhpcy4kbXlOYW1lLmFwcGVuZFRvKENvdW50cnkuJGNvdW50cnlOYW1lcyk7XHJcbiAgICAgICAgdGhpcy4kbXlEZXNjID0gdGhpcy5nZW5lcmF0ZURPTSgpO1xyXG4gICAgICAgIHRoaXMuJG15RGVzYy5oaWRlKCkuYXBwZW5kVG8oQ291bnRyeS4kY291bnRyeURlc2MpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGxvYWRTdGF0aWNFbGVtZW50cygpIHtcclxuICAgICAgICB0aGlzLiRjb3VudHJ5TmFtZXMgPSAkKFwiLmNvdW50cnlfbmFtZXNcIik7XHJcbiAgICAgICAgdGhpcy4kY291bnRyeURlc2MgPSAkKFwiLmNvdW50cnlfZGVzY1wiKTtcclxuICAgICAgICB0aGlzLiRjb3VudHJ5TmFtZXMub24oXCJjbGlja1wiLCBcIi5jb3VudHJ5X25hbWU6bm90KC5hY3RpdmUpXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXhLZXkgPSAkKHRoaXMpLmRhdGEoXCJpbmRleEtleVwiKTtcclxuICAgICAgICAgICAgQ291bnRyeS5jb3VudHJpZXNJbmRleC5nZXQoaW5kZXhLZXkpLnNob3dDb3VudHJ5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzaG93Q291bnRyeSgpIHtcclxuICAgICAgICBDb3VudHJ5LiRjb3VudHJ5RGVzYy5jaGlsZHJlbigpLmhpZGUoKTtcclxuICAgICAgICBDb3VudHJ5LiRjb3VudHJ5TmFtZXMuY2hpbGRyZW4oKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICB0aGlzLiRteU5hbWUuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgdGhpcy4kbXlEZXNjLnNob3coKTtcclxuICAgIH1cclxuICAgIGdlbmVyYXRlRE9NKCkge1xyXG4gICAgICAgIHJldHVybiAkKGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY291bnRyeVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY291bnRyeV9kYXRhIGNvdW50cnlfY2FyZFwiPlxyXG4gICAgICAgICAgICAgICAgIDxoNT5Db3VudHJ5PC9oNT5cclxuICAgICAgICAgICAgICAgICA8dGFibGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPlBsYW5ldDwvdGQ+PHRkPiR7dGhpcy5wbGFuZXR9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPk5hbWU8L3RkPjx0ZD4ke3RoaXMuZnVsbE5hbWV9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPkFyZWE8L3RkPjx0ZD4ke3RoaXMuYXJlYX1LIGttPHN1cD4yPC9zdXA+PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPlBvcHVsYXRpb248L3RkPjx0ZD4ke3RoaXMucG9wdWxhdGlvbn08L3RkPjwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+R292ZXJubWVudDwvdGQ+PHRkPiR7dGhpcy5nb3Zlcm5tZW50fTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5DdWx0dXJlPC90ZD48dGQ+JHt0aGlzLnByaW1hcnlDdWx0dXJlfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWdzXCI+JHt0aGlzLnRhZ3MubWFwKHggPT4gYDxzcGFuIGNsYXNzPVwidGFnXCI+JHt4fTwvc3Bhbj5gKS5qb2luKFwiXCIpfTwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcGl0YWxfZGF0YSBjb3VudHJ5X2NhcmRcIj5cclxuICAgICAgICAgICAgICAgIDxoNT5DYXBpdGFsPC9oNT5cclxuICAgICAgICAgICAgICAgIDx0YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+TmFtZTwvdGQ+PHRkPiR7dGhpcy5jYXBpdGFsfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5Qb3B1bGF0aW9uPC90ZD48dGQ+JHt0aGlzLmNhcGl0YWxQb3B1bGF0aW9ufTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5FbGV2YXRpb248L3RkPjx0ZD4ke3RoaXMuY2FwaXRhbEVsZXZhdGlvbn08L3RkPjwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+VGVtcGVyYXR1cmU8L3RkPjx0ZD4ke3RoaXMuY2FwaXRhbFRlbXBlcmF0dXJlfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWdzXCI+JHtBcnJheS5mcm9tKHRoaXMuY2FwaXRhbFRhZ3MsIChbdGFnLCB2YWxdKSA9PiBgPHNwYW4gY2xhc3M9XCJ0YWcgbGV2ZWxlZCB0JHt2YWx9XCI+JHtDaXR5VGFnW3RhZ119PC9zcGFuPmApLmpvaW4oXCJcIil9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWFkZXJfZGF0YSBjb3VudHJ5X2NhcmRcIj5cclxuICAgICAgICAgICAgICAgIDxoNT5MZWFkZXI8L2g1PlxyXG4gICAgICAgICAgICAgICAgPHRhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5OYW1lPC90ZD48dGQ+JHt0aGlzLmxlYWRlciA/IHRoaXMubGVhZGVyIDogXCJOb25lXCJ9IFxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmRfaW5mb1wiPiR7dGhpcy5sZWFkZXJEZXNjcmlwdGlvbn08L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXNjXCI+XHJcbiAgICAgICAgICAgICAgICAke3RoaXMuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgICA8aDU+QWJvdXQgdGhlIENhcGl0YWw8L2g1PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcGl0YWxfaW5mb1wiPiR7dGhpcy5jYXBpdGFsU3VtbWFyeX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxoNT5SYWNpYWwgU3ByZWFkPC9oNT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyYWNpYWxfaW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+TWFpbmx5IGluaGFiaXRlZCBieSAke3RoaXMucmFjZXMuc2l6ZSA+IDAgP1xyXG4gICAgICAgICAgICBBcnJheS5mcm9tKHRoaXMucmFjZXMsIChbbmFtZSwgcGVyY2VudF0pID0+IGAke25hbWV9ICgke01hdGgucm91bmQocGVyY2VudCAqIDEwMCkgLyAxMDB9JSlgKS5qb2luKFwiLCBcIikgOiBcIj9cIn0uPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgJHtBcnJheS5pc0FycmF5KHRoaXMuZXhvdGljUmFjZXMpICYmIHRoaXMuZXhvdGljUmFjZXMubGVuZ3RoXHJcbiAgICAgICAgICAgID8gYDxkaXY+JHt0aGlzLmV4b3RpY1JhY2VzLmpvaW4oXCIsIFwiKX0gY2FuIG5vdGFibHkgYmUgZm91bmQgaGVyZS48L2Rpdj5gIDogXCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAke0FycmF5LmlzQXJyYXkodGhpcy5leGNsdXNpdmVSYWNlcykgJiYgdGhpcy5leGNsdXNpdmVSYWNlcy5sZW5ndGhcclxuICAgICAgICAgICAgPyBgPGRpdj4ke3RoaXMuZXhjbHVzaXZlUmFjZXMuam9pbihcIiwgXCIpfSBvbmx5IGNvbWUgZnJvbSBoZXJlLjwvZGl2PmAgOiBcIlwifVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PmApO1xyXG4gICAgfVxyXG59XHJcbkNvdW50cnkuY291bnRyaWVzSW5kZXggPSBuZXcgTWFwKCk7XHJcbkNvdW50cnkuJGNvdW50cnlOYW1lcyA9IG51bGw7XHJcbkNvdW50cnkuJGNvdW50cnlEZXNjID0gbnVsbDtcclxuZnVuY3Rpb24gc2V0dXBDb3VudHJpZXMoKSB7XHJcbiAgICBDb3VudHJ5LmxvYWRTdGF0aWNFbGVtZW50cygpO1xyXG4gICAgbmV3IENvdW50cnkoe1xyXG4gICAgICAgIHBsYW5ldDogXCJUZXJyYSBQcmltYVwiLFxyXG4gICAgICAgIG5hbWU6IFwiVmV0ZXJlc1wiLFxyXG4gICAgICAgIGZ1bGxOYW1lOiBcIlJlZ251bSBWZXRlcmVzXCIsXHJcbiAgICAgICAgY2FwaXRhbDogXCJPcnR1c1wiLFxyXG4gICAgICAgIGFyZWE6IDEwNixcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIjIuNk1cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIkVtcGVyb3IgLyBTZW5hdGVcIixcclxuICAgICAgICBwcmltYXJ5Q3VsdHVyZTogXCJSb21hXCIsXHJcbiAgICAgICAgbGVhZGVyOiBcIlJleCBBdWd1c3R1cyBJVlwiLFxyXG4gICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgIHJhY2VzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiSHVtYW5zXCIsIDYwLjhdLFxyXG4gICAgICAgICAgICBbXCJIYWxmLUVsdmVzXCIsIDMwLjVdLFxyXG4gICAgICAgICAgICBbXCJFbHZlc1wiLCA4LjddLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGV4b3RpY1JhY2VzOiBbXCJBYXNpbWFyc1wiLCBcIkVsYWRyaW5cIiwgXCJWYW1waXJlc1wiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW10sXHJcbiAgICAgICAgY2FwaXRhbFBvcHVsYXRpb246IFwiMjE4S1wiLFxyXG4gICAgICAgIGNhcGl0YWxFbGV2YXRpb246IFwiNC4ybVwiLFxyXG4gICAgICAgIGNhcGl0YWxUZW1wZXJhdHVyZTogXCI4JiM4NDUxO1wiLFxyXG4gICAgICAgIGNhcGl0YWxUYWdzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW0NpdHlUYWcuT3JnYW5pemVkLCA2XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJTZXdhZ2UgU3lzdGVtXCJdLCA2XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJUb3VyaXN0IEhvdHNwb3RcIl0sIDVdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkVudGVydGFpbm1lbnQgSW5mcmFcIl0sIDVdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlRyYWRlIEhvdHNwb3RcIl0sIDRdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlNlYXBvcnRcIl0sIDRdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkZyZXNoIFdhdGVyXCJdLCA0XSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuU3ByYXdsaW5nLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJFZmZpY2llbnQgUG9saWNlXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJDaGFybWluZ1wiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQWNhZGVtaWMgRm9jdXNcIl0sIDNdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkNyYWZ0c21hbidzIEd1aWxkc1wiXSwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLldhbGxlZCwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiR3JlZW5zXCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNZWRpY2FsIEluZnJhXCJdLCAxXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJTbHVtc1wiXSwgMV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgY2FwaXRhbFN1bW1hcnk6IGBcclxuICAgICAgICAgICAgICAgIFRoZSBjaXR5IHdoZXJlIG1vZGVybiBjaXZpbGl6YXRpb24gaXMgYmVnYW4gZm9sbG93aW5nIHRoZSBkYXJrbmVzcy4gQSBjaXR5IHRoYXQgaGFzIHNlZW4gYWxsLiBFYXJsaWVzdCByZW1haW5pbmcgXHJcbiAgICAgICAgICAgICAgICB3cml0dGVuIHJlY29yZHMgb2YgYWxsIHNlbnRpZW50IHJhY2VzIGFuZCBjdWx0dXJlcyBjYW4gYmUgdHJhY2VkIGhlcmUuIEZvciBhIGxvbmcgdGltZSwgdGhpcyB3YXMgdGhlIFxyXG4gICAgICAgICAgICAgICAgY2FwaXRhbCBvZiBhbiBlbXBpcmUgdGhhdCBzcHJhd2xlZCB0aGUgd29ybGQsIGFuZCBldmVuIG5vdyByZW1haW5zIHRoZSBzaW5nbGUgbW9zdCBpbXBvcnRhbnQgY2l0eSBvZiBhbGwuXHJcbiAgICAgICAgICAgICAgICBXaGF0IHNlY3JldHMgZG8gaXRzIGFyY2hpdmVzIGhvbGQ/YCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICBsZWFkZXJEZXNjcmlwdGlvbjogXCJcIlxyXG4gICAgfSk7XHJcbiAgICBuZXcgQ291bnRyeSh7XHJcbiAgICAgICAgcGxhbmV0OiBcIlRlcnJhIFByaW1hXCIsXHJcbiAgICAgICAgbmFtZTogXCJSeWNlcnpcIixcclxuICAgICAgICBmdWxsTmFtZTogXCJIb2x5IEVtcGlyZSBvZiBSeWNlcnpcIixcclxuICAgICAgICBjYXBpdGFsOiBcIktpcmFnZ1wiLFxyXG4gICAgICAgIGFyZWE6IDExNCxcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIjYuOU1cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIkZldWRhbCBFbXBpcmVcIixcclxuICAgICAgICBwcmltYXJ5Q3VsdHVyZTogXCJQZWdhelwiLFxyXG4gICAgICAgIGxlYWRlcjogXCJTaXIgRW5jaW9kYXMgU2lsdmVyYXNoXCIsXHJcbiAgICAgICAgdGFnczogW10sXHJcbiAgICAgICAgcmFjZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJIdW1hbnNcIiwgNTZdLFxyXG4gICAgICAgICAgICBbXCJTaGlmdGVyc1tFcXVpbmVzXVwiLCAyNV0sXHJcbiAgICAgICAgICAgIFtcIkhhbGYtT3Jjc1wiLCAxMF0sXHJcbiAgICAgICAgICAgIFtcIkRyYWdvbkJvcm5cIiwgM10sXHJcbiAgICAgICAgICAgIFtcIkR3YXJ2ZXNcIiwgM10sXHJcbiAgICAgICAgICAgIFtcIkhhbGYtRWx2ZXNcIiwgMl0sXHJcbiAgICAgICAgICAgIFtcIkVsdmVzXCIsIDFdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGV4b3RpY1JhY2VzOiBbXCJPcmNzXCIsIFwiRWFydGggR2VuYXNpXCJdLFxyXG4gICAgICAgIGV4Y2x1c2l2ZVJhY2VzOiBbXCJDZW50YXVyc1wiXSxcclxuICAgICAgICBjYXBpdGFsUG9wdWxhdGlvbjogXCIzMDdLXCIsXHJcbiAgICAgICAgY2FwaXRhbEVsZXZhdGlvbjogXCI1NDgwbVwiLFxyXG4gICAgICAgIGNhcGl0YWxUZW1wZXJhdHVyZTogXCItMjQmIzg0NTE7XCIsXHJcbiAgICAgICAgY2FwaXRhbFRhZ3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbQ2l0eVRhZy5JbXByZWduYWJsZSwgNl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQnJlYXRodGFraW5nXCJdLCA2XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJIb2x5IFNpdGVzXCJdLCA1XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNaW5pbmcgT3BzXCJdLCA0XSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuT3JnYW5pemVkLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJGcmVzaCBXYXRlclwiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiU2V3YWdlIFN5c3RlbVwiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiSW5kdXN0cmlhbCBab25lXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNYWdlIFByZXNlbmNlXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJTcGFjZSBDcnVuY2hcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlRvdXJpc3QgSG90c3BvdFwiXSwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiUmVzZWFyY2ggQ2VudHJlXCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJPcmdhbml6ZWQgQ3JpbWVcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkVmZmljaWVudCBQb2xpY2VcIl0sIDFdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIk1lZGljYWwgSW5mcmFcIl0sIDFdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlVuZGVyZ3JvdW5kXCJdLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYFxyXG4gICAgICAgICAgICAgICAgUnVtb3VyZWQgdG8gaGF2ZSBiZWVuIG1hZGUgYnkgYSBHb2RkZXNzLCB0aGlzIGNpdHksICdwdXJjaGFzZWQnIGJ5IFJ5Y2VyeiBpbiB0aGUgdGltZXMgcGFzdCwgaXMgYSB2YXN0IFxyXG4gICAgICAgICAgICAgICAgY2F2ZSBzeXN0ZW0gd2l0aGluIG9uZSBvZiB0aGUgd29ybGRzIHRvcG1vc3QgcGVha3MuIE90aGVyIHRoYW4gcmF0aGVyIGxvdyBhdG1vc3BoZXJpYyBwcmVzc3VyZSwgdGhlXHJcbiAgICAgICAgICAgICAgICBjYXZlcywgYmV5b25kIGFsbCByZWFzb24sIGFyZSBwZXJmZWN0IGZvciBsaWZlLiBIb3Qgc3ByaW5ncyBwcm92aWRlIGZyZXNoIHdhdGVyIGFuZCBtYWludGFpbiB0ZW1wZXJhdHVyZVxyXG4gICAgICAgICAgICAgICAgd2hpbGUgY2VydGFpbiBibHVpc2ggY3J5c3RhbHMgcHJvdmlkZSBsaWdodCBzdHJhbmdlbHkgbGlrZSB0aGF0IG9mIHRoZSBzdW4uYCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICBsZWFkZXJEZXNjcmlwdGlvbjogYGBcclxuICAgIH0pO1xyXG4gICAgbmV3IENvdW50cnkoe1xyXG4gICAgICAgIHBsYW5ldDogXCJUZXJyYSBQcmltYVwiLFxyXG4gICAgICAgIG5hbWU6IFwiVXJzdXNcIixcclxuICAgICAgICBmdWxsTmFtZTogXCJFdGVybmFsIFRzYXJkb20gb2YgVXJzdXNcIixcclxuICAgICAgICBjYXBpdGFsOiBcIkl2YW5ncmFkXCIsXHJcbiAgICAgICAgYXJlYTogMjQxLFxyXG4gICAgICAgIHBvcHVsYXRpb246IFwiMy4xTVwiLFxyXG4gICAgICAgIGdvdmVybm1lbnQ6IFwiVHNhcmRvbVwiLFxyXG4gICAgICAgIHByaW1hcnlDdWx0dXJlOiBcIlJ1c1wiLFxyXG4gICAgICAgIGxlYWRlcjogXCJUc2FyIEl2YW5vdmljaCBLYXNoY2hleVwiLFxyXG4gICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgIHJhY2VzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiSHVtYW5zXCIsIDYwXSxcclxuICAgICAgICAgICAgW1wiU2hpZnRlcnNbVXJzaW5lXVwiLCAzNl0sXHJcbiAgICAgICAgICAgIFtcIkR3YXJ2ZXNcIiwgMl0sXHJcbiAgICAgICAgICAgIFtcIlRpZWZsaW5nc1wiLCAxXSxcclxuICAgICAgICAgICAgW1wiRHJhZ29uQm9yblwiLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBleG90aWNSYWNlczogW1wiR29saWF0aHNcIiwgXCJEZW1vbnNcIiwgXCJNaW5vdGF1cnNcIiwgXCJIb2Jnb2JsaW5zXCIsIFwiWXVhbi10aVwiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW1wiQnVnYmVhcnNcIl0sXHJcbiAgICAgICAgY2FwaXRhbFBvcHVsYXRpb246IFwiMTIxS1wiLFxyXG4gICAgICAgIGNhcGl0YWxFbGV2YXRpb246IFwiMjAybVwiLFxyXG4gICAgICAgIGNhcGl0YWxUZW1wZXJhdHVyZTogXCItMyYjODQ1MTtcIixcclxuICAgICAgICBjYXBpdGFsVGFnczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiTWlsaXRhcnkgQ3VyZmV3XCJdLCA2XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJPcmdhbml6ZWQgQ3JpbWVcIl0sIDRdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlVuZGVyd29ybGRcIl0sIDRdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkZyZXNoIFdhdGVyXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJBY2FkZW1pYyBGb2N1c1wiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiTWFnZSBQcmVzZW5jZVwiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQ3VsdHVyYWwgSHViXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuRm9ydGlmaWVkLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuT3JnYW5pemVkLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJTZXdhZ2UgU3lzdGVtXCJdLCAxXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJHcmVlbnNcIl0sIDFdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlNsdW1zXCJdLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYFxyXG4gICAgICAgICAgICAgICAgQSBkYW5nZXJvdXMgY2l0eSBhdCB0aGUgY2VudHJlIG9mIGEgZGFuZ2Vyb3VzIGNvdW50cnkuIEF0IGl0cyB2ZXJ5IGNlbnRyZSBzaXRzIGEgZHluYXN0eSB0aGF0IHByZWRhdGVzIFxyXG4gICAgICAgICAgICAgICAgdGhlIHZlcnkgZW1waXJlLCBydW1vdXJlZCB0byBiZSB0aGUgc291bCBvZiBVcnN1cyBpdHNlbGYuIE1pbGl0YXJ5IGZvcmNlcyBjcnVzaCBkaXNzZW50ZXJzIGFuZCBjcmltaW5hbHMgXHJcbiAgICAgICAgICAgICAgICBhbGlrZSB3aXRoIGFuIGlyb24gaGFuZC4gUmlnaHQgdW5kZXJuZWF0aCB0aGVpciBnYXplcyBjcmltZSBsb3JkcyBvcGVyYXRpbmcgdGhyb3VnaG91dCBUZXJyYSBmbG91cmlzaC4gXHJcbiAgICAgICAgICAgICAgICBBbmQgeWV0LCB0aGlzIHR5cmFubnkgaXMgaG9tZSB0byBtYW55IGEgZ2VuaXVzIGluY29tcGFyYWJsZS4uLmAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXHJcbiAgICAgICAgbGVhZGVyRGVzY3JpcHRpb246IFwiXCJcclxuICAgIH0pO1xyXG4gICAgbmV3IENvdW50cnkoe1xyXG4gICAgICAgIHBsYW5ldDogXCJUZXJyYSBQcmltYVwiLFxyXG4gICAgICAgIG5hbWU6IFwiRmFyYW5kb1wiLFxyXG4gICAgICAgIGZ1bGxOYW1lOiBcIkZhcmFuZG8gU2hvZ3VuYXRlXCIsXHJcbiAgICAgICAgY2FwaXRhbDogXCJTZXRzdWpva3VcIixcclxuICAgICAgICBhcmVhOiA2OCxcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIjIuOU1cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIlNob2d1bmF0ZVwiLFxyXG4gICAgICAgIHByaW1hcnlDdWx0dXJlOiBcIk1pbmFtaVwiLFxyXG4gICAgICAgIGxlYWRlcjogXCJNZWlqaW4gU291eWFcIixcclxuICAgICAgICB0YWdzOiBbXSxcclxuICAgICAgICByYWNlczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkh1bWFuc1wiLCA3OV0sXHJcbiAgICAgICAgICAgIFtcIkhhbGZsaW5nc1wiLCA4XSxcclxuICAgICAgICAgICAgW1wiSGFsZi1FbHZlc1wiLCA3XSxcclxuICAgICAgICAgICAgW1wiRHdhcnZlc1wiLCA0XSxcclxuICAgICAgICAgICAgW1wiRWx2ZXNcIiwgMl0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZXhvdGljUmFjZXM6IFtcIlRyaXRvbnNcIiwgXCJBaXIgZ2VuYXNpXCIsIFwiR2l0aHlhbmtpXCIsIFwiS2Vua3VcIiwgXCJUYWJheGlcIiwgXCJTZWEgRWx2ZXNcIiwgXCJPbmlcIl0sXHJcbiAgICAgICAgZXhjbHVzaXZlUmFjZXM6IFtdLFxyXG4gICAgICAgIGNhcGl0YWxQb3B1bGF0aW9uOiBcIjI4NEtcIixcclxuICAgICAgICBjYXBpdGFsRWxldmF0aW9uOiBcIjkuN21cIixcclxuICAgICAgICBjYXBpdGFsVGVtcGVyYXR1cmU6IFwiMCYjODQ1MTtcIixcclxuICAgICAgICBjYXBpdGFsVGFnczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLkZvcnRpZmllZCwgNV0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiTWFnZSBQcmVzZW5jZVwiXSwgNF0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiSW5kdXN0cmlhbCBab25lXCJdLCA0XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJDb21tZXJjaWFsIEh1YlwiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQ3VsdHVyYWwgSHViXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJBY2FkZW1pYyBGb2N1c1wiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiRWZmaWNpZW50IFBvbGljZVwiXSwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLk9yZ2FuaXplZCwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQ2hhcm1pbmdcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIk1lZGljYWwgSW5mcmFcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkhvbHkgU2l0ZXNcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkdyZWVuc1wiXSwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiTWFmaWEgQ29udHJvbFwiXSwgMV0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiU2V3YWdlIFN5c3RlbVwiXSwgMV0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiRnJlc2ggV2F0ZXJcIl0sIDFdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGNhcGl0YWxTdW1tYXJ5OiBgXHJcbiAgICAgICAgICAgICAgICBBIGNpdHkgdGhhdCB3b3VsZCBub3QgZGllLCB0aGVyZSB3YXMgYSB0aW1lIHdoZW4gdGhpcyBvbmUgY2l0eSB3YXMgYWxsIHRoYXQgdGhlIG5vdy1taWdodHkgZW1waXJlIGhhZC4gXHJcbiAgICAgICAgICAgICAgICBXaXRoIHRoZSBsYW5kIGJ1cm5pbmcsIGJhcmJhcmlhbnMgYXQgdGhlIGdhdGVzLCB0aGUgZmlyc3QgTWVpamluIHRvb2sgY29tbWFuZC4gSGlzIHdpbGwgYmVjYW1lIHRoZSBjaXR5J3NcclxuICAgICAgICAgICAgICAgIHdpbGwgLSBhIHdpbGwgb2Ygc3Vydml2YWwsIG9mIHZlbmdlYW5jZS4gQ291bnRsZXNzIGdlbmVyYXRpb25zIGhhdmUgcGFzc2VkIHNpbmNlIHRoZW4gYW5kIHRoZSBjYXBpdGFsIGhhc1xyXG4gICAgICAgICAgICAgICAgdGhyaXZlZCBpbiBtb3JlIHdheXMgdGhhbiBvbmUsIGJ1dCBldmVuIG5vdyB0aGUgcGVvcGxlIGhlcmUgdmlldyB0aGUgYXJyaXZhbCBvZiB0aGUgbWlzdHMgd2l0aCByZXZlcmVuY2UuLi5gLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxyXG4gICAgICAgIGxlYWRlckRlc2NyaXB0aW9uOiBcIlwiXHJcbiAgICB9KTtcclxuICAgIG5ldyBDb3VudHJ5KHtcclxuICAgICAgICBwbGFuZXQ6IFwiVGVycmEgUHJpbWFcIixcclxuICAgICAgICBuYW1lOiBcIlNhZGh2YXN0YW5cIixcclxuICAgICAgICBmdWxsTmFtZTogXCJTYWRodmFyYWp5YVwiLFxyXG4gICAgICAgIGNhcGl0YWw6IFwiTmFnYXN5YXJhbnlhXCIsXHJcbiAgICAgICAgYXJlYTogNjIsXHJcbiAgICAgICAgcG9wdWxhdGlvbjogXCIzLjJNXCIsXHJcbiAgICAgICAgZ292ZXJubWVudDogXCJSYWpcIixcclxuICAgICAgICBwcmltYXJ5Q3VsdHVyZTogXCJWZWRpY1wiLFxyXG4gICAgICAgIGxlYWRlcjogXCJSYWphIERldmF2cmF0YVwiLFxyXG4gICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgIHJhY2VzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiSHVtYW5zXCIsIDU1XSxcclxuICAgICAgICAgICAgW1wiU2hpZnRlcnNbU2VycGVudGluZV1cIiwgMjFdLFxyXG4gICAgICAgICAgICBbXCJTaGlmdGVyc1tGZWxpbmVdXCIsIDE1XSxcclxuICAgICAgICAgICAgW1wiWXVhbi10aVwiLCA2XSxcclxuICAgICAgICAgICAgW1wiQWFyYWtvY3JhXCIsIDJdLFxyXG4gICAgICAgICAgICBbXCJFbHZlc1wiLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBleG90aWNSYWNlczogW1wiQWFzaW1hcnNcIiwgXCJHb2JsaW5zXCIsIFwiSGFyZW5nb25cIiwgXCJHaXRoeWFua2lcIiwgXCJLZW5rdVwiLCBcIlRvcnRsZXNcIl0sXHJcbiAgICAgICAgZXhjbHVzaXZlUmFjZXM6IFtcIkxveG9kb25cIiwgXCJHaXRoemVyYWlcIiwgXCJMZW9uaW5cIl0sXHJcbiAgICAgICAgY2FwaXRhbFBvcHVsYXRpb246IFwiMTY1S1wiLFxyXG4gICAgICAgIGNhcGl0YWxFbGV2YXRpb246IFwiNTZtXCIsXHJcbiAgICAgICAgY2FwaXRhbFRlbXBlcmF0dXJlOiBcIjkmIzg0NTE7XCIsXHJcbiAgICAgICAgY2FwaXRhbFRhZ3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkJyZWF0aHRha2luZ1wiXSwgNV0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiSG9seSBTaXRlc1wiXSwgNV0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiR3JlZW5zXCJdLCA0XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNYWdlIFByZXNlbmNlXCJdLCA0XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJDcmFmdHNtYW4ncyBHdWlsZHNcIl0sIDNdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkNlbnRyYWwgTWFya2V0XCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJDdWx0dXJhbCBIdWJcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlNsdW1zXCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuT3BlbiwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQWNhZGVtaWMgRm9jdXNcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIk1lZGljYWwgSW5mcmFcIl0sIDFdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZy5DbHV0dGVyZWQsIDFdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkZyZXNoIFdhdGVyXCJdLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYFxyXG4gICAgICAgICAgICAgICAgIEEgY2l0eSB0aGF0IGVtYm9kaWVzIHRoZSBmcmVlLCB1bnRhbWVkIHNwaXJpdCBvZiB0aGUgZm9yZXN0LiBJbiBhIHdvcmxkIHRoYXQgcmFwaWRseSBjaGFuZ2VzLCB0aGlzIFxyXG4gICAgICAgICAgICAgICAgIHJlbWFpbnMgdGhlIG9ubHkgbWVnYS1jaXR5IHdoZXJlIG5vdCBhIHNpbmdsZSBwaWVjZSBvZiBjb25jcmV0ZSBvciBzdGVlbCBoYXMgZ29uZSBpbnRvIHRoZSBpbmZyYXN0cnVjdHVyZS5cclxuICAgICAgICAgICAgICAgICBCdXJpZWQgZGVlcCB3aXRoaW4gaW5hY2Nlc3NpYmxlIHdvb2RzLCBldmVyeSBzaW5nbGUgYnVpbGRpbmcgaXMgbWFkZSBmcm9tIHRyZWVzLCBzZXZlcmFsIHN0aWxsIGFsaXZlLiBcclxuICAgICAgICAgICAgICAgICBSdW1vdXJzIGFyZSB0aGF0IGEgdGl0YW5pYyBzZXJwZW50IHVuc2VlbiB0byBtYW4gZ3VhcmRzIGFuZCBwcm92aWRlcyBzaGVsdGVyIHRvIGl0IHRpbGwgdGhpcyBkYXRlLmAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXHJcbiAgICAgICAgbGVhZGVyRGVzY3JpcHRpb246IFwiXCJcclxuICAgIH0pO1xyXG4gICAgbmV3IENvdW50cnkoe1xyXG4gICAgICAgIHBsYW5ldDogXCJUZXJyYSBQcmltYVwiLFxyXG4gICAgICAgIG5hbWU6IFwiU3RhaGxlcm5cIixcclxuICAgICAgICBmdWxsTmFtZTogXCJTdGFobGVybiBJbXBlcml1bVwiLFxyXG4gICAgICAgIGNhcGl0YWw6IFwiSnVsc2J1cmdcIixcclxuICAgICAgICBhcmVhOiA5MyxcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIjQuMU1cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIlJlaWNoXCIsXHJcbiAgICAgICAgcHJpbWFyeUN1bHR1cmU6IFwiSGV4ZW5mdXJzdFwiLFxyXG4gICAgICAgIGxlYWRlcjogXCJLYWlzZXIgQWxleGFuZGVyIFNpZWdmcmllZCBWb24gTG9oZW5ncmFtbVwiLFxyXG4gICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgIHJhY2VzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiSHVtYW5zXCIsIDg1XSxcclxuICAgICAgICAgICAgW1wiRHdhcnZlc1wiLCA1XSxcclxuICAgICAgICAgICAgW1wiSGFsZi1FbHZlc1wiLCA3XSxcclxuICAgICAgICAgICAgW1wiRWx2ZXNcIiwgMl0sXHJcbiAgICAgICAgICAgIFtcIkdub21lc1wiLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBleG90aWNSYWNlczogW1wiRGVlcCBHbm9tZXNcIiwgXCJEdWVyZ2FyXCIsIFwiRHJvd1wiLCBcIkVhcnRoIEdlbmFzaVwiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW1wiV2FyZm9yZ2VkXCJdLFxyXG4gICAgICAgIGNhcGl0YWxQb3B1bGF0aW9uOiBcIjEyMEtcIixcclxuICAgICAgICBjYXBpdGFsRWxldmF0aW9uOiBcIjI4bVwiLFxyXG4gICAgICAgIGNhcGl0YWxUZW1wZXJhdHVyZTogXCIzJiM4NDUxO1wiLFxyXG4gICAgICAgIGNhcGl0YWxUYWdzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJJbmR1c3RyaWFsIFpvbmVcIl0sIDZdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIk1pbmluZyBPcHNcIl0sIDZdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlNlYXBvcnRcIl0sIDVdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlRyYWRlIEhvdHNwb3RcIl0sIDRdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkVmZmljaWVudCBQb2xpY2VcIl0sIDRdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkFjYWRlbWljIEZvY3VzXCJdLCA0XSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuT3JnYW5pemVkLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJTZXdhZ2UgU3lzdGVtXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNZWRpY2FsIEluZnJhXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuV2FsbGVkLCAyXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYFxyXG4gICAgICAgICAgICAgICAgQSBoZWFydCBvZiBzdGVlbCB0aGF0IHB1bXBzIGEgbGlmZWJsb29kIG9mIGNvYWwgYW5kIGlyb24gdGhyb3VnaG91dCB0aGUgSW1wZXJpdW0gYW5kIG91dHNpZGUgYW5kIHRoZVxyXG4gICAgICAgICAgICAgICAgb25lIG9mIHRoZSBvbmx5IHR3byBwbGFjZXMgd2hlcmUgYSB0b24gb2YgY29wcGVyIGlzIGNoZWFwZXIgdGhhbiBhIHRvbiBvZiBhcHBsZXMuIE1hc3NpdmUgZmFjdG9yaWVzIFxyXG4gICAgICAgICAgICAgICAgZXh0cmFjdCByZXNvdXJjZXMgYXQgYW4gdW5iZWxpZXZhYmxlIHJhdGUsIHdpdGggaGlnaGx5IG9yZ2FuaXplZCBpbmR1c3RyaWVzIGNvbnN1bWluZyB0aGVtIHRvIHByb2R1Y2VcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMgYW5kIG1hY2hpbmVzIHdpdGggc3VwZXJuYXR1cmFsIGVmZmljaWVuY3kuIEFuIHViZXItZWZmaWNpZW50IHBvbGljZSBkZW5pZXMgYW55IHBvc3NpYmlsaXR5XHJcbiAgICAgICAgICAgICAgICBvZiBjcmltZSBpbiB0aGlzIHN0ZWFtcHVuayBjaXR5IHdpdGggdGhlaXIgdW5jYW5ueSBhbW91bnQgb2YgaW50ZWwuXHJcbiAgICAgICAgICAgIGAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXHJcbiAgICAgICAgbGVhZGVyRGVzY3JpcHRpb246IFwiXCJcclxuICAgIH0pO1xyXG4gICAgbmV3IENvdW50cnkoe1xyXG4gICAgICAgIHBsYW5ldDogXCJUZXJyYSBQcmltYVwiLFxyXG4gICAgICAgIG5hbWU6IFwiTmFpeXVtaVwiLFxyXG4gICAgICAgIGZ1bGxOYW1lOiBcIk1vc3QgU2VyZW5lIFJlcHVibGljIG9mIE5haXl1bWlcIixcclxuICAgICAgICBjYXBpdGFsOiBcIkd1Z29uZ1wiLFxyXG4gICAgICAgIGFyZWE6IDExNyxcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIjYuME1cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIidSZXB1YmxpYydcIixcclxuICAgICAgICBwcmltYXJ5Q3VsdHVyZTogXCJZYW5cIixcclxuICAgICAgICBsZWFkZXI6IFwiQ2FwdGFpbiBZYW5nIFdlbmxpXCIsXHJcbiAgICAgICAgdGFnczogW10sXHJcbiAgICAgICAgcmFjZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJIdW1hbnNcIiwgNjddLFxyXG4gICAgICAgICAgICBbXCJIYWxmbGluZ3NcIiwgMTNdLFxyXG4gICAgICAgICAgICBbXCJHbm9tZXNcIiwgMTJdLFxyXG4gICAgICAgICAgICBbXCJIYWxmRWx2ZXNcIiwgNV0sXHJcbiAgICAgICAgICAgIFtcIkRyYWdvbkJvcm5cIiwgMl0sXHJcbiAgICAgICAgICAgIFtcIkVsdmVzXCIsIDFdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGV4b3RpY1JhY2VzOiBbXCJTYXR5clwiLCBcIk93bGluXCIsIFwiTGl6YXJkZm9sa1wiLCBcIlRhYmF4aVwiLCBcIlNoaWZ0ZXJzXCIsIFwiQ2hhbmdlbGluZ3NcIl0sXHJcbiAgICAgICAgZXhjbHVzaXZlUmFjZXM6IFtdLFxyXG4gICAgICAgIGNhcGl0YWxQb3B1bGF0aW9uOiBcIjc0S1wiLFxyXG4gICAgICAgIGNhcGl0YWxFbGV2YXRpb246IFwiNC4ybVwiLFxyXG4gICAgICAgIGNhcGl0YWxUZW1wZXJhdHVyZTogXCIyMiYjODQ1MTtcIixcclxuICAgICAgICBjYXBpdGFsVGFnczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiTWlsaXRhcnkgQ3VyZmV3XCJdLCA1XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJCcmVhdGh0YWtpbmdcIl0sIDVdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlRvdXJpc3QgSG90c3BvdFwiXSwgNF0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLkZvcnRpZmllZCwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQWNhZGVtaWMgRm9jdXNcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkhvbHkgU2l0ZXNcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkdyZWVuc1wiXSwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiU3BhY2UgQ3J1bmNoXCJdLCAxXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJDbHV0dGVyZWRcIl0sIDFdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGNhcGl0YWxTdW1tYXJ5OiBgXHJcbiAgICAgICAgICAgICAgICBSdW1vdXJlZCB0byBiZSB0aGUgbW9zdCBzZXJlbmUgcGxhY2Ugb24gVGVycmEgYW5kIGVhc2lseSB0aGUgb25lIHdpdGggdGhlIGhpZ2hlc3QgcGVyLWNhcGl0YSBhc3NldHMsIFxyXG4gICAgICAgICAgICAgICAgb25seSB0aGUgbW9zdCBpbmZsdWVudGlhbCBvciB0aGUgbW9zdCBsb3lhbCBvZiBOYWl5dW1pIGFyZSBhbGxvd2VkIGludG8gdGhpcyBmb3JiaWRkZW4gY2l0eS4gSGlzdG9yaWNhbGx5LFxyXG4gICAgICAgICAgICAgICAgbGVhZGVycyBhY3Jvc3MgZ2VuZXJhdGlvbnMgaGF2ZSBjb2Nvb25lZCB0aGVtc2VsdmVzIGluIHRoaXMgc2VjdXJlIHBhcmFkaXNlIHRvIHNodXQgdGhlbXNlbHZlcyBvZmYgdG8gdGhlIFxyXG4gICAgICAgICAgICAgICAgZGlzdHVyYmluZyByZWFsaXRpZXMgb2YgdGhlIHdvcmxkIG91dHNpZGUuIFdvcmQgaXMsIHRoYXQgdW5kZXIgdGhlIGN1cnJlbnQgcmVnaW1lLCB0aGlzIHdvbid0IHJlbWFpbiBcclxuICAgICAgICAgICAgICAgIGNhcGl0YWwgZm9yIGxvbmcuYCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICBsZWFkZXJEZXNjcmlwdGlvbjogXCJcIlxyXG4gICAgfSk7XHJcbiAgICBuZXcgQ291bnRyeSh7XHJcbiAgICAgICAgcGxhbmV0OiBcIlRlcnJhIFByaW1hXCIsXHJcbiAgICAgICAgbmFtZTogXCJDZWxhdHVtXCIsXHJcbiAgICAgICAgZnVsbE5hbWU6IFwiVW5pdGVkIFByb3ZpbmNlcyBvZiBDZWxhdHVtXCIsXHJcbiAgICAgICAgY2FwaXRhbDogXCJFbWJlcnN0b25cIixcclxuICAgICAgICBhcmVhOiAxMDksXHJcbiAgICAgICAgcG9wdWxhdGlvbjogXCIzLjJNXCIsXHJcbiAgICAgICAgZ292ZXJubWVudDogXCJLaW5nZG9tIC8gU2VyZmRvbVwiLFxyXG4gICAgICAgIHByaW1hcnlDdWx0dXJlOiBcIk5lby1Bbmdsb1wiLFxyXG4gICAgICAgIGxlYWRlcjogXCJRdWVlbiBBcmdlbGFcIixcclxuICAgICAgICB0YWdzOiBbXSxcclxuICAgICAgICByYWNlczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkh1bWFuc1wiLCA2NV0sXHJcbiAgICAgICAgICAgIFtcIkRyYWdvbkJvcm5cIiwgMTVdLFxyXG4gICAgICAgICAgICBbXCJIYWxmbGluZ3NcIiwgMTNdLFxyXG4gICAgICAgICAgICBbXCJIYWxmLU9yY3NcIiwgNF0sXHJcbiAgICAgICAgICAgIFtcIkdub21lc1wiLCAzXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBleG90aWNSYWNlczogW1wiQ2hhbmdlbGluZ3NcIiwgXCJGaXJib2xnc1wiLCBcIkhhcmVuZ29uc1wiLCBcIlNhdHlyc1wiLCBcIk9yY3NcIiwgXCJWYW1waXJlc1wiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW10sXHJcbiAgICAgICAgY2FwaXRhbFBvcHVsYXRpb246IFwiMTQyS1wiLFxyXG4gICAgICAgIGNhcGl0YWxFbGV2YXRpb246IFwiNDBtXCIsXHJcbiAgICAgICAgY2FwaXRhbFRlbXBlcmF0dXJlOiBcIjAmIzg0NTE7XCIsXHJcbiAgICAgICAgY2FwaXRhbFRhZ3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIk1lZGljYWwgSW5mcmFcIl0sIDZdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkhvbHkgU2l0ZXNcIl0sIDRdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkNoYXJtaW5nXCJdLCA0XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJBY2FkZW1pYyBGb2N1c1wiXSwgNF0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQ3JhZnRzbWFuJ3MgR3VpbGRzXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJDZW50cmFsIE1hcmtldFwiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiT3JnYW5pemVkXCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJDdWx0dXJhbCBIdWJcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkVudGVydGFpbm1lbnQgSW5mcmFcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZy5PcGVuLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJMYXdsZXNzXCJdLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYFxyXG4gICAgICAgICAgICAgICAgQSBuZXdseSBmb3VuZGVkIGNpdHkgYnkgUXVlZW4gQXJnZWxhIGhlcnNlbGYuIFRoaXMgY2l0eSBoYXMgZ3Jvd24gdG8gbWlycm9yIGhlciBwaGlsb3NvcGh5IGFuZCBiZWNvbWUgdGhlXHJcbiAgICAgICAgICAgICAgICBncmVhdGVzdCBjZW50ZXIgb2YgbWVkaWNhbCByZXNlYXJjaCBvbiBUZXJyYS4gSGVhbGVycyBhbmQgZG9jdG9ycyBmcm9tIGhlcmUgYXJlIHZhbHVlZCB3b3JsZHdpZGUsIGZvciBcclxuICAgICAgICAgICAgICAgIHRoaXMgYXRtb3NwaGVyZSBvZiBmcmVlZG9tIGFuZCBjb21mb3J0IGFsb25nIHdpdGggdGhlIGJlc3Qgc3RhbmRhcmRzIG9mIGh5Z2llbmUgYW5kIGJlYXV0eSBjdWx0aXZhdGVzIFxyXG4gICAgICAgICAgICAgICAgdGhlIHZlcnkgYmVzdCBvZiB0aGVtLiBIb3dldmVyLCBmb3IgYWxsIGl0cyBoYXBwaW5lc3MsIHN1Y2ggdW5yZXN0cmFpbmVkIGZyZWVkb20gZG9lcyBhdHRyYWN0IHRoZSBcclxuICAgICAgICAgICAgICAgIHVuc2NydXB1bG91cy4uLmAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXHJcbiAgICAgICAgbGVhZGVyRGVzY3JpcHRpb246IFwiXCJcclxuICAgIH0pO1xyXG4gICAgbmV3IENvdW50cnkoe1xyXG4gICAgICAgIHBsYW5ldDogXCJUZXJyYSBQcmltYVwiLFxyXG4gICAgICAgIG5hbWU6IFwiQWVnaXJcIixcclxuICAgICAgICBmdWxsTmFtZTogXCJEdWNoeSBvZiBBZWdpclwiLFxyXG4gICAgICAgIGNhcGl0YWw6IFwiRWxkZmphbGxhIChwcm9uLiBVbGQtRmlhLVRsYSlcIixcclxuICAgICAgICBhcmVhOiA2NyxcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIjIuNE1cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIkFyaXN0b2NyYWN5IC8gTWF0cmlhcmNoeVwiLFxyXG4gICAgICAgIHByaW1hcnlDdWx0dXJlOiBcIlNrYWxkaWNcIixcclxuICAgICAgICBsZWFkZXI6IFwiSmFybCBHbGFkaWlhXCIsXHJcbiAgICAgICAgdGFnczogW10sXHJcbiAgICAgICAgcmFjZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJIdW1hbnNcIiwgNzJdLFxyXG4gICAgICAgICAgICBbXCJIYWxmLUVsdmVzXCIsIDE0XSxcclxuICAgICAgICAgICAgW1wiU2VhLUVsdmVzXCIsIDhdLFxyXG4gICAgICAgICAgICBbXCJTaGlmdGVyc1tBcXVhdGljXVwiLCA2XSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBleG90aWNSYWNlczogW1wiVHJpdG9uXCIsIFwiV2F0ZXIgR2VuYXNpXCIsIFwiWXVhbi10aVwiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW1wiU2VhYm9yblwiXSxcclxuICAgICAgICBjYXBpdGFsUG9wdWxhdGlvbjogXCIxN0tcIixcclxuICAgICAgICBjYXBpdGFsRWxldmF0aW9uOiBcIjIwNzFtXCIsXHJcbiAgICAgICAgY2FwaXRhbFRlbXBlcmF0dXJlOiBcIi0yJiM4NDUxO1wiLFxyXG4gICAgICAgIGNhcGl0YWxUYWdzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJCcmVhdGh0YWtpbmdcIl0sIDVdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlJlc2VhcmNoIENlbnRyZVwiXSwgNV0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiSG9seSBTaXRlc1wiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiTGF3bGVzc1wiXSwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLlVuZGVmZW5kZWQsIDFdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGNhcGl0YWxTdW1tYXJ5OiBgXHJcbiAgICAgICAgICAgICAgICBCdWlsdCB1cG9uIHRoZSB3YXJtLCBmZXJ0aWxlIGFuZCBtaW5lcmFsIHJpY2ggbGFuZHMgb2YgYW4gb2xkIHZvbGNhbm8sIHRoaXMgYmVhdXRpZnVsIGxpdHRsZSBjaXR5IGlzIGFuIFxyXG4gICAgICAgICAgICAgICAgb2FzaXMgaW4gdGhlIGZyaWdpZCB3YXN0ZWxhbmRzIGFyb3VuZCBpdC4gWWV0IGxpZmUgaW4gdGhlIG1pZGRsZSBvZiBub3doZXJlIGlzIG5vdCBmb3IgZXZlcnlvbmUsIGFuZCBzbyBcclxuICAgICAgICAgICAgICAgIGZldyBjaG9vc2UgdG8gbGl2ZSBoZXJlLiBGZXdlciBzdGlsbCBhcmUgZW5jb3VyYWdlZCB0bywgZm9yIHRob3NlIHRoYXQgbGl2ZSBoZXJlIGNvbWUgdG8gYmUgYXdhcmUgb2YgY2VydGFpblxyXG4gICAgICAgICAgICAgICAgc2VjcmV0cyBiZXN0IGxlZnQgdW50b2xkIC0gYW5kIGtub3cgdGhhdCB0aGUgc2Nob2xhcnMgdGhhdCBwcm9wZWwgdGhlIHJlc2VhcmNoIGhlcmUgZG8gbm90IGFsbCBjb21lIGZyb20gVGVycmEuLi5gLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxyXG4gICAgICAgIGxlYWRlckRlc2NyaXB0aW9uOiBcIlwiXHJcbiAgICB9KTtcclxuICAgIG5ldyBDb3VudHJ5KHtcclxuICAgICAgICBwbGFuZXQ6IFwiVGVycmEgUHJpbWFcIixcclxuICAgICAgICBuYW1lOiBcIkNhbGVudGF1clwiLFxyXG4gICAgICAgIGZ1bGxOYW1lOiBcIlNlcmVuZSBWYWxsZXlzIG9mIENhbGVudGF1clwiLFxyXG4gICAgICAgIGNhcGl0YWw6IFwiQW5ud3luXCIsXHJcbiAgICAgICAgYXJlYTogNTcsXHJcbiAgICAgICAgcG9wdWxhdGlvbjogXCIyLjFNXCIsXHJcbiAgICAgICAgZ292ZXJubWVudDogXCJDb3VuY2lsXCIsXHJcbiAgICAgICAgcHJpbWFyeUN1bHR1cmU6IFwiRm9laG5cIixcclxuICAgICAgICBsZWFkZXI6IFwiTGFkeSBTaGlhZGhhbFwiLFxyXG4gICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgIHJhY2VzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiRWx2ZXNcIiwgNjZdLFxyXG4gICAgICAgICAgICBbXCJIYWxmLUVsdmVzXCIsIDE0XSxcclxuICAgICAgICAgICAgW1wiSHVtYW5zXCIsIDEwXSxcclxuICAgICAgICAgICAgW1wiSGFsZmxpbmdzXCIsIDZdLFxyXG4gICAgICAgICAgICBbXCJHbm9tZXNcIiwgNF0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZXhvdGljUmFjZXM6IFtcIkVsYWRyaW5cIiwgXCJTYXR5clwiLCBcIk93bGluXCIsIFwiR29ibGluc1wiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW1wiRmFpcmllc1wiXSxcclxuICAgICAgICBjYXBpdGFsUG9wdWxhdGlvbjogXCI1OUtcIixcclxuICAgICAgICBjYXBpdGFsRWxldmF0aW9uOiBcIjI3MW1cIixcclxuICAgICAgICBjYXBpdGFsVGVtcGVyYXR1cmU6IFwiOCYjODQ1MTtcIixcclxuICAgICAgICBjYXBpdGFsVGFnczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLkJyZWF0aHRha2luZywgNl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLkltcHJlZ25hYmxlLCA2XSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuR3JlZW5zLCA1XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNYWZpYSBDb250cm9sXCJdLCA1XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNaWxpdGFyeSBDdXJmZXdcIl0sIDRdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIk1hZ2UgUHJlc2VuY2VcIl0sIDNdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZy5Pcmdhbml6ZWQsIDNdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZy5TcHJhd2xpbmcsIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkNyYWZ0c21hbidzIEd1aWxkc1wiXSwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQ3VsdHVyYWwgSHViXCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJGcmVzaCBXYXRlclwiXSwgMl0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgY2FwaXRhbFN1bW1hcnk6IGBcclxuICAgICAgICAgICAgICAgIEEgY2l0eSB0aGF0IGJyaWRnZXMgYmV0d2VlbiB0aGUgbWF0ZXJpYWwgcGxhbmUgYW5kIHRoZSBmZXl3aWxkLCBhbmQgeWV0IGJlbG9uZ3MgdG8gbmVpdGhlci4gVGhlIG9ubHkgd2F5IFxyXG4gICAgICAgICAgICAgICAgdG8gYWNjZXNzIGl0IGlzIHZpYSBhIHBlcnBlbmRpY3VsYXJpdHkgb2YgdW5jZXJ0YWluIGxvY2F0aW9uLiBUaGUgZmV3IG5vbi1lbHZlcyB3aG8gaGF2ZSBiZWVuIHRoZXJlIGhhdmVcclxuICAgICAgICAgICAgICAgIGJlZW4gZm9yZXZlciBlbnJhcHR1cmVkLiBEZXBpY3Rpb25zIGRlc2NyaWJlIGl0IGFzIGEgc3VwZXJuYXR1cmFsIGNpdHkgb2YgZXRlcm5hbCB5b3V0aCwgYmVhdXR5LCBoZWFsdGggXHJcbiAgICAgICAgICAgICAgICBhbmQgYWJ1bmRhbmNlLCBvZiBzb3BoaXN0aWNhdGVkIG1hcmJsZSBhcmNoaXRlY3R1cmUgd2l0aCBsdXNoIGdyZWVuIHZpbmVzIGFuZCB2aXZpZCBmbG93ZXJzLiBZZXQgc29tZSBcclxuICAgICAgICAgICAgICAgIHdobyd2ZSBjb21lIGJhY2sgZG8gbm90IGZlZWwgcGFydGljdWxhcmx5IGluY2xpbmVkIHRvIHJldHVybiB0aGVyZS4uLmAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXHJcbiAgICAgICAgbGVhZGVyRGVzY3JpcHRpb246IFwiXCJcclxuICAgIH0pO1xyXG4gICAgbmV3IENvdW50cnkoe1xyXG4gICAgICAgIHBsYW5ldDogXCJUZXJyYSBQcmltYVwiLFxyXG4gICAgICAgIG5hbWU6IFwiVmlubGFuZFwiLFxyXG4gICAgICAgIGZ1bGxOYW1lOiBcIkZyZWUgVGVycml0b3J5IG9mIFZpbmxhbmRcIixcclxuICAgICAgICBjYXBpdGFsOiBcIkZyaWhldFwiLFxyXG4gICAgICAgIGFyZWE6IDU3LFxyXG4gICAgICAgIHBvcHVsYXRpb246IFwiMi4xTVwiLFxyXG4gICAgICAgIGdvdmVybm1lbnQ6IFwiRnJlZSBUZXJyaXRvcnlcIixcclxuICAgICAgICBwcmltYXJ5Q3VsdHVyZTogXCJSdXMgLyBQZWdheiAvIE5lby1Bbmdsb1wiLFxyXG4gICAgICAgIGxlYWRlcjogXCJcIixcclxuICAgICAgICB0YWdzOiBbXSxcclxuICAgICAgICByYWNlczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkh1bWFuc1wiLCA3MF0sXHJcbiAgICAgICAgICAgIFtcIkhhbGZsaW5nc1wiLCAyMV0sXHJcbiAgICAgICAgICAgIFtcIkdub21lc1wiLCA5XSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBleG90aWNSYWNlczogW1wiRmlyYm9sZ3NcIiwgXCJUcm9sbHNcIiwgXCJHb2JsaW5zXCIsIFwiS29ib2xkc1wiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW10sXHJcbiAgICAgICAgY2FwaXRhbFBvcHVsYXRpb246IFwiMTZLXCIsXHJcbiAgICAgICAgY2FwaXRhbEVsZXZhdGlvbjogXCI1Nm1cIixcclxuICAgICAgICBjYXBpdGFsVGVtcGVyYXR1cmU6IFwiNCYjODQ1MTtcIixcclxuICAgICAgICBjYXBpdGFsVGFnczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQ2VudHJhbCBNYXJrZXRcIl0sIDNdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkNyYWZ0c21hbidzIEd1aWxkc1wiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiRW50ZXJ0YWlubWVudCBJbmZyYVwiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiRnJlc2ggV2F0ZXJcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkdyZWVuc1wiXSwgMl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQ2hhcm1pbmdcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZy5VbmRlZmVuZGVkLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYFxyXG4gICAgICAgICAgICAgICAgUG9zc2libHkgdGhlIG1vc3QgdW5hc3N1bWluZyBjYXBpdGFsIG9mIFRlcnJhIFByaW1hLCB0aGUgY2l0eSBvZiBsaWJlcnR5IGlzIG9wZW4gdG8gYWxsLCB5ZXQgZG9lc24ndCBcclxuICAgICAgICAgICAgICAgIG1ha2UgYW55IGJvdyB1bmRlcm5lYXRoIGl0cyBncmFuZGV1ci4gVGhlIGxhY2sgb2YgYXV0aG9yaXR5IG1lYW5zIG5vIHJlYWwgcG93ZXIgaXMgZ2F0aGVyZWQgaW4gdGhlIFxyXG4gICAgICAgICAgICAgICAgY2FwaXRhbCwgYW5kIHNvIGVjb25vbXksIGFuZCBsaWZlLCBoZXJlIGlzIHNsb3cgYW5kIHJlbGF4ZWQuIFlldCB0aGUgZmV3IHdobyBkbyBsaXZlIGhlcmUgd291bGRuJ3QgbGVhdmVcclxuICAgICAgICAgICAgICAgIGJlaGluZCB0aGUgZmFtaWx5IGxpa2UgYXRtb3NwaGVyZSBwbHVzIHRoZSBlYXNlIG9mIGF2YWlsYWJpbGl0eSBvZiBhIGNhcGl0YWwgZm9yIGFueXRoaW5nIGVsc2UgaW4gdGhlIFxyXG4gICAgICAgICAgICAgICAgd29ybGQuYCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICBsZWFkZXJEZXNjcmlwdGlvbjogXCJcIlxyXG4gICAgfSk7XHJcbiAgICBuZXcgQ291bnRyeSh7XHJcbiAgICAgICAgcGxhbmV0OiBcIlRlcnJhIFByaW1hXCIsXHJcbiAgICAgICAgbmFtZTogXCJBbHRhdmFcIixcclxuICAgICAgICBmdWxsTmFtZTogXCJXaWxkIEhpbnRlcmxhbmRzIG9mIEFsdGF2YVwiLFxyXG4gICAgICAgIGNhcGl0YWw6IFwiU2FsIFZlbml0b1wiLFxyXG4gICAgICAgIGFyZWE6IDEwMyxcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIjAuM01cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIkFuYXJjaHlcIixcclxuICAgICAgICBwcmltYXJ5Q3VsdHVyZTogXCJMaWJlcmkgLyBTa2FsZGljIC8gUm9tYVwiLFxyXG4gICAgICAgIGxlYWRlcjogXCJcIixcclxuICAgICAgICB0YWdzOiBbXSxcclxuICAgICAgICByYWNlczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkh1bWFuc1wiLCA5MF0sXHJcbiAgICAgICAgICAgIFtcIkRyYWdvbkJvcm5cIiwgNV0sXHJcbiAgICAgICAgICAgIFtcIlRpZWZsaW5nc1wiLCA0XSxcclxuICAgICAgICAgICAgW1wiQWlyIEdlbmFzaVwiLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBleG90aWNSYWNlczogW1wiR29ibGluc1wiLCBcIkhvYmdvYmxpbnNcIiwgXCJUb3J0bGVcIl0sXHJcbiAgICAgICAgZXhjbHVzaXZlUmFjZXM6IFtcIlZlZGFsa2VuXCJdLFxyXG4gICAgICAgIGNhcGl0YWxQb3B1bGF0aW9uOiBcIjRLXCIsXHJcbiAgICAgICAgY2FwaXRhbEVsZXZhdGlvbjogXCI1Nm1cIixcclxuICAgICAgICBjYXBpdGFsVGVtcGVyYXR1cmU6IFwiNCYjODQ1MTtcIixcclxuICAgICAgICBjYXBpdGFsVGFnczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLlJ1aW5zLCA2XSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuSGFyYm9yLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWcuT3JnYW5pemVkLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNYWZpYSBDb250cm9sXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJVbmRlcndvcmxkXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJMYXdsZXNzXCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJTZXdhZ2UgU3lzdGVtXCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJGcmVzaCBXYXRlclwiXSwgMV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgY2FwaXRhbFN1bW1hcnk6IGBcclxuICAgICAgICAgICAgICAgIE5vdCBtb3JlIHRoYW4gYSBjZW50dXJ5IGFnbyBhIGNpdHkgdG8gcml2YWwgT3J0dXMsIGFsbCB0aGF0IHJlbWFpbnMgb2YgdGhpcyBhcnJvZ2FudCBjYXBpdGFsIGFyZSBydWlucyBhbmRcclxuICAgICAgICAgICAgICAgIHNoYXR0ZXJlZCBkcmVhbXMuIFRoZXkgZGFyZWQgdG8gdGFrZSBvbiB0aG9zZSB0aGF0IG11c3Qgbm90IGJlIHNwb2tlbiBvZiwgYW5kIGFsbCB0aGF0IHJlbWFpbmVkIGZyb20gdGhhdFxyXG4gICAgICAgICAgICAgICAgd2FzIG1lcmUgZm9kZGVyIGZvciBzY2F2ZW5nZXJzIC0gY3JpbWluYWxzLCBwaXJhdGVzIGFuZCByaXZhbCBzdGF0ZXMgYWxpa2UuIE5vdyB0aGF0IHRoZSBjb3Jwc2UgaGFzIGJlZW5cclxuICAgICAgICAgICAgICAgIHBpY2tlZCB0byB0aGUgYm9uZSwgYSBmZXcgcmVmdWdlZXMgYW5kIGhpbnRlcmxhbmQgdHJpYmVzbWVuIHN0aWxsIGZpbmQgc2hlbHRlciBhbmQgY29tZm9ydCBpbiB0aGUgcnVpbnMsXHJcbiAgICAgICAgICAgICAgICBzdGlsbCBncmFuZCBhbmQgaW50aW1hdGluZyBldmVuIGluIGRlY2F5Li4uXHJcbiAgICAgICAgICAgIGAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXHJcbiAgICAgICAgbGVhZGVyRGVzY3JpcHRpb246IFwiXCJcclxuICAgIH0pO1xyXG4gICAgbmV3IENvdW50cnkoe1xyXG4gICAgICAgIHBsYW5ldDogXCJUZXJyYSBQcmltYVwiLFxyXG4gICAgICAgIG5hbWU6IFwiTmlkYXZlbGxpclwiLFxyXG4gICAgICAgIGZ1bGxOYW1lOiBcIkRlcHRocyBvZiBOaWRhdmVsbGlyXCIsXHJcbiAgICAgICAgY2FwaXRhbDogXCJJZGF2b2xsXCIsXHJcbiAgICAgICAgYXJlYTogNjEsXHJcbiAgICAgICAgcG9wdWxhdGlvbjogXCIyLjlNXCIsXHJcbiAgICAgICAgZ292ZXJubWVudDogXCJLaW5nZG9tXCIsXHJcbiAgICAgICAgcHJpbWFyeUN1bHR1cmU6IFwiRHVyaW5uXCIsXHJcbiAgICAgICAgbGVhZGVyOiBcIlF1ZWVuIERhZ2ZpZFwiLFxyXG4gICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgIHJhY2VzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiRHdhcnZlc1wiLCA2NF0sXHJcbiAgICAgICAgICAgIFtcIkRyb3dcIiwgMjBdLFxyXG4gICAgICAgICAgICBbXCJUaWVmbGluZ3NcIiwgOF0sXHJcbiAgICAgICAgICAgIFtcIkRlZXAgR25vbWVzXCIsIDZdLFxyXG4gICAgICAgICAgICBbXCJIdW1hbnNcIiwgMl0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZXhvdGljUmFjZXM6IFtcIkR1ZXJnYXJcIiwgXCJGaXJlIEdlbmFzaVwiLCBcIktlbmt1XCIsIFwiT3Jjc1wiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW10sXHJcbiAgICAgICAgY2FwaXRhbFBvcHVsYXRpb246IFwiOTBLXCIsXHJcbiAgICAgICAgY2FwaXRhbEVsZXZhdGlvbjogXCItMTIyMm1cIixcclxuICAgICAgICBjYXBpdGFsVGVtcGVyYXR1cmU6IFwiNDMmIzg0NTE7XCIsXHJcbiAgICAgICAgY2FwaXRhbFRhZ3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbQ2l0eVRhZy5VbmRlcmdyb3VuZCwgNl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiTWluaW5nIE9wc1wiXSwgNl0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLkltcHJlZ25hYmxlLCA1XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJTcGFjZSBDcnVuY2hcIl0sIDVdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkNsdXR0ZXJlZFwiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiSW5kdXN0cmlhbCBab25lXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJPcmdhbml6ZWQgQ3JpbWVcIl0sIDNdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlVuZGVyd29ybGRcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIkxhd2xlc3NcIl0sIDJdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlNsdW1zXCJdLCAyXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYFxyXG4gICAgICAgICAgICAgICAgVGhlIGVudHJhbmNlIHRvIHRoZSB1bmRlcmRhcmssIHZpc2l0b3JzIHRvIHRoZSBjaXR5IG9mIElkYXZvbGwgYXJlIGdyZWV0ZWQgYnkgaXRzIGhvdCBhbmQgYWNyaWQgYWlyLCBcclxuICAgICAgICAgICAgICAgIGZvbGxvd2VkIGJ5IHRoZSBhbmdyeSByZWQgZ2xhcmUgb2YgZXRlcm5hbGx5IGJ1cm5pbmcgc21lbHRlcnMuIFdpdGggaXRzIHBhcmFub2lkIGluaGFiaXRhbnRzLCB0b2lsaW5nIFxyXG4gICAgICAgICAgICAgICAgZW5kbGVzc2x5IGFuZCBvcGVyYXRpbmcgcnV0aGxlc3NseSBpbiBhIGNpdHkgdGhhdCBoYXMgbmV2ZXIgc2VlbiBzdW5saWdodCwgSWRhdm9sbCBpcyB0aGUgbGVhc3QgXHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmxlIHNldHRsZW1lbnQgb24gVGVycmEgLSBidXQgaXQgaXMgYWNjZXNzaWJsZS4gTXVjaCBtb3JlIHRoYW4gY2FuIGJlIHNhaWQgZm9yIGFueXRoaW5nIGluIHRoZSBcclxuICAgICAgICAgICAgICAgIHBhc3NhZ2VzIHRoYXQgZGVzY2VuZCBiZW5lYXRoIGl0Li4uIHBhc3NhZ2VzIHJ1bW91cmVkIHRvIGJlIHRoZSBob21lIG9mIGdyZWF0IGFuZCB0ZXJyaWJsZSBkZW1vbiBsb3JkcywgXHJcbiAgICAgICAgICAgICAgICBwYXNzYWdlcyBydW1vdXJlZCB0byBiZSB0aGUgb25seSB3YXkgaW50byBUZXJyYSBJbmNvZ25pdGEuYCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICBsZWFkZXJEZXNjcmlwdGlvbjogXCJcIlxyXG4gICAgfSk7XHJcbiAgICBuZXcgQ291bnRyeSh7XHJcbiAgICAgICAgcGxhbmV0OiBcIlRlcnJhIFByaW1hXCIsXHJcbiAgICAgICAgbmFtZTogXCJHYXVsbGVcIixcclxuICAgICAgICBmdWxsTmFtZTogXCJVbml0ZWQgQ2xhbnMgb2YgR2F1bGxlXCIsXHJcbiAgICAgICAgY2FwaXRhbDogXCJMdXRldGlhXCIsXHJcbiAgICAgICAgYXJlYTogNTIsXHJcbiAgICAgICAgcG9wdWxhdGlvbjogXCI0LjBNXCIsXHJcbiAgICAgICAgZ292ZXJubWVudDogXCJGcmVlIFRyaWJlc1wiLFxyXG4gICAgICAgIHByaW1hcnlDdWx0dXJlOiBcIkhleGVuZnVyc3RcIixcclxuICAgICAgICBsZWFkZXI6IFwiQ2hpZWYgVmVyY2luZ2V0b3JpeFwiLFxyXG4gICAgICAgIHRhZ3M6IFtdLFxyXG4gICAgICAgIHJhY2VzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiSHVtYW5zXCIsIDg4XSxcclxuICAgICAgICAgICAgW1wiU2hpZnRlcnNcIiwgMTJdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGV4b3RpY1JhY2VzOiBbXCJBYXJha29jcmFcIiwgXCJPd2xpblwiLCBcIlRhYmF4aVwiLCBcIkNoYW5nZWxpbmdcIiwgXCJLYWxhc2h0YXJcIiwgXCJGaXJlIEdlbmFzaVwiXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW1wiV2VyZXdvbHZlc1wiXSxcclxuICAgICAgICBjYXBpdGFsUG9wdWxhdGlvbjogXCIyMTdLXCIsXHJcbiAgICAgICAgY2FwaXRhbEVsZXZhdGlvbjogXCIxOG1cIixcclxuICAgICAgICBjYXBpdGFsVGVtcGVyYXR1cmU6IFwiMTImIzg0NTE7XCIsXHJcbiAgICAgICAgY2FwaXRhbFRhZ3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlRyYWRlIEhvdHNwb3RcIl0sIDVdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZ1tcIlNwYWNlIENydW5jaFwiXSwgNV0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiVG91cmlzdCBIb3RzcG90XCJdLCA1XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJFbnRlcnRhaW5tZW50IEluZnJhXCJdLCA0XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJBY2FkZW1pYyBGb2N1c1wiXSwgNF0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnLkZvcnRpZmllZCwgNF0sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiSGFyYm9yXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJMYXdsZXNzXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJGcmVzaCBXYXRlclwiXSwgMl0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgY2FwaXRhbFN1bW1hcnk6IGBcclxuICAgICAgICAgICAgICAgIEEgbGFyZ2UgYW5kIGJ1c3RsaW5nIGNpdHkgb2YgYSBsYXJnZSBhbmQgYnVzdGxpbmcgY291bnRyeSwgaXQgbWlycm9ycyB0aGUgc2VyaW91cyBjb25nZXN0aW9uIGFuZCBcclxuICAgICAgICAgICAgICAgIG92ZXJwb3B1bGF0aW9uIGV2aWRlbnQgaW4gdGhlIHJlc3Qgb2YgdGhlIGNvdW50cnkuIEZvciB0aG9zZSBmcm9tIG91dHNpZGUsIHJlYWNoaW5nIGZyb20gdGhlaXIgdGF2ZXJuIHRvIFxyXG4gICAgICAgICAgICAgICAgdGhlaXIgZGVzdGluYXRpb24gY2FuIGVhc2lseSB0YWtlIGhvdXJzIC0geWV0IHRob3NlIHdobyBrbm93IHRoZWlyIHdheSBhYm91dCBrbm93IHRoaXMgdG8gYmUgb25lIG9mIHRoZVxyXG4gICAgICAgICAgICAgICAgbW9zdCByZXNvdXJjZWZ1bCBwbGFjZXMgb24gVGVycmEuIFRoZXJlIGFyZSBydW1vdXJzIHRoYXQgYSBtYXNzIHJlbm92YXRpb24gaXMgaW4gdGhlIHdvcmtzLi4uYCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICBsZWFkZXJEZXNjcmlwdGlvbjogXCJcIlxyXG4gICAgfSk7XHJcbiAgICBuZXcgQ291bnRyeSh7XHJcbiAgICAgICAgcGxhbmV0OiBcIlRlcnJhIFByaW1hXCIsXHJcbiAgICAgICAgbmFtZTogXCJSZWluZGFsXCIsXHJcbiAgICAgICAgZnVsbE5hbWU6IFwiU25vd3kgcmVhbG1zIG9mIFJlaW5kYWxcIixcclxuICAgICAgICBjYXBpdGFsOiBcIldpdHN0YWRcIixcclxuICAgICAgICBhcmVhOiAzOSxcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIjAuN01cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIkZlZGVyYXRpb25cIixcclxuICAgICAgICBwcmltYXJ5Q3VsdHVyZTogXCJSb21hXCIsXHJcbiAgICAgICAgbGVhZGVyOiBcIlNpciBMdWNpdXMgQXJ0b3JpdXMgQ2FzdHVzXCIsXHJcbiAgICAgICAgdGFnczogW10sXHJcbiAgICAgICAgcmFjZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJIdW1hbnNcIiwgOTBdLFxyXG4gICAgICAgICAgICBbXCJEcmFnb25Cb3JuXCIsIDVdLFxyXG4gICAgICAgICAgICBbXCJIYWxmLUVsdmVzXCIsIDJdLFxyXG4gICAgICAgICAgICBbXCJHbm9tZXNcIiwgMV0sXHJcbiAgICAgICAgICAgIFtcIkhhbGZsaW5nc1wiLCAxXSxcclxuICAgICAgICAgICAgW1wiRWx2ZXNcIiwgMV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZXhvdGljUmFjZXM6IFtcIkFhc2ltYXJcIiwgXCJFbGFkcmluXCIsIFwiR29ibGluXCIsIFwiS2FsYXNodGFyXCIsIFwiQ2hhbmdlbGluZ3NcIl0sXHJcbiAgICAgICAgZXhjbHVzaXZlUmFjZXM6IFtdLFxyXG4gICAgICAgIGNhcGl0YWxQb3B1bGF0aW9uOiBcIjY3S1wiLFxyXG4gICAgICAgIGNhcGl0YWxFbGV2YXRpb246IFwiOTE4bVwiLFxyXG4gICAgICAgIGNhcGl0YWxUZW1wZXJhdHVyZTogXCItOCYjODQ1MTtcIixcclxuICAgICAgICBjYXBpdGFsVGFnczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiQnJlYXRodGFraW5nXCJdLCA2XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNYWdlIFByZXNlbmNlXCJdLCA1XSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJBY2FkZW1pYyBGb2N1c1wiXSwgM10sXHJcbiAgICAgICAgICAgIFtDaXR5VGFnW1wiR3JlZW5zXCJdLCAzXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJIb2x5IFNpdGVzXCJdLCAyXSxcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJNZXJjaGFudCBHdWlsZHNcIl0sIDFdLFxyXG4gICAgICAgICAgICBbQ2l0eVRhZy5VbmRlZmVuZGVkLCAxXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYFxyXG4gICAgICAgICAgICAgICAgTXVjaCBsaWtlIHRoZSBsYW5kcyB0byB3aGljaCBpdCBiZWxvbmdzLCB0aGlzIHRvd24sIGVuY2hhbnRpbmcgaW4gaXRzIGJlYXV0aWZ1bCwgcHVyZSBhbmQgcGVyZW5uaWFsIHNub3csXHJcbiAgICAgICAgICAgICAgICBpcyBhIHNhZmUgaGF2ZW4gZnJvbSBhbGwgdGhlIGNvbmZsaWN0cyBpbiB0ZXJyYS4gT3JpZ2luYWxseSBpbmhhYml0ZWQgYnkgcmVmdWdlZXMgdGlyZWQgb2Ygd2FyIG9yIHNsYXZlc1xyXG4gICAgICAgICAgICAgICAgZXNjYXBpbmcgdG8gZnJlZWRvbSwgZmV3IHBlb3BsZSBub3cgd2lzaCB0byBjb21lIGhlcmUsIGJ1dCB0aG9zZSB3aG8gZG8gY29tZSBmaW5kIGNvbWZvcnQgYW5kIHBlYWNlIGxpa2VcclxuICAgICAgICAgICAgICAgIG5vIHdoZXJlIGVsc2UuIERlc3BpdGUgYmVpbmcgc29mdCBzcG9rZW4gYW5kIGtpbmQgdG8gYSBmYXVsdCwgdGhlIHBlb3BsZSBoZXJlIHdvdWxkIHdvcmsgaGFyZGVyIHRoYW4gYWxsIFxyXG4gICAgICAgICAgICAgICAgb3RoZXJzIHRvIHNlY3VyZSB0aGUgc2FpZCBjb21mb3J0LiBBbmQgdG8gc2VjdXJlIHRoZSBzYWlkIHBlYWNlLi4uICAgICAgICAgICAgYCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICBsZWFkZXJEZXNjcmlwdGlvbjogXCJcIlxyXG4gICAgfSk7XHJcbiAgICBuZXcgQ291bnRyeSh7XHJcbiAgICAgICAgcGxhbmV0OiBcIlRlcnJhIFByaW1hXCIsXHJcbiAgICAgICAgbmFtZTogXCJLaW5nc0ZhbGxcIixcclxuICAgICAgICBmdWxsTmFtZTogXCJDdXJzZWQgUGxhaW5zIG9mIEtpbmdzRmFsbFwiLFxyXG4gICAgICAgIGNhcGl0YWw6IFwiTmVjcm9wb2xpc1wiLFxyXG4gICAgICAgIGFyZWE6IDQwLFxyXG4gICAgICAgIHBvcHVsYXRpb246IFwiMC4yTVwiLFxyXG4gICAgICAgIGdvdmVybm1lbnQ6IFwiQW5hcmNoeVwiLFxyXG4gICAgICAgIHByaW1hcnlDdWx0dXJlOiBcIkhleGVuZnVyc3RcIixcclxuICAgICAgICBsZWFkZXI6IFwiXCIsXHJcbiAgICAgICAgdGFnczogW10sXHJcbiAgICAgICAgcmFjZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJIdW1hbnNcIiwgODldLFxyXG4gICAgICAgICAgICBbXCJUaWVmbGluZ3NcIiwgMTFdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGV4b3RpY1JhY2VzOiBbXCJTaGFkYXItS2FpXCIsIFwiS2FsYXNodGFyXCIsIFwiVmFtcGlyZXNcIiwgXCJIZXhibG9vZHNcIiwgXCJSZWJvcm5cIl0sXHJcbiAgICAgICAgZXhjbHVzaXZlUmFjZXM6IFtdLFxyXG4gICAgICAgIGNhcGl0YWxQb3B1bGF0aW9uOiBcIjAgP1wiLFxyXG4gICAgICAgIGNhcGl0YWxFbGV2YXRpb246IFwiMzUybVwiLFxyXG4gICAgICAgIGNhcGl0YWxUZW1wZXJhdHVyZTogXCI3JiM4NDUxO1wiLFxyXG4gICAgICAgIGNhcGl0YWxUYWdzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW0NpdHlUYWdbXCJHaG9zdCBUb3duXCJdLCAxXVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGNhcGl0YWxTdW1tYXJ5OiBgXHJcbiAgICAgICAgICAgICAgICBPbmNlIGxvbmcgYWdvLCB0aGVzZSBidWlsZGluZ3MgdXNlZCB0byBiZSBhIGZsb3VyaXNoaW5nIGNpdHkuIEhvd2V2ZXIsIGxpa2UgdGhlIHJlc3Qgb2YgdGhlIHBsYWlucyAtIHdob3NvZXZlclxyXG4gICAgICAgICAgICAgICAgaGVsZCBpdCBmb3VuZCB0aGVtc2VsdmVzIG9uIHRoZSBsb29zaW5nIHNpZGUgb2YgYSBwYXJ0aWN1bGFybHkgYnJ1dGFsIHdhci4gVGhlc2UgZW1wdHkgc3RyZWV0cyBoYXZlXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VkIGhhbmRzIGRvemVucyBvZiB0aW1lcyAtIGVhY2ggdGltZSBpbnZvbHZpbmcgbWFzcyBicnV0YWxpdHksIHBsdW5kZXIgYW5kIHNsYXVnaHRlci4gTm93LCBub25lIFxyXG4gICAgICAgICAgICAgICAgZGFyZSB2ZW50dXJlIGhlcmUgYW5kIG9ubHkgdGVycmlibGUgZ2hvc3RzIGhhdW50IHRoaXMgbWFzcyBncmF2ZSBvZiBhIGNhcGl0YWwuIFNvbWUgbWFkbWVuIGhhdmUgcmVwb3J0ZWRcclxuICAgICAgICAgICAgICAgIHNlZWluZyB0aGUgV2l0Y2ggS2luZyBvZiBhbmNpZW50IGxvcmUgZ2xpZGUgdGhlIHN0cmVldHMgZXZlbiB0b2RheSwgZGFuY2luZyBhIHRlcnJpYmxlIGRhbmNlIGFsb25nIHdpdGggXHJcbiAgICAgICAgICAgICAgICBzZXZlcmFsIGh1bWFuLXB1cHBldHMgd2hvIHRoZXkgc2FpZCBjb21wcmlzZSBoaXMgdHJvdXBlLi4uYCxcclxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIixcclxuICAgICAgICBsZWFkZXJEZXNjcmlwdGlvbjogXCJcIlxyXG4gICAgfSk7XHJcbiAgICBuZXcgQ291bnRyeSh7XHJcbiAgICAgICAgcGxhbmV0OiBcIlRlcnJhIFByaW1hXCIsXHJcbiAgICAgICAgbmFtZTogXCJUZXJyYSBJbmNvZ25pdGFcIixcclxuICAgICAgICBmdWxsTmFtZTogXCJUZXJyYSBJbmNvZ25pdGFcIixcclxuICAgICAgICBjYXBpdGFsOiBcIj9cIixcclxuICAgICAgICBhcmVhOiA3NSxcclxuICAgICAgICBwb3B1bGF0aW9uOiBcIj9cIixcclxuICAgICAgICBnb3Zlcm5tZW50OiBcIj9cIixcclxuICAgICAgICBwcmltYXJ5Q3VsdHVyZTogXCI/XCIsXHJcbiAgICAgICAgbGVhZGVyOiBcIj9cIixcclxuICAgICAgICB0YWdzOiBbXSxcclxuICAgICAgICByYWNlczogbmV3IE1hcCgpLFxyXG4gICAgICAgIGV4b3RpY1JhY2VzOiBbXSxcclxuICAgICAgICBleGNsdXNpdmVSYWNlczogW10sXHJcbiAgICAgICAgY2FwaXRhbFBvcHVsYXRpb246IFwiP1wiLFxyXG4gICAgICAgIGNhcGl0YWxFbGV2YXRpb246IFwiP1wiLFxyXG4gICAgICAgIGNhcGl0YWxUZW1wZXJhdHVyZTogXCI/XCIsXHJcbiAgICAgICAgY2FwaXRhbFRhZ3M6IG5ldyBNYXAoKSxcclxuICAgICAgICBjYXBpdGFsU3VtbWFyeTogYD8/P2AsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIsXHJcbiAgICAgICAgbGVhZGVyRGVzY3JpcHRpb246IFwiXCJcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBDb3VudHJpZXMgPSBzZXR1cENvdW50cmllcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y291bnRyeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwSGlzdG9yeSA9IHZvaWQgMDtcclxuY29uc3QgZXJhcyA9IG5ldyBNYXAoW1xyXG4gICAgW1wiU2hhcmRpY1wiLCB7XHJcbiAgICAgICAgICAgIFwic3RhcnRcIjogYH4xMDxzdXA+OTwvc3VwPiBCUiAoVD0wKWAsXHJcbiAgICAgICAgICAgIFwiZXBvY2hcIjogYEdlbmVzaXNgLFxyXG4gICAgICAgICAgICBcImhlaWdodFwiOiA0MixcclxuICAgICAgICB9XSxcclxuICAgIFtcIkRpdmVyZ2VuY2VcIiwge1xyXG4gICAgICAgICAgICBcInN0YXJ0XCI6IGB+MTA8c3VwPjk8L3N1cD4gQlIgKFQ9MTA8c3VwPi0xNjwvc3VwPnMpYCxcclxuICAgICAgICAgICAgXCJlcG9jaFwiOiBgR2VuZXNpc2AsXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCI6IDQwLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiUHJpbW9yZGlhbFwiLCB7XHJcbiAgICAgICAgICAgIFwic3RhcnRcIjogYH4xMDxzdXA+OTwvc3VwPiBCUiAoVD0wLjFzKWAsXHJcbiAgICAgICAgICAgIFwiZXBvY2hcIjogYEdlbmVzaXNgLFxyXG4gICAgICAgICAgICBcImhlaWdodFwiOiA2NCxcclxuICAgICAgICB9XSxcclxuICAgIFtcIkluZmxhdGlvbmFyeVwiLCB7XHJcbiAgICAgICAgICAgIFwic3RhcnRcIjogYH4xMDxzdXA+OTwvc3VwPiBCUiAoVD0xcylgLFxyXG4gICAgICAgICAgICBcImVwb2NoXCI6IGBHZW5lc2lzYCxcclxuICAgICAgICAgICAgXCJoZWlnaHRcIjogNDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJBcmNoZWFuXCIsIHtcclxuICAgICAgICAgICAgXCJzdGFydFwiOiBgfjQuMSAmdGltZXM7IDEwPHN1cD44PC9zdXA+IEJSYCxcclxuICAgICAgICAgICAgXCJlcG9jaFwiOiBgR2VuZXNpc2AsXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCI6IDQwLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiTXl0aGljXCIsIHtcclxuICAgICAgICAgICAgXCJzdGFydFwiOiBgfjIuOCAmdGltZXM7IDEwPHN1cD43PC9zdXA+IEJSYCxcclxuICAgICAgICAgICAgXCJlcG9jaFwiOiBgTGVnZW5kYXJ5YCxcclxuICAgICAgICAgICAgXCJoZWlnaHRcIjogMTQ0LFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiSGVyb2ljXCIsIHtcclxuICAgICAgICAgICAgXCJzdGFydFwiOiBgfjEuNiAmdGltZXM7IDEwPHN1cD41PC9zdXA+IEJSYCxcclxuICAgICAgICAgICAgXCJlcG9jaFwiOiBgTGVnZW5kYXJ5YCxcclxuICAgICAgICAgICAgXCJoZWlnaHRcIjogMTIwLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiU2lsZW50XCIsIHtcclxuICAgICAgICAgICAgXCJzdGFydFwiOiBgfjIwLDAwMCBCUmAsXHJcbiAgICAgICAgICAgIFwiZXBvY2hcIjogYERhcmtuZXNzYCxcclxuICAgICAgICAgICAgXCJoZWlnaHRcIjogNzIsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJBcmNoYWljXCIsIHtcclxuICAgICAgICAgICAgXCJzdGFydFwiOiBgfjEsODAwIEJSYCxcclxuICAgICAgICAgICAgXCJlcG9jaFwiOiBgRGFya25lc3NgLFxyXG4gICAgICAgICAgICBcImhlaWdodFwiOiA2NCxcclxuICAgICAgICB9XSxcclxuICAgIFtcIkNsYXNzaWNhbFwiLCB7XHJcbiAgICAgICAgICAgIFwic3RhcnRcIjogYDAgQVJgLFxyXG4gICAgICAgICAgICBcImVwb2NoXCI6IGBSZWNyZWFuY2VgLFxyXG4gICAgICAgICAgICBcImhlaWdodFwiOiA3MixcclxuICAgICAgICB9XSxcclxuICAgIFtcIk1lZGlldmFsXCIsIHtcclxuICAgICAgICAgICAgXCJzdGFydFwiOiBgMTA3MCBBUmAsXHJcbiAgICAgICAgICAgIFwiZXBvY2hcIjogYFJlY3JlYW5jZWAsXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCI6IDEwMCxcclxuICAgICAgICB9XSxcclxuICAgIFtcIlJlbmFpc3NhbmNlXCIsIHtcclxuICAgICAgICAgICAgXCJzdGFydFwiOiBgMTYwMCBBUiAobm93KWAsXHJcbiAgICAgICAgICAgIFwiZXBvY2hcIjogYFJlY3JlYW5jZWAsXHJcbiAgICAgICAgICAgIFwiaGVpZ2h0XCI6IDQwLFxyXG4gICAgICAgIH1dLFxyXG5dKTtcclxuY29uc3QgY3VtbUhlaWdodHMgPSBuZXcgTWFwKCk7XHJcbmNvbnN0IHRvcE1hcmdpbiA9IDA7XHJcbmxldCB0b3RhbEhlaWdodCA9IDA7XHJcbmZvciAoY29uc3QgW25hbWUsIHsgaGVpZ2h0IH1dIG9mIEFycmF5LmZyb20oZXJhcykucmV2ZXJzZSgpKSB7XHJcbiAgICBjdW1tSGVpZ2h0cy5zZXQobmFtZSwgdG90YWxIZWlnaHQgKyBoZWlnaHQpO1xyXG4gICAgdG90YWxIZWlnaHQgPSBjdW1tSGVpZ2h0cy5nZXQobmFtZSk7XHJcbn1cclxuY29uc3QgZXZlbnRzID0gbmV3IE1hcChbXHJcbiAgICBbXCJUaGVvR2VuZXNpc1wiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiU2hhcmRzIEFwcGVhciAtIFNwYWNldGltZSAmIEludmVzdGl0dXJlIGZvcm0uXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJTaGFyZGljXCIsXHJcbiAgICAgICAgICAgIHJlbF90OiAwLFxyXG4gICAgICAgICAgICBsYW5lOiAwLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiR2VuZXNpc1wiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiSW52YXJpYW50cyBmb3JtIC0gTWF0dGVyL0VuZXJneS9Nb21lbnR1bS9DaGFyZ2UuLi5cIixcclxuICAgICAgICAgICAgZXJhOiBcIlNoYXJkaWNcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuNTAsXHJcbiAgICAgICAgICAgIGxhbmU6IDEsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJEaXZlcmdlbmNlXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJQbGFuZXMgc2VwYXJhdGVcIixcclxuICAgICAgICAgICAgZXJhOiBcIkRpdmVyZ2VuY2VcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuMDAsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJPdXRlclByaW1vcmRpYWxzSW52YWRlXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJPdXRlciBQcmltb3JkaWFscyBJbnZhZGVcIixcclxuICAgICAgICAgICAgZXJhOiBcIlByaW1vcmRpYWxcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJTaGFyZGljUHJpbW9yZGlhbENyZWF0aW9uXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJTaGFyZGljIFByaW1vcmRpYWxzIGFyZSBib3JuXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJQcmltb3JkaWFsXCIsXHJcbiAgICAgICAgICAgIHJlbF90OiAwLjI1LFxyXG4gICAgICAgICAgICBsYW5lOiAxLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiT3V0ZXJQcmltb3JkaWFsc0RlZmVhdGVkXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJPdXRlciBQcmltb3JkaWFscyBhcmUgRGVmZWF0ZWRcIixcclxuICAgICAgICAgICAgZXJhOiBcIlByaW1vcmRpYWxcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuOCxcclxuICAgICAgICAgICAgbGFuZTogMCxcclxuICAgICAgICB9XSxcclxuICAgIFtcIkV4cGFuc2lvblwiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiUGxhbmVzIHRha2Ugc2hhcGUsIFRoZSBVbml2ZXJzZSBleHBhbmRzXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJJbmZsYXRpb25hcnlcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuMSxcclxuICAgICAgICAgICAgbGFuZTogMSxcclxuICAgICAgICB9XSxcclxuICAgIFtcIkFzdHJhbEZvcm1hdGlvblwiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiQXN0cmFsIEJvZGllcyBGb3JtXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJJbmZsYXRpb25hcnlcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuOCxcclxuICAgICAgICAgICAgbGFuZTogMCxcclxuICAgICAgICB9XSxcclxuICAgIFtcIkxpZmVcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkZpcnN0IFBoeXNpY2FsIExpZmVmb3JtcyBlbWVyZ2VcIixcclxuICAgICAgICAgICAgZXJhOiBcIkFyY2hlYW5cIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAsXHJcbiAgICAgICAgICAgIGxhbmU6IDEsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJTcGlyaXR1YWxMaWZlXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJGaXJzdCBOb24tUGh5c2ljYWwgTGlmZWZvcm1zIGVtZXJnZVwiLFxyXG4gICAgICAgICAgICBlcmE6IFwiQXJjaGVhblwiLFxyXG4gICAgICAgICAgICByZWxfdDogMC45LFxyXG4gICAgICAgICAgICBsYW5lOiAwLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiQ29tcGxleExpZmVcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkNvbXBsZXgvTW9ydGFsIExpZmVmb3JtcyBlbWVyZ2VcIixcclxuICAgICAgICAgICAgZXJhOiBcIk15dGhpY1wiLFxyXG4gICAgICAgICAgICByZWxfdDogMC4xLFxyXG4gICAgICAgICAgICBsYW5lOiAxLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiUHJpbW9yZGlhbExpZmVcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlNoYXJkaWMgUHJpbW9yZGlhbHMgR2FpbiBQaHlzaWNhbCBGb3Jtc1wiLFxyXG4gICAgICAgICAgICBlcmE6IFwiTXl0aGljXCIsXHJcbiAgICAgICAgICAgIHJlbF90OiAwLjIsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJTZW50aWVudExpZmVcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlNlbnRpZW50IExpZmUgRm9ybXNcIixcclxuICAgICAgICAgICAgZXJhOiBcIk15dGhpY1wiLFxyXG4gICAgICAgICAgICByZWxfdDogMC40NSxcclxuICAgICAgICAgICAgbGFuZTogMCxcclxuICAgICAgICB9XSxcclxuICAgIFtcIk15dGhpY0xpZmVcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkNyZWF0dXJlcyBvZiBNeXRoIGFuZCBMZWdlbmQgUm9hbSB0aGUgbXVsdGl2ZXJzZVwiLFxyXG4gICAgICAgICAgICBlcmE6IFwiTXl0aGljXCIsXHJcbiAgICAgICAgICAgIHJlbF90OiAwLjUsXHJcbiAgICAgICAgICAgIGxhbmU6IDEsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJJbnRlbGxpZ2VudExpZmVcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkludGVsbGlnZW50IFNwZWNpZXMgZW1lcmdlXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJNeXRoaWNcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuNjcsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJTb2NpYWxMaWZlXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJTb2NpZXRpZXMgYW5kIEN1bHR1cmVzIGJlZ2luIHRvIHRha2Ugc2hhcGVcIixcclxuICAgICAgICAgICAgZXJhOiBcIk15dGhpY1wiLFxyXG4gICAgICAgICAgICByZWxfdDogMC44NSxcclxuICAgICAgICAgICAgbGFuZTogMSxcclxuICAgICAgICB9XSxcclxuICAgIFtcIlNvY2lhbExpZmVcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkh1bWFucyByYWNlIGFwcGVhcnNcIixcclxuICAgICAgICAgICAgZXJhOiBcIk15dGhpY1wiLFxyXG4gICAgICAgICAgICByZWxfdDogMC45LFxyXG4gICAgICAgICAgICBsYW5lOiAwLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiSGVyb2VzXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJQb3dlcmZ1bCBOYXRpb25zIGZvcm0gLSBIZXJvZXMgd2FsayB0aGUgbGFuZFwiLFxyXG4gICAgICAgICAgICBlcmE6IFwiSGVyb2ljXCIsXHJcbiAgICAgICAgICAgIHJlbF90OiAwLjIsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJXYXJcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlNoYXJkaWMgV2FycyBFbnN1ZVwiLFxyXG4gICAgICAgICAgICBlcmE6IFwiSGVyb2ljXCIsXHJcbiAgICAgICAgICAgIHJlbF90OiAwLjMzLFxyXG4gICAgICAgICAgICBsYW5lOiAxLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiS2Vsc2llclwiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiVGhlICdTdXJ2aXZvcicgRGllc1wiLFxyXG4gICAgICAgICAgICBlcmE6IFwiSGVyb2ljXCIsXHJcbiAgICAgICAgICAgIHJlbF90OiAwLjUsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJSZS1pbnZhc2lvblwiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiT3V0c2lkZXJzIGJlZ2luIHRvIHNlZXAgd2l0aGluXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJIZXJvaWNcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuOCxcclxuICAgICAgICAgICAgbGFuZTogMSxcclxuICAgICAgICB9XSxcclxuICAgIFtcIlNpbGVuY2VcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIkhpc3RvcnkgZmFsbHMgc2lsZW50IC0gTm8gcmVjb3JkcyBvZiB0aGlzIHRpbWUgcmVtYWluXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJTaWxlbnRcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJJc29sYXRpb25cIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIk91dGVyIFBsYW5lcyBzZWxmIGlzb2xhdGVcIixcclxuICAgICAgICAgICAgZXJhOiBcIlNpbGVudFwiLFxyXG4gICAgICAgICAgICByZWxfdDogMC40LFxyXG4gICAgICAgICAgICBsYW5lOiAxLFxyXG4gICAgICAgIH1dLFxyXG4gICAgW1wiQXJjaGFpY1wiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiQ2l2aWxpemF0aW9ucyByZXN0YXJ0IGZyb20gc2NyYXRjaCBwb3N0LWRlc29sYXRpb25cIixcclxuICAgICAgICAgICAgZXJhOiBcIkFyY2hhaWNcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJDbGFzc2ljYWxcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlNvbWUgQ2l0aWVzL0NpdmlsaXphdGlvbnMgYmVnaW4gdG8gbWF0Y2ggdGhvc2Ugb2Ygb2xkXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJDbGFzc2ljYWxcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAsXHJcbiAgICAgICAgICAgIGxhbmU6IDAsXHJcbiAgICAgICAgfV0sXHJcbiAgICBbXCJSb21lXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJWZXRlcmVzIGJlY29tZXMgYSBnbG9iYWwgZW1waXJlIG9uIFRlcnJhIFByaW1hXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJDbGFzc2ljYWxcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuMSxcclxuICAgICAgICAgICAgbGFuZTogMSxcclxuICAgICAgICB9XSxcclxuICAgIFtcIkFubmF0YXJcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIjE1MzkgQVI6IFRoZSBQcmltb3JkaWFsIE5pZ2h0bWFyZXMgZ2FpbiBhIGZvb3Rob2xkXCIsXHJcbiAgICAgICAgICAgIGVyYTogXCJNZWRpZXZhbFwiLFxyXG4gICAgICAgICAgICByZWxfdDogMC43NSxcclxuICAgICAgICAgICAgbGFuZTogMSxcclxuICAgICAgICB9XSxcclxuICAgIFtcIkxlcmFzXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCIxNTQwIEFSOiBUaGUgSG91ciBvZiBEYXJrbmVzc1wiLFxyXG4gICAgICAgICAgICBlcmE6IFwiTWVkaWV2YWxcIixcclxuICAgICAgICAgICAgcmVsX3Q6IDAuOCxcclxuICAgICAgICAgICAgbGFuZTogMCxcclxuICAgICAgICB9XSxcclxuXSk7XHJcbmZ1bmN0aW9uIHNldHVwSGlzdG9yeSgpIHtcclxuICAgIGNvbnN0ICRoaXN0b3J5Wm9uZXMgPSAkKFwiI2hpc3Rvcnlfem9uZXNcIik7XHJcbiAgICBjb25zdCAkbGFuZSA9IFtcclxuICAgICAgICAkKFwiI2hpc3RvcnlfbGVmdF90YWdzXCIpLFxyXG4gICAgICAgICQoXCIjaGlzdG9yeV9yaWdodF90YWdzXCIpLFxyXG4gICAgXTtcclxuICAgIGZvciAoY29uc3QgW25hbWUsIHsgaGVpZ2h0LCBzdGFydCwgZXBvY2ggfV0gb2YgZXJhcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAkKGA8ZGl2IGNsYXNzPSdoaXN0b3J5X3pvbmUnIHN0eWxlPSdoZWlnaHQ6ICR7aGVpZ2h0fXB4Oyc+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ6b25lX3N0YXJ0XCI+JHtzdGFydH08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInpvbmVfbmFtZVwiPiR7bmFtZX08c3BhbiBjbGFzcz1cInpvbmVfZXBvY2hcIj4gfCAke2Vwb2NofTwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PmApLmFwcGVuZFRvKCRoaXN0b3J5Wm9uZXMpO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBbaWQsIGRldGFpbHNdIG9mIGV2ZW50cy5lbnRyaWVzKCkpIHtcclxuICAgICAgICBjb25zdCBkaXN0RnJvbVRvcCA9IHRvcE1hcmdpbiArXHJcbiAgICAgICAgICAgIGN1bW1IZWlnaHRzLmdldChcIlNoYXJkaWNcIilcclxuICAgICAgICAgICAgLSBjdW1tSGVpZ2h0cy5nZXQoZGV0YWlsc1tcImVyYVwiXSlcclxuICAgICAgICAgICAgKyBlcmFzLmdldChkZXRhaWxzW1wiZXJhXCJdKS5oZWlnaHQgKiBkZXRhaWxzW1wicmVsX3RcIl07XHJcbiAgICAgICAgJChgPGRpdiBjbGFzcz1cImhpc3RvcnlfZXZlbnRcIiBzdHlsZT1cInRvcDogJHtkaXN0RnJvbVRvcH1weDtcIj4ke2RldGFpbHMudGV4dH08L2Rpdj5gKS5hcHBlbmRUbygkbGFuZVtkZXRhaWxzW1wibGFuZVwiXV0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc2V0dXBIaXN0b3J5ID0gc2V0dXBIaXN0b3J5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oaXN0b3J5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTnBjSUQgPSB2b2lkIDA7XHJcbnZhciBOcGNJRDtcclxuKGZ1bmN0aW9uIChOcGNJRCkge1xyXG4gICAgTnBjSURbTnBjSURbXCJMdWNpYW5cIl0gPSAwXSA9IFwiTHVjaWFuXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkViZW5lemFyXCJdID0gMV0gPSBcIkViZW5lemFyXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkNhZWx5bm5cIl0gPSAyXSA9IFwiQ2FlbHlublwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJMZXNsZXlcIl0gPSAzXSA9IFwiTGVzbGV5XCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIklyZW5lXCJdID0gNF0gPSBcIklyZW5lXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkxpbmdcIl0gPSA1XSA9IFwiTGluZ1wiO1xyXG4gICAgTnBjSURbTnBjSURbXCJEYXZlUnVobFwiXSA9IDZdID0gXCJEYXZlUnVobFwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJVbHJpY2hcIl0gPSA3XSA9IFwiVWxyaWNoXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkxpYVwiXSA9IDhdID0gXCJMaWFcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiQ29ubGV5XCJdID0gOV0gPSBcIkNvbmxleVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJWYWhhcmV0aFwiXSA9IDEwXSA9IFwiVmFoYXJldGhcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiVGhlTWFzdGVyXCJdID0gMTFdID0gXCJUaGVNYXN0ZXJcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiTG9nb3NQbGF5d3JpZ2h0XCJdID0gMTJdID0gXCJMb2dvc1BsYXl3cmlnaHRcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiTW9zdGltYVwiXSA9IDEzXSA9IFwiTW9zdGltYVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJTaGltYWtlblwiXSA9IDE0XSA9IFwiU2hpbWFrZW5cIjtcclxuICAgIE5wY0lEW05wY0lEW1wiU2hpbWFyaW5cIl0gPSAxNV0gPSBcIlNoaW1hcmluXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIlZlcnJhZGVyXCJdID0gMTZdID0gXCJWZXJyYWRlclwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJGaWVzdFwiXSA9IDE3XSA9IFwiRmllc3RcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiTW91dGhwaWVjZVwiXSA9IDE4XSA9IFwiTW91dGhwaWVjZVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJTYW5ndWluYXJjaFwiXSA9IDE5XSA9IFwiU2FuZ3VpbmFyY2hcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiRGVjcm9hU2FsXCJdID0gMjBdID0gXCJEZWNyb2FTYWxcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiQmFwaG9tZXRcIl0gPSAyMV0gPSBcIkJhcGhvbWV0XCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIktqZXJyYVwiXSA9IDIyXSA9IFwiS2plcnJhXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkdEZWZcIl0gPSAyM10gPSBcIkdEZWZcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiVHJhaXRvck90aGVsbG9cIl0gPSAyNF0gPSBcIlRyYWl0b3JPdGhlbGxvXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIk1hbmR5XCJdID0gMjVdID0gXCJNYW5keVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJHZW5cIl0gPSAyNl0gPSBcIkdlblwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJNdW11XCJdID0gMjddID0gXCJNdW11XCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIlNoYW1hcmVcIl0gPSAyOF0gPSBcIlNoYW1hcmVcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiQW1haWFcIl0gPSAyOV0gPSBcIkFtYWlhXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkxlbXVlblwiXSA9IDMwXSA9IFwiTGVtdWVuXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkxlbXVlbFwiXSA9IDMxXSA9IFwiTGVtdWVsXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkV1Z3J1ZFwiXSA9IDMyXSA9IFwiRXVncnVkXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkFuZG9haW5cIl0gPSAzM10gPSBcIkFuZG9haW5cIjtcclxuICAgIE5wY0lEW05wY0lEW1wiRHVza1wiXSA9IDM0XSA9IFwiRHVza1wiO1xyXG4gICAgTnBjSURbTnBjSURbXCJEYXduXCJdID0gMzVdID0gXCJEYXduXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkFuZHJpXCJdID0gMzZdID0gXCJBbmRyaVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJBdGhsb25cIl0gPSAzN10gPSBcIkF0aGxvblwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJCam9yblwiXSA9IDM4XSA9IFwiQmpvcm5cIjtcclxuICAgIE5wY0lEW05wY0lEW1wiQ2VjZWxpYVwiXSA9IDM5XSA9IFwiQ2VjZWxpYVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJDb3JvdG9cIl0gPSA0MF0gPSBcIkNvcm90b1wiO1xyXG4gICAgTnBjSURbTnBjSURbXCJFbHlzaXVtXCJdID0gNDFdID0gXCJFbHlzaXVtXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkVyaWNhXCJdID0gNDJdID0gXCJFcmljYVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJHZW5lZmVcIl0gPSA0M10gPSBcIkdlbmVmZVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJIYXZcIl0gPSA0NF0gPSBcIkhhdlwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJIaW5hXCJdID0gNDVdID0gXCJIaW5hXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkluZ3JpZFwiXSA9IDQ2XSA9IFwiSW5ncmlkXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIklvbmFcIl0gPSA0N10gPSBcIklvbmFcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiSmF5ZVwiXSA9IDQ4XSA9IFwiSmF5ZVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJKb3JkaVwiXSA9IDQ5XSA9IFwiSm9yZGlcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiS2FzdG9yXCJdID0gNTBdID0gXCJLYXN0b3JcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiUGV0cmFcIl0gPSA1MV0gPSBcIlBldHJhXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIlJvYmVydGFcIl0gPSA1Ml0gPSBcIlJvYmVydGFcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiU2FzaGFcIl0gPSA1M10gPSBcIlNhc2hhXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIlN5YmlsbGFcIl0gPSA1NF0gPSBcIlN5YmlsbGFcIjtcclxuICAgIC8vIElEX1RBSUhFLFxyXG4gICAgTnBjSURbTnBjSURbXCJUb21hc2FcIl0gPSA1NV0gPSBcIlRvbWFzYVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJWZXJuYVwiXSA9IDU2XSA9IFwiVmVybmFcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiVml0YWNpYVwiXSA9IDU3XSA9IFwiVml0YWNpYVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJZdWtpXCJdID0gNThdID0gXCJZdWtpXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkV6ZWxsXCJdID0gNTldID0gXCJFemVsbFwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJSdXpha2lcIl0gPSA2MF0gPSBcIlJ1emFraVwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJFbGxpb3RcIl0gPSA2MV0gPSBcIkVsbGlvdFwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJZb2VyaWNcIl0gPSA2Ml0gPSBcIllvZXJpY1wiO1xyXG4gICAgTnBjSURbTnBjSURbXCJUZWlhaVwiXSA9IDYzXSA9IFwiVGVpYWlcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiU2h1b1wiXSA9IDY0XSA9IFwiU2h1b1wiO1xyXG4gICAgTnBjSURbTnBjSURbXCJHbm9zaXNcIl0gPSA2NV0gPSBcIkdub3Npc1wiO1xyXG4gICAgTnBjSURbTnBjSURbXCJfX01PQlNfX1wiXSA9IDY2XSA9IFwiX19NT0JTX19cIjtcclxuICAgIE5wY0lEW05wY0lEW1wiTlNCcmFuZFwiXSA9IDY3XSA9IFwiTlNCcmFuZFwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJTbGlkZXJcIl0gPSA2OF0gPSBcIlNsaWRlclwiO1xyXG4gICAgTnBjSURbTnBjSURbXCJTbGlkZXJOXCJdID0gNjldID0gXCJTbGlkZXJOXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIlVyY2hpblwiXSA9IDcwXSA9IFwiVXJjaGluXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIlVyY2hpbk5cIl0gPSA3MV0gPSBcIlVyY2hpbk5cIjtcclxuICAgIE5wY0lEW05wY0lEW1wiSGFycG9vbmVyXCJdID0gNzJdID0gXCJIYXJwb29uZXJcIjtcclxuICAgIE5wY0lEW05wY0lEW1wiU2hyaWVrZXJcIl0gPSA3M10gPSBcIlNocmlla2VyXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIlNocmlla2VyTlwiXSA9IDc0XSA9IFwiU2hyaWVrZXJOXCI7XHJcbiAgICBOcGNJRFtOcGNJRFtcIkVwaHJlbWlzXCJdID0gNzVdID0gXCJFcGhyZW1pc1wiO1xyXG59KShOcGNJRCA9IGV4cG9ydHMuTnBjSUQgfHwgKGV4cG9ydHMuTnBjSUQgPSB7fSkpO1xyXG4vLyBbRnV0dXJlU2NvcGVdIFJlY29uY2lsZSB0aGlzIHdpdGggU3RhdEJsb2NrIHBhcmFtcyBzb21lZGF5LlxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ucGNJbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlBBUlRZX0lOU0lHSFQgPSBleHBvcnRzLlBjQ2hhcmlzbWFNb2RzID0gZXhwb3J0cy5QY1Rva2VuTmFtZXMgPSBleHBvcnRzLlBjSW5kZXggPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBPbmx5IGluY2x1ZGVzIHRoZSBwbGF5ZXIgY2hhcmFjdGVycyBmb3IgdGhlIGFjdGl2ZSBjYW1wYWlnbi4gVXNlZCBmb3JcclxuICogc2VjdGlvbnMgZGVhbGluZyB3aXRoIHRoZSBhY3RpdmUgY2FtcGFpZ24uXHJcbiAqL1xyXG52YXIgUGNJbmRleDtcclxuKGZ1bmN0aW9uIChQY0luZGV4KSB7XHJcbiAgICBQY0luZGV4W1BjSW5kZXhbXCJJRF9BVVJFTElBXCJdID0gMF0gPSBcIklEX0FVUkVMSUFcIjtcclxuICAgIFBjSW5kZXhbUGNJbmRleFtcIklEX0NZUklPTlwiXSA9IDFdID0gXCJJRF9DWVJJT05cIjtcclxuICAgIFBjSW5kZXhbUGNJbmRleFtcIklEX0hFTElPU1wiXSA9IDJdID0gXCJJRF9IRUxJT1NcIjtcclxufSkoUGNJbmRleCA9IGV4cG9ydHMuUGNJbmRleCB8fCAoZXhwb3J0cy5QY0luZGV4ID0ge30pKTtcclxuZXhwb3J0cy5QY1Rva2VuTmFtZXMgPSBuZXcgTWFwKFtcclxuICAgIFtQY0luZGV4LklEX0FVUkVMSUEsIFwiQXVyZWxpYVwiXSxcclxuICAgIFtQY0luZGV4LklEX0NZUklPTiwgXCJDeXJpb25cIl0sXHJcbiAgICBbUGNJbmRleC5JRF9IRUxJT1MsIFwiSGVsaW9zXCJdLFxyXG5dKTtcclxuZXhwb3J0cy5QY0NoYXJpc21hTW9kcyA9IG5ldyBNYXAoW1xyXG4gICAgW1BjSW5kZXguSURfQVVSRUxJQSwgLTFdLFxyXG4gICAgW1BjSW5kZXguSURfQ1lSSU9OLCAtMV0sXHJcbiAgICBbUGNJbmRleC5JRF9IRUxJT1MsIDVdLFxyXG5dKTtcclxuZXhwb3J0cy5QQVJUWV9JTlNJR0hUID0gMTk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBjSW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5FZGdlID0gdm9pZCAwO1xyXG5jb25zdCBCYXNlVW5pcXVlRE9NR2VuZXJhdG9yXzEgPSByZXF1aXJlKFwiLi4vQmFzZVVuaXF1ZURPTUdlbmVyYXRvclwiKTtcclxuLyoqXHJcbiAqIEEgY29udGV4dC1mcmVlIGVkZ2Ugd2hvc2UgY29uY3JldGUgaW1wbGVtZW50YXRpb25zIGNhbiBiZSByZW5kZXJlZCBvbiBzY3JlZW4uXHJcbiAqL1xyXG5jbGFzcyBFZGdlIGV4dGVuZHMgQmFzZVVuaXF1ZURPTUdlbmVyYXRvcl8xLkJhc2VVbmlxdWVET01HZW5lcmF0b3Ige1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih2MSwgdjIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudjEgPSB2MTtcclxuICAgICAgICB0aGlzLnYyID0gdjI7XHJcbiAgICAgICAgaWYgKHYxID09IHYyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnYxLmFkZE5laWdoYm91cih0aGlzKTtcclxuICAgICAgICB0aGlzLnYyLmFkZE5laWdoYm91cih0aGlzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLnYxLmlkfV9fXyR7dGhpcy52Mi5pZH1gO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgY2VudGVyIG9mIHRoZSBlZGdlIC0gaW4gd29ybGQgY29vcmRpbmF0ZXMuXHJcbiAgICAgKi9cclxuICAgIGdldCBjZW50ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgKHRoaXMudjEueCArIHRoaXMudjIueCkgLyAyLFxyXG4gICAgICAgICAgICAodGhpcy52MS55ICsgdGhpcy52Mi55KSAvIDJcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSBlZGdlIC0gaW4gd29ybGQgc2NhbGUuXHJcbiAgICAgKi9cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgY29uc3QgZGVsdGFYID0gdGhpcy52MS54IC0gdGhpcy52Mi54O1xyXG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IHRoaXMudjEueSAtIHRoaXMudjIueTtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KGRlbHRhWCAqIGRlbHRhWCArIGRlbHRhWSAqIGRlbHRhWSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkZWdyZWVzIHRoZSBlZGdlIG5lZWRzIHRvIGJlIHJvdGF0ZWQuXHJcbiAgICAgKi9cclxuICAgIGdldCByb3RhdGlvbigpIHtcclxuICAgICAgICBjb25zdCBkZWx0YVggPSB0aGlzLnYxLnggLSB0aGlzLnYyLng7XHJcbiAgICAgICAgY29uc3QgZGVsdGFZID0gdGhpcy52MS55IC0gdGhpcy52Mi55O1xyXG4gICAgICAgIHJldHVybiBkZWx0YVkgPT0gMCA/IDAgOiAoTWF0aC5QSSAvIDIpICsgTWF0aC5hdGFuKGRlbHRhWCAvIGRlbHRhWSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5FZGdlID0gRWRnZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RWRnZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkdyYXBoID0gdm9pZCAwO1xyXG5jb25zdCBCYXNlVW5pcXVlRE9NR2VuZXJhdG9yXzEgPSByZXF1aXJlKFwiLi4vQmFzZVVuaXF1ZURPTUdlbmVyYXRvclwiKTtcclxuLyoqXHJcbiAqIEEgZ3JhcGggdGhhdCBjYW4gYmUgcmVuZGVyZWQgYXMgYW4gZWxlbWVudC5cclxuICovXHJcbmNsYXNzIEdyYXBoIGV4dGVuZHMgQmFzZVVuaXF1ZURPTUdlbmVyYXRvcl8xLkJhc2VVbmlxdWVET01HZW5lcmF0b3Ige1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihpZCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMudmVydGljZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5lZGdlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLm5laWdoYm91cnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy54TWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG4gICAgICAgIHRoaXMueU1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICB0aGlzLnhNYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgdGhpcy55TWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbnkgYWRkaXRpb25hbCBzdHlsZSBjbGFzc2VzIChzcGFjZSBzZXBhcmF0ZWQpIHRvIGFkZCB0byB0aGUgZ3JhcGggd2hpbGVcclxuICAgICAqIGdlbmVyYXRpbmcgaXRzIERPTS5cclxuICAgICAqL1xyXG4gICAgZ2V0IEFkZGl0aW9uYWxFbGVtZW50Q2xhc3NlcygpIHtcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVET01TdHJpbmcoKSB7XHJcbiAgICAgICAgY29uc3Qgc29ydGVkVmVydGljZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHZlcnRleCBvZiB0aGlzLnZlcnRpY2VzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIHNvcnRlZFZlcnRpY2VzLnB1c2godmVydGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc29ydGVkVmVydGljZXMuc29ydCgoYSwgYikgPT4gYi54IC0gYS54KTtcclxuICAgICAgICBjb25zdCB2ZXJ0ZXhTdHJpbmdzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCB2ZXJ0ZXggb2Ygc29ydGVkVmVydGljZXMpIHtcclxuICAgICAgICAgICAgdmVydGV4U3RyaW5ncy5wdXNoKHZlcnRleC5nZW5lcmF0ZURPTVN0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZWRnZVN0cmluZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGVkZ2VzUGVyTGVzc2VyVmVydGV4IG9mIHRoaXMuZWRnZXMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBlZGdlIG9mIGVkZ2VzUGVyTGVzc2VyVmVydGV4LnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBlZGdlU3RyaW5ncy5wdXNoKGVkZ2UuZ2VuZXJhdGVET01TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIENzc0ludmFsaWRQcm9wZXJ0eVZhbHVlXHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZ3JhcGgtLSR7dGhpcy5TdHlsZVN1YmNsYXNzfSAke3RoaXMuQWRkaXRpb25hbEVsZW1lbnRDbGFzc2VzfVwiIFxyXG4gICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogJHt0aGlzLnhTcGFufXB4OyBcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7dGhpcy55U3Bhbn1weDtcIlxyXG4gICAgICAgICAgICAgaWQ9XCIke3RoaXMuaWR9XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncmFwaF9fZWRnZXNcIj5cclxuICAgICAgICAgICAgICAgICR7ZWRnZVN0cmluZ3Muam9pbihcIlwiKX0gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ3JhcGhfX3ZlcnRpY2VzXCI+XHJcbiAgICAgICAgICAgICAgICAke3ZlcnRleFN0cmluZ3Muam9pbihcIlwiKX0gICAgICAgICAgICBcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIHRoZSBnaXZlbiB2ZXJ0ZXggdG8gdGhlIGdyYXBoLlxyXG4gICAgICovXHJcbiAgICBhZGRWZXJ0ZXgodikge1xyXG4gICAgICAgIGlmICh2LmdyYXBoSUQgIT0gdGhpcy5pZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy54TWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG4gICAgICAgIHRoaXMueU1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICB0aGlzLnhNYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgdGhpcy55TWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xyXG4gICAgICAgIHRoaXMudmVydGljZXMuc2V0KHYuaWQsIHYpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgdGhlIGdpdmVuIHZlcnRleCBmcm9tIHRoZSBncmFwaC5cclxuICAgICAqL1xyXG4gICAgcmVtb3ZlVmVydGV4KHYpIHtcclxuICAgICAgICB0aGlzLnhNaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgdGhpcy55TWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG4gICAgICAgIHRoaXMueE1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcclxuICAgICAgICB0aGlzLnlNYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgdGhpcy52ZXJ0aWNlcy5kZWxldGUodi5pZCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZCB0aGUgZ2l2ZW4gZWRnZSB0byB0aGUgZ3JhcGguXHJcbiAgICAgKi9cclxuICAgIGFkZEVkZ2UoZSkge1xyXG4gICAgICAgIGNvbnN0IHYxID0gZS52MTtcclxuICAgICAgICBjb25zdCB2MiA9IGUudjI7XHJcbiAgICAgICAgaWYgKHYxID09IHYyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsZXNzZXJOdW1JZCA9IE1hdGgubWluKHYxLm51bUlkLCB2Mi5udW1JZCk7XHJcbiAgICAgICAgY29uc3QgaGlnaGVyTnVtSWQgPSBNYXRoLm1heCh2MS5udW1JZCwgdjIubnVtSWQpO1xyXG4gICAgICAgIGlmICghdGhpcy5lZGdlcy5oYXMobGVzc2VyTnVtSWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWRnZXMuc2V0KGxlc3Nlck51bUlkLCBuZXcgTWFwKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5lZGdlcy5nZXQobGVzc2VyTnVtSWQpLmhhcyhoaWdoZXJOdW1JZCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobGVzc2VyTnVtSWQsIGhpZ2hlck51bUlkKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWRnZXMuZ2V0KGxlc3Nlck51bUlkKS5zZXQoaGlnaGVyTnVtSWQsIGUpO1xyXG4gICAgICAgIGlmICghdGhpcy5uZWlnaGJvdXJzLmhhcyh2MSkpIHtcclxuICAgICAgICAgICAgdGhpcy5uZWlnaGJvdXJzLnNldCh2MSwgbmV3IFNldCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5uZWlnaGJvdXJzLmdldCh2MSkuYWRkKHYyKTtcclxuICAgICAgICBpZiAoIXRoaXMubmVpZ2hib3Vycy5oYXModjIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmVpZ2hib3Vycy5zZXQodjIsIG5ldyBTZXQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubmVpZ2hib3Vycy5nZXQodjIpLmFkZCh2MSk7XHJcbiAgICAgICAgcmV0dXJuIGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSB0aGUgZ2l2ZW4gZWRnZSBmcm9tIHRoZSBncmFwaC5cclxuICAgICAqL1xyXG4gICAgcmVtb3ZlRWRnZShlKSB7XHJcbiAgICAgICAgY29uc3QgdjEgPSBlLnYxO1xyXG4gICAgICAgIGNvbnN0IHYyID0gZS52MjtcclxuICAgICAgICBjb25zdCBsZXNzZXJWSWQgPSBNYXRoLm1pbih2MS5udW1JZCwgdjIubnVtSWQpO1xyXG4gICAgICAgIGNvbnN0IGhpZ2hlclZJZCA9IE1hdGgubWF4KHYxLm51bUlkLCB2Mi5udW1JZCk7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQodGhpcy5lZGdlcy5nZXQobGVzc2VyVklkKS5nZXQoaGlnaGVyVklkKSA9PSBlKTtcclxuICAgICAgICB0aGlzLmVkZ2VzLmdldChsZXNzZXJWSWQpLmRlbGV0ZShoaWdoZXJWSWQpO1xyXG4gICAgICAgIHRoaXMubmVpZ2hib3Vycy5nZXQodjEpLmRlbGV0ZSh2Mik7XHJcbiAgICAgICAgdGhpcy5uZWlnaGJvdXJzLmdldCh2MikuZGVsZXRlKHYxKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgSWYgdGhlIHR3byB2ZXJ0aWNlcyBhcmUgbmVpZ2hib3Vycy5cclxuICAgICAqL1xyXG4gICAgYXJlTmVpZ2hib3Vycyh2MSwgdjIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uZWlnaGJvdXJzLmhhcyh2MSkgJiZcclxuICAgICAgICAgICAgdGhpcy5uZWlnaGJvdXJzLmdldCh2MSkuaGFzKHYyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWFwcyh4LCB5KSBpbiBjYXJ0ZXNpYW4gcGl4ZWxzIHRvIChsZWZ0LCB0b3ApIHBvc2l0aW9ucyBpbiBwaXhlbHMuXHJcbiAgICAgKi9cclxuICAgIG1hcExvY2FsQ29vcmRpbmF0ZXNUb1NjcmVlblBvc2l0aW9uKFt4LCB5XSkge1xyXG4gICAgICAgIGlmICh0aGlzLnhNYXggPCB0aGlzLnhNaW4pIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB2ZXJ0ZXggb2YgdGhpcy52ZXJ0aWNlcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueE1pbiA+IHZlcnRleC54KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54TWluID0gdmVydGV4Lng7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy54TWF4IDwgdmVydGV4LngpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnhNYXggPSB2ZXJ0ZXgueDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnlNaW4gPiB2ZXJ0ZXgueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueU1pbiA9IHZlcnRleC55O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueU1heCA8IHZlcnRleC55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55TWF4ID0gdmVydGV4Lnk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMueE1heCA8IHRoaXMueE1pbikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvb3JkaW5hdGUgc3lzdGVtIHVuZGVmaW5lZC4gKCR7dGhpcy54TWF4fSwgJHt0aGlzLnhNaW59KWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW3RoaXMub3JpZ2luWzBdICsgeCwgdGhpcy5vcmlnaW5bMV0gLSB5XTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgVGhlIHZlcnRleCB3aXRoIHRoZSBnaXZlbiBpZC5cclxuICAgICAqL1xyXG4gICAgbG9va3VwVmVydGV4QnlJZChpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzLmdldChpZCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgdmVydGljZXMgaW4gdGhlIGdyYXBoLlxyXG4gICAgICovXHJcbiAgICBnZXQgdmVydGV4Q291bnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljZXMuc2l6ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1pbmltdW0gbnVtYmVyIG9mIGhvcml6b250YWwgcGl4ZWxzIHRoaXMgbWFwIHdvdWxkIGNvbnN1bWUuXHJcbiAgICAgKi9cclxuICAgIGdldCB4U3BhbigpIHtcclxuICAgICAgICAvLyBUaGlzIHJlbGllcyBvbiB0aGUgMToxIHJhdGlvLlxyXG4gICAgICAgIC8vIFNlZSBkb2NzdHJpbmcgb24gbWFwTG9jYWxDb29yZGluYXRlc1RvU2NyZWVuUG9zaXRpb24uXHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIHRoaXMueE1heCAtIHRoaXMueE1pbikgKyAyICogR3JhcGguUEFERElOR1swXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1pbmltdW0gbnVtYmVyIG9mIHZlcnRpY2FsIHBpeGVscyB0aGlzIG1hcCB3b3VsZCBjb25zdW1lLlxyXG4gICAgICovXHJcbiAgICBnZXQgeVNwYW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIHRoaXMueU1heCAtIHRoaXMueU1pbikgKyAyICogR3JhcGguUEFERElOR1sxXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mICgwLCAwKS5cclxuICAgICAqL1xyXG4gICAgZ2V0IG9yaWdpbigpIHtcclxuICAgICAgICAvLyBTaW5jZSBtaWRkbGUgcG9pbnQgb2Ygd29ybGQgc3BhY2Ugd291bGQgZ28gdG8gbWlkZGxlIHBvaW50IG9mIHBpeGVsXHJcbiAgICAgICAgLy8gc3BhY2UuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdGhpcy54U3BhbiAvIDIgLSAodGhpcy54TWF4ICsgdGhpcy54TWluKSAvIDIsXHJcbiAgICAgICAgICAgIHRoaXMueVNwYW4gLyAyICsgKHRoaXMueU1heCArIHRoaXMueU1pbikgLyAyXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkdyYXBoID0gR3JhcGg7XHJcbkdyYXBoLlBBRERJTkcgPSBbNTAsIDUwXTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JhcGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5NYXBFZGdlID0gdm9pZCAwO1xyXG5jb25zdCBFZGdlXzEgPSByZXF1aXJlKFwiLi9FZGdlXCIpO1xyXG4vKipcclxuICogVGhlIGVkZ2VzIG9mIGEgZ3JhcGggZGVub3RpbmcgYSBtYXAuIEZvciBub3csIHdlIG9ubHkgc3VwcG9ydCBsaW5lYXIgZWRnZXMuXHJcbiAqL1xyXG5jbGFzcyBNYXBFZGdlIGV4dGVuZHMgRWRnZV8xLkVkZ2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihncmFwaCwgc3RhcnQsIGVuZCkge1xyXG4gICAgICAgIHN1cGVyKHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBncmFwaDtcclxuICAgICAgICB0aGlzLmxlc3NlclZJZCA9IE1hdGgubWluKHN0YXJ0Lm51bUlkLCBlbmQubnVtSWQpO1xyXG4gICAgICAgIHRoaXMuaGlnaGVyVklkID0gTWF0aC5tYXgoc3RhcnQubnVtSWQsIGVuZC5udW1JZCk7XHJcbiAgICAgICAgdGhpcy5fd29ybGRMZW5ndGhNdWx0aXBsaWVyID0gMTtcclxuICAgICAgICB0aGlzLmdyYXBoLmFkZEVkZ2UodGhpcyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlRE9NU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IFt4LCB5XSA9IHRoaXMuZ3JhcGgubWFwTG9jYWxDb29yZGluYXRlc1RvU2NyZWVuUG9zaXRpb24odGhpcy5jZW50ZXIpO1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm1hcF9lZGdlXCIgc3R5bGU9XCJ3aWR0aDogJHt0aGlzLmxlbmd0aH1weDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHt5fXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHt4fXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlOiAke3RoaXMucm90YXRpb259cmFkO1wiPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBsZW5ndGggb2YgdGhpcyBlZGdlIGluIHdvcmxkIHVuaXRzLlxyXG4gICAgICovXHJcbiAgICBnZXQgd29ybGRMZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoICogdGhpcy5fd29ybGRMZW5ndGhNdWx0aXBsaWVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIHdvcmxkIGxlbmd0aCBtdWx0aXBsaWVyIGZvciB0aGlzIGVkZ2UuIE5vdCBhbGwgZWRnZXMgbmVlZCB0byBoYXZlXHJcbiAgICAgKiB0aGUgc2FtZSBtdWx0aXBsaWVyIGJldHdlZW4gdGhlaXIgbGVuZ3RoIGluIHBpeGVscyBhbmQgdGhlIGFjdHVhbCBsZW5ndGhcclxuICAgICAqIHRoZXkgZGVub3RlIG9uIHRoZSBtYXAuXHJcbiAgICAgKi9cclxuICAgIHNldCB3b3JsZExlbmd0aE11bHRpcGxpZXIodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl93b3JsZExlbmd0aE11bHRpcGxpZXIgPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hcEVkZ2UgPSBNYXBFZGdlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYXBFZGdlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBNYXBHcmFwaCA9IGV4cG9ydHMuTWFwR3JhcGggPSB2b2lkIDA7XHJcbmNvbnN0IEJhc2VfMSA9IHJlcXVpcmUoXCIuLi9zaW11bGF0aW9uL2Jhc2UvQmFzZVwiKTtcclxuY29uc3QgR3JhcGhfMSA9IHJlcXVpcmUoXCIuL0dyYXBoXCIpO1xyXG5jb25zdCBTaWRlUGFuZWxfMSA9IHJlcXVpcmUoXCIuL1NpZGVQYW5lbFwiKTtcclxuY2xhc3MgTWFwR3JhcGggZXh0ZW5kcyBHcmFwaF8xLkdyYXBoIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICAgICAgc3VwZXIoaWQpO1xyXG4gICAgICAgIHRoaXMud29ybGREaXN0YW5jZVBlclBpeGVsID0gMDtcclxuICAgIH1cclxuICAgIGdldCBTdHlsZVN1YmNsYXNzKCkge1xyXG4gICAgICAgIHJldHVybiBcIm1hcFwiO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYXJlYWwgZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVydGljZXMgb2YgdGhpcyBncmFwaC5cclxuICAgICAqL1xyXG4gICAgZ2V0U3BhY2lhbERpc3RhbmNlKHYxLCB2Mikge1xyXG4gICAgICAgIGlmICh2MS5ncmFwaCAhPSB0aGlzIHx8IHYyLmdyYXBoICE9IHRoaXMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHYxLnggLSB2Mi54KSAqICh2MS54IC0gdjIueCkgK1xyXG4gICAgICAgICAgICAodjEueSAtIHYyLnkpICogKHYxLnkgLSB2Mi55KSArXHJcbiAgICAgICAgICAgICh2MS56IC0gdjIueikgKiAodjEueiAtIHYyLnopKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgVGhlIGVkZ2UgZGlzdGFuY2UgYmV0d2VlbiB0d28gbmVpZ2hib3VyaW5nIHZlcnRpY2VzIG9mIHRoaXNcclxuICAgICAqICAgICBncmFwaC5cclxuICAgICAqL1xyXG4gICAgZ2V0RWRnZURpc3RhbmNlKHYxLCB2Mikge1xyXG4gICAgICAgIGlmICh2MS5ncmFwaCAhPSB0aGlzIHx8IHYyLmdyYXBoICE9IHRoaXMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxlc3NlcklkeCA9IE1hdGgubWluKHYxLm51bUlkLCB2Mi5udW1JZCk7XHJcbiAgICAgICAgY29uc3QgaGlnaGVySWR4ID0gTWF0aC5tYXgodjEubnVtSWQsIHYyLm51bUlkKTtcclxuICAgICAgICBpZiAoIXRoaXMuZWRnZXMuaGFzKGxlc3NlcklkeCkgfHxcclxuICAgICAgICAgICAgIXRoaXMuZWRnZXMuZ2V0KGxlc3NlcklkeCkuaGFzKGhpZ2hlcklkeCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmVkZ2VzLmdldChsZXNzZXJJZHgpLmdldChoaWdoZXJJZHgpO1xyXG4gICAgICAgIHJldHVybiBlZGdlLndvcmxkTGVuZ3RoO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTWFwR3JhcGggPSBNYXBHcmFwaDtcclxuZnVuY3Rpb24gc2V0dXBNYXBHcmFwaExvZ2ljKCRhcmVhLCBncmFwaCkge1xyXG4gICAgY29uc3QgJHNpZGVCYW5uZXIgPSAkKFwiI3NpZGVfYmFubmVyXCIpO1xyXG4gICAgY29uc3QgJG1hcEdyYXBoID0gJChcIi5ncmFwaC0tbWFwXCIpO1xyXG4gICAgY29uc3Qgc2lkZVBhbmVsID0gbmV3IFNpZGVQYW5lbF8xLlNpZGVQYW5lbCgkc2lkZUJhbm5lcik7XHJcbiAgICBsZXQgYWN0aXZlVmVydGV4ID0gbnVsbDtcclxuICAgIGZ1bmN0aW9uIHJlc2V0R3JhcGhTdGF0ZSgpIHtcclxuICAgICAgICAkbWFwR3JhcGguZmluZChcIi5tYXBfdmVydGV4XCIpLmFkZENsYXNzKFwiaW5hY3RpdmVcIik7XHJcbiAgICAgICAgLy8gU2lkZSBiYW5uZXIgaGFuZGxpbmcuXHJcbiAgICAgICAgc2lkZVBhbmVsLnJlc2V0KCk7XHJcbiAgICAgICAgLy8gRGlzdGFuY2VzIEhhbmRsaW5nLlxyXG4gICAgICAgICRtYXBHcmFwaC5maW5kKFwiLm1hcF92ZXJ0ZXggLm92ZXJoZWFkX3RleHRcIikudGV4dChcIlwiKTtcclxuICAgICAgICBhY3RpdmVWZXJ0ZXggPSBudWxsO1xyXG4gICAgfVxyXG4gICAgJG1hcEdyYXBoLm9uKFwiY2xpY2tcIiwgXCIubWFwX3ZlcnRleFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICghJCh0aGlzKS5oYXNDbGFzcyhcImluYWN0aXZlXCIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgJG1hcEdyYXBoLmZpbmQoXCIubWFwX3ZlcnRleFwiKS5hZGRDbGFzcyhcImluYWN0aXZlXCIpO1xyXG4gICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJpbmFjdGl2ZVwiKTtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZFZlcnRleEVsZW1lbnQgPSAkKHRoaXMpWzBdO1xyXG4gICAgICAgIGNvbnN0IGRvbVJlY3QgPSBzZWxlY3RlZFZlcnRleEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgdmlkID0gJCh0aGlzKS5hdHRyKFwiaWRcIik7XHJcbiAgICAgICAgY29uc3QgdmVydGV4ID0gZ3JhcGgubG9va3VwVmVydGV4QnlJZCh2aWQpO1xyXG4gICAgICAgIC8vIERpc3RhbmNlcyBoYW5kbGluZy5cclxuICAgICAgICAkbWFwR3JhcGguZmluZChcIi5tYXBfdmVydGV4XCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCB2MmlkID0gJCh0aGlzKS5hdHRyKFwiaWRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHZlcnRleDIgPSBncmFwaC5sb29rdXBWZXJ0ZXhCeUlkKHYyaWQpO1xyXG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGdyYXBoLmdldFNwYWNpYWxEaXN0YW5jZSh2ZXJ0ZXgsIHZlcnRleDIpICpcclxuICAgICAgICAgICAgICAgIGdyYXBoLndvcmxkRGlzdGFuY2VQZXJQaXhlbDtcclxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VUZXh0ID0gYH4keyhNYXRoLnJvdW5kKGRpc3RhbmNlIC8gMTAwKSAqIDEwMCkudG9Mb2NhbGVTdHJpbmcoKX0ga21gO1xyXG4gICAgICAgICAgICBsZXQgZWRnZURpc3RhbmNlVGV4dDtcclxuICAgICAgICAgICAgaWYgKGdyYXBoLmFyZU5laWdoYm91cnModmVydGV4LCB2ZXJ0ZXgyKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWRnZURpc3RhbmNlID0gZ3JhcGguZ2V0RWRnZURpc3RhbmNlKHZlcnRleCwgdmVydGV4Mik7XHJcbiAgICAgICAgICAgICAgICBlZGdlRGlzdGFuY2VUZXh0ID0gYCAvIH4keyhNYXRoLnJvdW5kKGVkZ2VEaXN0YW5jZSkpLnRvTG9jYWxlU3RyaW5nKCl9IGttYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVkZ2VEaXN0YW5jZVRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQodGhpcykuZmluZChcIi5vdmVyaGVhZF90ZXh0XCIpLnRleHQoZGlzdGFuY2VUZXh0ICsgZWRnZURpc3RhbmNlVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gU2lkZSBiYW5uZXIgaGFuZGxpbmcuXHJcbiAgICAgICAgc2lkZVBhbmVsLnN3YXBDb250ZW50QW5kUmVzaG93KGRvbVJlY3QueCArIGRvbVJlY3Qud2lkdGggLyAyID4gd2luZG93LmlubmVyV2lkdGggLyAyLCB2ZXJ0ZXguZ2VuZXJhdGVTaXRlRE9NU3RyaW5nKCkpO1xyXG4gICAgICAgIGFjdGl2ZVZlcnRleCA9IHZlcnRleDtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfSk7XHJcbiAgICAkc2lkZUJhbm5lci5vbihcImNsaWNrXCIsIFwiLmluc3BlY3RfYmFzZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoXCJkaXNhYmxlZFwiKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNpZGVQYW5lbC50b2dnbGVGdWxsU3BhbigoMCwgQmFzZV8xLmdlbmVyYXRlQmFzZURPTSkoKSk7XHJcbiAgICB9KTtcclxuICAgICRzaWRlQmFubmVyLm9uKFwiY2xpY2tcIiwgXCIuaGlkZV9iYXNlXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzaWRlUGFuZWwudG9nZ2xlRnVsbFNwYW4oYWN0aXZlVmVydGV4LmdlbmVyYXRlU2l0ZURPTVN0cmluZygpKTtcclxuICAgIH0pO1xyXG4gICAgJHNpZGVCYW5uZXIub24oXCJjbGlja1wiLCBcIi5jb2dfcmVzZXFcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoXCIuZ3JhcGhfbGFiZWxcIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAkKFwiLmdyYXBoX2xhYmVsW2RhdGEtZ3JhcGgtaWQ9J3NraWxsX2dyYXBoX2FyZWEnXVwiKS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICQoXCIuZ3JhcGhfYXJlYVwiKS5oaWRlKCk7XHJcbiAgICAgICAgJChgI3NraWxsX2dyYXBoX2FyZWFgKS5zaG93KCk7XHJcbiAgICAgICAgc2lkZVBhbmVsLnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICAgICRhcmVhLm9uKFwiY2xpY2tcIiwgcmVzZXRHcmFwaFN0YXRlKTtcclxufVxyXG5mdW5jdGlvbiBzZXR1cE1hcEdyYXBoKCRlbGVtZW50LCBncmFwaCkge1xyXG4gICAgaWYgKCRlbGVtZW50Lmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgJGVsZW1lbnQuYXBwZW5kKGdyYXBoLmdlbmVyYXRlRE9NU3RyaW5nKCkpO1xyXG4gICAgc2V0dXBNYXBHcmFwaExvZ2ljKCRlbGVtZW50LCBncmFwaCk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cE1hcEdyYXBoID0gc2V0dXBNYXBHcmFwaDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFwR3JhcGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5UcmFuc3BvcnRhdGlvblRvRE9NU3RyaW5nID0gZXhwb3J0cy5NYXBUcmFuc3BvcnRhdGlvbiA9IHZvaWQgMDtcclxuLyoqXHJcbiAqIFRoZSB2YXJpb3VzIG1lYW5zIG9mIHRyYW5zcG9ydCBjb25uZWN0aW5nIGRpZmZlcmVudCBwb2ludHMgb24gdGhlIG1hcC5cclxuICovXHJcbnZhciBNYXBUcmFuc3BvcnRhdGlvbjtcclxuKGZ1bmN0aW9uIChNYXBUcmFuc3BvcnRhdGlvbikge1xyXG4gICAgTWFwVHJhbnNwb3J0YXRpb25bTWFwVHJhbnNwb3J0YXRpb25bXCJGb290XCJdID0gMF0gPSBcIkZvb3RcIjtcclxuICAgIE1hcFRyYW5zcG9ydGF0aW9uW01hcFRyYW5zcG9ydGF0aW9uW1wiSG9yc2VcIl0gPSAxXSA9IFwiSG9yc2VcIjtcclxuICAgIE1hcFRyYW5zcG9ydGF0aW9uW01hcFRyYW5zcG9ydGF0aW9uW1wiQXV0b21vYmlsZVwiXSA9IDJdID0gXCJBdXRvbW9iaWxlXCI7XHJcbiAgICBNYXBUcmFuc3BvcnRhdGlvbltNYXBUcmFuc3BvcnRhdGlvbltcIlRyYWluXCJdID0gM10gPSBcIlRyYWluXCI7XHJcbiAgICBNYXBUcmFuc3BvcnRhdGlvbltNYXBUcmFuc3BvcnRhdGlvbltcIkhlbGljb3B0ZXJcIl0gPSA0XSA9IFwiSGVsaWNvcHRlclwiO1xyXG4gICAgTWFwVHJhbnNwb3J0YXRpb25bTWFwVHJhbnNwb3J0YXRpb25bXCJKZXRcIl0gPSA1XSA9IFwiSmV0XCI7XHJcbiAgICBNYXBUcmFuc3BvcnRhdGlvbltNYXBUcmFuc3BvcnRhdGlvbltcIlNwYWNlXCJdID0gNl0gPSBcIlNwYWNlXCI7XHJcbiAgICBNYXBUcmFuc3BvcnRhdGlvbltNYXBUcmFuc3BvcnRhdGlvbltcIkNvZ25pdGlvblwiXSA9IDddID0gXCJDb2duaXRpb25cIjtcclxufSkoTWFwVHJhbnNwb3J0YXRpb24gPSBleHBvcnRzLk1hcFRyYW5zcG9ydGF0aW9uIHx8IChleHBvcnRzLk1hcFRyYW5zcG9ydGF0aW9uID0ge30pKTtcclxuLyoqXHJcbiAqIEhvdyBlYWNoIG1vZGUgb2YgdHJhbnNwb3J0YXRpb24gd291bGQgYmUgcmVuZGVyZWQgb24gdGhlIHBhZ2UuXHJcbiAqL1xyXG5leHBvcnRzLlRyYW5zcG9ydGF0aW9uVG9ET01TdHJpbmcgPSBuZXcgTWFwKFtcclxuICAgIFtNYXBUcmFuc3BvcnRhdGlvbi5Gb290LCBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1zaG9lLXByaW50c1wiPjwvaT5gXSxcclxuICAgIFtNYXBUcmFuc3BvcnRhdGlvbi5Ib3JzZSwgYDxpIGNsYXNzPVwiZmEtZHVvdG9uZSBmYS1ob3JzZS1zYWRkbGVcIj48L2k+YF0sXHJcbiAgICBbTWFwVHJhbnNwb3J0YXRpb24uQXV0b21vYmlsZSwgYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtdHJ1Y2stZmllbGRcIj48L2k+YF0sXHJcbiAgICBbTWFwVHJhbnNwb3J0YXRpb24uSmV0LCBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1qZXQtZmlnaHRlclwiPjwvaT5gXSxcclxuICAgIFtNYXBUcmFuc3BvcnRhdGlvbi5TcGFjZSwgYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtc2h1dHRsZS1zcGFjZVwiPjwvaT5gXSxcclxuICAgIFtNYXBUcmFuc3BvcnRhdGlvbi5Db2duaXRpb24sIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWJyYWluXCI+PC9pPmBdLFxyXG5dKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFwVHJhbnNwb3J0YXRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5NYXBWZXJ0ZXggPSB2b2lkIDA7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uL3NpbXVsYXRpb24vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIik7XHJcbmNvbnN0IE1hcFRyYW5zcG9ydGF0aW9uXzEgPSByZXF1aXJlKFwiLi9NYXBUcmFuc3BvcnRhdGlvblwiKTtcclxuY29uc3QgTWFwVmVydGV4U3RhdHVzXzEgPSByZXF1aXJlKFwiLi9NYXBWZXJ0ZXhTdGF0dXNcIik7XHJcbmNvbnN0IFZlcnRleF8xID0gcmVxdWlyZShcIi4vVmVydGV4XCIpO1xyXG4vKipcclxuICogQSB7QGxpbmsgVmVydGV4fSB3aGljaCBiZWxvbmdzIHRvIGEgZ3JhcGggZGVub3RpbmcgYSBtYXAgb2YgYW4gbG9jYXRpb24uXHJcbiAqL1xyXG5jbGFzcyBNYXBWZXJ0ZXggZXh0ZW5kcyBWZXJ0ZXhfMS5WZXJ0ZXgge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzdGF0dXMsIGludGVyZXN0LCBncmFwaCkge1xyXG4gICAgICAgIHN1cGVyKGdyYXBoLmlkLCBncmFwaC52ZXJ0ZXhDb3VudCk7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICAgICAgdGhpcy5pbnRlcmVzdCA9IGludGVyZXN0O1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBncmFwaDtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIj8/P1wiO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzRGVzY092ZXJyaWRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnogPSAwO1xyXG4gICAgICAgIHRoaXMuaW50ZWwgPSBcIjxkaXY+Tm8gaW50ZWwgYXZhaWxhYmxlLjwvZGl2PlwiO1xyXG4gICAgICAgIHRoaXMuX3NpdGVzT2ZJbnRlcmVzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2NoYXJhY3RlclBhdGhzID0gW107XHJcbiAgICAgICAgdGhpcy5pc0Jhc2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmdyYXBoLmFkZFZlcnRleCh0aGlzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVET01TdHJpbmcoKSB7XHJcbiAgICAgICAgY29uc3QgbG93ZXJDYXNlVHlwZU5hbWUgPSBNYXBWZXJ0ZXhTdGF0dXNfMS5NYXBWZXJ0ZXhTdGF0dXNbdGhpcy5zdGF0dXNdLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgY29uc3Qgc3RhdHVzRGVzYyA9IHRoaXMuc3RhdHVzRGVzY092ZXJyaWRlID09IG51bGxcclxuICAgICAgICAgICAgPyBNYXBWZXJ0ZXhTdGF0dXNfMS5NYXBWZXJ0ZXhTdGF0dXNEZXNjcmlwdGlvbnMuZ2V0KHRoaXMuc3RhdHVzKVxyXG4gICAgICAgICAgICA6IHRoaXMuc3RhdHVzRGVzY092ZXJyaWRlO1xyXG4gICAgICAgIGNvbnN0IFt4LCB5XSA9IHRoaXMuZ3JhcGgubWFwTG9jYWxDb29yZGluYXRlc1RvU2NyZWVuUG9zaXRpb24oW3RoaXMueCwgdGhpcy55XSk7XHJcbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIENzc0ludmFsaWRQcm9wZXJ0eVZhbHVlXHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwibWFwX3ZlcnRleCBtYXBfdmVydGV4LS0ke2xvd2VyQ2FzZVR5cGVOYW1lfSBpbmFjdGl2ZVwiXHJcbiAgICAgICAgICAgICBpZD1cIiR7dGhpcy5pZH1cIlxyXG4gICAgICAgICAgICAgc3R5bGU9XCJsZWZ0OiAke3h9cHg7IHRvcDogJHt5fXB4O1wiPlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cImFzc2V0cy9pbWFnZXMvZ3VpLyR7bG93ZXJDYXNlVHlwZU5hbWV9L1JhZGlvQmcucG5nXCIgXHJcbiAgICAgICAgICAgICAgICAgYWx0PVwiXCJcclxuICAgICAgICAgICAgICAgICBjbGFzcz1cIm1hcF92ZXJ0ZXhfX2JhY2tncm91bmRcIi8+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2ltYWdlcy9ndWkvJHtsb3dlckNhc2VUeXBlTmFtZX0vUmFkaW8ucG5nXCIgXHJcbiAgICAgICAgICAgICAgICAgYWx0PVwiXCJcclxuICAgICAgICAgICAgICAgICBjbGFzcz1cIm1hcF92ZXJ0ZXhfX2ZvcmVncm91bmRcIi8+ICAgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYXBfdmVydGV4X19pbmZvXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmhlYWRfdGV4dFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdydW5nZV9sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncnVuZ2VfbGFiZWxfX3RpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncnVuZ2VfbGFiZWxfX3RpdGxlX19sZWZ0XCI+JHtzdGF0dXNEZXNjfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ3J1bmdlX2xhYmVsX190aXRsZV9fcmlnaHRcIj4ke3RoaXMuaW50ZXJlc3R9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdydW5nZV9sYWJlbF9fZGVzY1wiPjxzcGFuIGNsYXNzPVwidmVydGV4X2lkXCI+KCR7dGhpcy5pZH0pPC9zcGFuPiR7dGhpcy5uYW1lfTwvZGl2PiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj4gIFxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1hcmtzIHRoaXMgdmVydGV4IGFzIHRoZSBob21lIGJhc2UuXHJcbiAgICAgKi9cclxuICAgIG1hcmtBc0Jhc2UoKSB7XHJcbiAgICAgICAgdGhpcy5pc0Jhc2UgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBzaXRlIG9mIGludGVyZXN0IHRvIHRoaXMgc3BvdC5cclxuICAgICAqL1xyXG4gICAgYWRkU2l0ZU9mSW50ZXJlc3QobmFtZSwgdHlwZSwgZGVzYywgaW5mbywgZGlzdGFuY2UsIGNvbm5lY3Rpb25zKSB7XHJcbiAgICAgICAgY29uc3QgdGFibGVFbnRyaWVzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaW5mbykge1xyXG4gICAgICAgICAgICB0YWJsZUVudHJpZXMucHVzaChgXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleSBzaXRlX29mX2ludGVyZXN0X19kZXRhaWxzX19rZXlcIj4ke2tleX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlIHNpdGVfb2ZfaW50ZXJlc3RfX2RldGFpbHNfX3ZhbHVlXCI+JHt2YWx1ZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5hdmlnYXRpb25FbnRyaWVzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBbdHJhbnNwb3J0YXRpb24sIHRpbWVdIG9mIGNvbm5lY3Rpb25zLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uRW50cmllcy5wdXNoKGBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuYXZpZ2F0aW9uX190eXBlIGljb25fdGFibGVfX3Nsb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmF2aWdhdGlvbl9fdHlwZV9fbWVhbnMgaWNvbl90YWJsZV9fc2xvdF9faWNvblwiPiR7TWFwVHJhbnNwb3J0YXRpb25fMS5UcmFuc3BvcnRhdGlvblRvRE9NU3RyaW5nLmdldCh0cmFuc3BvcnRhdGlvbil9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25fdGFibGVfX3Nsb3RfX2xhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR7dGltZX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICBgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc2l0ZXNPZkludGVyZXN0LnB1c2goYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGhlbWVfYm94IHNpdGVfb2ZfaW50ZXJlc3RcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzaXRlX29mX2ludGVyZXN0X19oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2l0ZV9vZl9pbnRlcmVzdF9fY2F0ZWdvcnlcIj4ke25hbWV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNpdGVfb2ZfaW50ZXJlc3RfX25hbWVcIj4ke3R5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzaXRlX29mX2ludGVyZXN0X19kZXNjXCI+JHtkZXNjfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNpdGVfb2ZfaW50ZXJlc3RfX2RldGFpbHMgZGljdGlvbmFyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICR7dGFibGVFbnRyaWVzLmpvaW4oXCJcIil9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2l0ZV9vZl9pbnRlcmVzdF9fc3ViaGVhZGVyIHRoZW1lX3N1YmhlYWRlclwiPkNvbm5lY3Rpdml0eTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzaXRlX29mX2ludGVyZXN0X19uYXZpZ2F0aW9uIG5hdmlnYXRpb24gaWNvbl90YWJsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICR7bmF2aWdhdGlvbkVudHJpZXMuam9pbihcIlwiKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgdG9rZW4gaW1hZ2UgdG8gYmUgZGlzcGxheWVkIGFzIGEgY2hhcmFjdGVyIHRva2VuLiBJdCBuZWVkbid0XHJcbiAgICAgKiBzcGVjaWZpY2FsbHkgYmVsb25nIHRvIGEgY2hhcmFjdGVyLlxyXG4gICAgICovXHJcbiAgICBhZGRDaGFyYWN0ZXJUb2tlbihjaGFyYWN0ZXIpIHtcclxuICAgICAgICB0aGlzLl9jaGFyYWN0ZXJQYXRocy5wdXNoKGNoYXJhY3Rlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIGEgRE9NIFN0cmluZyBjb3JyZXNwb25kaW5nIHRvIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGlzIHZlcnRleC5cclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVTaXRlRE9NU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZVR5cGVOYW1lID0gTWFwVmVydGV4U3RhdHVzXzEuTWFwVmVydGV4U3RhdHVzW3RoaXMuc3RhdHVzXS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IHN0YXR1c0Rlc2MgPSB0aGlzLnN0YXR1c0Rlc2NPdmVycmlkZSA9PSBudWxsXHJcbiAgICAgICAgICAgID8gTWFwVmVydGV4U3RhdHVzXzEuTWFwVmVydGV4U3RhdHVzRGVzY3JpcHRpb25zLmdldCh0aGlzLnN0YXR1cylcclxuICAgICAgICAgICAgOiB0aGlzLnN0YXR1c0Rlc2NPdmVycmlkZTtcclxuICAgICAgICBsZXQgdG9rZW5ET007XHJcbiAgICAgICAgaWYgKHRoaXMuaXNCYXNlKSB7XHJcbiAgICAgICAgICAgIHRva2VuRE9NID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fY2hhcmFjdGVyUGF0aHMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgdG9rZW5ET00gPSBgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYXBfdmVydGV4X2RldGFpbHNfX3N1YmhlYWRlciB0aGVtZV9zdWJoZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgIE5QQ3MgaW4gdGhpcyBhcmVhXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFwX3ZlcnRleF9kZXRhaWxzX19kZXNjXCI+XHJcbiAgICAgICAgICAgICAgICBObyBrbm93biBOUENzIGFyZSB3YW5kZXJpbmcgb3V0IGhlcmUuXHJcbiAgICAgICAgICAgIDwvZGl2PmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0b2tlbkRPTXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHRoaXMuX2NoYXJhY3RlclBhdGhzKSB7XHJcbiAgICAgICAgICAgICAgICB0b2tlbkRPTXMucHVzaChgPGltZyBjbGFzcz1cInRva2VuX3NcIiBzcmM9XCIke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQocGF0aCkuaW1nUGF0aH1cIiBhbHQ9XCJcIj5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b2tlbkRPTSA9IGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1hcF92ZXJ0ZXhfZGV0YWlsc19fc3ViaGVhZGVyIHRoZW1lX3N1YmhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgTlBDcyBoZXJlXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFwX3ZlcnRleF9kZXRhaWxzX19jaGFyYWN0ZXJzXCI+XHJcbiAgICAgICAgICAgICAgICAke3Rva2VuRE9Ncy5qb2luKFwiXCIpfVxyXG4gICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc29pRE9NO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQmFzZSkge1xyXG4gICAgICAgICAgICBzb2lET00gPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zaXRlc09mSW50ZXJlc3QubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgc29pRE9NID0gYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFwX3ZlcnRleF9kZXRhaWxzX19zdWJoZWFkZXIgdGhlbWVfc3ViaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICBTaXRlcyBvZiBpbnRlcmVzdFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1hcF92ZXJ0ZXhfZGV0YWlsc19fZGVzY1wiPlxyXG4gICAgICAgICAgICAgICAgTm8gc2l0ZXMgb2YgaW50ZXJlc3QgaGF2ZSBiZWVuIGRpc2NvdmVyZWQgc28gZmFyLlxyXG4gICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc29pRE9NID0gYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFwX3ZlcnRleF9kZXRhaWxzX19zdWJoZWFkZXIgdGhlbWVfc3ViaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICBTaXRlcyBvZiBpbnRlcmVzdFxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICR7dGhpcy5fc2l0ZXNPZkludGVyZXN0LmpvaW4oXCJcIil9XHJcbiAgICAgICAgICAgIDwvZGl2PmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJhc2VET00gPSB0aGlzLmlzQmFzZSA/XHJcbiAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0naW5zcGVjdF9iYXNlIGdydW5nZV9uYXZfYnV0dG9uJz5JbnNwZWN0IEJhc2U8L2Rpdj5cIiA6IFwiXCI7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwibWFwX3ZlcnRleF9kZXRhaWxzIHRoZW1lLS0ke2xvd2VyQ2FzZVR5cGVOYW1lfVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFwX3ZlcnRleF9kZXRhaWxzX19oZWFkZXIgZ3J1bmdlX3BhbmVsXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ3J1bmdlX3BhbmVsX19pY29uXCI+JHtNYXBWZXJ0ZXhTdGF0dXNfMS5NYXBWZXJ0ZXhTdGF0dXNJY29ucy5nZXQodGhpcy5zdGF0dXMpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdydW5nZV9wYW5lbF9fc3VidGl0bGVcIj4ke3N0YXR1c0Rlc2N9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ3J1bmdlX3BhbmVsX190aXRsZVwiPiR7dGhpcy5uYW1lfTwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1hcF92ZXJ0ZXhfZGV0YWlsc19fZGVzY1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRoZW1lX2xhYmVsXCI+SU5URUw8L2Rpdj5cclxuICAgICAgICAgICAgICAgICR7dGhpcy5pbnRlbH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICR7c29pRE9NfVxyXG4gICAgICAgICAgICAke3Rva2VuRE9NfVxyXG4gICAgICAgICAgICAke2Jhc2VET019XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1hcFZlcnRleCA9IE1hcFZlcnRleDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFwVmVydGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTWFwVmVydGV4U3RhdHVzSWNvbnMgPSBleHBvcnRzLk1hcFZlcnRleFN0YXR1c0Rlc2NyaXB0aW9ucyA9IGV4cG9ydHMuTWFwVmVydGV4U3RhdHVzID0gdm9pZCAwO1xyXG52YXIgTWFwVmVydGV4U3RhdHVzO1xyXG4oZnVuY3Rpb24gKE1hcFZlcnRleFN0YXR1cykge1xyXG4gICAgTWFwVmVydGV4U3RhdHVzW01hcFZlcnRleFN0YXR1c1tcIlVua25vd25cIl0gPSAwXSA9IFwiVW5rbm93blwiO1xyXG4gICAgTWFwVmVydGV4U3RhdHVzW01hcFZlcnRleFN0YXR1c1tcIk5ldXRyYWxcIl0gPSAxXSA9IFwiTmV1dHJhbFwiO1xyXG4gICAgTWFwVmVydGV4U3RhdHVzW01hcFZlcnRleFN0YXR1c1tcIkZyaWVuZGx5XCJdID0gMl0gPSBcIkZyaWVuZGx5XCI7XHJcbiAgICBNYXBWZXJ0ZXhTdGF0dXNbTWFwVmVydGV4U3RhdHVzW1wiU2FmZVwiXSA9IDNdID0gXCJTYWZlXCI7XHJcbiAgICBNYXBWZXJ0ZXhTdGF0dXNbTWFwVmVydGV4U3RhdHVzW1wiQ29tYmF0XCJdID0gNF0gPSBcIkNvbWJhdFwiO1xyXG4gICAgTWFwVmVydGV4U3RhdHVzW01hcFZlcnRleFN0YXR1c1tcIkVtZXJnZW5jeVwiXSA9IDVdID0gXCJFbWVyZ2VuY3lcIjtcclxuICAgIE1hcFZlcnRleFN0YXR1c1tNYXBWZXJ0ZXhTdGF0dXNbXCJEZWFkbHlcIl0gPSA2XSA9IFwiRGVhZGx5XCI7XHJcbiAgICBNYXBWZXJ0ZXhTdGF0dXNbTWFwVmVydGV4U3RhdHVzW1wiQmxhY2tcIl0gPSA3XSA9IFwiQmxhY2tcIjtcclxufSkoTWFwVmVydGV4U3RhdHVzID0gZXhwb3J0cy5NYXBWZXJ0ZXhTdGF0dXMgfHwgKGV4cG9ydHMuTWFwVmVydGV4U3RhdHVzID0ge30pKTtcclxuZXhwb3J0cy5NYXBWZXJ0ZXhTdGF0dXNEZXNjcmlwdGlvbnMgPSBuZXcgTWFwKFtcclxuICAgIFtNYXBWZXJ0ZXhTdGF0dXMuVW5rbm93biwgXCJVbmtub3duXCJdLFxyXG4gICAgW01hcFZlcnRleFN0YXR1cy5OZXV0cmFsLCBcIk5ldXRyYWxcIl0sXHJcbiAgICBbTWFwVmVydGV4U3RhdHVzLkZyaWVuZGx5LCBcIkZyaWVuZGx5XCJdLFxyXG4gICAgW01hcFZlcnRleFN0YXR1cy5TYWZlLCBcIlNhZmUgWm9uZVwiXSxcclxuICAgIFtNYXBWZXJ0ZXhTdGF0dXMuQ29tYmF0LCBcIkhvc3RpbGVcIl0sXHJcbiAgICBbTWFwVmVydGV4U3RhdHVzLkVtZXJnZW5jeSwgXCJIaWdoIFJpc2sgQ29tYmF0XCJdLFxyXG4gICAgW01hcFZlcnRleFN0YXR1cy5EZWFkbHksIFwiRGVhZGx5XCJdLFxyXG4gICAgW01hcFZlcnRleFN0YXR1cy5CbGFjaywgXCJCbGFja1wiXSxcclxuXSk7XHJcbmV4cG9ydHMuTWFwVmVydGV4U3RhdHVzSWNvbnMgPSBuZXcgTWFwKFtcclxuICAgIFtNYXBWZXJ0ZXhTdGF0dXMuVW5rbm93biwgYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtY2lyY2xlLXF1ZXN0aW9uXCI+PC9pPmBdLFxyXG4gICAgW01hcFZlcnRleFN0YXR1cy5OZXV0cmFsLCBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1zY2FsZS1iYWxhbmNlZFwiPjwvaT5gXSxcclxuICAgIFtNYXBWZXJ0ZXhTdGF0dXMuRnJpZW5kbHksIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWhhbmRzaGFrZVwiPjwvaT5gXSxcclxuICAgIFtNYXBWZXJ0ZXhTdGF0dXMuU2FmZSwgYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtaG91c2UtdHVycmV0XCI+PC9pPmBdLFxyXG4gICAgW01hcFZlcnRleFN0YXR1cy5Db21iYXQsIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXN3b3Jkc1wiPjwvaT5gXSxcclxuICAgIFtNYXBWZXJ0ZXhTdGF0dXMuRW1lcmdlbmN5LCBgPGkgY2xhc3M9XCJmYS1yZWd1bGFyIGZhLWJpb2hhemFyZFwiPjwvaT5gXSxcclxuICAgIFtNYXBWZXJ0ZXhTdGF0dXMuRGVhZGx5LCBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1za3VsbC1jcm9zc2JvbmVzXCI+PC9pPmBdLFxyXG4gICAgW01hcFZlcnRleFN0YXR1cy5CbGFjaywgYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtc2N5dGhlXCI+PC9pPmBdLFxyXG5dKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFwVmVydGV4U3RhdHVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuU2lkZVBhbmVsID0gdm9pZCAwO1xyXG4vKipcclxuICogRW5jYXBzdWxhdGVzIGFsbCBvcGVyYXRpb25zIHJlbGF0aW5nIHRvIHRoZSBzaWRlIHBhbmVsLiBHaXZlbiB0aGUgbmVlZCBvZlxyXG4gKiB0aW1lb3V0cyBmb3IgcHJvcGVyIGFuaW1hdGlvbiwgYW5kIHRoZSByZXVzZSBvZiB0aGUgY29udGVudCBkaXYgYW1vbmcgdmFyaW91c1xyXG4gKiBtYXBzLCB0aGlzIHdhcyBjb21wbGV4IGVub3VnaCB0byBtZXJpdCBlbmNhcHN1bGF0aW9uLlxyXG4gKi9cclxuY2xhc3MgU2lkZVBhbmVsIHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gJHBhbmVsIFRoZSBKUXVlcnkgc2VsZWN0b3Igb2YgdGhlIGVsZW1lbnQgdGhpcyBpbnN0YW5jZSB3b3VsZFxyXG4gICAgICogICAgICAgICAgICAgICBtYW5hZ2UuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCRwYW5lbCkge1xyXG4gICAgICAgIHRoaXMuJHBhbmVsID0gJHBhbmVsO1xyXG4gICAgICAgIHRoaXMuJGNvbnRlbnQgPSAkcGFuZWwuZmluZChgLiR7U2lkZVBhbmVsLkNPTlRFTlRfRUxFTUVOVF9DTEFTU19OQU1FfWApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldHMgKGhpZGVzLCByZW1vdmVzIGRpcmVjdGlvbmFsaXR5IGFuZCBjb250ZW50IG9mKSB0aGlzIHBhbmVsLlxyXG4gICAgICovXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLmhpZGUoKCkgPT4gdGhpcy5lbXB0eSgpKTtcclxuICAgICAgICB0aGlzLiRwYW5lbC5yZW1vdmVDbGFzcyhTaWRlUGFuZWwuRlVMTF9TUEFOKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSWYgaGlkZGVuLCBzaG93LiBJZiB2aXNpYmxlLCBoaWRlLlxyXG4gICAgICovXHJcbiAgICB0b2dnbGUobGVmdCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgoKSA9PiB7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93KGxlZnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT25seSBjaGFuZ2UgdGhlIGNvbnRlbnQgYW5kIGRvIG5vdGhpbmcgZWxzZS5cclxuICAgICAqL1xyXG4gICAgc3dhcENvbnRlbnQobmV3Q29udGVudCkge1xyXG4gICAgICAgIHRoaXMuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLiRjb250ZW50LmFwcGVuZChuZXdDb250ZW50KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hhbmdlcyB0aGUgY29udGVudCBvZiB0aGUgcGFuZWwsIGhpZGluZyBhbmQgc2hvd2luZyBpdCBpZiB0aGUgZGlyZWN0aW9uXHJcbiAgICAgKiBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBzd2FwQ29udGVudEFuZFJlc2hvdyhsZWZ0LCBuZXdDb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5oaWRlVGhlblNob3cobGVmdCwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN3YXBDb250ZW50KG5ld0NvbnRlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhlIHNpZGUgYmFubmVyLCBtYWtlcyBpdCBjb3ZlciB0aGUgd2hvbGUgc2NyZWVuIGlmIGl0IGRvZXNuJ3Qgb3JcclxuICAgICAqIHJldHJlYXQgYmFjayB0byB0aGUgc2lkZSBpZiBpdCBkb2VzLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgbWV0aG9kIG9ubHkgd29ya3MgaWYgdGhlIGJhbm5lciBpcyBhdCBsZWFzdCB2aXNpYmxlLlxyXG4gICAgICovXHJcbiAgICB0b2dnbGVGdWxsU3BhbihuZXdDb250ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuJHBhbmVsLnRvZ2dsZUNsYXNzKFNpZGVQYW5lbC5GVUxMX1NQQU4pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLiRjb250ZW50LmFwcGVuZChuZXdDb250ZW50KTtcclxuICAgICAgICB9LCBTaWRlUGFuZWwuU0xJREVfVElNRSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldmVhbHMgdGhlIHBhbmVsIG9uIHRoZSBsZWZ0L3JpZ2h0IHNpZGUgb2YgdGhlIHNjcmVlbi4gR2l2ZW4gdGhhdCB0aGVcclxuICAgICAqIHBhbmVsIHNsaWRlcyBpbiwgdGhpcyBvcGVyYXRpb24gY29uY2x1ZGVzIGFmdGVyIGEgZGVsYXkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGxlZnQgSWYgdHJ1ZSwgdGhlIHBhbmVsIGFwcGVhcnMgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgc2NyZWVuLFxyXG4gICAgICogICAgICAgICAgICAgb3RoZXJ3aXNlIGl0IGFwcGVhcnMgb24gdGhlIHJpZ2h0IHNpZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgVGhlIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgaXQgd291bGQgdGFrZSBmb3IgdGhlIG9wZXJhdGlvbiB0b1xyXG4gICAgICogICAgICAgICAgY29tcGxldGUuXHJcbiAgICAgKi9cclxuICAgIHNob3cobGVmdCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNob3cgY2FsbGVkIG9uIHZpc2libGUgcGFuZWwuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiRwYW5lbC5yZW1vdmVDbGFzcyhTaWRlUGFuZWwuTEVGVF9QQU5FTF9DTEFTU19OQU1FICsgXCIgXCIgK1xyXG4gICAgICAgICAgICBTaWRlUGFuZWwuUklHSFRfUEFORUxfQ0xBU1NfTkFNRSk7XHJcbiAgICAgICAgY29uc3QgYWxpZ25DbGFzc05hbWUgPSBsZWZ0ID8gU2lkZVBhbmVsLkxFRlRfUEFORUxfQ0xBU1NfTkFNRSA6XHJcbiAgICAgICAgICAgIFNpZGVQYW5lbC5SSUdIVF9QQU5FTF9DTEFTU19OQU1FO1xyXG4gICAgICAgIGNvbnN0IHZpc2libGVBbGlnbkNsYXNzTmFtZSA9IGxlZnQgPyBTaWRlUGFuZWwuVklTSUJMRV9MRUZUX1BBTkVMX0NMQVNTX05BTUUgOlxyXG4gICAgICAgICAgICBTaWRlUGFuZWwuVklTSUJMRV9SSUdIVF9QQU5FTF9DTEFTU19OQU1FO1xyXG4gICAgICAgIHRoaXMuJHBhbmVsLmFkZENsYXNzKGFsaWduQ2xhc3NOYW1lKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuJHBhbmVsLmFkZENsYXNzKHZpc2libGVBbGlnbkNsYXNzTmFtZSksIDEwKTtcclxuICAgICAgICByZXR1cm4gMTAgKyBTaWRlUGFuZWwuU0xJREVfVElNRTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGlkZXMgdGhlIHBhbmVsIGlmIGl0IGlzIHZpc2libGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgVGhlIHRpbWUgaXQgdGFrZXMgdG8gaGlkZS5cclxuICAgICAqL1xyXG4gICAgaGlkZSh3aGVuSGlkZGVuKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHBhbmVsLnJlbW92ZUNsYXNzKFNpZGVQYW5lbC5MRUZUX1BBTkVMX0NMQVNTX05BTUUgKyBcIiBcIiArXHJcbiAgICAgICAgICAgICAgICBTaWRlUGFuZWwuUklHSFRfUEFORUxfQ0xBU1NfTkFNRSk7XHJcbiAgICAgICAgICAgIHdoZW5IaWRkZW4oKTtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuJHBhbmVsLnJlbW92ZUNsYXNzKFNpZGVQYW5lbC5WSVNJQkxFX0xFRlRfUEFORUxfQ0xBU1NfTkFNRSArIFwiIFwiICtcclxuICAgICAgICAgICAgU2lkZVBhbmVsLlZJU0lCTEVfUklHSFRfUEFORUxfQ0xBU1NfTkFNRSk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuJHBhbmVsLnJlbW92ZUNsYXNzKFNpZGVQYW5lbC5MRUZUX1BBTkVMX0NMQVNTX05BTUUgKyBcIiBcIiArXHJcbiAgICAgICAgICAgICAgICBTaWRlUGFuZWwuUklHSFRfUEFORUxfQ0xBU1NfTkFNRSk7XHJcbiAgICAgICAgICAgIHdoZW5IaWRkZW4oKTtcclxuICAgICAgICB9LCBTaWRlUGFuZWwuU0xJREVfVElNRSArIDEwKTtcclxuICAgICAgICByZXR1cm4gU2lkZVBhbmVsLlNMSURFX1RJTUUgKyAxMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGlkZSB0aGUgcGFuZWwgaWYgaXQgaXMgdmlzaWJsZSB0aGVuIHNob3cgaXQgb24gdGhlIG90aGVyIHNpZGUuIERvbid0XHJcbiAgICAgKiBoaWRlIG9yIHNob3cgaWYgaXQgaXMgb24gdGhlIGNvcnJlY3Qgc2lkZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbGVmdCBXaGV0aGVyIHRvIHNob3cgdGhlIHBhbmVsIG9uIHRoZSBsZWZ0LlxyXG4gICAgICogQHBhcmFtIHdoZW5IaWRkZW4gQ2FsbGJhY2sgdG8gZXhlY3V0ZSB3aGVuIHRoZSBwYW5lbCBpcyBoaWRkZW4uXHJcbiAgICAgKi9cclxuICAgIGhpZGVUaGVuU2hvdyhsZWZ0LCB3aGVuSGlkZGVuKSB7XHJcbiAgICAgICAgY29uc3QgdmlzaWJsZUFsaWduQ2xhc3NOYW1lID0gbGVmdCA/IFNpZGVQYW5lbC5WSVNJQkxFX0xFRlRfUEFORUxfQ0xBU1NfTkFNRSA6XHJcbiAgICAgICAgICAgIFNpZGVQYW5lbC5WSVNJQkxFX1JJR0hUX1BBTkVMX0NMQVNTX05BTUU7XHJcbiAgICAgICAgaWYgKHRoaXMuJHBhbmVsLmhhc0NsYXNzKHZpc2libGVBbGlnbkNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgd2hlbkhpZGRlbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRpbWVUb0hpZGUgPSB0aGlzLmhpZGUod2hlbkhpZGRlbik7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvdyhsZWZ0KTtcclxuICAgICAgICB9LCB0aW1lVG9IaWRlICsgMTApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhciB0aGUgc2lkZSBwYW5lbCdzIGNvbnRlbnRzLlxyXG4gICAgICovXHJcbiAgICBlbXB0eSgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImNsZWFyaW5nIHRoZSBjb250ZW50LlwiKTtcclxuICAgICAgICB0aGlzLiRjb250ZW50LmVtcHR5KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIElmIHRoaXMgcGFuZWwgaXMgdmlzaWJsZSBub3cuXHJcbiAgICAgKi9cclxuICAgIGlzVmlzaWJsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kcGFuZWwuaGFzQ2xhc3MoU2lkZVBhbmVsLlZJU0lCTEVfTEVGVF9QQU5FTF9DTEFTU19OQU1FKSB8fFxyXG4gICAgICAgICAgICB0aGlzLiRwYW5lbC5oYXNDbGFzcyhTaWRlUGFuZWwuVklTSUJMRV9SSUdIVF9QQU5FTF9DTEFTU19OQU1FKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNpZGVQYW5lbCA9IFNpZGVQYW5lbDtcclxuLyoqXHJcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBzaWRlIHBhbmVsIG9iamVjdHMuXHJcbiAqL1xyXG5TaWRlUGFuZWwuUEFORUxfQ0xBU1NfTkFNRSA9IFwiaW5rX3NpZGVfYmFubmVyXCI7XHJcbi8qKlxyXG4gKiBUaGUgY2xhc3MgbW9kaWZpZXIgaW5kaWNhdGluZyB0aGUgcGFuZWwgc2hvdWxkIGFwcGVhciBvbiB0aGUgbGVmdCBzaWRlIG9mXHJcbiAqIHRoZSBzY3JlZW4uIEFkZGluZyB0aGlzIHRvIHRoZSBiYXNlIGNsYXNzIGltbWVkaWF0ZWx5IG1vdmVzIHRoZSBwYW5lbCB0b1xyXG4gKiB0aGUgbGVmdCBhbmQgYmV5b25kIHRoZSBzY3JlZW4gYW5kIGZsaXBzIHRoZSBhcnR3b3JrLlxyXG4gKi9cclxuU2lkZVBhbmVsLk1PRF9MRUZUID0gXCItLWxlZnRcIjtcclxuLyoqXHJcbiAqIFRoZSBjbGFzcyBtb2RpZmllciBpbmRpY2F0aW5nIHRoZSBwYW5lbCBzaG91bGQgYXBwZWFyIG9uIHRoZSByaWdodCBzaWRlXHJcbiAqIG9mIHRoZSBzY3JlZW4uIEFkZGluZyB0aGlzIHRvIHRoZSBiYXNlIGNsYXNzIGltbWVkaWF0ZWx5IG1vdmVzIHRoZSBwYW5lbFxyXG4gKiB0byB0aGUgcmlnaHQgYW5kIGJleW9uZCB0aGUgc2NyZWVuIGFuZCBmbGlwcyB0aGUgYXJ0d29yay5cclxuICovXHJcblNpZGVQYW5lbC5NT0RfUklHSFQgPSBcIi0tcmlnaHRcIjtcclxuLyoqXHJcbiAqIFRoZSBjbGFzcyBtb2RpZmllciBpbmRpY2F0aW5nIHRoZSBwYW5lbCBzaG91bGQgbm93IGJlIHZpc2libGUuIEFkZGluZ1xyXG4gKiB0aGlzIHRvIGEgbGVmdCBvciByaWdodCBwYW5lbCBtYWtlcyBpdCBzbGlkZSBpbnRvIHRoZSBzY3JlZW4sIHRodXMgbWFraW5nXHJcbiAqIGl0IHZpc2libGUgdG8gdGhlIHVzZXIuXHJcbiAqL1xyXG5TaWRlUGFuZWwuTU9EX1ZJU0lCTEUgPSBcIi0tdmlzaWJsZVwiO1xyXG4vKipcclxuICogVGhlIGRlcGVuZGFudCBlbGVtZW50IHRoYXQgb25seSBoYXMgbWVhbmluZyBhcyB0aGUgY29udGVudCBvZiB0aGlzIHNpZGVcclxuICogYmFubmVyLlxyXG4gKi9cclxuU2lkZVBhbmVsLlNVQl9FTEVNRU5UX1NVRkZJWF9DT05URU5UID0gXCJfX2NvbnRlbnRcIjtcclxuLyoqXHJcbiAqIEEgcGFuZWwgdGhhdCBpcyB0byB0aGUgbGVmdCBidXQgbm90IHlldCB2aXNpYmxlLlxyXG4gKi9cclxuU2lkZVBhbmVsLkxFRlRfUEFORUxfQ0xBU1NfTkFNRSA9IFNpZGVQYW5lbC5QQU5FTF9DTEFTU19OQU1FICsgU2lkZVBhbmVsLk1PRF9MRUZUO1xyXG4vKipcclxuICogQSBwYW5lbCB0aGF0IGlzIHRvIHRoZSByaWdodCBidXQgbm90IHlldCB2aXNpYmxlLlxyXG4gKi9cclxuU2lkZVBhbmVsLlJJR0hUX1BBTkVMX0NMQVNTX05BTUUgPSBTaWRlUGFuZWwuUEFORUxfQ0xBU1NfTkFNRSArIFNpZGVQYW5lbC5NT0RfUklHSFQ7XHJcbi8qKlxyXG4gKiBBIHZpc2libGUgcGFuZWwgdG8gdGhlIGxlZnQuXHJcbiAqL1xyXG5TaWRlUGFuZWwuVklTSUJMRV9MRUZUX1BBTkVMX0NMQVNTX05BTUUgPSBTaWRlUGFuZWwuTEVGVF9QQU5FTF9DTEFTU19OQU1FICsgU2lkZVBhbmVsLk1PRF9WSVNJQkxFO1xyXG4vKipcclxuICogQSB2aXNpYmxlIHBhbmVsIHRvIHRoZSByaWdodC5cclxuICovXHJcblNpZGVQYW5lbC5WSVNJQkxFX1JJR0hUX1BBTkVMX0NMQVNTX05BTUUgPSBTaWRlUGFuZWwuUklHSFRfUEFORUxfQ0xBU1NfTkFNRSArIFNpZGVQYW5lbC5NT0RfVklTSUJMRTtcclxuLyoqXHJcbiAqIFRoZSBjbGFzcyBvZiB0aGUgZWxlbWVudCBoYXZpbmcgdGhlIGNvbnRlbnQgb2YgdGhpcyBwYW5lbC5cclxuICovXHJcblNpZGVQYW5lbC5DT05URU5UX0VMRU1FTlRfQ0xBU1NfTkFNRSA9IFNpZGVQYW5lbC5QQU5FTF9DTEFTU19OQU1FICsgU2lkZVBhbmVsLlNVQl9FTEVNRU5UX1NVRkZJWF9DT05URU5UO1xyXG4vKipcclxuICogVGhlIGFuaW1hdGlvbiB0aW1lIHdlJ3ZlIHNldCBmb3IgY2hhbmdlcyB0byBvY2N1ci4gRWFjaCBzbGlkZSBpbi9vdXRcclxuICogdGFrZXMgdGhpcyBsb25nLlxyXG4gKi9cclxuU2lkZVBhbmVsLlNMSURFX1RJTUUgPSAyMDA7XHJcbi8qKlxyXG4gKiBTZXR0aW5nIHRoaXMgYXMgYSBjbGFzcyBtZWFucyB0aGUgc2lkZSBiYW5uZXIgd291bGQgY292ZXIgdGhlIHdob2xlXHJcbiAqIHNjcmVlbi5cclxuICovXHJcblNpZGVQYW5lbC5GVUxMX1NQQU4gPSBcImZ1bGxfc3BhblwiO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TaWRlUGFuZWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5VcGdyYWRlRWRnZSA9IHZvaWQgMDtcclxuY29uc3QgRWRnZV8xID0gcmVxdWlyZShcIi4vRWRnZVwiKTtcclxuY2xhc3MgVXBncmFkZUVkZ2UgZXh0ZW5kcyBFZGdlXzEuRWRnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihncmFwaCwgdjEsIHYyLCB2YyA9IG51bGwpIHtcclxuICAgICAgICBzdXBlcih2MSwgdjIpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSBncmFwaDtcclxuICAgICAgICB0aGlzLnZjID0gdmM7XHJcbiAgICAgICAgaWYgKHZjICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHZjLnNxRGlzdGFuY2VGcm9tKHYxKSAtIHZjLnNxRGlzdGFuY2VGcm9tKHYyKSA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNlbnRlciB2ZXJ0ZXggaXNuJ3QgZXF1aWRpc3RhbnQgdG8gZWRnZSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2ZXJ0aWNlcy5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy56SW5kZXggPSAwO1xyXG4gICAgICAgIGdyYXBoLmFkZEVkZ2UodGhpcyk7XHJcbiAgICB9XHJcbiAgICBnZW5lcmF0ZURPTVN0cmluZygpIHtcclxuICAgICAgICBpZiAodGhpcy52YyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFt4LCB5XSA9IHRoaXMuZ3JhcGgubWFwTG9jYWxDb29yZGluYXRlc1RvU2NyZWVuUG9zaXRpb24odGhpcy5jZW50ZXIpO1xyXG4gICAgICAgICAgICAvLyBub2luc3BlY3Rpb24gQ3NzSW52YWxpZFByb3BlcnR5VmFsdWVcclxuICAgICAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPGRpdiBpZD1cIiR7dGhpcy5pZH1cIlxyXG4gICAgICAgICAgICAgICAgIGNsYXNzPVwidXBncmFkZV9lZGdlLS1saW5lYXIgJHt0aGlzLmlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IFwiXCJ9ICR7dGhpcy5pc0Nvbm5lY3RlZCA/IFwiY29ubmVjdGVkXCIgOiBcIlwifVwiIFxyXG4gICAgICAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6ICR7dGhpcy5sZW5ndGh9cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHt5fXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAke3h9cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZTogJHt0aGlzLnJvdGF0aW9ufXJhZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogJHt0aGlzLnpJbmRleH07XCI+XHJcbiAgICAgICAgICAgIDwvZGl2PmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRpYW1ldGVyID0gTWF0aC5zcXJ0KHRoaXMudmMuc3FEaXN0YW5jZUZyb20odGhpcy52MSkpICogMiArIDI7XHJcbiAgICAgICAgY29uc3QgW3gsIHldID0gdGhpcy5ncmFwaC5tYXBMb2NhbENvb3JkaW5hdGVzVG9TY3JlZW5Qb3NpdGlvbih0aGlzLmNlbnRlcik7XHJcbiAgICAgICAgY29uc3QgdmMxX3ggPSB0aGlzLnZjLmRpc3BsYWNlbWVudEFuZ2xlV2l0aFgodGhpcy52MSk7XHJcbiAgICAgICAgY29uc3QgdmMyX3ggPSB0aGlzLnZjLmRpc3BsYWNlbWVudEFuZ2xlV2l0aFgodGhpcy52Mik7XHJcbiAgICAgICAgY29uc3QgdGhldGExID0gTWF0aC5yb3VuZCgoKDkwIC0gMTgwIC8gTWF0aC5QSSAqIHZjMV94KSArIDM2MCkgJSAzNjApO1xyXG4gICAgICAgIGNvbnN0IHRoZXRhMiA9IE1hdGgucm91bmQoKCg5MCAtIDE4MCAvIE1hdGguUEkgKiB2YzJfeCkgKyAzNjApICUgMzYwKTtcclxuICAgICAgICBjb25zdCBncmFkU3RvcHMgPSBbXTtcclxuICAgICAgICBpZiAodGhldGEyID4gdGhldGExKSB7XHJcbiAgICAgICAgICAgIGdyYWRTdG9wcy5wdXNoKFtgdHJhbnNwYXJlbnQgMGRlZ2AsXHJcbiAgICAgICAgICAgICAgICBgdHJhbnNwYXJlbnQgJHt0aGV0YTF9ZGVnYCxcclxuICAgICAgICAgICAgICAgIGAjZmZmICR7dGhldGExfWRlZ2AsXHJcbiAgICAgICAgICAgICAgICBgI2ZmZiAke3RoZXRhMn1kZWdgLFxyXG4gICAgICAgICAgICAgICAgYHRyYW5zcGFyZW50ICR7dGhldGEyfWRlZ2AsXHJcbiAgICAgICAgICAgICAgICBgdHJhbnNwYXJlbnQgMzYwZGVnYCxdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGdyYWRTdG9wcy5wdXNoKFtgI2ZmZiAwZGVnYCxcclxuICAgICAgICAgICAgICAgIGAjZmZmICR7dGhldGEyfWRlZ2AsXHJcbiAgICAgICAgICAgICAgICBgdHJhbnNwYXJlbnQgJHt0aGV0YTJ9ZGVnYCxcclxuICAgICAgICAgICAgICAgIGB0cmFuc3BhcmVudCAke3RoZXRhMX1kZWdgLFxyXG4gICAgICAgICAgICAgICAgYCNmZmYgJHt0aGV0YTF9ZGVnYCxcclxuICAgICAgICAgICAgICAgIGAjZmZmIDM2MGRlZ2AsXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG5vaW5zcGVjdGlvbiBDc3NJbnZhbGlkUHJvcGVydHlWYWx1ZVxyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCIke3RoaXMuaWR9XCJcclxuICAgICAgICAgICAgICAgICBjbGFzcz1cInVwZ3JhZGVfZWRnZS0tY2lyY3VsYXIgJHt0aGlzLmlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IFwiXCJ9ICR7dGhpcy5pc0Nvbm5lY3RlZCA/IFwiY29ubmVjdGVkXCIgOiBcIlwifVwiXHJcbiAgICAgICAgICAgICAgICAgc3R5bGU9XCJ0b3A6ICR7eX1weDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJHt4fXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJHtkaWFtZXRlcn1weDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke2RpYW1ldGVyfXB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBjb25pYy1ncmFkaWVudCgke2dyYWRTdG9wcy5qb2luKFwiLCBcIil9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogJHt0aGlzLnpJbmRleH07XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXBncmFkZV9lZGdlLS1jaXJjdWxhcl9faW5uZXJcIj48L2Rpdj4gICAgICAgICAgICBcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSWYgdGhpcyBlZGdlIGlzIGFjdGl2YXRlZC4gQW4gb3V0ZXIgdmVydGV4IGNhbiBvbmx5IGhhdmUgPD0xIGVkZ2UgYWN0aXZlLlxyXG4gICAgICovXHJcbiAgICBnZXQgaXNBY3RpdmUoKSB7XHJcbiAgICAgICAgbGV0IHYxVG91Y2hlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnYxLnJlbmRlcmFibGUpIHtcclxuICAgICAgICAgICAgdjFUb3VjaGVkID0gdGhpcy52MS5pc1RvdWNoZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZlcnRleCBvZiB0aGlzLnYxLm5laWdoYm91cnMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2ZXJ0ZXggIT0gdGhpcy52MiAmJiB2ZXJ0ZXguaXNUb3VjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdjFUb3VjaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdjJUb3VjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMudjIucmVuZGVyYWJsZSkge1xyXG4gICAgICAgICAgICB2MlRvdWNoZWQgPSB0aGlzLnYyLmlzVG91Y2hlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdmVydGV4IG9mIHRoaXMudjIubmVpZ2hib3Vycy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZlcnRleCAhPSB0aGlzLnYxICYmIHZlcnRleC5pc1RvdWNoZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2MlRvdWNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2MVRvdWNoZWQgJiYgdjJUb3VjaGVkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0aGlzIGVkZ2UgaXMgdG91Y2hlZC5cclxuICAgICAqL1xyXG4gICAgZ2V0IGlzQ29ubmVjdGVkKCkge1xyXG4gICAgICAgIHJldHVybiAoKHRoaXMudjEucmVuZGVyYWJsZSAmJiB0aGlzLnYxLmlzVG91Y2hlZCB8fFxyXG4gICAgICAgICAgICAhdGhpcy52MS5yZW5kZXJhYmxlICYmIHRoaXMudjEuaXNDb25uZWN0ZWQpIHx8XHJcbiAgICAgICAgICAgICh0aGlzLnYyLnJlbmRlcmFibGUgJiYgdGhpcy52Mi5pc1RvdWNoZWQgfHxcclxuICAgICAgICAgICAgICAgICF0aGlzLnYyLnJlbmRlcmFibGUgJiYgdGhpcy52Mi5pc0Nvbm5lY3RlZCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBkb1JlZnJlc2hSZW5kZXJlZEVsZW1lbnQoJGVsZW1lbnQpIHtcclxuICAgICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhcImFjdGl2ZSBjb25uZWN0ZWRcIik7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHtcclxuICAgICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoXCJjb25uZWN0ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGNlbnRlcigpIHtcclxuICAgICAgICBpZiAodGhpcy52YyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5jZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbdGhpcy52Yy54LCB0aGlzLnZjLnldO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVXBncmFkZUVkZ2UgPSBVcGdyYWRlRWRnZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXBncmFkZUVkZ2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cFVwZ3JhZGVHcmFwaCA9IGV4cG9ydHMuVXBncmFkZUdyYXBoID0gdm9pZCAwO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vY29tbW9uXCIpO1xyXG5jb25zdCBHcmFwaF8xID0gcmVxdWlyZShcIi4vR3JhcGhcIik7XHJcbmNvbnN0IFNpZGVQYW5lbF8xID0gcmVxdWlyZShcIi4vU2lkZVBhbmVsXCIpO1xyXG5jb25zdCBVcGdyYWRlVmVydGV4Q29uZmlnXzEgPSByZXF1aXJlKFwiLi9VcGdyYWRlVmVydGV4Q29uZmlnXCIpO1xyXG4vKipcclxuICogR3JhcGggc2hvd2luZyB0aGUgdXBkYXRlcy5cclxuICovXHJcbmNsYXNzIFVwZ3JhZGVHcmFwaCBleHRlbmRzIEdyYXBoXzEuR3JhcGgge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihpZCkge1xyXG4gICAgICAgIHN1cGVyKGlkKTtcclxuICAgIH1cclxuICAgIHJlc2V0R3JhcGgoKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB2ZXJ0ZXggb2YgdGhpcy52ZXJ0aWNlcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICB2ZXJ0ZXgucmVzZXRBY3RpdmF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVmcmVzaFJlbmRlcmVkRWxlbWVudCgpO1xyXG4gICAgfVxyXG4gICAgZG9SZWZyZXNoUmVuZGVyZWRFbGVtZW50KCRlbGVtZW50KSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB2ZXJ0ZXggb2YgdGhpcy52ZXJ0aWNlcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICB2ZXJ0ZXgucmVmcmVzaFJlbmRlcmVkRWxlbWVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IHN0YXJ0VlRvRWRnZSBvZiB0aGlzLmVkZ2VzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWRnZSBvZiBzdGFydFZUb0VkZ2UudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGVkZ2UucmVmcmVzaFJlbmRlcmVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2VuZXJhdGVBY3RpdmVWZXJ0ZXhFZmZlY3RzRE9NU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IG5ldEVmZmVjdHMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBhdG9taWNUeXBlIG9mICgwLCBjb21tb25fMS5nZXRFbnVtSXRlcmF0b3IpKFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5BdG9taWNVcGdyYWRlVmVydGV4VHlwZSkpIHtcclxuICAgICAgICAgICAgbmV0RWZmZWN0cy5zZXQoYXRvbWljVHlwZSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBhY3RpdmVOb2RlcyA9IDA7XHJcbiAgICAgICAgbGV0IHRvdGFsTm9kZXMgPSAwO1xyXG4gICAgICAgIGxldCBhY3RpdmF0aW9ucyA9IDA7XHJcbiAgICAgICAgbGV0IHRvdGFsQWN0aXZhdGlvbiA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCB2ZXJ0ZXggb2YgdGhpcy52ZXJ0aWNlcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoIXZlcnRleC5yZW5kZXJhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b3RhbE5vZGVzKys7XHJcbiAgICAgICAgICAgIGFjdGl2YXRpb25zICs9IHZlcnRleC5hY3RpdmF0aW9uO1xyXG4gICAgICAgICAgICB0b3RhbEFjdGl2YXRpb24gKz0gdmVydGV4Lm1heEFjdGl2YXRpb247XHJcbiAgICAgICAgICAgIGlmICghdmVydGV4LmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3RpdmVOb2RlcysrO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0b21pY1R5cGUgb2YgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVUb0F0b21pYy5nZXQodmVydGV4LnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBuZXRFZmZlY3RzLnNldChhdG9taWNUeXBlLCBuZXRFZmZlY3RzLmdldChhdG9taWNUeXBlKSArXHJcbiAgICAgICAgICAgICAgICAgICAgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVSYXJpdHlMZXZlbHMuZ2V0KHZlcnRleC50eXBlKS5nZXQodmVydGV4LnJhcml0eSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVmZmVjdFN0cmluZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IFthdG9taWNUeXBlLCB2YWx1ZV0gb2YgbmV0RWZmZWN0cy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgZWZmZWN0U3RyaW5ncy5wdXNoKFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5BdG9taWNVcGdyYWRlRGVzY0dlbmVyYXRvcnMuZ2V0KGF0b21pY1R5cGUpKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ1cGdyYWRlX2RldGFpbHMgdGhlbWUtLXNhZmVcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncnVuZ2VfcGFuZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ3J1bmdlX3BhbmVsX19pY29uXCI+PGkgY2xhc3M9XCJmYS1saWdodCBmYS1jaGFydC1yYWRhclwiIHN0eWxlPVwicm90YXRlOiAzMGRlZztcIj48L2k+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdydW5nZV9wYW5lbF9fc3VidGl0bGVcIj5JbnZlc3RpdHVyZSBSZWNsYW1hdGlvbjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncnVuZ2VfcGFuZWxfX3RpdGxlXCI+Q29nbml0aXZlIFJlc2VxdWVuY2luZzwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGhlbWVfdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPllvdSBmaW5kIHlvdXJzZWxmIHN0YXJpbmcgZG93biBhIFByaW9tcmRpYWwgTGV2aWF0aGFuLlxyXG4gICAgICAgICAgICAgICAgICAgIE9uY2UgdGhlIGVtYm9kaW1lbnQgb2YgR3Jvd3RoLCBhbGwgdGhhdCByZW1haW5zIG9mIHRoaXMgZGVhZCBcclxuICAgICAgICAgICAgICAgICAgICBUaXRhbiBvZiB0aGUgQWJ5c3MgaXMgYSBjbHVzdGVyIG9mIGNyZWVwaW5nIGJyYW5jaGVzLjwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cD5IYXZpbmcgZmFsbGVuIGZyb20gdGhlIGdyYWNlIG9mIFdlIE1hbnksIEhpcyBjb25jaW91c25lc3MgXHJcbiAgICAgICAgICAgICAgICAgICAgaXMgbG9uZyBwZXJpc2hlZCwgYW5kIGV2ZW4gaWYgbmV3IGJyYW5jaGVzIGdyb3cgLSB0aGV5IGFyZSBcclxuICAgICAgICAgICAgICAgICAgICBhbGwgYWxyZWFkeSB3aXRoZXJlZCBhbmQgZGVhZC4gSGlzIGpvdXJuZXkgaGFzIGNvbWUgdG8gYW4gXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLjwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cD5ZZXQgZmF0ZSBpcyBub3QgZG9uZSB3aXRoIHRoaXMgRmlyc3Rib3JuLCBhbmQgZW9ucyBsYXRlcixcclxuICAgICAgICAgICAgICAgICAgICB1cG9uIGEgc2lsdmVyeSwgc2hyaXZlbGxlZCBicmFuY2gsIGRhcmsgYXp1cmUgbGVhdmVzIGJlZ2luIHRvIGdyb3cuPC9wPjxici8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+RHJvcCBieSBkcm9wLCBiaXQgYnkgYml0LiBJdCBpcyB1bnN0b3BwYWJsZS48L3A+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aGVtZV9zdWJoZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICBQcm9ncmVzc1xyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeSB1cGdyYWRlX3N0YXRzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5Ob2RlcyBhY3RpdmF0ZWQ8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke2FjdGl2ZU5vZGVzfSAvICR7dG90YWxOb2Rlc308L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+UmVjbGFtYXRpb24gbGV2ZWw8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke2FjdGl2YXRpb25zfSAvICR7dG90YWxBY3RpdmF0aW9ufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aGVtZV9zdWJoZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICBDdW1tdWxhdGl2ZSBFZmZlY3RzXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5IHVwZ3JhZGVfZWZmZWN0c1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICR7ZWZmZWN0U3RyaW5ncy5qb2luKFwiXCIpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PmA7XHJcbiAgICB9XHJcbiAgICBnZXQgU3R5bGVTdWJjbGFzcygpIHtcclxuICAgICAgICByZXR1cm4gXCJza2lsbFwiO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVXBncmFkZUdyYXBoID0gVXBncmFkZUdyYXBoO1xyXG5mdW5jdGlvbiBzZXR1cFVwZ3JhZGVHcmFwaExvZ2ljKGdyYXBoKSB7XHJcbiAgICBjb25zdCAkdXBncmFkZUdyYXBoQXJlYSA9ICQoXCIjc2tpbGxfZ3JhcGhfYXJlYVwiKTtcclxuICAgIGNvbnN0IHNpZGVQYW5lbCA9IG5ldyBTaWRlUGFuZWxfMS5TaWRlUGFuZWwoJChcIiNzaWRlX2Jhbm5lclwiKSk7XHJcbiAgICBzaWRlUGFuZWwuc3dhcENvbnRlbnQoZ3JhcGguZ2VuZXJhdGVBY3RpdmVWZXJ0ZXhFZmZlY3RzRE9NU3RyaW5nKCkpO1xyXG4gICAgJChkb2N1bWVudCkub24oXCJrZXl1cFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICgkdXBncmFkZUdyYXBoQXJlYS5pcyhcIjpoaWRkZW5cIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZS5rZXkgIT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNpZGVQYW5lbC5zd2FwQ29udGVudChncmFwaC5nZW5lcmF0ZUFjdGl2ZVZlcnRleEVmZmVjdHNET01TdHJpbmcoKSk7XHJcbiAgICAgICAgc2lkZVBhbmVsLnRvZ2dsZShmYWxzZSk7XHJcbiAgICB9KTtcclxuICAgICR1cGdyYWRlR3JhcGhBcmVhLm9uKFwiY2xpY2tcIiwgXCIuc2tpbGxfdmVydGV4LmNvbm5lY3RlZDpub3QoLmFjdGl2ZSlcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCB2ZXJ0ZXggPSBncmFwaC5sb29rdXBWZXJ0ZXhCeUlkKCQodGhpcykuYXR0cihcImlkXCIpKTtcclxuICAgICAgICB2ZXJ0ZXguaW5jcmVhc2VBY3RpdmF0aW9uKCk7XHJcbiAgICAgICAgc2lkZVBhbmVsLnN3YXBDb250ZW50KGdyYXBoLmdlbmVyYXRlQWN0aXZlVmVydGV4RWZmZWN0c0RPTVN0cmluZygpKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHNldHVwVXBncmFkZUdyYXBoKCRlbGVtZW50LCBncmFwaCkge1xyXG4gICAgaWYgKCRlbGVtZW50Lmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgJGVsZW1lbnQuYXBwZW5kKGdyYXBoLmdlbmVyYXRlRE9NU3RyaW5nKCkpO1xyXG4gICAgc2V0dXBVcGdyYWRlR3JhcGhMb2dpYyhncmFwaCk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFVwZ3JhZGVHcmFwaCA9IHNldHVwVXBncmFkZUdyYXBoO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1VcGdyYWRlR3JhcGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5VcGdyYWRlVmVydGV4ID0gdm9pZCAwO1xyXG5jb25zdCBSYXJpdHlfMSA9IHJlcXVpcmUoXCIuLi9kYXRhL1Jhcml0eVwiKTtcclxuY29uc3QgVXBncmFkZVZlcnRleENvbmZpZ18xID0gcmVxdWlyZShcIi4vVXBncmFkZVZlcnRleENvbmZpZ1wiKTtcclxuY29uc3QgVmVydGV4XzEgPSByZXF1aXJlKFwiLi9WZXJ0ZXhcIik7XHJcbmNsYXNzIFVwZ3JhZGVWZXJ0ZXggZXh0ZW5kcyBWZXJ0ZXhfMS5WZXJ0ZXgge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihncmFwaCwgcmVuZGVyYWJsZSA9IHRydWUsIHR5cGUgPSBudWxsLCByYXJpdHkgPSBudWxsLCBzdGFydEFjdGl2YXRpb24gPSAwKSB7XHJcbiAgICAgICAgc3VwZXIoZ3JhcGguaWQsIGdyYXBoLnZlcnRleENvdW50KTtcclxuICAgICAgICB0aGlzLmdyYXBoID0gZ3JhcGg7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJhYmxlID0gcmVuZGVyYWJsZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMucmFyaXR5ID0gcmFyaXR5O1xyXG4gICAgICAgIHRoaXMuc3RhcnRBY3RpdmF0aW9uID0gc3RhcnRBY3RpdmF0aW9uO1xyXG4gICAgICAgIGdyYXBoLmFkZFZlcnRleCh0aGlzKTtcclxuICAgICAgICB0aGlzLm1heEFjdGl2YXRpb24gPSBVcGdyYWRlVmVydGV4LlJhcml0eVRvTWF4QWN0TWFwLmdldCh0aGlzLnJhcml0eSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRBY3RpdmF0aW9uID4gdGhpcy5tYXhBY3RpdmF0aW9uIHx8IHRoaXMuc3RhcnRBY3RpdmF0aW9uIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgYXJndW1lbnQ6IHN0YXJ0IGFjdGl2YXRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2FjdGl2YXRpb24gPSB0aGlzLnN0YXJ0QWN0aXZhdGlvbjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZG9SZWZyZXNoUmVuZGVyZWRFbGVtZW50KCRlbGVtZW50KSB7XHJcbiAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJjb25uZWN0ZWQgdG91Y2hlZCBhY3RpdmUgb3V0ZXJcIik7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgJGVsZW1lbnQuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzVG91Y2hlZCkge1xyXG4gICAgICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhcInRvdWNoZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgICRlbGVtZW50LmFkZENsYXNzKFwiY29ubmVjdGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb3ZlcmVkQW5nbGUgPSB0aGlzLl9hY3RpdmF0aW9uIC8gdGhpcy5tYXhBY3RpdmF0aW9uICogMzYwO1xyXG4gICAgICAgICRlbGVtZW50LmZpbmQoXCIuc2tpbGxfdmVydGV4X19iYWNrZHJvcFwiKS5jc3MoXCJiYWNrZ3JvdW5kXCIsIGBjb25pYy1ncmFkaWVudCgke1VwZ3JhZGVWZXJ0ZXguUmFyaXR5VG9Db2xvck1hcC5nZXQodGhpcy5yYXJpdHkpfSAwZGVnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7VXBncmFkZVZlcnRleC5SYXJpdHlUb0NvbG9yTWFwLmdldCh0aGlzLnJhcml0eSl9ICR7Y292ZXJlZEFuZ2xlfWRlZywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjNzc3ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2NvdmVyZWRBbmdsZX1kZWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjNzc3ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNjBkZWcpYCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlRE9NU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IFt4LCB5XSA9IHRoaXMuZ3JhcGgubWFwTG9jYWxDb29yZGluYXRlc1RvU2NyZWVuUG9zaXRpb24oW3RoaXMueCwgdGhpcy55XSk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJlbmRlcmFibGUpIHtcclxuICAgICAgICAgICAgLy8gbm9pbnNwZWN0aW9uIENzc0ludmFsaWRQcm9wZXJ0eVZhbHVlXHJcbiAgICAgICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibnVsbF92ZXJ0ZXhcIlxyXG4gICAgICAgICAgICAgICAgICAgICBpZD1cIiR7dGhpcy5pZH1cIlxyXG4gICAgICAgICAgICAgICAgICAgICBzdHlsZT1cImxlZnQ6ICR7eH1weDsgdG9wOiAke3l9cHg7XCI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMudHlwZSA9PSBudWxsID8gXCJcIiA6IFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlSWNvbnMuZ2V0KHRoaXMudHlwZSk7XHJcbiAgICAgICAgY29uc3QgZXh0cmFDbGFzc2VzID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMucmFyaXR5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZXh0cmFDbGFzc2VzLnB1c2goYHJhcml0eS0tJHtSYXJpdHlfMS5SYXJpdHlbdGhpcy5yYXJpdHldLnRvTG93ZXJDYXNlKCl9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGV4dHJhQ2xhc3Nlcy5wdXNoKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc1RvdWNoZWQpIHtcclxuICAgICAgICAgICAgZXh0cmFDbGFzc2VzLnB1c2goXCJ0b3VjaGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc0Nvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICBleHRyYUNsYXNzZXMucHVzaChcImNvbm5lY3RlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc3Bva2VzID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMubWF4QWN0aXZhdGlvbiA+IDEpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1heEFjdGl2YXRpb247IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW5nbGUgPSAzNjAgLyB0aGlzLm1heEFjdGl2YXRpb24gKiBpO1xyXG4gICAgICAgICAgICAgICAgc3Bva2VzLnB1c2goYDxkaXYgY2xhc3M9XCJwcm9ncmVzc19jaXJjbGVfX3Nwb2tlXCIgc3R5bGU9XCJyb3RhdGU6ICR7YW5nbGV9ZGVnO1wiPjwvZGl2PmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvdmVyZWRBbmdsZSA9IHRoaXMuX2FjdGl2YXRpb24gLyB0aGlzLm1heEFjdGl2YXRpb24gKiAzNjA7XHJcbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIENzc0ludmFsaWRQcm9wZXJ0eVZhbHVlXHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNraWxsX3ZlcnRleCAke2V4dHJhQ2xhc3Nlcy5qb2luKFwiIFwiKX1cIlxyXG4gICAgICAgICAgICAgICAgIGlkPVwiJHt0aGlzLmlkfVwiXHJcbiAgICAgICAgICAgICAgICAgc3R5bGU9XCJsZWZ0OiAke3h9cHg7IHRvcDogJHt5fXB4O1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNraWxsX3ZlcnRleF9fYmFja2Ryb3BcIlxyXG4gICAgICAgICAgICAgICAgICAgICBzdHlsZT1cImJhY2tncm91bmQ6IGNvbmljLWdyYWRpZW50KCR7VXBncmFkZVZlcnRleC5SYXJpdHlUb0NvbG9yTWFwLmdldCh0aGlzLnJhcml0eSl9IDBkZWcsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtVcGdyYWRlVmVydGV4LlJhcml0eVRvQ29sb3JNYXAuZ2V0KHRoaXMucmFyaXR5KX0gJHtjb3ZlcmVkQW5nbGV9ZGVnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICM3NzcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7Y292ZXJlZEFuZ2xlfWRlZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICM3NzcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM2MGRlZyk7XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3NfY2lyY2xlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgJHtzcG9rZXMuam9pbihcIlwiKX0gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2tpbGxfdmVydGV4X19jb3ZlclwiID48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJza2lsbF92ZXJ0ZXhfX2NvcmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAke2ljb259XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJza2lsbF92ZXJ0ZXhfX2luZm9cIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmhlYWRfdGV4dFwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncnVuZ2VfbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdydW5nZV9sYWJlbF9fdGl0bGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncnVuZ2VfbGFiZWxfX3RpdGxlX19sZWZ0XCI+JHtSYXJpdHlfMS5SYXJpdHlbdGhpcy5yYXJpdHldfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdydW5nZV9sYWJlbF9fdGl0bGVfX3JpZ2h0XCI+JHtVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZU5hbWVzLmdldCh0aGlzLnR5cGUpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdydW5nZV9sYWJlbF9fZGVzY1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZURlc2NHZW5lcmF0b3JzLmdldCh0aGlzLnR5cGUpKFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlUmFyaXR5TGV2ZWxzLmdldCh0aGlzLnR5cGUpLmdldCh0aGlzLnJhcml0eSkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZhdGUgdGhpcyB2ZXJ0ZXggYnkgb25lIGRlZ3JlZS5cclxuICAgICAqL1xyXG4gICAgaW5jcmVhc2VBY3RpdmF0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmF0aW9uID49IHRoaXMubWF4QWN0aXZhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWN0aXZhdGUgdW5jb25uZWN0ZWQgdmVydGV4XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9hY3RpdmF0aW9uKys7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2YXRpb24gPT0gMSkge1xyXG4gICAgICAgICAgICAvLyBBIG5ldyB2ZXJ0ZXggd2FzIGFjdGl2YXRlZC4gUmVmcmVzaCB0aGUgZ3JhcGguXHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGgucmVmcmVzaFJlbmRlcmVkRWxlbWVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gT25seSB0aGlzIHZlcnRleCB3b3VsZCd2ZSBjaGFuZ2VkLlxyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hSZW5kZXJlZEVsZW1lbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0IHRoaXMgdmVydGV4IHRvIGl0cyBvcmlnaW5hbCBhY3RpdmF0aW9uLlxyXG4gICAgICovXHJcbiAgICByZXNldEFjdGl2YXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2YXRpb24gPT0gdGhpcy5zdGFydEFjdGl2YXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9hY3RpdmF0aW9uID0gdGhpcy5zdGFydEFjdGl2YXRpb247XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgaXMsIG9yIG9uZSBvZiBpdHMgbmVpZ2hib3VycyBpcyB0b3VjaGVkLiBBIGNvbm5lY3RlZCB2ZXJ0ZXggY2FuXHJcbiAgICAgKiBiZSB0b3VjaGVkLCBpZiBpdCBpc24ndCBhbHJlYWR5IGFjdGl2ZSBvZmMuXHJcbiAgICAgKi9cclxuICAgIGdldCBpc0Nvbm5lY3RlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1RvdWNoZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgdiBvZiB0aGlzLm5laWdoYm91cnMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgaWYgKCh2LnJlbmRlcmFibGUgJiYgdi5pc1RvdWNoZWQpIHx8ICghdi5yZW5kZXJhYmxlICYmIHYuaXNDb25uZWN0ZWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhlIHZlcnRleCBoYXMgZXZlbiBzbGlnaHRseSBiZWVuIGFjdGl2YXRlZC5cclxuICAgICAqL1xyXG4gICAgZ2V0IGlzVG91Y2hlZCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMucmVuZGVyYWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmF0aW9uID4gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGUgdmVydGV4IGlzIGFjdGl2ZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IGlzQWN0aXZlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5yZW5kZXJhYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2YXRpb24gPT0gdGhpcy5tYXhBY3RpdmF0aW9uO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgYWN0aXZhdGlvbnMgdGhpcyB2ZXJ0ZXggaG9sZHMuXHJcbiAgICAgKi9cclxuICAgIGdldCBhY3RpdmF0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmF0aW9uO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVXBncmFkZVZlcnRleCA9IFVwZ3JhZGVWZXJ0ZXg7XHJcblVwZ3JhZGVWZXJ0ZXguUmFyaXR5VG9NYXhBY3RNYXAgPSBuZXcgTWFwKFtcclxuICAgIFtSYXJpdHlfMS5SYXJpdHkuQmxhY2ssIDFdLFxyXG4gICAgW1Jhcml0eV8xLlJhcml0eS5Db21tb24sIDFdLFxyXG4gICAgW1Jhcml0eV8xLlJhcml0eS5VbmNvbW1vbiwgMl0sXHJcbiAgICBbUmFyaXR5XzEuUmFyaXR5LlJhcmUsIDNdLFxyXG4gICAgW1Jhcml0eV8xLlJhcml0eS5FcGljLCA1XSxcclxuICAgIFtSYXJpdHlfMS5SYXJpdHkuTGVnZW5kYXJ5LCA3XSxcclxuICAgIFtSYXJpdHlfMS5SYXJpdHkuQXJ0ZWZhY3QsIDddLFxyXG5dKTtcclxuVXBncmFkZVZlcnRleC5SYXJpdHlUb0NvbG9yTWFwID0gbmV3IE1hcChbXHJcbiAgICBbUmFyaXR5XzEuUmFyaXR5LkJsYWNrLCBcIiNGRkVcIl0sXHJcbiAgICBbUmFyaXR5XzEuUmFyaXR5LkNvbW1vbiwgXCIjMjQyNTI4XCJdLFxyXG4gICAgW1Jhcml0eV8xLlJhcml0eS5VbmNvbW1vbiwgXCIjMUZDMjE5XCJdLFxyXG4gICAgW1Jhcml0eV8xLlJhcml0eS5SYXJlLCBcIiM0OTkwRTJcIl0sXHJcbiAgICBbUmFyaXR5XzEuUmFyaXR5LkVwaWMsIFwiIzk4MTBFMFwiXSxcclxuICAgIFtSYXJpdHlfMS5SYXJpdHkuTGVnZW5kYXJ5LCBcIiNGRUEyMjdcIl0sXHJcbiAgICBbUmFyaXR5XzEuUmFyaXR5LkFydGVmYWN0LCBcIiM5YTVjNDBcIl0sXHJcbl0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1VcGdyYWRlVmVydGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQXRvbWljVXBncmFkZURlc2NHZW5lcmF0b3JzID0gZXhwb3J0cy5VcGdyYWRlVG9BdG9taWMgPSBleHBvcnRzLkF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlID0gZXhwb3J0cy5VcGdyYWRlUmFyaXR5TGV2ZWxzID0gZXhwb3J0cy5VcGdyYWRlSWNvbnMgPSBleHBvcnRzLlVwZ3JhZGVEZXNjR2VuZXJhdG9ycyA9IGV4cG9ydHMuVXBncmFkZU5hbWVzID0gZXhwb3J0cy5VcGdyYWRlVmVydGV4VHlwZSA9IHZvaWQgMDtcclxuY29uc3QgUmFyaXR5XzEgPSByZXF1aXJlKFwiLi4vZGF0YS9SYXJpdHlcIik7XHJcbnZhciBVcGdyYWRlVmVydGV4VHlwZTtcclxuKGZ1bmN0aW9uIChVcGdyYWRlVmVydGV4VHlwZSkge1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTeW5jXCJdID0gMF0gPSBcIlN5bmNcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiTGFuZE1vdmVtZW50XCJdID0gMV0gPSBcIkxhbmRNb3ZlbWVudFwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTZWFNb3ZlbWVudFwiXSA9IDJdID0gXCJTZWFNb3ZlbWVudFwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTdGVwTW92ZW1lbnRcIl0gPSAzXSA9IFwiU3RlcE1vdmVtZW50XCI7XHJcbiAgICBVcGdyYWRlVmVydGV4VHlwZVtVcGdyYWRlVmVydGV4VHlwZVtcIkRlYXRoU2F2ZXNcIl0gPSA0XSA9IFwiRGVhdGhTYXZlc1wiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJBQ1wiXSA9IDVdID0gXCJBQ1wiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJIUFwiXSA9IDZdID0gXCJIUFwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJBY2N1cmFjeVwiXSA9IDddID0gXCJBY2N1cmFjeVwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJEYW1hZ2VcIl0gPSA4XSA9IFwiRGFtYWdlXCI7XHJcbiAgICBVcGdyYWRlVmVydGV4VHlwZVtVcGdyYWRlVmVydGV4VHlwZVtcIlByb2ZCb251c1wiXSA9IDldID0gXCJQcm9mQm9udXNcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiSW5pdGlhdGl2ZVwiXSA9IDEwXSA9IFwiSW5pdGlhdGl2ZVwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTYXZlc0FsbFwiXSA9IDExXSA9IFwiU2F2ZXNBbGxcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU2F2ZXNTdHJEZXhDb25cIl0gPSAxMl0gPSBcIlNhdmVzU3RyRGV4Q29uXCI7XHJcbiAgICBVcGdyYWRlVmVydGV4VHlwZVtVcGdyYWRlVmVydGV4VHlwZVtcIlNhdmVzSW50V2lzQ2hhXCJdID0gMTNdID0gXCJTYXZlc0ludFdpc0NoYVwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTa2lsbHNBbGxcIl0gPSAxNF0gPSBcIlNraWxsc0FsbFwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTa2lsbHNOaW5qdXRzdVwiXSA9IDE1XSA9IFwiU2tpbGxzTmluanV0c3VcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU2tpbGxzV2lsZEhlYXJ0XCJdID0gMTZdID0gXCJTa2lsbHNXaWxkSGVhcnRcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU2tpbGxzSW5kb2N0cmluYXRpb25cIl0gPSAxN10gPSBcIlNraWxsc0luZG9jdHJpbmF0aW9uXCI7XHJcbiAgICBVcGdyYWRlVmVydGV4VHlwZVtVcGdyYWRlVmVydGV4VHlwZVtcIlNraWxsc0JyaWxsaWFuY2VcIl0gPSAxOF0gPSBcIlNraWxsc0JyaWxsaWFuY2VcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU2tpbGxzUHJvZGlneVwiXSA9IDE5XSA9IFwiU2tpbGxzUHJvZGlneVwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c1N0clwiXSA9IDIwXSA9IFwiU3RhdHNTdHJcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU3RhdHNEZXhcIl0gPSAyMV0gPSBcIlN0YXRzRGV4XCI7XHJcbiAgICBVcGdyYWRlVmVydGV4VHlwZVtVcGdyYWRlVmVydGV4VHlwZVtcIlN0YXRzQ29uXCJdID0gMjJdID0gXCJTdGF0c0NvblwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c0ludFwiXSA9IDIzXSA9IFwiU3RhdHNJbnRcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU3RhdHNXaXNcIl0gPSAyNF0gPSBcIlN0YXRzV2lzXCI7XHJcbiAgICBVcGdyYWRlVmVydGV4VHlwZVtVcGdyYWRlVmVydGV4VHlwZVtcIlN0YXRzQ2hhXCJdID0gMjVdID0gXCJTdGF0c0NoYVwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c0ludERleFwiXSA9IDI2XSA9IFwiU3RhdHNJbnREZXhcIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU3RhdHNXaXNDb25cIl0gPSAyN10gPSBcIlN0YXRzV2lzQ29uXCI7XHJcbiAgICBVcGdyYWRlVmVydGV4VHlwZVtVcGdyYWRlVmVydGV4VHlwZVtcIlN0YXRzQ2hhU3RyXCJdID0gMjhdID0gXCJTdGF0c0NoYVN0clwiO1xyXG4gICAgVXBncmFkZVZlcnRleFR5cGVbVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c1N0ckRleENvblwiXSA9IDI5XSA9IFwiU3RhdHNTdHJEZXhDb25cIjtcclxuICAgIFVwZ3JhZGVWZXJ0ZXhUeXBlW1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU3RhdHNJbnRXaXNDaGFcIl0gPSAzMF0gPSBcIlN0YXRzSW50V2lzQ2hhXCI7XHJcbiAgICBVcGdyYWRlVmVydGV4VHlwZVtVcGdyYWRlVmVydGV4VHlwZVtcIk5VTExcIl0gPSAzMV0gPSBcIk5VTExcIjtcclxufSkoVXBncmFkZVZlcnRleFR5cGUgPSBleHBvcnRzLlVwZ3JhZGVWZXJ0ZXhUeXBlIHx8IChleHBvcnRzLlVwZ3JhZGVWZXJ0ZXhUeXBlID0ge30pKTtcclxuZXhwb3J0cy5VcGdyYWRlTmFtZXMgPSBuZXcgTWFwKFtcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TeW5jLCBcIlN5bmNocm9uaXphdGlvblwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5MYW5kTW92ZW1lbnQsIFwiQWNjZWxlcmF0aW9uXCJdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNlYU1vdmVtZW50LCBcIk1hcmluZSBBZGFwdGF0aW9uXCJdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0ZXBNb3ZlbWVudCwgXCJVbmZldHRlcmVkIE1vYmlsaXR5XCJdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkRlYXRoU2F2ZXMsIFwiRGVhdGggV2FyZFwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5BQywgXCJBcm1vclwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5IUCwgXCJWaXRhbGl0eVwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5BY2N1cmFjeSwgXCJBY2N1cmFjeVwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5EYW1hZ2UsIFwiUnVpblwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5Qcm9mQm9udXMsIFwiU3luYXB0aWMgRXZvbHV0aW9uXCJdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkluaXRpYXRpdmUsIFwiUmVmbGV4ZXNcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2F2ZXNBbGwsIFwiQXNzZXJ0aW9uIG9mIExpZmVcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2F2ZXNTdHJEZXhDb24sIFwiQXNzZXJ0aW9uIG9mIEJvZHlcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2F2ZXNJbnRXaXNDaGEsIFwiQXNzZXJ0aW9uIG9mIE1pbmRcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzQWxsLCBcIk9mIEFsbCBUcmFkZXNcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzTmluanV0c3UsIFwiTmluanV0c3VcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzV2lsZEhlYXJ0LCBcIldpbGQgSGVhcnRcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzSW5kb2N0cmluYXRpb24sIFwiSW5kb2N0cmluYXRpb25cIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzQnJpbGxpYW5jZSwgXCJCcmlsbGlhbmNlXCJdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc1Byb2RpZ3ksIFwiUHJvZGlneVwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1N0ciwgXCJTdHJlbmd0aFwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0RleCwgXCJEZXh0ZXJpdHlcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDb24sIFwiQ29uc3RpdHV0aW9uXCJdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50LCBcIkludGVsbGlnZW5jZVwiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1dpcywgXCJXaXNkb21cIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDaGEsIFwiQ2hhcmlzbWFcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnREZXgsIFwiU2hyZXdkbmVzc1wiXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1dpc0NvbiwgXCJTdGFiaWxpdHlcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDaGFTdHIsIFwiQXV0aG9yaXR5XCJdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzU3RyRGV4Q29uLCBcIlBoeXNpcXVlIFVwZ3JhZGVcIl0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnRXaXNDaGEsIFwiQ29nbml0aW9uIFVwZ3JhZGVcIl0sXHJcbl0pO1xyXG5leHBvcnRzLlVwZ3JhZGVEZXNjR2VuZXJhdG9ycyA9IG5ldyBNYXAoW1xyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN5bmMsXHJcbiAgICAgICAgKG4pID0+IGBBdHR1bmVtZW50IHNsb3RzICske259LCBjYW4gYmUgdXNlZCBmb3IgbWFzcyBhdHR1bmVtZW50LmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkxhbmRNb3ZlbWVudCxcclxuICAgICAgICAobikgPT4gYFdhbGtpbmcgU3BlZWQgaW5jcmVhc2VzIGJ5ICR7bn1mdC5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TZWFNb3ZlbWVudCxcclxuICAgICAgICAobikgPT4gYFN3aW1taW5nIFNwZWVkIGluY3JlYXNlcyBieSAke259ZnQuIENhbiBicmVhdGhlIHVuZGVyd2F0ZXIuYF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RlcE1vdmVtZW50LFxyXG4gICAgICAgIChuKSA9PiBgQXMgYW4gYWN0aW9uLCBjYW4gdGVsZXBvcnQgJHtufSB0aW1lcyB0aGUgd2Fsa2luZyBzcGVlZCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwdG8gcHJvZmljaWVuY3kgYm9udXMgdGltZXMgcGVyIGxvbmcgcmVzdC5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5EZWF0aFNhdmVzLFxyXG4gICAgICAgIChuKSA9PiBgR2FpbiAke259IHRvIGRlYXRoIHNhdmVzLmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkFDLFxyXG4gICAgICAgIChuKSA9PiBgR2FpbiAke259IEFDYF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuSFAsXHJcbiAgICAgICAgKG4pID0+IGBIUCBpbmNyZWFzZXMgYnkgJHtufSBwZXIgbGV2ZWwuYF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuQWNjdXJhY3ksXHJcbiAgICAgICAgKG4pID0+IGBUby1oaXQgcm9sbHMgYW5kIHNhdmUgRENzIGluY3JlYXNlIGJ5ICR7bn0uYF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuRGFtYWdlLFxyXG4gICAgICAgIChuKSA9PiBgRGFtYWdlIG9mIHdlYXBvbiBhdHRhY2tzIGFuZCBjYW50cmlwcyBpbmNyZWFzZXMgYnkgJHtufS5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5Qcm9mQm9udXMsXHJcbiAgICAgICAgKG4pID0+IGBQcm9maWNpZW5jeSBib251cyBpbmNyZWFzZXMgYnkgJHtufWBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkluaXRpYXRpdmUsXHJcbiAgICAgICAgKG4pID0+IGBHYWluICR7bn0gdG8gaW5pdGlhdGl2ZSByb2xscy5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TYXZlc0FsbCxcclxuICAgICAgICAobikgPT4gYCske259IHRvIGFsbCBzYXZlcy5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TYXZlc1N0ckRleENvbixcclxuICAgICAgICAobikgPT4gYCske259IHRvIFNUUi9ERVgvQ09OIHNhdmVzLmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNhdmVzSW50V2lzQ2hhLFxyXG4gICAgICAgIChuKSA9PiBgKyR7bn0gdG8gSU5UL1dJUy9DSEEgc2F2ZXMuYF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzQWxsLFxyXG4gICAgICAgIChuKSA9PiBgKyR7bn0gdG8gYWxsIHNraWxsIHJvbGxzLmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc05pbmp1dHN1LFxyXG4gICAgICAgIChuKSA9PiBgKyR7bn0gdG8gU3RlYWx0aCwgSW52ZXN0aWdhdGlvbiwgQWNyb2JhdGljcyBhbmQgQXRobGV0aWNzIHJvbGxzLmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc1dpbGRIZWFydCxcclxuICAgICAgICAobikgPT4gYCske259IHRvIGFsbCBQZXJjZXB0aW9uLCBNZWRpY2luZSwgTmF0dXJlIGFuZCBTdXJ2aXZhbCByb2xscy5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNJbmRvY3RyaW5hdGlvbixcclxuICAgICAgICAobikgPT4gYCske259IHRvIGFsbCBJbnNpZ2h0LCBEZWNlcHRpb24sIEludGltaWRhdGlvbiBhbmQgUmVsaWdpb24gcm9sbHMuYF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzQnJpbGxpYW5jZSxcclxuICAgICAgICAobikgPT4gYCske259IHRvIGFsbCBBcmNhbmEsIFNsaWdodC1vZi1IYW5kLCBIaXN0b3J5IGFuZCBQZXJmb3JtYW5jZSByb2xscy5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNQcm9kaWd5LFxyXG4gICAgICAgIChuKSA9PiBgKyR7bn0gdG8gYWxsIFN0ZWFsdGgsIFBlcmNlcHRpb24sIEluc2lnaHQsIEFyY2FuYSBhbmQgUGVyc3Vhc2lvbiByb2xscy5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1N0cixcclxuICAgICAgICAobikgPT4gYFN0cmVuZ3RoICske259YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNEZXgsXHJcbiAgICAgICAgKG4pID0+IGBEZXh0ZXJpdHkgKyR7bn1gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NvbixcclxuICAgICAgICAobikgPT4gYENvbnN0aXR1dGlvbiArJHtufWBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50LFxyXG4gICAgICAgIChuKSA9PiBgSW50ZWxsaWdlbmNlICske259YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNXaXMsXHJcbiAgICAgICAgKG4pID0+IGBXaXNkb20gKyR7bn1gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NoYSxcclxuICAgICAgICAobikgPT4gYENoYXJpc21hICske259YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnREZXgsXHJcbiAgICAgICAgKG4pID0+IGBJbnRlbGxpZ2VuY2UgYW5kIERleHRlcml0eSArJHtufWBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzV2lzQ29uLFxyXG4gICAgICAgIChuKSA9PiBgV2lzZG9tIGFuZCBDb25zdGl0dXRpb24gKyR7bn1gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NoYVN0cixcclxuICAgICAgICAobikgPT4gYENoYXJpc21hIGFuZCBTdHJlbmd0aCArJHtufWBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzU3RyRGV4Q29uLFxyXG4gICAgICAgIChuKSA9PiBgU3RyZW5ndGgsIERleHRlcml0eSBhbmQgQ29uc3RpdHV0aW9uICske259YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnRXaXNDaGEsXHJcbiAgICAgICAgKG4pID0+IGBJbnRlbGxpZ2VuY2UsIFdpc2RvbSBhbmQgQ2hhcmlzbWEgKyR7bn1gXSxcclxuXSk7XHJcbmV4cG9ydHMuVXBncmFkZUljb25zID0gbmV3IE1hcChbXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3luYywgYDxpIGNsYXNzPVwiZmEtc2hhcnAgZmEtbGlnaHQgZmEtd3JlYXRoLWxhdXJlbFwiPjwvaT5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5MYW5kTW92ZW1lbnQsIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXJhYmJpdC1ydW5uaW5nXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNlYU1vdmVtZW50LCBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1kb2xwaGluXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0ZXBNb3ZlbWVudCwgYDxpIGNsYXNzPVwiZmEtZHVvdG9uZSBmYS10cmFuc3BvcnRlci0xXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkRlYXRoU2F2ZXMsIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXNrdWxsLWNvd1wiIHN0eWxlPVwidHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgMnB4KTtcIj48L2k+YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuQUMsIGA8aSBjbGFzcz1cImZhLXNoYXJwIGZhLXNvbGlkIGZhLXNoaWVsZC1xdWFydGVyZWRcIj48L2k+YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuSFAsIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWhlYXJ0LXB1bHNlXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkFjY3VyYWN5LCBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1jcm9zc2hhaXJzXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkRhbWFnZSwgYDxpIGNsYXNzPVwiZmEtc2hhcnAgZmEtc29saWQgZmEtc3dvcmRzXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlByb2ZCb251cywgYDxpIGNsYXNzPVwiZmEtcmVndWxhciBmYS1kbmFcIj48L2k+YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuSW5pdGlhdGl2ZSwgYDxpIGNsYXNzPVwiZmEtc2hhcnAgZmEtc29saWQgZmEtc3RvcHdhdGNoXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNhdmVzQWxsLCBgPGkgY2xhc3M9XCJmYS1yZWd1bGFyIGZhLXN0YXItb2YtbGlmZVwiPjwvaT5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TYXZlc1N0ckRleENvbiwgYDxpIGNsYXNzPVwiZmEtc2hhcnAgZmEtc29saWQgZmEtZm9vdGJhbGwtaGVsbWV0XCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNhdmVzSW50V2lzQ2hhLCBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1zcGFcIj48L2k+YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzQWxsLCBgPGkgY2xhc3M9XCJmYS1yZWd1bGFyIGZhLW1hbmRvbGluXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc05pbmp1dHN1LCBgPGkgY2xhc3M9XCJmYS1kdW90b25lIGZhLXVzZXItbmluamFcIj48L2k+YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzV2lsZEhlYXJ0LCBgPGkgY2xhc3M9XCJmYS1kdW90b25lIGZhLXVzZXItY293Ym95XCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc0luZG9jdHJpbmF0aW9uLCBgPGkgY2xhc3M9XCJmYS1kdW90b25lIGZhLXVzZXItc2VjcmV0XCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc0JyaWxsaWFuY2UsIGA8aSBjbGFzcz1cImZhLWR1b3RvbmUgZmEtdXNlci1ncmFkdWF0ZVwiPjwvaT5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNQcm9kaWd5LCBgPGkgY2xhc3M9XCJmYS1kdW90b25lIGZhLXVzZXItcG9saWNlLXRpZVwiPjwvaT5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1N0ciwgYDxpIGNsYXNzPVwiZmEtZHVvdG9uZSBmYS1kdW1iYmVsbFwiPjwvaT5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0RleCwgYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZGFnZ2VyXCIgc3R5bGU9XCJyb3RhdGU6IDQ1ZGVnO1wiPjwvaT5gXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NvbiwgYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtaGVhcnQtaGFsZi1zdHJva2VcIj48L2k+YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnQsIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWJyYWluLWNpcmN1aXRcIj48L2k+YF0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNXaXMsIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXlpbi15YW5nXCI+PC9pPmBdLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzQ2hhLCBgPGkgY2xhc3M9XCJmYS1zaGFycCBmYS1zb2xpZCBmYS1tYXNrcy10aGVhdGVyXCI+PC9pPmBdLFxyXG5dKTtcclxuZXhwb3J0cy5VcGdyYWRlSWNvbnMuc2V0KFVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50RGV4LCBgPGRpdiBjbGFzcz1cImR1b19pY29uXCI+XHJcbiAgICAgICAgJHtleHBvcnRzLlVwZ3JhZGVJY29ucy5nZXQoVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnQpfVxyXG4gICAgICAgICR7ZXhwb3J0cy5VcGdyYWRlSWNvbnMuZ2V0KFVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzRGV4KX1cclxuICAgIDwvZGl2PmApO1xyXG5leHBvcnRzLlVwZ3JhZGVJY29ucy5zZXQoVXBncmFkZVZlcnRleFR5cGUuU3RhdHNXaXNDb24sIGA8ZGl2IGNsYXNzPVwiZHVvX2ljb25cIj5cclxuICAgICAgICAke2V4cG9ydHMuVXBncmFkZUljb25zLmdldChVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1dpcyl9XHJcbiAgICAgICAgJHtleHBvcnRzLlVwZ3JhZGVJY29ucy5nZXQoVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDb24pfVxyXG4gICAgPC9kaXY+YCk7XHJcbmV4cG9ydHMuVXBncmFkZUljb25zLnNldChVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NoYVN0ciwgYDxkaXYgY2xhc3M9XCJkdW9faWNvblwiPlxyXG4gICAgICAgICR7ZXhwb3J0cy5VcGdyYWRlSWNvbnMuZ2V0KFVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzQ2hhKX1cclxuICAgICAgICAke2V4cG9ydHMuVXBncmFkZUljb25zLmdldChVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1N0cil9XHJcbiAgICA8L2Rpdj5gKTtcclxuZXhwb3J0cy5VcGdyYWRlSWNvbnMuc2V0KFVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzU3RyRGV4Q29uLCBgPGRpdiBjbGFzcz1cInRyaV9pY29uXCI+XHJcbiAgICAgICAgJHtleHBvcnRzLlVwZ3JhZGVJY29ucy5nZXQoVXBncmFkZVZlcnRleFR5cGUuU3RhdHNTdHIpfVxyXG4gICAgICAgICR7ZXhwb3J0cy5VcGdyYWRlSWNvbnMuZ2V0KFVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzQ29uKX1cclxuICAgICAgICAke2V4cG9ydHMuVXBncmFkZUljb25zLmdldChVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0RleCl9XHJcbiAgICA8L2Rpdj5gKTtcclxuZXhwb3J0cy5VcGdyYWRlSWNvbnMuc2V0KFVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50V2lzQ2hhLCBgPGRpdiBjbGFzcz1cInRyaV9pY29uXCI+XHJcbiAgICAgICAgJHtleHBvcnRzLlVwZ3JhZGVJY29ucy5nZXQoVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnQpfVxyXG4gICAgICAgICR7ZXhwb3J0cy5VcGdyYWRlSWNvbnMuZ2V0KFVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzV2lzKX1cclxuICAgICAgICAke2V4cG9ydHMuVXBncmFkZUljb25zLmdldChVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NoYSl9XHJcbiAgICA8L2Rpdj5gKTtcclxuZXhwb3J0cy5VcGdyYWRlUmFyaXR5TGV2ZWxzID0gbmV3IE1hcChbXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3luYywgbmV3IE1hcChbW1Jhcml0eV8xLlJhcml0eS5BcnRlZmFjdCwgMV1dKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuTGFuZE1vdmVtZW50LCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkJsYWNrLCAtMjBdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmFyaXR5LkNvbW1vbiwgMTBdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uLCAyMF1dKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2VhTW92ZW1lbnQsIG5ldyBNYXAoW1tSYXJpdHlfMS5SYXJpdHkuUmFyZSwgMjBdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0ZXBNb3ZlbWVudCwgbmV3IE1hcChbW1Jhcml0eV8xLlJhcml0eS5FcGljLCAzXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5EZWF0aFNhdmVzLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkJsYWNrLCAtMl0sXHJcbiAgICAgICAgICAgIFtSYXJpdHlfMS5SYXJpdHkuUmFyZSwgMl0sXHJcbiAgICAgICAgICAgIFtSYXJpdHlfMS5SYXJpdHkuTGVnZW5kYXJ5LCA1XV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5BQywgbmV3IE1hcChbW1Jhcml0eV8xLlJhcml0eS5CbGFjaywgLTFdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uLCAxXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhcml0eS5SYXJlLCAyXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhcml0eS5MZWdlbmRhcnksIDNdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkhQLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkJsYWNrLCAtM10sXHJcbiAgICAgICAgICAgIFtSYXJpdHlfMS5SYXJpdHkuQ29tbW9uLCAxXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhcml0eS5VbmNvbW1vbiwgMl0sXHJcbiAgICAgICAgICAgIFtSYXJpdHlfMS5SYXJpdHkuUmFyZSwgM10sXHJcbiAgICAgICAgICAgIFtSYXJpdHlfMS5SYXJpdHkuRXBpYywgNV0sXHJcbiAgICAgICAgICAgIFtSYXJpdHlfMS5SYXJpdHkuTGVnZW5kYXJ5LCA3XV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5BY2N1cmFjeSwgbmV3IE1hcChbW1Jhcml0eV8xLlJhcml0eS5CbGFjaywgLTFdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uLCAxXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhcml0eS5SYXJlLCAyXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhcml0eS5FcGljLCAzXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5EYW1hZ2UsIG5ldyBNYXAoW1tSYXJpdHlfMS5SYXJpdHkuVW5jb21tb24sIDFdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmFyaXR5LlJhcmUsIDJdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmFyaXR5LkVwaWMsIDNdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlByb2ZCb251cywgbmV3IE1hcChbW1Jhcml0eV8xLlJhcml0eS5MZWdlbmRhcnksIDFdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkluaXRpYXRpdmUsIG5ldyBNYXAoW1tSYXJpdHlfMS5SYXJpdHkuVW5jb21tb24sIDFdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmFyaXR5LlJhcmUsIDJdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmFyaXR5LkVwaWMsIDNdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNhdmVzQWxsLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LlJhcmUsIDJdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNhdmVzU3RyRGV4Q29uLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uLCAyXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TYXZlc0ludFdpc0NoYSwgbmV3IE1hcChbW1Jhcml0eV8xLlJhcml0eS5VbmNvbW1vbiwgMl1dKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzQWxsLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkVwaWMsIDJdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc05pbmp1dHN1LCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uLCAyXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNXaWxkSGVhcnQsIG5ldyBNYXAoW1tSYXJpdHlfMS5SYXJpdHkuVW5jb21tb24sIDJdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc0luZG9jdHJpbmF0aW9uLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uLCAyXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNCcmlsbGlhbmNlLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uLCAyXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNQcm9kaWd5LCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LlJhcmUsIDNdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzU3RyLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkNvbW1vbiwgMV1dKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNEZXgsIG5ldyBNYXAoW1tSYXJpdHlfMS5SYXJpdHkuQ29tbW9uLCAxXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NvbiwgbmV3IE1hcChbW1Jhcml0eV8xLlJhcml0eS5Db21tb24sIDFdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50LCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkNvbW1vbiwgMV1dKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNXaXMsIG5ldyBNYXAoW1tSYXJpdHlfMS5SYXJpdHkuQ29tbW9uLCAxXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NoYSwgbmV3IE1hcChbW1Jhcml0eV8xLlJhcml0eS5Db21tb24sIDFdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50RGV4LCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkVwaWMsIDJdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzV2lzQ29uLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkVwaWMsIDJdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzQ2hhU3RyLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkVwaWMsIDJdXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzU3RyRGV4Q29uLCBuZXcgTWFwKFtbUmFyaXR5XzEuUmFyaXR5LkxlZ2VuZGFyeSwgM11dKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnRXaXNDaGEsIG5ldyBNYXAoW1tSYXJpdHlfMS5SYXJpdHkuTGVnZW5kYXJ5LCAzXV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5OVUxMLCBuZXcgTWFwKFtdKV0sIC8vIFRTIGdvZXMgY3JhenkgaWYgSSBkZWxldGUgdGhpcy5cclxuXSk7XHJcbnZhciBBdG9taWNVcGdyYWRlVmVydGV4VHlwZTtcclxuKGZ1bmN0aW9uIChBdG9taWNVcGdyYWRlVmVydGV4VHlwZSkge1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTeW5jXCJdID0gMF0gPSBcIlN5bmNcIjtcclxuICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiUHJvZkJvbnVzXCJdID0gMV0gPSBcIlByb2ZCb251c1wiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJBQ1wiXSA9IDJdID0gXCJBQ1wiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJIUFwiXSA9IDNdID0gXCJIUFwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c1N0clwiXSA9IDRdID0gXCJTdGF0c1N0clwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c0RleFwiXSA9IDVdID0gXCJTdGF0c0RleFwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c0NvblwiXSA9IDZdID0gXCJTdGF0c0NvblwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c0ludFwiXSA9IDddID0gXCJTdGF0c0ludFwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c1dpc1wiXSA9IDhdID0gXCJTdGF0c1dpc1wiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTdGF0c0NoYVwiXSA9IDldID0gXCJTdGF0c0NoYVwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJBY2N1cmFjeVwiXSA9IDEwXSA9IFwiQWNjdXJhY3lcIjtcclxuICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiRGFtYWdlXCJdID0gMTFdID0gXCJEYW1hZ2VcIjtcclxuICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiTGFuZE1vdmVtZW50XCJdID0gMTJdID0gXCJMYW5kTW92ZW1lbnRcIjtcclxuICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU2VhTW92ZW1lbnRcIl0gPSAxM10gPSBcIlNlYU1vdmVtZW50XCI7XHJcbiAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtcIlN0ZXBNb3ZlbWVudFwiXSA9IDE0XSA9IFwiU3RlcE1vdmVtZW50XCI7XHJcbiAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtcIkluaXRpYXRpdmVcIl0gPSAxNV0gPSBcIkluaXRpYXRpdmVcIjtcclxuICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiRGVhdGhTYXZlc1wiXSA9IDE2XSA9IFwiRGVhdGhTYXZlc1wiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTYXZlc1N0ckRleENvblwiXSA9IDE3XSA9IFwiU2F2ZXNTdHJEZXhDb25cIjtcclxuICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU2F2ZXNJbnRXaXNDaGFcIl0gPSAxOF0gPSBcIlNhdmVzSW50V2lzQ2hhXCI7XHJcbiAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtcIlNraWxsU3RlYWx0aFwiXSA9IDE5XSA9IFwiU2tpbGxTdGVhbHRoXCI7XHJcbiAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtcIlNraWxsUGVyY2VwdGlvblwiXSA9IDIwXSA9IFwiU2tpbGxQZXJjZXB0aW9uXCI7XHJcbiAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtcIlNraWxsSW5zaWdodFwiXSA9IDIxXSA9IFwiU2tpbGxJbnNpZ2h0XCI7XHJcbiAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtcIlNraWxsQXJjYW5hXCJdID0gMjJdID0gXCJTa2lsbEFyY2FuYVwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTa2lsbFBlcnN1YXNpb25cIl0gPSAyM10gPSBcIlNraWxsUGVyc3Vhc2lvblwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTa2lsbE1lZGljaW5lTmF0dXJlU3Vydml2YWxcIl0gPSAyNF0gPSBcIlNraWxsTWVkaWNpbmVOYXR1cmVTdXJ2aXZhbFwiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTa2lsbERlY2VwdGlvbkludGltaWRhdGlvblJlbGlnaW9uXCJdID0gMjVdID0gXCJTa2lsbERlY2VwdGlvbkludGltaWRhdGlvblJlbGlnaW9uXCI7XHJcbiAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtBdG9taWNVcGdyYWRlVmVydGV4VHlwZVtcIlNraWxsc0ludmVzdGlnYXRpb25BY3JvYmF0aWNzQXRobGV0aWNzXCJdID0gMjZdID0gXCJTa2lsbHNJbnZlc3RpZ2F0aW9uQWNyb2JhdGljc0F0aGxldGljc1wiO1xyXG4gICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGVbQXRvbWljVXBncmFkZVZlcnRleFR5cGVbXCJTa2lsbFNsaWdodEhpc3RvcnlQZXJmb3JtYW5jZVwiXSA9IDI3XSA9IFwiU2tpbGxTbGlnaHRIaXN0b3J5UGVyZm9ybWFuY2VcIjtcclxuICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlW1wiU2tpbGxPdGhlclwiXSA9IDI4XSA9IFwiU2tpbGxPdGhlclwiO1xyXG59KShBdG9taWNVcGdyYWRlVmVydGV4VHlwZSA9IGV4cG9ydHMuQXRvbWljVXBncmFkZVZlcnRleFR5cGUgfHwgKGV4cG9ydHMuQXRvbWljVXBncmFkZVZlcnRleFR5cGUgPSB7fSkpO1xyXG5leHBvcnRzLlVwZ3JhZGVUb0F0b21pYyA9IG5ldyBNYXAoW1xyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN5bmMsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlN5bmNdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuTGFuZE1vdmVtZW50LCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5MYW5kTW92ZW1lbnRdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2VhTW92ZW1lbnQsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNlYU1vdmVtZW50XSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0ZXBNb3ZlbWVudCwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RlcE1vdmVtZW50XSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkRlYXRoU2F2ZXMsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLkRlYXRoU2F2ZXNdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuQUMsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLkFDXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLkhQLCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5IUF0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5BY2N1cmFjeSwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuQWNjdXJhY3ldKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuRGFtYWdlLCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5EYW1hZ2VdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuUHJvZkJvbnVzLCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Qcm9mQm9udXNdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuSW5pdGlhdGl2ZSwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuSW5pdGlhdGl2ZV0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TYXZlc0FsbCwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2F2ZXNTdHJEZXhDb24sXHJcbiAgICAgICAgICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNhdmVzSW50V2lzQ2hhXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNhdmVzU3RyRGV4Q29uLCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TYXZlc1N0ckRleENvbl0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TYXZlc0ludFdpc0NoYSwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2F2ZXNJbnRXaXNDaGFdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzQWxsLCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbFN0ZWFsdGgsXHJcbiAgICAgICAgICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsUGVyY2VwdGlvbixcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxJbnNpZ2h0LFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbEFyY2FuYSxcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxQZXJzdWFzaW9uLFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNJbnZlc3RpZ2F0aW9uQWNyb2JhdGljc0F0aGxldGljcyxcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxNZWRpY2luZU5hdHVyZVN1cnZpdmFsLFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbERlY2VwdGlvbkludGltaWRhdGlvblJlbGlnaW9uLFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbFNsaWdodEhpc3RvcnlQZXJmb3JtYW5jZSxcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxPdGhlcixdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzTmluanV0c3UsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsU3RlYWx0aCxcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzSW52ZXN0aWdhdGlvbkFjcm9iYXRpY3NBdGhsZXRpY3MsXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc1dpbGRIZWFydCwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxQZXJjZXB0aW9uLFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbE1lZGljaW5lTmF0dXJlU3Vydml2YWwsXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc0luZG9jdHJpbmF0aW9uLCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbEluc2lnaHQsXHJcbiAgICAgICAgICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsRGVjZXB0aW9uSW50aW1pZGF0aW9uUmVsaWdpb24sXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc0JyaWxsaWFuY2UsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsQXJjYW5hLFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbFNsaWdodEhpc3RvcnlQZXJmb3JtYW5jZSxdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzUHJvZGlneSwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxTdGVhbHRoLFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbFBlcmNlcHRpb24sXHJcbiAgICAgICAgICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsSW5zaWdodCxcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxBcmNhbmEsXHJcbiAgICAgICAgICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsUGVyc3Vhc2lvbixdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNTdHIsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzU3RyXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzRGV4LCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0RleF0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NvbiwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDb25dKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnQsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50XSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzV2lzLCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1dpc10pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NoYSwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDaGFdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnREZXgsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50LFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0RleF0pXSxcclxuICAgIFtVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1dpc0NvbiwgbmV3IFNldChbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RhdHNXaXMsXHJcbiAgICAgICAgICAgIEF0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzQ29uXSldLFxyXG4gICAgW1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzQ2hhU3RyLCBuZXcgU2V0KFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NoYSxcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RhdHNTdHJdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNTdHJEZXhDb24sIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzU3RyLFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0RleCxcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDb25dKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnRXaXNDaGEsIG5ldyBTZXQoW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50LFxyXG4gICAgICAgICAgICBBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1dpcyxcclxuICAgICAgICAgICAgQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDaGFdKV0sXHJcbiAgICBbVXBncmFkZVZlcnRleFR5cGUuTlVMTCwgbmV3IFNldCgpXSxcclxuXSk7XHJcbmV4cG9ydHMuQXRvbWljVXBncmFkZURlc2NHZW5lcmF0b3JzID0gbmV3IE1hcChbXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3luYyxcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+QXR0dW5lbWVudCBTbG90IENvdW50PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+JHtuID49IDAgPyBcIitcIiA6IFwiXCJ9JHtufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgIDwvZGl2PmBdLFxyXG4gICAgW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLkxhbmRNb3ZlbWVudCxcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+V2Fsa2luZyBTcGVlZDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn0gZnQ8L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TZWFNb3ZlbWVudCxcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+U3dpbW1pbmcgU3BlZWQ8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259IGZ0PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RlcE1vdmVtZW50LFxyXG4gICAgICAgIChuKSA9PiBgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5UZWxlcG9ydGF0aW9uPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+JHtuID4gMCA/IGAke259ICZ0aW1lczsgV2Fsa2luZyBzcGVlZGAgOiBcIk5vbmVcIn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5EZWF0aFNhdmVzLFxyXG4gICAgICAgIChuKSA9PiBgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5EZWF0aCBTYXZlczwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5BQyxcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+QXJtb3IgQ2xhc3M8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuSFAsXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPkhpdCBQb2ludHM8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuQWNjdXJhY3ksXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPlRvLWhpdCBNb2RpZmllcjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5EYW1hZ2UsXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPlBlci1oaXQgRGFtYWdlIE1vZGlmZXI8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuUHJvZkJvbnVzLFxyXG4gICAgICAgIChuKSA9PiBgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5Qcm9maWNpZW5jeSBCb251czwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Jbml0aWF0aXZlLFxyXG4gICAgICAgIChuKSA9PiBgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5Jbml0aWF0aXZlPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+JHtuID49IDAgPyBcIitcIiA6IFwiXCJ9JHtufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgIDwvZGl2PmBdLFxyXG4gICAgW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNhdmVzU3RyRGV4Q29uLFxyXG4gICAgICAgIChuKSA9PiBgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5TVFIgLyBERVggLyBDT04gc2F2ZXM8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2F2ZXNJbnRXaXNDaGEsXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPklOVCAvIFdJUyAvIENIQSBzYXZlczwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbFN0ZWFsdGgsXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPlN0ZWFsdGg8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxQZXJjZXB0aW9uLFxyXG4gICAgICAgIChuKSA9PiBgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5QZXJjZXB0aW9uPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+JHtuID49IDAgPyBcIitcIiA6IFwiXCJ9JHtufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgIDwvZGl2PmBdLFxyXG4gICAgW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsSW5zaWdodCxcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+SW5zaWdodDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbEFyY2FuYSxcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+QXJjYW5hPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+JHtuID49IDAgPyBcIitcIiA6IFwiXCJ9JHtufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgIDwvZGl2PmBdLFxyXG4gICAgW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsUGVyc3Vhc2lvbixcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+UGVyc3Vhc2lvbjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbE1lZGljaW5lTmF0dXJlU3Vydml2YWwsXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPk1lZGljaW5lLCBOYXR1cmUsIFN1cnZpdmFsPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+JHtuID49IDAgPyBcIitcIiA6IFwiXCJ9JHtufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgIDwvZGl2PmBdLFxyXG4gICAgW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsRGVjZXB0aW9uSW50aW1pZGF0aW9uUmVsaWdpb24sXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPkRlY2VwdGlvbiwgSW50aW1pZGF0aW9uLCBSZWxpZ2lvbjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNJbnZlc3RpZ2F0aW9uQWNyb2JhdGljc0F0aGxldGljcyxcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPkludmVzdGlnYXRpb24sIEFjcm9iYXRpY3MsIEF0aGxldGljczwvZGl2PlxyXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgIDwvZGl2PmBdLFxyXG4gICAgW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsU2xpZ2h0SGlzdG9yeVBlcmZvcm1hbmNlLFxyXG4gICAgICAgIChuKSA9PiBgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5TbGlnaHQtb2YtSGFuZCwgSGlzdG9yeSwgUGVyZm9ybWFuY2U8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU2tpbGxPdGhlcixcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+QWxsIE90aGVyIFNraWxsczwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c1N0cixcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+U3RyZW5ndGggU2NvcmU8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RhdHNEZXgsXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPkRleHRlcml0eSBTY29yZTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NvbixcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+Q29uc3RpdHV0aW9uIFNjb3JlPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+JHtuID49IDAgPyBcIitcIiA6IFwiXCJ9JHtufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgIDwvZGl2PmBdLFxyXG4gICAgW0F0b21pY1VwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzSW50LFxyXG4gICAgICAgIChuKSA9PiBgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5JbnRlbGxpZ2VuY2UgU2NvcmU8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbiAgICBbQXRvbWljVXBncmFkZVZlcnRleFR5cGUuU3RhdHNXaXMsXHJcbiAgICAgICAgKG4pID0+IGA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPldpc2RvbSBTY29yZTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7biA+PSAwID8gXCIrXCIgOiBcIlwifSR7bn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICA8L2Rpdj5gXSxcclxuICAgIFtBdG9taWNVcGdyYWRlVmVydGV4VHlwZS5TdGF0c0NoYSxcclxuICAgICAgICAobikgPT4gYDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+Q2hhcmlzbWEgU2NvcmU8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke24gPj0gMCA/IFwiK1wiIDogXCJcIn0ke259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgPC9kaXY+YF0sXHJcbl0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1VcGdyYWRlVmVydGV4Q29uZmlnLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVmVydGV4ID0gdm9pZCAwO1xyXG5jb25zdCBCYXNlVW5pcXVlRE9NR2VuZXJhdG9yXzEgPSByZXF1aXJlKFwiLi4vQmFzZVVuaXF1ZURPTUdlbmVyYXRvclwiKTtcclxuLyoqXHJcbiAqIENvbnRleHQgZnJlZSBpbXBsZW1lbnRhdGlvbiBvZiBhIHZlcnRleCB0aGF0IGNhbiBiZSByZW5kZXJlZC5cclxuICovXHJcbmNsYXNzIFZlcnRleCBleHRlbmRzIEJhc2VVbmlxdWVET01HZW5lcmF0b3JfMS5CYXNlVW5pcXVlRE9NR2VuZXJhdG9yIHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZ3JhcGhJRCwgbnVtSWQpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhJRCA9IGdyYXBoSUQ7XHJcbiAgICAgICAgdGhpcy5udW1JZCA9IG51bUlkO1xyXG4gICAgICAgIHRoaXMuaWQgPSBgJHtncmFwaElEfSR7U3RyaW5nKHRoaXMubnVtSWQpLnBhZFN0YXJ0KDMsICcwJyl9YDtcclxuICAgICAgICB0aGlzLnJhZGlhbCA9IFswLCAwXTtcclxuICAgICAgICB0aGlzLl9uZWlnaGJvdXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIHBvc2l0aW9uIG9mIHRoaXMgdmVydGV4IHdydCBhbm90aGVyIHZlcnRleCB1c2luZyByYWRpYWwgb2Zmc2V0LlxyXG4gICAgICovXHJcbiAgICBzZXRSYWRpYWxseVdydCh2LCByLCB0aGV0YSkge1xyXG4gICAgICAgIHRoZXRhICo9IE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgY29uc3QgW3Z4LCB2eV0gPSB2Ll9jYXJ0ZXNpYW47XHJcbiAgICAgICAgdGhpcy5jYXJ0ZXNpYW4gPSBbdnggKyByICogTWF0aC5jb3ModGhldGEpLCB2eSArIHIgKiBNYXRoLnNpbih0aGV0YSldO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIHBvc2l0aW9uIG9mIHRoaXMgdmVydGV4IHdydCBhbm90aGVyIHZlcnRleCB1c2luZyBjYXJ0ZSBvZmZzZXQuXHJcbiAgICAgKi9cclxuICAgIHNldExpbmVhcmx5V3J0KHYsIGRlbHRhX3gsIGRlbHRhX3kpIHtcclxuICAgICAgICBjb25zdCBbdngsIHZ5XSA9IHYuX2NhcnRlc2lhbjtcclxuICAgICAgICB0aGlzLmNhcnRlc2lhbiA9IFt2eCArIGRlbHRhX3gsIHZ5ICsgZGVsdGFfeV07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFNxdWFyZWQgZGlzdGFuY2UgZnJvbSB0aGUgZ2l2ZW4gdmVydGV4LlxyXG4gICAgICovXHJcbiAgICBzcURpc3RhbmNlRnJvbSh2KSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnggLSB2LngpICogKHRoaXMueCAtIHYueCkgKyAodGhpcy55IC0gdi55KSAqICh0aGlzLnkgLSB2LnkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgYW5nbGUgb2YgdGhlIGRpc3BsYWNlbWVudCBmcm9tIHRoZSBnaXZlbiB2ZXJ0ZXggdG8gdGhpcyBvbmVcclxuICAgICAqICAgICAgICAgIHdydCB0aGUgcG9zaXRpdmUgeC1heGlzLlxyXG4gICAgICovXHJcbiAgICBkaXNwbGFjZW1lbnRBbmdsZVdpdGhYKHYpIHtcclxuICAgICAgICByZXR1cm4gVmVydGV4LnZlY3RvckFuZ2xlV2l0aFgodi54IC0gdGhpcy54LCB2LnkgLSB0aGlzLnkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiB4LWNvb3JkaW5hdGUgb2YgdGhpcyB2ZXJ0ZXggd3J0IHRoZSBvcmlnaW4uXHJcbiAgICAgKi9cclxuICAgIGdldCB4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jYXJ0ZXNpYW5bMF07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIHktY29vcmRpbmF0ZSBvZiB0aGlzIHZlcnRleCB3cnQgdGhlIG9yaWdpbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IHkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcnRlc2lhblsxXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmFkaWFsIHIgb2YgdGhpcyB2ZXJ0ZXggd3J0IHRoZSBvcmlnaW4uXHJcbiAgICAgKi9cclxuICAgIGdldCByKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yYWRpYWxbMF07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJhZGlhbCB0aGV0YSBvZiB0aGlzIHZlcnRleCB3cnQgdGhlIG9yaWdpbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IHRoZXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yYWRpYWxbMV07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBvc2l0aW9uIHRoZSB2ZXJ0ZXggcmFkaWFsbHkgd3J0IHRoZSBvcmlnaW4uXHJcbiAgICAgKi9cclxuICAgIHNldCByYWRpYWwodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9yYWRpYWwgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBbciwgdGhldGFdID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fY2FydGVzaWFuID0gW3IgKiBNYXRoLmNvcyh0aGV0YSksIHIgKiBNYXRoLnNpbih0aGV0YSldO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQb3NpdGlvbiB0aGUgdmVydGV4IHdydCB0aGUgb3JpZ2luLlxyXG4gICAgICovXHJcbiAgICBzZXQgY2FydGVzaWFuKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fY2FydGVzaWFuID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgW3gsIHldID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fcmFkaWFsID0gW01hdGguc3FydCh4ICogeCArIHkgKiB5KSwgVmVydGV4LnZlY3RvckFuZ2xlV2l0aFgoeCwgeSldO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wdXRlcyB0aGUgYW5nbGUgdGhlIGdpdmVuIHZlY3RvciBzdWJ0ZW5kcyB3aXRoIHBvcyB4LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdmVjdG9yQW5nbGVXaXRoWCh4LCB5KSB7XHJcbiAgICAgICAgcmV0dXJuIHggIT0gMCA/IChNYXRoLmF0YW4oeSAvIHgpICsgKHggPiAwID8gMCA6ICh5ID49IDAgPyAxIDogLTEpICogTWF0aC5QSSkpXHJcbiAgICAgICAgICAgIDogKE1hdGguc2lnbih5KSAqIE1hdGguUEkgLyAyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYW4gZWRnZSAoYW5kIGl0cyBvdGhlciB2ZXJ0ZXgpIGFzIGEgbmVpZ2hib3VyIG9mIHRoaXMgb25lLlxyXG4gICAgICovXHJcbiAgICBhZGROZWlnaGJvdXIoZSkge1xyXG4gICAgICAgIGlmIChlLnYxID09IHRoaXMpIHtcclxuICAgICAgICAgICAgdGhpcy5fbmVpZ2hib3Vycy5zZXQoZSwgZS52Mik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGUudjIgPT0gdGhpcykge1xyXG4gICAgICAgICAgICB0aGlzLl9uZWlnaGJvdXJzLnNldChlLCBlLnYxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5laWdoYm91cnMgb2YgdGhpcyB2ZXJ0ZXgsIG1hcHBlZCBieSB0aGUgb3V0Z29pbmcgZWRnZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IG5laWdoYm91cnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25laWdoYm91cnM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5WZXJ0ZXggPSBWZXJ0ZXg7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZlcnRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmRldm90aW9uTWFwID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IE1hcEVkZ2VfMSA9IHJlcXVpcmUoXCIuLi9NYXBFZGdlXCIpO1xyXG5jb25zdCBNYXBHcmFwaF8xID0gcmVxdWlyZShcIi4uL01hcEdyYXBoXCIpO1xyXG5jb25zdCBNYXBUcmFuc3BvcnRhdGlvbl8xID0gcmVxdWlyZShcIi4uL01hcFRyYW5zcG9ydGF0aW9uXCIpO1xyXG5jb25zdCBNYXBWZXJ0ZXhfMSA9IHJlcXVpcmUoXCIuLi9NYXBWZXJ0ZXhcIik7XHJcbmNvbnN0IE1hcFZlcnRleFN0YXR1c18xID0gcmVxdWlyZShcIi4uL01hcFZlcnRleFN0YXR1c1wiKTtcclxuY29uc3QgZyA9IG5ldyBNYXBHcmFwaF8xLk1hcEdyYXBoKFwiRHZvXCIpO1xyXG5nLndvcmxkRGlzdGFuY2VQZXJQaXhlbCA9IDEwMDA7XHJcbmZ1bmN0aW9uIHZlcnRleCh4LCB5LCByZWYsIHJhZGlhbCwgc3RhdHVzID0gbnVsbCwgaW50ZXJlc3QgPSBudWxsLCB0ZXh0ID0gbnVsbCkge1xyXG4gICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XHJcbiAgICAgICAgc3RhdHVzID0gTWFwVmVydGV4U3RhdHVzXzEuTWFwVmVydGV4U3RhdHVzLlVua25vd247XHJcbiAgICB9XHJcbiAgICBpZiAoaW50ZXJlc3QgPT0gbnVsbCkge1xyXG4gICAgICAgIGludGVyZXN0ID0gXCI/Pz9cIjtcclxuICAgIH1cclxuICAgIGxldCB2ZXJ0ZXggPSBuZXcgTWFwVmVydGV4XzEuTWFwVmVydGV4KHN0YXR1cywgaW50ZXJlc3QsIGcpO1xyXG4gICAgaWYgKHJlZiA9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKCFyYWRpYWwpIHtcclxuICAgICAgICAgICAgdmVydGV4LmNhcnRlc2lhbiA9IFt4LCB5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZlcnRleC5yYWRpYWwgPSBbeCwgeV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKCFyYWRpYWwpIHtcclxuICAgICAgICAgICAgdmVydGV4LnNldExpbmVhcmx5V3J0KHJlZiwgeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2ZXJ0ZXguc2V0UmFkaWFsbHlXcnQocmVmLCB4LCB5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGV4dCAhPSBudWxsKSB7XHJcbiAgICAgICAgdmVydGV4Lm5hbWUgPSB0ZXh0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZlcnRleDtcclxufVxyXG5jb25zdCB2MDAgPSB2ZXJ0ZXgoMCwgMCwgbnVsbCwgZmFsc2UsIE1hcFZlcnRleFN0YXR1c18xLk1hcFZlcnRleFN0YXR1cy5TYWZlLCBcIkJhc2VcIiwgXCJUaGUgdmlsbGFnZSBvZiBQbydTaGFuXCIpO1xyXG5jb25zdCB2MDEgPSB2ZXJ0ZXgoLTQwLCAtMTUsIHYwMCwgZmFsc2UsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MDIgPSB2ZXJ0ZXgoLTUwLCAtNjAsIHYwMSwgZmFsc2UsIE1hcFZlcnRleFN0YXR1c18xLk1hcFZlcnRleFN0YXR1cy5EZWFkbHksIFwiU3Ryb25naG9sZFwiLCBudWxsKTtcclxuY29uc3QgdjAzID0gdmVydGV4KDQwLCA0MCwgdjAwLCBmYWxzZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYwNCA9IHZlcnRleCg2MCwgLTQ1LCB2MDAsIGZhbHNlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjA1ID0gdmVydGV4KDUwMCwgMCwgdjAwLCBmYWxzZSwgTWFwVmVydGV4U3RhdHVzXzEuTWFwVmVydGV4U3RhdHVzLlNhZmUsIFwiUGVycGVuZGljdWxhcml0eVwiLCBcIjxzcGFuPkRldm90aW9uJ3MgUGVycGVuZGljdWxhcml0eTwvc3Bhbj5cIik7XHJcbmNvbnN0IHYwNiA9IHZlcnRleCg4MCwgMjUsIHYwMywgZmFsc2UsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MDcgPSB2ZXJ0ZXgoLTE1LCAxMDAsIHYwMCwgZmFsc2UsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MDggPSB2ZXJ0ZXgoLTUwLCAtMTM1LCB2MDAsIGZhbHNlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjA5ID0gdmVydGV4KC02MCwgMTMwLCB2MDcsIGZhbHNlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjEwID0gdmVydGV4KDEzMCwgNDAsIHYwOSwgZmFsc2UsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MTEgPSB2ZXJ0ZXgoMTcwLCAtNTAsIHYxMCwgZmFsc2UsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MTIgPSB2ZXJ0ZXgoMjUsIC05MCwgdjA1LCBmYWxzZSwgTWFwVmVydGV4U3RhdHVzXzEuTWFwVmVydGV4U3RhdHVzLkZyaWVuZGx5LCBcIkRlaXR5J3MgQWJvZGVcIiwgXCJNb3VudCBIdWktY2gnaVwiKTtcclxuY29uc3QgdjEzID0gdmVydGV4KDE0MCwgMTAsIHYwOCwgZmFsc2UsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MTQgPSB2ZXJ0ZXgoNDAsIDQ1LCB2MTMsIGZhbHNlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjE1ID0gdmVydGV4KDE1MCwgLTk1LCB2MDgsIHRydWUsIE1hcFZlcnRleFN0YXR1c18xLk1hcFZlcnRleFN0YXR1cy5GcmllbmRseSwgXCJUb3duXCIsIFwiQWx2YXJpdW1cIik7XHJcbmNvbnN0IHYxNiA9IHZlcnRleCgxNDAsIC0xNDAsIHYxNSwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYxNyA9IHZlcnRleCg1MCwgLTE1LCB2MTUsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MTggPSB2ZXJ0ZXgoNzAsIC0xMjAsIHYxMywgZmFsc2UsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MTkgPSB2ZXJ0ZXgoMTUwLCAtNDUsIHYxOCwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYyMCA9IHZlcnRleCgyMDAsIDYwLCB2MTEsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MjEgPSB2ZXJ0ZXgoMTYwLCAxMTUsIHYxMSwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYyMiA9IHZlcnRleCgyNDAsIDEwNSwgdjEwLCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjIzID0gdmVydGV4KDE0MCwgMTAwLCB2MjIsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MjQgPSB2ZXJ0ZXgoMTI4LCA2NSwgdjIyLCB0cnVlLCBNYXBWZXJ0ZXhTdGF0dXNfMS5NYXBWZXJ0ZXhTdGF0dXMuTmV1dHJhbCwgXCJTdGF0ZSBDYXBpdGFsXCIsIFwiU2FyYXVzYVwiKTtcclxuY29uc3QgdjI1ID0gdmVydGV4KDIxNiwgMzAsIHYyMiwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYyNiA9IHZlcnRleCgxNTAsIDMwLCB2MjEsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MjcgPSB2ZXJ0ZXgoMTIwLCA3NSwgdjI2LCB0cnVlLCBNYXBWZXJ0ZXhTdGF0dXNfMS5NYXBWZXJ0ZXhTdGF0dXMuRnJpZW5kbHksIFwiQ2l0eVwiLCBcIkFldG5hXCIpO1xyXG5jb25zdCB2MjggPSB2ZXJ0ZXgoNjAsIDMwLCB2MjcsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MjkgPSB2ZXJ0ZXgoMTIwLCAtMjUsIHYxNywgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYzMCA9IHZlcnRleCgxMDAsIC0xMTAsIHYxNywgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYzMSA9IHZlcnRleCgxNTAsIC0xNTAsIHYzMCwgdHJ1ZSwgTWFwVmVydGV4U3RhdHVzXzEuTWFwVmVydGV4U3RhdHVzLkNvbWJhdCwgXCJUYXJnZXRcIiwgXCJOaXhcIik7XHJcbmNvbnN0IHYzMiA9IHZlcnRleCgxNTAsIC0xMzAsIHYzMSwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYzMyA9IHZlcnRleCgxODAsIC03NSwgdjMxLCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjM0ID0gdmVydGV4KDI1MCwgLTc1LCB2MzAsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MzUgPSB2ZXJ0ZXgoNDAsIDU1LCB2MzQsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2MzYgPSB2ZXJ0ZXgoNDAsIC0xNSwgdjM0LCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjM3ID0gdmVydGV4KDQwLCAtMTUsIHYzNSwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHYzOCA9IHZlcnRleCgxMjAsIC0zMCwgdjMwLCB0cnVlLCBNYXBWZXJ0ZXhTdGF0dXNfMS5NYXBWZXJ0ZXhTdGF0dXMuRnJpZW5kbHksIFwiU3RhdGUgQ2FwaXRhbFwiLCBcIlNhbmN0YWJlbGxhXCIpO1xyXG5jb25zdCB2MzkgPSB2ZXJ0ZXgoMTAwLCAtMTUsIHYzOCwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHY0MCA9IHZlcnRleCgxNDAsIDMwLCB2MjQsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2NDEgPSB2ZXJ0ZXgoMTQwLCA4NSwgdjI0LCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjQyID0gdmVydGV4KDE0MCwgLTE1NSwgdjIzLCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjQzID0gdmVydGV4KDI1MCwgMTE1LCB2NDIsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2NDQgPSB2ZXJ0ZXgoMTUwLCA5NSwgdjQxLCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjQ1ID0gdmVydGV4KDE1MCwgODUsIHY0MCwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHY0NiA9IHZlcnRleCg3MCwgNjAsIHY0NSwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHY0NyA9IHZlcnRleCgxMzUsIDEzMCwgdjQ0LCB0cnVlLCBNYXBWZXJ0ZXhTdGF0dXNfMS5NYXBWZXJ0ZXhTdGF0dXMuQmxhY2ssIFwiRGVhdGhcIiwgXCJUaGUgMm5kIE5pZ2h0bWFyZVwiKTtcclxuY29uc3QgdjQ4ID0gdmVydGV4KDE1MCwgMTE1LCB2MjgsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2NDkgPSB2ZXJ0ZXgoMTAwLCAxMjAsIHYwMSwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHY1MCA9IHZlcnRleCgxNDAsIDEzNSwgdjI4LCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjUxID0gdmVydGV4KDEzMCwgMTA1LCB2MjQsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2NTIgPSB2ZXJ0ZXgoNTUsIC0xNjAsIHY0OSwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHY1MyA9IHZlcnRleCg3NSwgLTQwLCB2MDgsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2NTQgPSB2ZXJ0ZXgoMTI1LCAtODAsIHYzOSwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHY1NSA9IHZlcnRleCg4MCwgLTEwMCwgdjU0LCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjU2ID0gdmVydGV4KDEyMCwgMTQwLCB2MTUsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2NTcgPSB2ZXJ0ZXgoNjAsIDkwLCB2NDgsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2NTggPSB2ZXJ0ZXgoNzAsIDEyMCwgdjIxLCB0cnVlLCBNYXBWZXJ0ZXhTdGF0dXNfMS5NYXBWZXJ0ZXhTdGF0dXMuRW1lcmdlbmN5LCBcIkNpdmlsaWFuIENyaXNpc1wiLCBcIlJ5bmVUZWNoIExhYnMgT3V0cG9zdFwiKTtcclxuY29uc3QgdjU5ID0gdmVydGV4KDI0MCwgLTQwLCB2MzMsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG5jb25zdCB2NjAgPSB2ZXJ0ZXgoODAsIC02MCwgdjMzLCB0cnVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuY29uc3QgdjYxID0gdmVydGV4KDE4MCwgODUsIHY0MywgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHY2MiA9IHZlcnRleCgxMjUsIC0xMjAsIHYzMiwgdHJ1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbmNvbnN0IHY2MyA9IHZlcnRleCg1MCwgLTkwLCB2MzYsIHRydWUsIG51bGwsIG51bGwsIG51bGwpO1xyXG52NjEueiA9IE1hdGguc3FydCgzNjAwMDAgLSB2NjEueCAqIHY2MS54KTtcclxudjQzLnogPSBNYXRoLnNxcnQoMzYwMDAwIC0gdjQzLnggKiB2NDMueCk7XHJcbnY0Mi56ID0gTWF0aC5zcXJ0KDM2MDAwMCAtIHY0Mi54ICogdjQyLngpO1xyXG52MDUueiA9IE1hdGguc3FydCgzNjAwMDAgLSB2MDUueCAqIHYwNS54KTtcclxudjEyLnogPSBNYXRoLnNxcnQoMzYwMDAwIC0gdjEyLnggKiB2MTIueCk7XHJcbnYxOS56ID0gTWF0aC5zcXJ0KDM2MDAwMCAtIHYxOS54ICogdjE5LngpO1xyXG52MzIueiA9IE1hdGguc3FydCgzNjAwMDAgLSB2MzIueCAqIHYzMi54KTtcclxudjYyLnogPSBNYXRoLnNxcnQoMzYwMDAwIC0gdjYyLnggKiB2NjIueCk7XHJcbnYwMC5tYXJrQXNCYXNlKCk7XHJcbnYwMC5pbnRlbCA9IGA8cD5BbiBhcG9sb2d5LCBieSBhbiBlbGRyaXRjaCBtb25zdHJvc2l0eSBvbiBiZWhhbGYgb2YgYSBtYW5raW5kIHdobyBcclxuICAgICAgICAgICAgIGhhZCBmYWlsZWQsIHRlcnJpYmx5LCBvbmUgb2YgdGhlaXIgb3duLiBPbmUgd2hvLCB3aGlsZSBzaGUgd2Fsa2VkIFxyXG4gICAgICAgICAgICAgVGVycmEsIG9ubHkgZ290IHRvIHNlZSB0aGUgd29yc3QgdGhhdCBsaWZlIGhhZCB0byBvZmZlci48L3A+XHJcbiAgICAgICAgICAgICA8cD5PbiBoZXIgZGVhdGhiZWQsIHNoZSBmaW5hbGx5IGJyb2tlLiBBcyBoZXIgR29kZGVzcyBsb29rZWQgZG93biBcclxuICAgICAgICAgICAgIHVwb24gaGVyLCBzaGUgd2lzaGVkLCBjaG9rZWQgYnkgd3JhdGggYW5kIHRlYXJzLiBTaGUgd2lzaGVkIHRoYXQgXHJcbiAgICAgICAgICAgICBzaGUgY291bGQgc3BlbmQganVzdCBvbmUgbW9yZSBkYXkgaW4gaGVyIGNoaWxkaG9vZCB2aWxsYWdlLCBhbWlkc3RcclxuICAgICAgICAgICAgIHdhcm0gY29tcGFueSB3aXRoIHdob20gc2hlIGJlbG9uZ2VkLCBpbiBhIHRpbWUgYW5kIHBsYWNlIHRoYXQganVzdCBcclxuICAgICAgICAgICAgIGZlbHQgPGVtPnJpZ2h0PC9lbT4uPC9wPlxyXG4gICAgICAgICAgICAgPHA+QW5kIHRoZSBHb2RkZXNzLCBhIEZyYWdtZW50IHRoYXQgU2hvdWxkIE5vdCBCZSwgbGlzdGVuZWQuIEFuZCBzb1xyXG4gICAgICAgICAgICAgU2hlIHRvb2sgaGVyIGhvbWUuIEFuZCB0aGVuIFNoZSBwYWludGVkLiBGdWVsZWQgYnkgZmVydmVudG5lc3MgYW5kIFxyXG4gICAgICAgICAgICAgZGlzZGFpbiwgU2hlIHBhaW50ZWQuIEFuZCBwYWludGVkLiBUaHVzIGNyZWF0aW5nIGEgd29yayBvZiBhcnQgdGhhdFxyXG4gICAgICAgICAgICAgd291bGQgbmV2ZXIgYmUgcml2YWxlZCwgYnJpbmdpbmcgdG8gbGlmZSBub3QganVzdCB0aGUgbG9uZy1sb3N0IFxyXG4gICAgICAgICAgICAgdmlsbGFnZSBvZiBQbydTaGFuLCBidXQgYWxzbyBhIG15cmlhZCBicmVhdGh0YWtpbmcgdmlzaW9ucywgb2YgXHJcbiAgICAgICAgICAgICBhbHBpbmUgbWVhZG93cyBhbmQgZGVlcCByYXZpbmVzLCBvZiBzbm93IGNsYWQgaGlsbHMgYW5kIHdhcm0gYmVhY2hlcywgaW4gd2hhdCB3YXMgXHJcbiAgICAgICAgICAgICBiZWZvcmUgbmF1Z2h0IGJ1dCBiYXJyZW4gcm9jay4uLjwvcD5cclxuICAgICAgICAgICAgIDxwPk92ZXIgdGltZSB0aGlzIHBhaW50ZWQgcmVhbG0gYmVjYW1lIGhvbWUgdG8gcXVpdGUgYSB2YXJpZWQgXHJcbiAgICAgICAgICAgICBhc3NvcnRtZW50IG9mIHBlb3BsZS4gTG9zdCBhbmQgYWJhbmRvbmVkIGVsc2V3aGVyZSwgdGhleSBmb3VuZCB0aGlzXHJcbiAgICAgICAgICAgICB2aWxsYWdlIGluIHRoZSBtaWRkbGUgb2Ygbm93aGVyZSBhIHdlbGNvbWluZyBhbmQgd2FybSByZXByaWV2ZS48L3A+IFxyXG4gICAgICAgICAgICAgPHA+QSB3aXNoIGZ1bGZpbGxlZC48L3A+XHJcbiAgICAgICAgICAgICA8cD5BdCBsZWFzdCwgd2hpbGUgaXQgbGFzdGVkLiBGb3IgdGhlIFNoZS1EcmFnb24gd2FzIG5vdCBodW1hbiwgbm9yXHJcbiAgICAgICAgICAgICAgbW9ydGFsLiBBbmQgU2hlIGRpZCBub3Qgc2VlIEhlcnNlbGYgYXMgb25lLiBVbnRpbCByZWNlbnRseSwgdGhlIFxyXG4gICAgICAgICAgICAgIHZpbGxhZ2Ugd2FzIGJvdGggYSBib29uIGFuZCBhIGN1cnNlLCBwYXJhZGlzZSBhbmQgZGFtbmF0aW9uLjwvcD5cclxuICAgICAgICAgICAgIDxwPkJ1dCBub3cgZnJlZWQsIGl0IGZvcm1zIHRoZSBrZXkgdG8geW91ciBzdXJ2aXZhbC4gV2l0aCBpdHMgZmF0ZSBcclxuICAgICAgICAgICAgIGludHJpY2F0ZWx5IHRhbmdsZWQgd2l0aCB5b3VyIG93biwgdGhlIHBhdGggeW91IHRyZWFkIHJlbWFpbnMgdG8gYmUgXHJcbiAgICAgICAgICAgICBzZWVuLi4uPC9wPmA7XHJcbnYzMS5pbnRlbCA9IGA8cD5UaGUgdGVycml0b3J5IG9mIE5peCAobmFtZWQgYWZ0ZXIgdGhlIG9ubHkga25vd24gJ2NpdmlsaXplZCcgXHJcbiAgICAgICAgICAgIHRvd24gaW4gdGhhdCBhcmVhKSBjb3ZlcnMgYSA8ZW0+aHVnZTwvZW0+IGV4cGFuc2Ugb2YgZnJpZ2lkIHR1bmRyYSAvXHJcbiAgICAgICAgICAgIHZhc3QgYmFycmVuIGdsYWNpZXItZmllbGRzLCB3aXRoIG9ubHkgY29hc3RhbCBhcmVhcyAoYmFyZWx5KSBcclxuICAgICAgICAgICAgc3VpdGFibGUgZm9yIHN1c3RhaW5pbmcgbGlmZS4gVGhlIHJlc3Qgb2YgaXQgaXMgcG9wdWxhdGVkIGJ5IHZhcmlvdXMgcHJpbWl0aXZlLCBcclxuICAgICAgICAgICAgbG9vc2VseS1ib3VuZCBjaGllZmRvbXMgaGF2aW5nIG9ubHkgYSBoYW5kZnVsIG9mIGZhbWlsaWVzLiBUaGVzZSBzdGlsbCBcclxuICAgICAgICAgICAgcmV0YWluIHRoZWlyIGFuY2llbnQgd2F5cyBvZiBsaWZlLCBpc29sYXRpb25pc20gYW5kIHNoYW1hbmljIGN1bHR1cmVzIHdoaWxlIHRoZSBcclxuICAgICAgICAgICAgcmVzdCBvZiB0aGlzIHVuaXZlcnNlIGNvbnRpbnVlcyB0byBtb2Rlcm5pemUuIEVhY2ggb2YgdGhlc2UgdHJpYmVzIFxyXG4gICAgICAgICAgICBpcyBsZWFkIGJ5IHJldmVyZWQgJ1Nub3dQcmllc3RzJyBsZWFkaW5nIHRvIHRoZWlyIHJlbm93bmVkICh5ZXQgXHJcbiAgICAgICAgICAgIGVsdXNpdmUpIGN1bHR1cmUgb2YgbXlzdGljIGFuaW1pc20uPC9wPlxyXG4gICAgICAgICAgICA8cD5BIGxhbmQgdGhhdCB0aW1lIGZvcmdvdC4gQSBsYW5kIHRoYXQgaXMgc3RpbGwgZGVlcGx5IGludmVzdGVkIGFuZFxyXG4gICAgICAgICAgICBmaWxsZWQgd2l0aCBteXN0ZXJpZXMgYW5kIGFuY2llbnQgcHJpbW9yZGlhbHMsIHRoaXMgaW5maW5pdGUgXHJcbiAgICAgICAgICAgIGljZWZpZWxkIGhhcyBhbHdheXMgaW5zcGlyZWQgbWl4ZWQgZmVlbGluZ3Mgb2YgZmVhciBhbmQgcmV2ZXJlbmNlLFxyXG4gICAgICAgICAgICBhbmQgb2NjYXNpb25hbGx5IG1vY2tlcnkuIFlldCBvZiBsYXRlLCBhIG5ldyBmZWVsaW5nIGhhcyBiZWd1biB0byBcclxuICAgICAgICAgICAgc3VyZmFjZS4uLiBBIGZlZWxpbmcgb2YgcHVyZSBob3Jyb3IuIEFuIGluZmVjdGlvbiB0aGF0IGZldyBrbm93LCBcclxuICAgICAgICAgICAgYW5kIGZld2VyIHlldCB1bmRlcnN0YW5kLCBoYXMgYmVndW4gdG8gY3JlZXAgdXBvbiB0aGlzIGxhbmQgLSBhbmQgXHJcbiAgICAgICAgICAgIHRoZSB3aG9sZXNhbGUgc2xhdWdodGVyIG9mIHRoZSB0b3duIG9mIE5peCBkb2Vzbid0IGhlbHAgd2l0aCBpdHMgcmVwdXRhdGlvbi4uLjwvcD5gO1xyXG52MzEuYWRkU2l0ZU9mSW50ZXJlc3QoXCJUaGUgdG93biBvZiBOaXhcIiwgXCJDb2FzdGFsIFRvd25cIiwgXCJUaGUgbGl0dGxlIHRvd24gb2YgTml4LiAnVHdhcyBhbG1vc3QgeWVzdGVyZGF5IHRoYXQgdGhpcyBcIiArXHJcbiAgICBcIndhcyBhIGh1bWJsZSBhbmQgZnJpZW5kbHkgcmVmdWdlIGZvciBtYW55IGEgdHJhdmVsbGVyLCBhbmQgY3JhZnRzIFwiICtcclxuICAgIFwiZnJvbSBoZXJlIGFkb3JuIG1hbnkgYSBwbGFjZSBpbiBEZXZvdGlvbiBhbmQgZXZlbiBiZXlvbmQuIFVuZm9ydHVuYXRlbHksIFwiICtcclxuICAgIFwidGhlIHJlY2VudCBibG9vZGJhdGggaGFzIGdyaXBwZWQgdGhpcyBwbGFjZSBpbiBhIGhlYXZ5IG1vb2Qgb2YgZGVzcGFpciBcIiArXHJcbiAgICBcImFuZCBwYXJhbm9pYSwgYW5kIDxlbT5mZWFyPC9lbT4uXCIsIFtcclxuICAgIFtcIkxlYWRlclwiLCBcIlNpciBHbm9zaXMgRWRlbHdlaXNzXCJdLFxyXG4gICAgW1wiUG9wdWxhdGlvblwiLCBcIn4xLjNLXCJdLFxyXG4gICAgW1wiR2VvZ3JhcGh5XCIsIFwiQ2xpZmYtc2lkZVwiXSxcclxuICAgIFtcIkVjb25vbXlcIiwgXCJTaGFtYmxlc1wiXSxcclxuXSwgMjI4OCwgbmV3IE1hcChbXHJcbiAgICBbTWFwVHJhbnNwb3J0YXRpb25fMS5NYXBUcmFuc3BvcnRhdGlvbi5Gb290LCBcIn41NyBkYXlzXCJdLFxyXG4gICAgW01hcFRyYW5zcG9ydGF0aW9uXzEuTWFwVHJhbnNwb3J0YXRpb24uSG9yc2UsIFwifjIyIGRheXNcIl0sXHJcbiAgICBbTWFwVHJhbnNwb3J0YXRpb25fMS5NYXBUcmFuc3BvcnRhdGlvbi5BdXRvbW9iaWxlLCBcIn4yICBkYXlzXCJdLFxyXG4gICAgW01hcFRyYW5zcG9ydGF0aW9uXzEuTWFwVHJhbnNwb3J0YXRpb24uSmV0LCBcIn4xICBob3VyXCJdLFxyXG5dKSk7XHJcbnYzMS5hZGRDaGFyYWN0ZXJUb2tlbihucGNJbmRleF8xLk5wY0lELkdub3Npcyk7XHJcbnY1OC5pbnRlbCA9IGBPdXRwb3N0ICM0ZDM3MzM1YyBvZiBSeW5lVGVjaCBMYWJzLCBEZXZvdGlvbiBTZWN0b3IuIFJlc3BvbnNpYmxlIFxyXG4gICAgICAgICAgICAgZm9yIGxvdyBsYXRlbmN5IGZyb250IGxpbmUgcmVzZWFyY2ggY29uY2VybmluZyBwaGVub21lbm9uIG9ic2VydmVkIGluIHRoaXNcclxuICAgICAgICAgICAgIHNlY3RvciBvZiBEZXZvdGlvbi4gTGlrZSBtb3N0IFxyXG4gICAgICAgICAgICAgb3RoZXIgb3V0cG9zdHMgb3V0c2lkZSB0aGUgcGxhbmUgb2YgaW5ub3ZhdGlvbiwgdGhpcyBhcmVhIG9ubHkgXHJcbiAgICAgICAgICAgICBtYWludGFpbnMgY29tbXMgd2l0aCB0aGUgJ2ZyaW5nZXMnIG9mIElubm92YXRpb24sIGFuZCBpdHMgXHJcbiAgICAgICAgICAgICBleGlzdGVuY2UgaXMgY2xhc3NpZmllZCB0byBtb3N0IGluaGFiaXRhbnRzIG9mIHRoZSBwbGFuZSBpdCBzd2VhcnMgXHJcbiAgICAgICAgICAgICBhbGxlZ2lhbmNlIHRvLjxici8+XHJcbiAgICAgICAgICAgICBTZXZlcmFsIGNhbXB1c2VzIGhhdmUgcG9wcGVkIHVwIGhlcmUgYWZ0ZXIgdGhlIGV4ZWN1dGl2ZXMgb2YgdGhlIFxyXG4gICAgICAgICAgICAgTGFicyBkZWNpZGVkIHRvIGNob29zZSB0aGlzIHJlZ2lvbiB0byBzcGVhcmhlYWQgdGhlaXIgcmVzZWFyY2guIE90aGVyXHJcbiAgICAgICAgICAgICB0aGFuIHRoZSBjZW50cmFsIGNhbXB1cywgVGhlIEtlcm5lbCwgd2hlcmUgc2Vuc2l0aXZlIGFuZCBtaWxpdGFyeSBcclxuICAgICAgICAgICAgIHJlc2VhcmNoIG9jY3Vycywgc2VjdXJpdHkgaXMgZmFpcmx5IGxheC4gQnV0IHRoZW4sIHRoZSBzdWJ1cmJzIFxyXG4gICAgICAgICAgICAgYnVpbHQgb24gcmVpbmZvcmNlZCBzdGVlbCwgYWx1bWluaXVtIGFuZCBwb2x5bWVycyBhcmUgY29uZmlkZW50IFxyXG4gICAgICAgICAgICAgdGhhdCB0aGV5IG5lZWRuJ3QgZmVhciBvYnNvbGV0ZSBhcm1zLCBtYWdpYywgc2llZ2Ugd2VhcG9ucyBvciBcclxuICAgICAgICAgICAgIGV2ZW4gbXl0aHMgYW5kIGRlaXRpZXMuPGJyLz5cclxuICAgICAgICAgICAgIE1vc3QgY2l2aWxpYW5zIGhlcmUsIHdoaWxlIG5vdCBzbyBcclxuICAgICAgICAgICAgIG9ibGl2aW91cyB0byB0aGUgbXVsdGl2ZXJzZSBhcyB0aG9zZSB3aXRoaW4gdGhlIGlubmVyIHJlYWNoZXMgb2YgXHJcbiAgICAgICAgICAgICBJbm5vdmF0aW9uIGFyZSwgaGF2ZSBuZXZlciBzZWVuIGFuIGludmVzdGVkIGJlaW5nIG9yIGFwcGxpY2F0aW9uIG9mXHJcbiAgICAgICAgICAgICBtYWdpYyBpbiB0aGVpciBsaXZlcy4gVGhhdCdzIGluIHBhcnQgZHVlIHRvIHRoZSBleHRlbnNpdmUgXHJcbiAgICAgICAgICAgICBzdXJ2ZWlsbGFuY2Ugb2YgdGhpcyBhcmVhLiBTY29yZXMgb2Ygc2F0ZWxsaXRlcyBwYXRyb2xsaW5nIHRoZSBcclxuICAgICAgICAgICAgIHNraWVzIGRldGVjdCBzaWducyBvZiBsaWZlIGFueXdoZXJlIGluIHRoaXMgcmVnaW9uIC0gYW5kIGludHJ1ZGVycyxcclxuICAgICAgICAgICAgIHBhcnRpY3VsYXJseSBpbnZlc3RlZCBpbnRydWRlcnMgYXJlIHF1YXJhbnRpbmVkIG9yIGVsaW1pbmF0ZWQgd2l0aCBcclxuICAgICAgICAgICAgIGV4dHJlbWUgcHJvZmVzc2lvbmFsaXNtLlxyXG4gICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1hcF92ZXJ0ZXhfZGV0YWlsc19fc3ViaGVhZGVyIHRoZW1lX3N1YmhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgIENyaXNpcyBEZXRhaWxzXHJcbiAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgID8/P1xyXG4gICAgICAgICAgICAgYDtcclxudjU4LmFkZFNpdGVPZkludGVyZXN0KFwiVGhlIEtlcm5lbFwiLCBcIk1pbGl0YXJ5IFJlc2VhcmNoIEh1YlwiLCBgVGhlIGNlbnRyYWwgcmVzZWFyY2ggY2VudGVyIG9mIHRoZSBPdXRwb3N0LiBBbGwgc3R1ZGllcyBcclxuICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtZWQgaGVyZSBhcmUgY2xhc3NpZmllZCB0byB0aGUgbW9zdCBzZXZlcmUgZGVncmVlLiBcclxuICAgICAgICAgICAgICAgICAgICAgICBIaWdoZXN0IGdyYWRlIHNlY3VyaXR5IGFuZCBmdXNpb24tcG93ZXJlZCBkZWZlbnNlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHBsdXMgYSBmcmFtZXdvcmsgbWFkZSBhbG1vc3QgZW50aXJlbHkgdXBvbiBBbHVtaW5pdW0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbWVhbnMgdGhpcyBoYXMgYmVlbiBpbXBlbmV0cmFibGUgYnkgbWFuIG9yIEdvZCwgb3IgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgaW4gYmV0d2Vlbiwgc28gZmFyIGF0IGxlYXN0LmAsIFtcclxuICAgIFtcIk1hbmFnZXJcIiwgXCJZYXNpbiBOYXRhZWxcIl0sXHJcbiAgICBbXCJQb3B1bGF0aW9uXCIsIFwifjEuMEtcIl0sXHJcbiAgICBbXCJHZW9ncmFwaHlcIiwgXCJIaWdoIEFsdGl0dWRlIFBsYWluc1wiXSxcclxuICAgIFtcIkRlZmVuc2VzXCIsIFwiU1MgR3JhZGVcIl0sXHJcbiAgICBbXCJSZXNlYXJjaCBGb2N1c1wiLCBcIj8/P1wiXSxcclxuXSwgMjU2MDAsIG5ldyBNYXAoW1xyXG4gICAgW01hcFRyYW5zcG9ydGF0aW9uXzEuTWFwVHJhbnNwb3J0YXRpb24uQXV0b21vYmlsZSwgXCJ+OSAgIGRheXNcIl0sXHJcbiAgICBbTWFwVHJhbnNwb3J0YXRpb25fMS5NYXBUcmFuc3BvcnRhdGlvbi5KZXQsIFwifjUgICBob3Vyc1wiXSxcclxuICAgIFtNYXBUcmFuc3BvcnRhdGlvbl8xLk1hcFRyYW5zcG9ydGF0aW9uLlNwYWNlLCBcIjc1ICAgbWludXRlc1wiXSxcclxuXSkpO1xyXG52NTguYWRkU2l0ZU9mSW50ZXJlc3QoXCJQYXJrIERpc3RyaWN0XCIsIFwiTmVpZ2hib3VyaG9vZFwiLCBgVGhlIGNpdmlsaWFuIHJlc2VhcmNoIGFyZWEgb2YgdGhlIE91dHBvc3QuIDQgaG91cnMgcmFpbCBcclxuICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIEtlcm5lbC4gTW9zdCBvZiB0aGUgY2l2aWxpemF0aW9uIG5lZWRlZCB0byBzdXBwb3J0IFxyXG4gICAgICAgICAgICAgICAgICAgICAgVGhlIEtlcm5lbCByZXNpZGVzIGhlcmUuIEFsc28gbm90YWJseSwgYSBoaWdoIHBvcHVsYXRpb24gXHJcbiAgICAgICAgICAgICAgICAgICAgICBvZiBHcmFkdWF0ZSBzdHVkZW50cyBlbmdhZ2UgaW4gbm9uLW1pbGl0YXJ5IHN0dWRpZXMsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgZW5qb3lpbmcgYSByZWxheGVkIHN1Yi11cmIgbGlmZSBzdWJzaWRpc2VkIGJ5IHRoZSBsYWJzLmAsIFtcclxuICAgIFtcIlBvcHVsYXRpb25cIiwgXCJ+MTJLXCJdLFxyXG4gICAgW1wiR2VvZ3JhcGh5XCIsIFwiRmVydGlsZSBQbGFpbnNcIl0sXHJcbiAgICBbXCJEZWZlbnNlc1wiLCBcIk5vbmVcIl0sXHJcbl0sIDIyNDAwLCBuZXcgTWFwKFtcclxuICAgIFtNYXBUcmFuc3BvcnRhdGlvbl8xLk1hcFRyYW5zcG9ydGF0aW9uLkhvcnNlLCBcIn45NiAgZGF5c1wiXSxcclxuICAgIFtNYXBUcmFuc3BvcnRhdGlvbl8xLk1hcFRyYW5zcG9ydGF0aW9uLkF1dG9tb2JpbGUsIFwifjggICBkYXlzXCJdLFxyXG4gICAgW01hcFRyYW5zcG9ydGF0aW9uXzEuTWFwVHJhbnNwb3J0YXRpb24uSmV0LCBcIn40LjUgaG91cnNcIl0sXHJcbiAgICBbTWFwVHJhbnNwb3J0YXRpb25fMS5NYXBUcmFuc3BvcnRhdGlvbi5TcGFjZSwgXCI3MCAgIG1pbnV0ZXNcIl0sXHJcbl0pKTtcclxudjU4LmFkZFNpdGVPZkludGVyZXN0KFwiU2FuZCBSaWRnZVwiLCBcIkJhZGxhbmRzIENhbXBcIiwgYEhvbWUgdG8gYSBjb3Jwb3JhdGUgZnVuZGVkIHRhc2sgZm9yY2UgYW5kIGxvY2FsIG1pbGl0aWEuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgTWFpbmx5IHNlbGYtc3VmZmljaWVudCBhbmQgaW5kZXBlbmRlbnQsIHRoZSBncm93dGggb2YgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGhpcyAnQ2FtcCcgaGFzIGJlZW4gZW5jb3VyYWdlZCBieSB0aGUgYXV0aG9yaXRpZXMgaW4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgSW5ub3ZhdGlvbiBzbyB0aGF0IHRoZXkgY291bGQgcHJvdmlkZSAoYXQgYSBwcmljZSkgZ29vZHNcclxuICAgICAgICAgICAgICAgICAgICAgICBhbmQgc2VydmljZXMsIGFuZCBwcm90ZWN0aW9uLCBuZWVkZWQgYnkgdGhlIHJlc2VhcmNoIGFyZWFzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgaW4gY2FzZSBvZiBlbWVyZ2VuY2llcy4uLi5gLCBbXHJcbiAgICBbXCJNYW5hZ2VyXCIsIFwiU2FpdG8gU2FuXCJdLFxyXG4gICAgW1wiUG9wdWxhdGlvblwiLCBcIn40LjJLXCJdLFxyXG4gICAgW1wiR2VvZ3JhcGh5XCIsIFwiU2VtaS1iYXJyZW4gUGxhdGVhdXNcIl0sXHJcbiAgICBbXCJEZWZlbnNlc1wiLCBcIkIgR3JhZGVcIl0sXHJcbl0sIDE4NDAwLCBuZXcgTWFwKFtcclxuICAgIFtNYXBUcmFuc3BvcnRhdGlvbl8xLk1hcFRyYW5zcG9ydGF0aW9uLkhvcnNlLCBcIn43MiBkYXlzXCJdLFxyXG4gICAgW01hcFRyYW5zcG9ydGF0aW9uXzEuTWFwVHJhbnNwb3J0YXRpb24uQXV0b21vYmlsZSwgXCJ+NyAgIGRheXNcIl0sXHJcbiAgICBbTWFwVHJhbnNwb3J0YXRpb25fMS5NYXBUcmFuc3BvcnRhdGlvbi5KZXQsIFwifjQgICBob3Vyc1wiXSxcclxuXSkpO1xyXG5mdW5jdGlvbiBlZGdlKHYwMCwgdjAxLCBkaXN0TXVsID0gMS4wKSB7XHJcbiAgICBjb25zdCBlID0gbmV3IE1hcEVkZ2VfMS5NYXBFZGdlKGcsIHYwMCwgdjAxKTtcclxuICAgIGUud29ybGRMZW5ndGhNdWx0aXBsaWVyID0gZGlzdE11bDtcclxufVxyXG5lZGdlKHYwMCwgdjAxLCAwLjgpO1xyXG5lZGdlKHYwMCwgdjA3LCAwLjkpO1xyXG5lZGdlKHYwMCwgdjAzKTtcclxuZWRnZSh2MDAsIHYwNCwgMC42KTtcclxuZWRnZSh2MDAsIHYwNSwgMC4wMSk7XHJcbmVkZ2UodjAwLCB2MDgpO1xyXG5lZGdlKHYwMCwgdjEzLCAxLjIpO1xyXG5lZGdlKHYwMSwgdjAyLCAwLjQpO1xyXG5lZGdlKHYwMSwgdjA3KTtcclxuZWRnZSh2MDEsIHY0OSk7XHJcbmVkZ2UodjAyLCB2NTYsIDAuMyk7XHJcbmVkZ2UodjAzLCB2MDYpO1xyXG5lZGdlKHYwNCwgdjA2KTtcclxuZWRnZSh2MDQsIHYxMyk7XHJcbmVkZ2UodjA1LCB2MTEsIDAuMSk7XHJcbmVkZ2UodjA1LCB2MTIsIDAuMSk7XHJcbmVkZ2UodjA2LCB2MTEpO1xyXG5lZGdlKHYwNywgdjExKTtcclxuZWRnZSh2MDgsIHYxNSk7XHJcbmVkZ2UodjA4LCB2MTMpO1xyXG5lZGdlKHYwOCwgdjUzKTtcclxuZWRnZSh2MDksIHYxMCk7XHJcbmVkZ2UodjA5LCB2NDkpO1xyXG5lZGdlKHYwOSwgdjUyKTtcclxuZWRnZSh2MTAsIHYxMSwgMC4xKTtcclxuZWRnZSh2MTAsIHYyMik7XHJcbmVkZ2UodjEwLCB2MjEpO1xyXG5lZGdlKHYxMCwgdjQyLCAwLjEpO1xyXG5lZGdlKHYxMSwgdjIwKTtcclxuZWRnZSh2MTEsIHYyMSk7XHJcbmVkZ2UodjEyLCB2MTksIDAuMSk7XHJcbmVkZ2UodjEzLCB2MTQpO1xyXG5lZGdlKHYxMywgdjE3KTtcclxuZWRnZSh2MTMsIHYxOCk7XHJcbmVkZ2UodjE1LCB2MTYpO1xyXG5lZGdlKHYxNSwgdjU2KTtcclxuZWRnZSh2MTYsIHYzMSk7XHJcbmVkZ2UodjE3LCB2MjkpO1xyXG5lZGdlKHYxNywgdjMwKTtcclxuZWRnZSh2MTksIHYzOCwgMC4xKTtcclxuZWRnZSh2MjAsIHYyOCk7XHJcbmVkZ2UodjIxLCB2MjYpO1xyXG5lZGdlKHYyMSwgdjI1KTtcclxuZWRnZSh2MjEsIHY1OCk7XHJcbmVkZ2UodjIyLCB2MjMpO1xyXG5lZGdlKHYyMiwgdjI0KTtcclxuZWRnZSh2MjIsIHYyNSk7XHJcbmVkZ2UodjIzLCB2NDEpO1xyXG5lZGdlKHYyMywgdjUxKTtcclxuZWRnZSh2MjQsIHY0MCk7XHJcbmVkZ2UodjI0LCB2NDEpO1xyXG5lZGdlKHYyNSwgdjI2KTtcclxuZWRnZSh2MjYsIHYyNyk7XHJcbmVkZ2UodjI2LCB2NTApO1xyXG5lZGdlKHYyNywgdjI4KTtcclxuZWRnZSh2MjgsIHY0OCk7XHJcbmVkZ2UodjI5LCB2MzgpO1xyXG5lZGdlKHYyOSwgdjM5KTtcclxuZWRnZSh2MzAsIHYzMSk7XHJcbmVkZ2UodjMwLCB2MzQpO1xyXG5lZGdlKHYzMCwgdjM4KTtcclxuZWRnZSh2MzEsIHYzMyk7XHJcbmVkZ2UodjMxLCB2MzQpO1xyXG5lZGdlKHYzMiwgdjM4LCAwLjEpO1xyXG5lZGdlKHYzMiwgdjYyLCAwLjEpO1xyXG5lZGdlKHYzMywgdjU5KTtcclxuZWRnZSh2MzMsIHY2MCk7XHJcbmVkZ2UodjM0LCB2MzUpO1xyXG5lZGdlKHYzNCwgdjM2KTtcclxuZWRnZSh2MzUsIHYzNyk7XHJcbmVkZ2UodjM1LCB2MzgpO1xyXG5lZGdlKHYzNiwgdjM3KTtcclxuZWRnZSh2MzYsIHY2Myk7XHJcbmVkZ2UodjM3LCB2MzkpO1xyXG5lZGdlKHYzOCwgdjM5KTtcclxuZWRnZSh2MzksIHY1NCk7XHJcbmVkZ2UodjQwLCB2NDQpO1xyXG5lZGdlKHY0MCwgdjQ1KTtcclxuZWRnZSh2NDEsIHY0NCk7XHJcbmVkZ2UodjQxLCB2NTEpO1xyXG5lZGdlKHY0MiwgdjQzLCAwLjEpO1xyXG5lZGdlKHY0MywgdjYxLCAwLjEpO1xyXG5lZGdlKHY0NCwgdjUxKTtcclxuZWRnZSh2NDUsIHY0Nik7XHJcbmVkZ2UodjQ1LCB2NDcpO1xyXG5lZGdlKHY0NSwgdjQ4KTtcclxuZWRnZSh2NDUsIHY1MCk7XHJcbmVkZ2UodjQ0LCB2NDcpO1xyXG5lZGdlKHY0NiwgdjQ3KTtcclxuZWRnZSh2NDYsIHY1Nyk7XHJcbmVkZ2UodjU0LCB2NTUpO1xyXG5leHBvcnRzLmRldm90aW9uTWFwID0gZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV2b3Rpb25NYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5za2lsbE1hcCA9IHZvaWQgMDtcclxuY29uc3QgUmFyaXR5XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9SYXJpdHlcIik7XHJcbmNvbnN0IFVwZ3JhZGVFZGdlXzEgPSByZXF1aXJlKFwiLi4vVXBncmFkZUVkZ2VcIik7XHJcbmNvbnN0IFVwZ3JhZGVHcmFwaF8xID0gcmVxdWlyZShcIi4uL1VwZ3JhZGVHcmFwaFwiKTtcclxuY29uc3QgVXBncmFkZVZlcnRleF8xID0gcmVxdWlyZShcIi4uL1VwZ3JhZGVWZXJ0ZXhcIik7XHJcbmNvbnN0IFVwZ3JhZGVWZXJ0ZXhDb25maWdfMSA9IHJlcXVpcmUoXCIuLi9VcGdyYWRlVmVydGV4Q29uZmlnXCIpO1xyXG5jb25zdCBnID0gbmV3IFVwZ3JhZGVHcmFwaF8xLlVwZ3JhZGVHcmFwaChcInNrXCIpO1xyXG5mdW5jdGlvbiB2ZXJ0ZXgoeCwgeSwgcmVmLCByYWRpYWwsIGRpc3BsYXksIHR5cGUgPSBudWxsLCByYXJpdHkgPSBudWxsLCBhY3RpdmF0aW9uID0gMCkge1xyXG4gICAgY29uc3QgdiA9IG5ldyBVcGdyYWRlVmVydGV4XzEuVXBncmFkZVZlcnRleChnLCBkaXNwbGF5LCB0eXBlLCByYXJpdHksIGFjdGl2YXRpb24pO1xyXG4gICAgaWYgKHJlZiA9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKCFyYWRpYWwpIHtcclxuICAgICAgICAgICAgdi5jYXJ0ZXNpYW4gPSBbeCwgeV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2LnJhZGlhbCA9IFt4LCB5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoIXJhZGlhbCkge1xyXG4gICAgICAgICAgICB2LnNldExpbmVhcmx5V3J0KHJlZiwgeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2LnNldFJhZGlhbGx5V3J0KHJlZiwgeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHY7XHJcbn1cclxuZnVuY3Rpb24gZWRnZSh2MCwgdjEsIHZjID0gbnVsbCwgekluZGV4ID0gMCkge1xyXG4gICAgY29uc3QgZSA9IG5ldyBVcGdyYWRlRWRnZV8xLlVwZ3JhZGVFZGdlKGcsIHYwLCB2MSwgdmMpO1xyXG4gICAgZS56SW5kZXggPSB6SW5kZXg7XHJcbn1cclxuY29uc3QgcjExID0gODA7XHJcbmNvbnN0IHIxMiA9IDE2MDtcclxuY29uc3QgcjEzID0gMjUwO1xyXG5jb25zdCByMTQgPSAzNTA7XHJcbmNvbnN0IHIxNSA9IDUwMDtcclxuY29uc3QgcjE2ID0gNzIwO1xyXG5jb25zdCByMjEgPSA4MDtcclxuY29uc3QgcjIyID0gMTUwO1xyXG5jb25zdCByMjMgPSAyNDA7XHJcbmNvbnN0IHIyNCA9IDMzMDtcclxuY29uc3QgcjI1ID0gNTAwO1xyXG5jb25zdCByMzEgPSA4MDtcclxuY29uc3QgcjMyID0gMTUwO1xyXG5jb25zdCByMzMgPSAyNzA7XHJcbmNvbnN0IHIzNCA9IDQwMDtcclxuY29uc3QgcjQxID0gODA7XHJcbmNvbnN0IHI0MiA9IDE2MDtcclxuY29uc3QgcjQzID0gMzIwO1xyXG5jb25zdCB2MDAgPSB2ZXJ0ZXgoMCwgMCwgbnVsbCwgZmFsc2UsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5TeW5jLCBSYXJpdHlfMS5SYXJpdHkuQXJ0ZWZhY3QsIDEpO1xyXG5jb25zdCB2MDEgPSB2ZXJ0ZXgocjExLCAtNDUsIHYwMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzV2lzLCBSYXJpdHlfMS5SYXJpdHkuQ29tbW9uLCAxKTtcclxuY29uc3QgdjAyID0gdmVydGV4KHIxMSwgLTkwLCB2MDAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5IUCwgUmFyaXR5XzEuUmFyaXR5LkJsYWNrLCAxKTtcclxuY29uc3QgdjAzID0gdmVydGV4KHIxMSwgLTEzNSwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnQsIFJhcml0eV8xLlJhcml0eS5Db21tb24sIDEpO1xyXG5jb25zdCB2MDQgPSB2ZXJ0ZXgocjExLCAxODAsIHYwMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLkRhbWFnZSwgUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uKTtcclxuY29uc3QgdjA1ID0gdmVydGV4KHIxMiwgMCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU3RhdHNDb24sIFJhcml0eV8xLlJhcml0eS5Db21tb24sIDEpO1xyXG5jb25zdCB2MDYgPSB2ZXJ0ZXgocjEyLCAtNDUsIHYwMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLkRlYXRoU2F2ZXMsIFJhcml0eV8xLlJhcml0eS5CbGFjayk7XHJcbmNvbnN0IHYwNyA9IHZlcnRleChyMTIsIC05MCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuSFAsIFJhcml0eV8xLlJhcml0eS5Db21tb24sIDEpO1xyXG5jb25zdCB2MTIgPSB2ZXJ0ZXgocjEyLCAtMTM1LCB2MDAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5BQywgUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uKTtcclxuY29uc3QgdjA4ID0gdmVydGV4KHIxMiwgLTE4MCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU3RhdHNEZXgsIFJhcml0eV8xLlJhcml0eS5Db21tb24pO1xyXG5jb25zdCB2MDkgPSB2ZXJ0ZXgocjEzLCAtMjIuNSwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU3RhdHNTdHIsIFJhcml0eV8xLlJhcml0eS5Db21tb24pO1xyXG5jb25zdCB2MTAgPSB2ZXJ0ZXgocjEzLCAtOTAsIHYwMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLkhQLCBSYXJpdHlfMS5SYXJpdHkuVW5jb21tb24pO1xyXG5jb25zdCB2MTEgPSB2ZXJ0ZXgocjEzLCAtMTEyLjUsIHYwMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzQ2hhLCBSYXJpdHlfMS5SYXJpdHkuQ29tbW9uKTtcclxuY29uc3QgdjEzID0gdmVydGV4KHIxNCwgMCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU2F2ZXNJbnRXaXNDaGEsIFJhcml0eV8xLlJhcml0eS5VbmNvbW1vbik7XHJcbmNvbnN0IHYxNCA9IHZlcnRleChyMTQsIC0yMi41LCB2MDAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5MYW5kTW92ZW1lbnQsIFJhcml0eV8xLlJhcml0eS5Db21tb24pO1xyXG5jb25zdCB2MTUgPSB2ZXJ0ZXgocjE0LCAtNDUsIHYwMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLkFjY3VyYWN5LCBSYXJpdHlfMS5SYXJpdHkuUmFyZSk7XHJcbmNvbnN0IHYxNiA9IHZlcnRleChyMTQsIC05MCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuSFAsIFJhcml0eV8xLlJhcml0eS5SYXJlKTtcclxuY29uc3QgdjE3ID0gdmVydGV4KHIxNCwgLTExMi41LCB2MDAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5MYW5kTW92ZW1lbnQsIFJhcml0eV8xLlJhcml0eS5Db21tb24pO1xyXG5jb25zdCB2MTggPSB2ZXJ0ZXgocjE0LCAtMTM1LCB2MDAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5EZWF0aFNhdmVzLCBSYXJpdHlfMS5SYXJpdHkuUmFyZSk7XHJcbmNvbnN0IHYxOSA9IHZlcnRleChyMTQsIC0xNTcuNSwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU2VhTW92ZW1lbnQsIFJhcml0eV8xLlJhcml0eS5SYXJlKTtcclxuY29uc3QgdjIwID0gdmVydGV4KHIxNCwgLTE4MCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuSW5pdGlhdGl2ZSwgUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uKTtcclxuY29uc3QgdjIxID0gdmVydGV4KHIxNSwgMCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzQWxsLCBSYXJpdHlfMS5SYXJpdHkuRXBpYyk7XHJcbmNvbnN0IHYyMiA9IHZlcnRleChyMTUsIC0yMi41LCB2MDAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5Jbml0aWF0aXZlLCBSYXJpdHlfMS5SYXJpdHkuUmFyZSk7XHJcbmNvbnN0IHYyMyA9IHZlcnRleChyMTUsIC05MCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuSFAsIFJhcml0eV8xLlJhcml0eS5FcGljKTtcclxuY29uc3QgdjI0ID0gdmVydGV4KHIxNSwgLTExMi41LCB2MDAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5TYXZlc1N0ckRleENvbiwgUmFyaXR5XzEuUmFyaXR5LlVuY29tbW9uKTtcclxuY29uc3QgdjI1ID0gdmVydGV4KHIxNSwgLTEzNSwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuRGVhdGhTYXZlcywgUmFyaXR5XzEuUmFyaXR5LkxlZ2VuZGFyeSk7XHJcbmNvbnN0IHYyNiA9IHZlcnRleChyMTUsIC0xNTcuNSwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuRGFtYWdlLCBSYXJpdHlfMS5SYXJpdHkuRXBpYyk7XHJcbmNvbnN0IHYyNyA9IHZlcnRleChyMTUsIC0xODAsIHYwMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlN0ZXBNb3ZlbWVudCwgUmFyaXR5XzEuUmFyaXR5LkVwaWMpO1xyXG5jb25zdCB2MjggPSB2ZXJ0ZXgocjE2LCAtMjIuNSwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuQUMsIFJhcml0eV8xLlJhcml0eS5CbGFjayk7XHJcbmNvbnN0IHYyOSA9IHZlcnRleChyMTYsIC0xNTcuNSwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuQWNjdXJhY3ksIFJhcml0eV8xLlJhcml0eS5CbGFjayk7XHJcbmNvbnN0IHY2NCA9IHZlcnRleChyMTYsIC05MCwgdjAwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuSFAsIFJhcml0eV8xLlJhcml0eS5MZWdlbmRhcnkpO1xyXG5jb25zdCB2MzAgPSB2ZXJ0ZXgoMCwgLXIyNSwgdjI4LCBmYWxzZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlN5bmMsIFJhcml0eV8xLlJhcml0eS5BcnRlZmFjdCk7XHJcbmNvbnN0IHYzMSA9IHZlcnRleChyMjEsIDMwLCB2MzAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5BY2N1cmFjeSwgUmFyaXR5XzEuUmFyaXR5LlJhcmUpO1xyXG5jb25zdCB2MzIgPSB2ZXJ0ZXgocjIxLCAxNTAsIHYzMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlNlYU1vdmVtZW50LCBSYXJpdHlfMS5SYXJpdHkuUmFyZSk7XHJcbmNvbnN0IHYzMyA9IHZlcnRleChyMjIsIDkwLCB2MzAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5EYW1hZ2UsIFJhcml0eV8xLlJhcml0eS5VbmNvbW1vbik7XHJcbmNvbnN0IHYzNCA9IHZlcnRleChyMjIsIDMwLCB2MzAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5Ta2lsbHNCcmlsbGlhbmNlLCBSYXJpdHlfMS5SYXJpdHkuVW5jb21tb24pO1xyXG5jb25zdCB2MzUgPSB2ZXJ0ZXgocjIyLCAtMzAsIHYzMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLkFDLCBSYXJpdHlfMS5SYXJpdHkuTGVnZW5kYXJ5KTtcclxuY29uc3QgdjM2ID0gdmVydGV4KHIyMiwgLTkwLCB2MzAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5MYW5kTW92ZW1lbnQsIFJhcml0eV8xLlJhcml0eS5VbmNvbW1vbik7XHJcbmNvbnN0IHYzNyA9IHZlcnRleChyMjIsIC0xNTAsIHYzMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlByb2ZCb251cywgUmFyaXR5XzEuUmFyaXR5LkxlZ2VuZGFyeSk7XHJcbmNvbnN0IHYzOCA9IHZlcnRleChyMjIsIDE1MCwgdjMwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzTmluanV0c3UsIFJhcml0eV8xLlJhcml0eS5VbmNvbW1vbik7XHJcbmNvbnN0IHYzOSA9IHZlcnRleChyMjMsIDkwLCB2MzAsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5MYW5kTW92ZW1lbnQsIFJhcml0eV8xLlJhcml0eS5Db21tb24pO1xyXG5jb25zdCB2NDAgPSB2ZXJ0ZXgocjIzLCA2MCwgdjMwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuRGFtYWdlLCBSYXJpdHlfMS5SYXJpdHkuRXBpYyk7XHJcbmNvbnN0IHY0MSA9IHZlcnRleChyMjMsIC0zMCwgdjMwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuQWNjdXJhY3ksIFJhcml0eV8xLlJhcml0eS5VbmNvbW1vbik7XHJcbmNvbnN0IHY0MiA9IHZlcnRleChyMjQsIDAsIHYzMCwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlN0YXRzQ2hhU3RyLCBSYXJpdHlfMS5SYXJpdHkuRXBpYyk7XHJcbmNvbnN0IHY0MyA9IHZlcnRleChyMjQsIDEyMCwgdjMwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuQWNjdXJhY3ksIFJhcml0eV8xLlJhcml0eS5VbmNvbW1vbik7XHJcbmNvbnN0IHY0NCA9IHZlcnRleChyMjQsIDE1MCwgdjMwLCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuRGFtYWdlLCBSYXJpdHlfMS5SYXJpdHkuVW5jb21tb24pO1xyXG5jb25zdCB2NDUgPSB2ZXJ0ZXgoMCwgLXIzNCwgdjI5LCBmYWxzZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlN5bmMsIFJhcml0eV8xLlJhcml0eS5BcnRlZmFjdCk7XHJcbmNvbnN0IHY0NiA9IHZlcnRleChyMzEsIDkwLCB2NDUsIHRydWUsIGZhbHNlKTtcclxuY29uc3QgdjQ3ID0gdmVydGV4KHIzMSwgMCwgdjQ1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuRGFtYWdlLCBSYXJpdHlfMS5SYXJpdHkuUmFyZSk7XHJcbmNvbnN0IHY0OCA9IHZlcnRleChyMzEsIC0xMzUsIHY0NSwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLkFDLCBSYXJpdHlfMS5SYXJpdHkuUmFyZSk7XHJcbmNvbnN0IHY0OSA9IHZlcnRleChyMzIsIDE4MCwgdjQ1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzV2lsZEhlYXJ0LCBSYXJpdHlfMS5SYXJpdHkuVW5jb21tb24pO1xyXG5jb25zdCB2NTAgPSB2ZXJ0ZXgocjMyLCA5MCwgdjQ1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuQUMsIFJhcml0eV8xLlJhcml0eS5VbmNvbW1vbik7XHJcbmNvbnN0IHY1MSA9IHZlcnRleChyMzIsIDAsIHY0NSwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlNraWxsc0luZG9jdHJpbmF0aW9uLCBSYXJpdHlfMS5SYXJpdHkuVW5jb21tb24pO1xyXG5jb25zdCB2NTIgPSB2ZXJ0ZXgocjMyLCAtOTAsIHY0NSwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlByb2ZCb251cywgUmFyaXR5XzEuUmFyaXR5LkxlZ2VuZGFyeSk7XHJcbmNvbnN0IHY1MyA9IHZlcnRleChyMzMsIDE4MCwgdjQ1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU3RhdHNXaXNDb24sIFJhcml0eV8xLlJhcml0eS5FcGljKTtcclxuY29uc3QgdjU0ID0gdmVydGV4KHIzMywgLTMwLCB2NDUsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5MYW5kTW92ZW1lbnQsIFJhcml0eV8xLlJhcml0eS5CbGFjayk7XHJcbmNvbnN0IHY1NSA9IHZlcnRleChyNDMsIC0zMCwgdjU0LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU3luYywgUmFyaXR5XzEuUmFyaXR5LkFydGVmYWN0KTtcclxuY29uc3QgdjU2ID0gdmVydGV4KHI0MSwgLTE1MCwgdjU1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU3RhdHNTdHJEZXhDb24sIFJhcml0eV8xLlJhcml0eS5MZWdlbmRhcnkpO1xyXG5jb25zdCB2NTcgPSB2ZXJ0ZXgocjQxLCAzMCwgdjU1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU3RhdHNJbnRXaXNDaGEsIFJhcml0eV8xLlJhcml0eS5MZWdlbmRhcnkpO1xyXG5jb25zdCB2NTggPSB2ZXJ0ZXgocjQyLCAtMzAsIHY1NSwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLkFjY3VyYWN5LCBSYXJpdHlfMS5SYXJpdHkuRXBpYyk7XHJcbmNvbnN0IHY1OSA9IHZlcnRleChyNDIsIC05MCwgdjU1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU2F2ZXNBbGwsIFJhcml0eV8xLlJhcml0eS5SYXJlKTtcclxuY29uc3QgdjYwID0gdmVydGV4KHI0MiwgLTE1MCwgdjU1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuSW5pdGlhdGl2ZSwgUmFyaXR5XzEuUmFyaXR5LkVwaWMpO1xyXG5jb25zdCB2NjEgPSB2ZXJ0ZXgocjQyLCAxNTAsIHY1NSwgdHJ1ZSwgdHJ1ZSwgVXBncmFkZVZlcnRleENvbmZpZ18xLlVwZ3JhZGVWZXJ0ZXhUeXBlLlNlYU1vdmVtZW50LCBSYXJpdHlfMS5SYXJpdHkuUmFyZSk7XHJcbmNvbnN0IHY2MiA9IHZlcnRleChyNDIsIDkwLCB2NTUsIHRydWUsIHRydWUsIFVwZ3JhZGVWZXJ0ZXhDb25maWdfMS5VcGdyYWRlVmVydGV4VHlwZS5TdGF0c0ludERleCwgUmFyaXR5XzEuUmFyaXR5LkVwaWMpO1xyXG5jb25zdCB2NjMgPSB2ZXJ0ZXgocjQyLCAzMCwgdjU1LCB0cnVlLCB0cnVlLCBVcGdyYWRlVmVydGV4Q29uZmlnXzEuVXBncmFkZVZlcnRleFR5cGUuU2tpbGxzUHJvZGlneSwgUmFyaXR5XzEuUmFyaXR5LlJhcmUpO1xyXG5jb25zdCB2NjUgPSB2ZXJ0ZXgocjExLCAwLCB2MDAsIHRydWUsIGZhbHNlKTtcclxuY29uc3QgdjY2ID0gdmVydGV4KHIxMywgLTQ1LCB2MDAsIHRydWUsIGZhbHNlKTtcclxuY29uc3QgdjY3ID0gdmVydGV4KHIxMywgLTEzNSwgdjAwLCB0cnVlLCBmYWxzZSk7XHJcbmNvbnN0IHY2OCA9IHZlcnRleChyMjEsIC05MCwgdjMwLCB0cnVlLCBmYWxzZSk7XHJcbmNvbnN0IHY2OSA9IHZlcnRleChyMjMsIDEyMCwgdjMwLCB0cnVlLCBmYWxzZSk7XHJcbmNvbnN0IHY3MCA9IHZlcnRleChyMjMsIDAsIHYzMCwgdHJ1ZSwgZmFsc2UpO1xyXG5jb25zdCB2NzEgPSB2ZXJ0ZXgocjMyLCAtMzAsIHY0NSwgdHJ1ZSwgZmFsc2UpO1xyXG5lZGdlKHYwMCwgdjAyKTtcclxuZWRnZSh2NjUsIHYwNSk7XHJcbmVkZ2UodjY1LCB2MDEsIHYwMCwgLTEpO1xyXG5lZGdlKHYwMSwgdjAyLCB2MDAsIC0xKTtcclxuZWRnZSh2MDIsIHYwMywgdjAwLCAtMSk7XHJcbmVkZ2UodjAzLCB2MDQsIHYwMCwgLTEpO1xyXG5lZGdlKHYwNiwgdjA3LCB2MDAsIC0yKTtcclxuZWRnZSh2MDcsIHYxMiwgdjAwLCAtMik7XHJcbmVkZ2UodjAyLCB2MDcpO1xyXG5lZGdlKHYwNCwgdjA4KTtcclxuZWRnZSh2MDYsIHY2Nik7XHJcbmVkZ2UodjA5LCB2NjYsIHYwMCwgLTMpO1xyXG5lZGdlKHYwNywgdjEwKTtcclxuZWRnZSh2MTEsIHY2NywgdjAwLCAtMyk7XHJcbmVkZ2UodjY2LCB2MTUpO1xyXG5lZGdlKHY2NywgdjEyKTtcclxuZWRnZSh2MTMsIHYxNCwgdjAwLCAtNCk7XHJcbmVkZ2UodjE0LCB2MTUsIHYwMCwgLTQpO1xyXG5lZGdlKHYxMCwgdjE2KTtcclxuZWRnZSh2MTEsIHYxNyk7XHJcbmVkZ2UodjY3LCB2MTgpO1xyXG5lZGdlKHYxNiwgdjE3LCB2MDAsIC01KTtcclxuZWRnZSh2MTgsIHYxOSwgdjAwLCAtNSk7XHJcbmVkZ2UodjE5LCB2MjAsIHYwMCwgLTUpO1xyXG5lZGdlKHYwOCwgdjIwKTtcclxuZWRnZSh2MTMsIHYyMSk7XHJcbmVkZ2UodjE0LCB2MjIpO1xyXG5lZGdlKHYxNiwgdjIzKTtcclxuZWRnZSh2MTcsIHYyNCk7XHJcbmVkZ2UodjI0LCB2MjUsIHYwMCwgLTYpO1xyXG5lZGdlKHYxOSwgdjI2KTtcclxuZWRnZSh2MjYsIHYyNywgdjAwLCAtNik7XHJcbmVkZ2UodjIyLCB2MjgpO1xyXG5lZGdlKHYyNiwgdjI5KTtcclxuZWRnZSh2MjMsIHY2NCk7XHJcbmVkZ2UodjI4LCB2MzkpO1xyXG5lZGdlKHYzMCwgdjMxKTtcclxuZWRnZSh2MzAsIHYzMik7XHJcbmVkZ2UodjMyLCB2MzEsIHYzMCwgLTEpO1xyXG5lZGdlKHY2OCwgdjMyLCB2MzAsIC0xKTtcclxuZWRnZSh2MzEsIHYzNCk7XHJcbmVkZ2UodjY4LCB2MzYpO1xyXG5lZGdlKHYzMiwgdjM4KTtcclxuZWRnZSh2MzMsIHYzOSk7XHJcbmVkZ2UodjMzLCB2MzQsIHYzMCwgLTIpO1xyXG5lZGdlKHYzNSwgdjM2LCB2MzAsIC0yKTtcclxuZWRnZSh2MzcsIHYzOCwgdjMwLCAtMik7XHJcbmVkZ2UodjY5LCB2MzksIHYzMCwgLTMpO1xyXG5lZGdlKHYzOSwgdjQwLCB2MzAsIC0zKTtcclxuZWRnZSh2NDAsIHY0MSwgdjMwLCAtMyk7XHJcbmVkZ2UodjcwLCB2NDIpO1xyXG5lZGdlKHY2OSwgdjQzKTtcclxuZWRnZSh2MzUsIHY0MSk7XHJcbmVkZ2UodjQyLCB2NDQsIHYzMCwgLTQpO1xyXG5lZGdlKHY0NCwgdjQzLCB2MzAsIC00KTtcclxuZWRnZSh2MzgsIHY0NCk7XHJcbmVkZ2UodjI5LCB2NTApO1xyXG5lZGdlKHY0NSwgdjQ2KTtcclxuZWRnZSh2NDUsIHY0Nyk7XHJcbmVkZ2UodjQ1LCB2NDgpO1xyXG5lZGdlKHY0NywgdjQ4LCB2NDUsIC0xKTtcclxuZWRnZSh2NDgsIHY0NiwgdjQ1LCAtMSk7XHJcbmVkZ2UodjQ5LCB2NTAsIHY0NSwgLTIpO1xyXG5lZGdlKHY1MCwgdjUxLCB2NDUsIC0yKTtcclxuZWRnZSh2NTAsIHY3MSwgdjQ1LCAtMik7XHJcbmVkZ2UodjcxLCB2NTIsIHY0NSwgLTIpO1xyXG5lZGdlKHY0NiwgdjUwKTtcclxuZWRnZSh2NDksIHY1Myk7XHJcbmVkZ2UodjcxLCB2NTQpO1xyXG5lZGdlKHY1NCwgdjUzLCB2NDUsIC0zKTtcclxuZWRnZSh2NTQsIHY2MSk7XHJcbmVkZ2UodjU1LCB2NTYpO1xyXG5lZGdlKHY1NSwgdjU3KTtcclxuZWRnZSh2NTcsIHY1NiwgdjU1LCAtMSk7XHJcbmVkZ2UodjU4LCB2NTksIHY1NSwgLTIpO1xyXG5lZGdlKHY1OSwgdjYwLCB2NTUsIC0yKTtcclxuZWRnZSh2NjAsIHY2MSwgdjU1LCAtMik7XHJcbmVkZ2UodjYxLCB2NjIsIHY1NSwgLTIpO1xyXG5lZGdlKHY2MiwgdjYzLCB2NTUsIC0yKTtcclxuZWRnZSh2NTYsIHY2MCk7XHJcbmVkZ2UodjU3LCB2NjMpO1xyXG5leHBvcnRzLnNraWxsTWFwID0gZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpbGxNYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5CdWZmZWRJbnRlcm5hbEF0dGFjayA9IGV4cG9ydHMuQXR0YWNrQ29udHJhY3RzID0gZXhwb3J0cy5JbnRlcm5hbEF0dGFjayA9IHZvaWQgMDtcclxuY29uc3QgV3JhcF8xID0gcmVxdWlyZShcIi4uL3NpbXVsYXRpb24vYWN0aW9uL1dyYXBcIik7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jbGFzcyBBdHRhY2sge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XHJcbiAgICAgICAgdGhpcy5zdWJUaXRsZSA9IFwiXCI7XHJcbiAgICAgICAgY29uc3Qgc3VidGl0bGUgPSAoX2EgPSBwYXJhbXMuc3VidGl0bGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHBhcmFtcy50aXRsZTtcclxuICAgICAgICB0aGlzLmFjdGl2YXRpb24gPSBwYXJhbXMuYWN0aXZhdGlvbjtcclxuICAgICAgICB0aGlzLnN1YlRpdGxlID0gc3VidGl0bGU7XHJcbiAgICAgICAgdGhpcy5oaXRCb251cyA9IChfYiA9IHBhcmFtcy5oaXRCb251cykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMDtcclxuICAgICAgICB0aGlzLmRjQm9udXMgPSAoX2MgPSBwYXJhbXMuZGNCb251cykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogMDtcclxuICAgICAgICB0aGlzLm1haW5TdGF0ID0gcGFyYW1zLm1haW5TdGF0O1xyXG4gICAgICAgIHRoaXMuY29udGVudEdlbmVyYXRvciA9IHBhcmFtcy5jb250ZW50R2VuZXJhdG9yO1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZWREYW1hZ2VzID0gbnVsbDtcclxuICAgICAgICB0aGlzLmV4cGVjdGVkRGFtYWdlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmFzc2lnbmVkRGFtYWdlcyA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBnZXRUb0hpdFJvbGxhYmxlU3RyKHsgbmFtZSwgc3RhdCA9IHVuZGVmaW5lZCwgcHJvZiA9IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiB9KSB7XHJcbiAgICAgICAgaWYgKHN0YXQgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHN0YXQgPSB0aGlzLm1haW5TdGF0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2QgPSB0aGlzLmdldE1vZChzdGF0KSArIHRoaXMuc2hlZXQucGIubW9kKHByb2YpICsgdGhpcy5oaXRCb251cztcclxuICAgICAgICByZXR1cm4gdGhpcy5kb0dldFRvSGl0Um9sbGFibGVTdHIobW9kKTtcclxuICAgIH1cclxuICAgIGdldERhbWFnZVJvbGxhYmxlU3RyKGtleSkge1xyXG4gICAgICAgIGlmICh0aGlzLnJlc29sdmVkRGFtYWdlcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhbWFnZSBzdHJpbmcgcXVlcmllZCBiZWZvcmUgZGFtYWdlcyB3ZXJlIFwiICtcclxuICAgICAgICAgICAgICAgIFwicmVzb2x2ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5kb0dldERhbWFnZVJvbGxhYmxlU3RyKGtleSk7XHJcbiAgICB9XHJcbiAgICBnZXRNb2Qoc3RhdCkge1xyXG4gICAgICAgIGlmIChzdGF0ID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzdGF0ID0gdGhpcy5tYWluU3RhdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hlZXQuc3RhdHMuZ2V0KHN0YXQpLm1vZDtcclxuICAgIH1cclxuICAgIGdldERjKHsgc3RhdCwgcHJvZiA9IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiB9ID0ge30pIHtcclxuICAgICAgICBpZiAoc3RhdCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc3RhdCA9IHRoaXMubWFpblN0YXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWxbcHJvZl0pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKDgsIHRoaXMuZ2V0TW9kKHN0YXQpLCB0aGlzLnNoZWV0LnBiLm1vZChwcm9mKSwgdGhpcy5kY0JvbnVzKTtcclxuICAgICAgICByZXR1cm4gOCArIHRoaXMuZ2V0TW9kKHN0YXQpICsgdGhpcy5zaGVldC5wYi5tb2QocHJvZikgKyB0aGlzLmRjQm9udXM7XHJcbiAgICB9XHJcbiAgICBiaW5kRGFtYWdlcyhkYW1hZ2VQYXJhbXMpIHtcclxuICAgICAgICB2YXIgX2EsIF9iLCBfYztcclxuICAgICAgICB0aGlzLmV4cGVjdGVkRGFtYWdlID0gZGFtYWdlUGFyYW1zLmV4cGVjdGVkRGFtYWdlO1xyXG4gICAgICAgIHRoaXMuZGFtYWdlVHlwZXMgPSAoX2EgPSBkYW1hZ2VQYXJhbXMuZGFtYWdlVHlwZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnVuYXNzaWduZWREYW1hZ2VSYXRpb3MgPSAoX2IgPSBkYW1hZ2VQYXJhbXMudW5hc3NpZ25lZERhbWFnZVJhdGlvcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuYXNzaWduZWREYW1hZ2VzID0gKF9jID0gZGFtYWdlUGFyYW1zLmFzc2lnbmVkRGFtYWdlcykgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKCgpID0+IG5ldyBNYXAoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBiaW5kU3RhdHMoc2hlZXQpIHtcclxuICAgICAgICB0aGlzLnNoZWV0ID0gc2hlZXQ7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVDb250ZW50KCkge1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZURhbWFnZXMoKTtcclxuICAgICAgICBsZXQgY29udGVudCA9IHRoaXMuY29udGVudEdlbmVyYXRvcih0aGlzKTtcclxuICAgICAgICBpZiAoY29udGVudC5zdWJzdHJpbmcoMCwgMykgIT0gJzxwPicpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IGA8cD4ke2NvbnRlbnR9PC9wPmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgPHA+PHN0cm9uZz48ZW0+JHt0aGlzLnRpdGxlfTwvZW0+LiAke3RoaXMuc3ViVGl0bGV9IDwvc3Ryb25nPmAgK1xyXG4gICAgICAgICAgICBjb250ZW50LnN1YnN0cmluZygzKTtcclxuICAgIH1cclxuICAgIGdldCBpc0RhbWFnaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4cGVjdGVkRGFtYWdlICE9IG51bGwgfHwgdGhpcy5hc3NpZ25lZERhbWFnZXMgIT0gbnVsbDtcclxuICAgIH1cclxuICAgIHJlc29sdmVEYW1hZ2VzKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAoIXRoaXMuaXNEYW1hZ2luZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB0b3RhbEFzc2lnbmVkRGFtYWdlID0gMDtcclxuICAgICAgICBjb25zdCBhc3NpZ25lZERhbWFnZXMgPSB0aGlzLmFzc2lnbmVkRGFtYWdlcyh0aGlzKTtcclxuICAgICAgICBpZiAodGhpcy5leHBlY3RlZERhbWFnZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGFtYWdlRGljZSBvZiBhc3NpZ25lZERhbWFnZXMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsQXNzaWduZWREYW1hZ2UgKz0gKDAsIGNvbnN0YW50c18xLkUpKGRhbWFnZURpY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZUxlZnRUb0Fzc2lnbiA9IHRoaXMuZXhwZWN0ZWREYW1hZ2UgLSB0b3RhbEFzc2lnbmVkRGFtYWdlO1xyXG4gICAgICAgICAgICBpZiAoZGFtYWdlTGVmdFRvQXNzaWduIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFzc2lnbmVkIGRhbWFnZSBleGNlZWRzIGV4cGVjdGVkLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdG90YWxSYXRpbyA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgWywgcGVyRGljZVJhdGlvc10gb2YgdGhpcy51bmFzc2lnbmVkRGFtYWdlUmF0aW9zLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbLCByYXRpb10gb2YgcGVyRGljZVJhdGlvcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbFJhdGlvICs9IHJhdGlvO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgcGVyRGljZVJhdGlvc10gb2YgdGhpcy51bmFzc2lnbmVkRGFtYWdlUmF0aW9zLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGllLCByYXRpb10gb2YgcGVyRGljZVJhdGlvcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGFtYWdlTWFwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhc3NpZ25lZERhbWFnZXMuaGFzKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlTWFwID0gYXNzaWduZWREYW1hZ2VzLmdldChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZERhbWFnZXMuc2V0KGtleSwgZGFtYWdlTWFwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbkRpY2UgPSBNYXRoLnJvdW5kKChkYW1hZ2VMZWZ0VG9Bc3NpZ24gKiByYXRpbyAvIHRvdGFsUmF0aW8pIC8gKDAsIGNvbnN0YW50c18xLkUpKGRpZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZU1hcC5zZXQoZGllLCAoKF9hID0gZGFtYWdlTWFwLmdldChkaWUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwKSArIG5EaWNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc29sdmVkRGFtYWdlcyA9IGFzc2lnbmVkRGFtYWdlcztcclxuICAgIH1cclxufVxyXG4vLyBub2luc3BlY3Rpb24gSlNVbnVzZWRMb2NhbFN5bWJvbHNcclxuLy8gY2xhc3MgRERCQXR0YWNrXHJcbi8vICAgICBleHRlbmRzIEF0dGFja1xyXG4vLyB7XHJcbi8vICAgICBwcm90ZWN0ZWQgZG9HZXREYW1hZ2VSb2xsYWJsZVN0cihrZXk6IHN0cmluZyk6IHN0cmluZyB7XHJcbi8vICAgICAgICAgY29uc3Qgcm9sbFN0ciA9IG5ldyBEYW1hZ2VSb2xsYWJsZSh0aGlzLnJlc29sdmVkRGFtYWdlcy5nZXQoa2V5KSkuZ2V0Um9sbFN0cmluZyhmYWxzZSk7XHJcbi8vICAgICAgICAgcmV0dXJuIGBbcm9sbGFibGVdJHtyb2xsU3RyfTt7XHJcbi8vICAgICAgICAgICAgIFwiZGljZU5vdGF0aW9uXCI6ICAgXCIke3JvbGxTdHJ9XCIsXHJcbi8vICAgICAgICAgICAgIFwicm9sbFR5cGVcIjogICAgICAgXCJkYW1hZ2VcIixcclxuLy8gICAgICAgICAgICAgXCJyb2xsQWN0aW9uXCI6ICAgICBcIiR7a2V5fVwiLFxyXG4vLyAgICAgICAgICAgICBcInJvbGxEYW1hZ2VUeXBlXCI6IFwiJHtEYW1hZ2VUeXBlW3RoaXMuZGFtYWdlVHlwZXMuZ2V0KGtleSldfVwiXHJcbi8vICAgICAgICAgfVsvcm9sbGFibGVdICR7RGFtYWdlVHlwZVt0aGlzLmRhbWFnZVR5cGVzLmdldChrZXkpXX0gZGFtYWdlYDtcclxuLy8gICAgIH1cclxuLy9cclxuLy8gICAgIHByb3RlY3RlZCBkb0dldFRvSGl0Um9sbGFibGVTdHIodG9IaXRNb2Q6IG51bWJlcik6IHN0cmluZyB7XHJcbi8vICAgICAgICAgY29uc3QgdG9IaXRTdHIgPSBOYXRSb2xsYWJsZS5nZW5lcmF0ZSh0b0hpdE1vZCkuZ2V0Um9sbFN0cmluZyhmYWxzZSk7XHJcbi8vICAgICAgICAgcmV0dXJuIGBbcm9sbGFibGVdJHt0b0hpdFN0cn07e1xyXG4vLyAgICAgICAgICAgICBcImRpY2VOb3RhdGlvblwiOiBcIjFkMjAke3RvSGl0U3RyfVwiLFxyXG4vLyAgICAgICAgICAgICBcInJvbGxUeXBlXCI6ICAgICBcInRvIGhpdFwiLFxyXG4vLyAgICAgICAgICAgICBcInJvbGxBY3Rpb25cIjogICBcIiR7bmFtZX1cIlxyXG4vLyAgICAgICAgIH1bL3JvbGxhYmxlXSB0byBoaXRgO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcbmNsYXNzIEludGVybmFsQXR0YWNrIGV4dGVuZHMgQXR0YWNrIHtcclxuICAgIGRvR2V0RGFtYWdlUm9sbGFibGVTdHIoa2V5KSB7XHJcbiAgICAgICAgY29uc3QgZGFtYWdldHlwZSA9IGNvbnN0YW50c18xLkRhbWFnZVR5cGVbdGhpcy5kYW1hZ2VUeXBlcy5nZXQoa2V5KV07XHJcbiAgICAgICAgY29uc3QgZGFtYWdldHlwZVN0cmluZyA9IGRhbWFnZXR5cGUgPyBgJHtkYW1hZ2V0eXBlfSBkYW1hZ2VgIDogXCJcIjtcclxuICAgICAgICByZXR1cm4gYCR7KDAsIFdyYXBfMS53cmFwUm9sbCkodGhpcy5yZXNvbHZlZERhbWFnZXMuZ2V0KGtleSkpfSBcclxuICAgICAgICAgICAgICAgICR7ZGFtYWdldHlwZVN0cmluZ31gO1xyXG4gICAgfVxyXG4gICAgZG9HZXRUb0hpdFJvbGxhYmxlU3RyKHRvSGl0TW9kKSB7XHJcbiAgICAgICAgcmV0dXJuICgwLCBXcmFwXzEud3JhcFJvbGwpKHRvSGl0TW9kKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkludGVybmFsQXR0YWNrID0gSW50ZXJuYWxBdHRhY2s7XHJcbmNsYXNzIEF0dGFja0NvbnRyYWN0IHtcclxuICAgIGNvbnN0cnVjdG9yKHNob3VsZEFwcGx5LCBtb2RpZnkpIHtcclxuICAgICAgICB0aGlzLnNob3VsZEFwcGx5ID0gc2hvdWxkQXBwbHk7XHJcbiAgICAgICAgdGhpcy5tb2RpZnkgPSBtb2RpZnk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BdHRhY2tDb250cmFjdHMgPSBuZXcgTWFwKFtcclxuICAgIFtcIlN0aW11bHVzRW52eTFcIiwgbmV3IEF0dGFja0NvbnRyYWN0KChfKSA9PiB0cnVlLCAoYXR0YWNrKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZXMgPSBhdHRhY2suY3VycmVudGx5UmVzb2x2ZWREYW1hZ2VzO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRhbWFnZURpY2Ugb2YgZGFtYWdlcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGllLCBjb3VudF0gb2YgZGFtYWdlRGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGllID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlRGljZS5zZXQoZGllLCBjb3VudCAqIDEuMyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KV0sXHJcbiAgICBbXCJTdGltdWx1c0VudnkyXCIsIG5ldyBBdHRhY2tDb250cmFjdCgoXykgPT4gdHJ1ZSwgKGF0dGFjaykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYW1hZ2VzID0gYXR0YWNrLmN1cnJlbnRseVJlc29sdmVkRGFtYWdlcztcclxuICAgICAgICAgICAgZm9yIChjb25zdCBkYW1hZ2VEaWNlIG9mIGRhbWFnZXMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2RpZSwgY291bnRdIG9mIGRhbWFnZURpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZURpY2Uuc2V0KGRpZSwgY291bnQgKiAxLjYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSldLFxyXG4gICAgW1wiU3RpbXVsdXNGcmVlMVwiLCBuZXcgQXR0YWNrQ29udHJhY3QoKF8pID0+IHRydWUsIChhdHRhY2spID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGFtYWdlcyA9IGF0dGFjay5jdXJyZW50bHlSZXNvbHZlZERhbWFnZXM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGFtYWdlRGljZSBvZiBkYW1hZ2VzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWUsIGNvdW50XSBvZiBkYW1hZ2VEaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaWUgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VEaWNlLnNldChkaWUsIGNvdW50ICogMS4yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXSxcclxuICAgIFtcIlN0aW11bHVzRnJlZTJcIiwgbmV3IEF0dGFja0NvbnRyYWN0KChfKSA9PiB0cnVlLCAoYXR0YWNrKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZXMgPSBhdHRhY2suY3VycmVudGx5UmVzb2x2ZWREYW1hZ2VzO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRhbWFnZURpY2Ugb2YgZGFtYWdlcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGllLCBjb3VudF0gb2YgZGFtYWdlRGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGllID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlRGljZS5zZXQoZGllLCBjb3VudCAqIDEuNyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KV0sXHJcbiAgICBbXCJTdGltdWx1c0ZyZWUzXCIsIG5ldyBBdHRhY2tDb250cmFjdCgoXykgPT4gdHJ1ZSwgKGF0dGFjaykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYW1hZ2VzID0gYXR0YWNrLmN1cnJlbnRseVJlc29sdmVkRGFtYWdlcztcclxuICAgICAgICAgICAgZm9yIChjb25zdCBkYW1hZ2VEaWNlIG9mIGRhbWFnZXMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2RpZSwgY291bnRdIG9mIGRhbWFnZURpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZURpY2Uuc2V0KGRpZSwgY291bnQgKiAyLjUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSldLFxyXG4gICAgW1wiU3RpbXVsdXMxXCIsIG5ldyBBdHRhY2tDb250cmFjdCgoXykgPT4gdHJ1ZSwgKGF0dGFjaykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYW1hZ2VzID0gYXR0YWNrLmN1cnJlbnRseVJlc29sdmVkRGFtYWdlcztcclxuICAgICAgICAgICAgZm9yIChjb25zdCBkYW1hZ2VEaWNlIG9mIGRhbWFnZXMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2RpZSwgY291bnRdIG9mIGRhbWFnZURpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZURpY2Uuc2V0KGRpZSwgY291bnQgKiAxLjI1KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXSxcclxuICAgIFtcIlN0aW11bHVzMlwiLCBuZXcgQXR0YWNrQ29udHJhY3QoKF8pID0+IHRydWUsIChhdHRhY2spID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGFtYWdlcyA9IGF0dGFjay5jdXJyZW50bHlSZXNvbHZlZERhbWFnZXM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGFtYWdlRGljZSBvZiBkYW1hZ2VzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWUsIGNvdW50XSBvZiBkYW1hZ2VEaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaWUgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VEaWNlLnNldChkaWUsIGNvdW50ICogMS41KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXSxcclxuICAgIFtcIlN0aW11bHVzQXJyb2dhbmNlM1wiLCBuZXcgQXR0YWNrQ29udHJhY3QoKF8pID0+IHRydWUsIChhdHRhY2spID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGFtYWdlcyA9IGF0dGFjay5jdXJyZW50bHlSZXNvbHZlZERhbWFnZXM7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGFtYWdlRGljZSBvZiBkYW1hZ2VzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWUsIGNvdW50XSBvZiBkYW1hZ2VEaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaWUgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkYW1hZ2VEaWNlLnNldChkaWUsIGNvdW50ICogMS41KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXSxcclxuXSk7XHJcbmNsYXNzIEJ1ZmZlZEludGVybmFsQXR0YWNrIGV4dGVuZHMgSW50ZXJuYWxBdHRhY2sge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5jb250cmFjdHMgPSBuZXcgU2V0KCk7XHJcbiAgICB9XHJcbiAgICBhY3RpdmF0ZUNvbnRyYWN0KGNvbnRyYWN0KSB7XHJcbiAgICAgICAgdGhpcy5jb250cmFjdHMuYWRkKGNvbnRyYWN0KTtcclxuICAgIH1cclxuICAgIGdldENvbnRyYWN0cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250cmFjdHM7XHJcbiAgICB9XHJcbiAgICBkZWFjdGl2YXRlQ29udHJhY3QoY29udHJhY3QpIHtcclxuICAgICAgICB0aGlzLmNvbnRyYWN0cy5kZWxldGUoY29udHJhY3QpO1xyXG4gICAgfVxyXG4gICAgZ2V0RGFtYWdlVHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGFtYWdlVHlwZXM7XHJcbiAgICB9XHJcbiAgICBzZXREYW1hZ2VUeXBlcyh2YWwpIHtcclxuICAgICAgICB0aGlzLmRhbWFnZVR5cGVzID0gdmFsO1xyXG4gICAgfVxyXG4gICAgc2V0Q29udGVudEdlbmVyYXRvcih2YWwpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRHZW5lcmF0b3IgPSB2YWw7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVDb250ZW50KCkge1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZURhbWFnZXMoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNvbnRyYWN0IG9mIHRoaXMuY29udHJhY3RzKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250cmFjdC5zaG91bGRBcHBseSh0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgY29udHJhY3QubW9kaWZ5KHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjb250ZW50ID0gdGhpcy5jb250ZW50R2VuZXJhdG9yKHRoaXMpO1xyXG4gICAgICAgIGlmIChjb250ZW50LnN1YnN0cmluZygwLCAzKSAhPSAnPHA+Jykge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gYDxwPiR7Y29udGVudH08L3A+YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGA8cD48c3Ryb25nPjxlbT4ke3RoaXMudGl0bGV9PC9lbT4uICR7dGhpcy5zdWJUaXRsZX0gPC9zdHJvbmc+YCArXHJcbiAgICAgICAgICAgIGNvbnRlbnQuc3Vic3RyaW5nKDMpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGN1cnJlbnRseVJlc29sdmVkRGFtYWdlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlZERhbWFnZXM7XHJcbiAgICB9XHJcbiAgICBnZXQgaWRlbnRpZmljYXRpb25JbmZvKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBbXCJDcmVhdHVyZVwiLCB0aGlzLnNoZWV0Lm1vbnN0ZXJfaWRdLFxyXG4gICAgICAgICAgICBbXCJBdHRhY2tcIiwgdGhpcy50aXRsZV0sXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CdWZmZWRJbnRlcm5hbEF0dGFjayA9IEJ1ZmZlZEludGVybmFsQXR0YWNrO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdHRhY2suanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Db250cmFjdHMgPSBleHBvcnRzLnJlbmRlckNvbnRyYWN0cyA9IGV4cG9ydHMuR0VORVJBVEVEX0lEUyA9IHZvaWQgMDtcclxuY29uc3QgRGljZV8xID0gcmVxdWlyZShcIi4uL3JvbGxpbmcvRGljZVwiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IGF0dGFja18xID0gcmVxdWlyZShcIi4vYXR0YWNrXCIpO1xyXG5jb25zdCBzaGVldF8xID0gcmVxdWlyZShcIi4vc2hlZXRcIik7XHJcbmNvbnN0IFJpc2tDdXRvZmZzID0gbmV3IE1hcChbXHJcbiAgICBbMCwgXCJEXCJdLFxyXG4gICAgWzIsIFwiQ1wiXSxcclxuICAgIFs1LCBcIkJcIl0sXHJcbiAgICBbOCwgXCJBXCJdLFxyXG4gICAgWzEyLCBcIlNcIl0sXHJcbiAgICBbMTUsIFwiU1NcIl0sXHJcbiAgICBbMTgsIFwiU1NTXCJdLFxyXG4gICAgWzI0LCBcIkZcIl0sXHJcbl0pO1xyXG5leHBvcnRzLkdFTkVSQVRFRF9JRFMgPSBuZXcgU2V0KCk7XHJcbmZ1bmN0aW9uIHJlbmRlckNvbnRyYWN0cygpIHtcclxuICAgIGZ1bmN0aW9uIHJlc2V0U2hlZXRzKGUpIHtcclxuICAgICAgICAvLyBUaW1lb3V0IHRvIGVuc3VyZSB0aGUgc2VsZWN0ZWQgY2xhc3MgaXMgYWRkZWQgYmVmb3JlIHRoaXMgY29kZSBydW5zLlxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBjb25zdCAkY3VycmVudFNoZWV0ID0gJChcIi5zdGF0X3NoZWV0OnZpc2libGVcIik7XHJcbiAgICAgICAgICAgIGNvbnN0ICRyaXNrRWZmZWN0cyA9ICQoXCIucmlza19lZmZlY3RzXCIpO1xyXG4gICAgICAgICAgICAkcmlza0VmZmVjdHMuZW1wdHkoKTtcclxuICAgICAgICAgICAgbGV0IHRvdGFsUmlzayA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2lkLCBjb250cmFjdF0gb2Ygc2hlZXRfMS5jb250cmFjdEluZGV4LmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoMCwgc2hlZXRfMS5pc0NvbnRyYWN0U2VsZWN0ZWQpKGlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdG90YWxSaXNrICs9IGNvbnRyYWN0LnJpc2s7XHJcbiAgICAgICAgICAgICAgICAkKGA8ZGl2IGNsYXNzPSdyaXNrX2VmZmVjdCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cInJpc2tfaWNvblwiIHNyYz1cImFzc2V0cy9pbWFnZXMvcmlzay9DQ19MZXZlbF8ke2NvbnRyYWN0LnJpc2t9LndlYnBcIiBhbHQ9XCJcIj4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtjb250cmFjdC5kZXNjfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgIDwvZGl2PmApLmFwcGVuZFRvKCRyaXNrRWZmZWN0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJChcIiNyaXNrX3ZhbHVlXCIpLnRleHQodG90YWxSaXNrKTtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXlHcmFkZSA9IFwiRlwiO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtjdXRvZmYsIGdyYWRlXSBvZiBSaXNrQ3V0b2Zmcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0b3RhbFJpc2sgPj0gY3V0b2ZmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheUdyYWRlID0gZ3JhZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKFwiI2dyYWRlXCIpLmh0bWwoZGlzcGxheUdyYWRlKTtcclxuICAgICAgICAgICAgaWYgKCRjdXJyZW50U2hlZXQubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgICQoXCIuc3RhdF9zaGVldFwiKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGV4cG9ydHMuR0VORVJBVEVEX0lEUy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0dXJlSWQgPSAkY3VycmVudFNoZWV0LmF0dHIoXCJpZFwiKS5zdWJzdHJpbmcoMTEpO1xyXG4gICAgICAgICAgICAkKFwiLnN0YXRfc2hlZXRcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGV4cG9ydHMuR0VORVJBVEVEX0lEUy5jbGVhcigpO1xyXG4gICAgICAgICAgICAkKFwiI3NoZWV0X3pvbmVcIikuYXBwZW5kKHNoZWV0XzEuSURfVE9fU0hFRVRfR0VORVJBVE9SLmdldChjcmVhdHVyZUlkKSgpLnJlbmRlcigpKTtcclxuICAgICAgICB9LCAxMCk7XHJcbiAgICB9XHJcbiAgICAvLyBCb3RoIG5lZWQgd2F0Y2hlcnMgc2luY2UgdGhlIHNlbGVjdG9yIHN0b3BzIHByb3BhZ2F0aW9uLlxyXG4gICAgLy8gdG9kbzogZXZlcnkgdXNlIGNhc2Ugd2lsbCBuZWVkIHRoaXMgZml4LlxyXG4gICAgJChcIiNjb250cmFjdHNcIikub24oXCJjbGlja1wiLCBcIi5jb250cmFjdF9ncm91cFwiLCByZXNldFNoZWV0cyk7XHJcbiAgICAkKFwiI2NvbnRyYWN0c1wiKS5vbihcImNsaWNrXCIsIFwiLmNvbnRyYWN0XCIsIHJlc2V0U2hlZXRzKTtcclxuICAgIGZvciAoY29uc3QgY29udHJhY3RHcm91cHMgb2YgZXhwb3J0cy5Db250cmFjdHMudmFsdWVzKCkpIHtcclxuICAgICAgICBjb25zdCBjTGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgY29udHJhY3Qgb2YgY29udHJhY3RHcm91cHMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgc2hlZXRfMS5jb250cmFjdEluZGV4LnNldChjb250cmFjdC5pZCwgY29udHJhY3QpO1xyXG4gICAgICAgICAgICBjTGlzdC5wdXNoKGNvbnRyYWN0LnJlbmRlcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJChgPGRpdiBjbGFzcz1cImNvbnRyYWN0X2dyb3VwIHNlbGVjdGFibGVfcmFkaW9fY29udGFpbmVyXCI+JHtjTGlzdC5qb2luKFwiXCIpfTwvZGl2PmApXHJcbiAgICAgICAgICAgIC5hcHBlbmRUbyhcIiNjb250cmFjdHNcIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5yZW5kZXJDb250cmFjdHMgPSByZW5kZXJDb250cmFjdHM7XHJcbi8vIHRvZG86IG1ha2UgdGhlIGlubmVyIHRoaW5nIGEgc2V0LlxyXG5leHBvcnRzLkNvbnRyYWN0cyA9IG5ldyBNYXAoW1xyXG4gICAgW1wiZnJlZWRvbVwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgWzEsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMSwgXCJmcmVlMVwiLCBcIlVuYnJlYWthYmxlIEZyZWVkb20gSVwiLCBcIkNDLUZyZWVCdWZmQTEud2VicFwiLCBcIkZyZWVkb20gaGFzICsyMCUgSFAvQXR0YWNrIERpY2UgYW5kICsxIEFDLlwiLCAoc2hlZXQpID0+IHNoZWV0Lm1vbnN0ZXJfaWQgPT0gXCJpbmtsaW5nX2ZyZWVcIiwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHBEaWNlID0gc2hlZXQuaHBEaWNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2RpY2UsIG51bWJlcl0gb2YgaHBEaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGljZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhwRGljZS5zZXQoZGljZSwgbnVtYmVyICogMS4yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbXywgYXR0YWNrXSBvZiBzaGVldC5hdHRhY2tzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0YWNrLmlzRGFtYWdpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjay5hY3RpdmF0ZUNvbnRyYWN0KGF0dGFja18xLkF0dGFja0NvbnRyYWN0cy5nZXQoXCJTdGltdWx1c0ZyZWUxXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5hYysrO1xyXG4gICAgICAgICAgICAgICAgfSldLFxyXG4gICAgICAgICAgICBbMiwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgyLCBcImZyZWUyXCIsIFwiVW5icmVha2FibGUgRnJlZWRvbSBJSVwiLCBcIkNDLUZyZWVCdWZmQTIud2VicFwiLCBcIkZyZWVkb20gaGFzICszMCUgSFAgRGljZSBhbmQgKzMgQUMuIEFuZCA8ZW0+QnJlYWsgdGhlIENoYWluczwvZW0+IFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcImhhcyBzaG9ja3dhdmUgcmFkaXVzLCBIUCBhbmQgcHJvYmFibGl0eSBpbmNyZWFzZWQuIFNoZSBubyBsb25nZXIgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwidGFrZXMgZGFtYWdlIG9uIHRoZSBjaGFpbnMgYnJlYWtpbmcuXCIsIChzaGVldCkgPT4gc2hlZXQubW9uc3Rlcl9pZCA9PSBcImlua2xpbmdfZnJlZVwiLCAoc2hlZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBocERpY2UgPSBzaGVldC5ocERpY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGljZSwgbnVtYmVyXSBvZiBocERpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWNlID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaHBEaWNlLnNldChkaWNlLCBudW1iZXIgKiAxLjMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5hYyArPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoZWV0LmF0dGFja3Muc2V0KFwiYnJlYWtUaGVDaGFpbnNcIiwgbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5Cb251c0FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYEF0IHRoZSBlbmQgb2YgaGVyIHR1cm4sIEZyZWVkb20gaGFzIGEgNDUlICg1NSUgaW4gaGVyIHNlY29uZCBcclxuICAgICAgICAgICAgZm9ybSkgY2hhbmNlIHRvIGNhbGwgZm9ydGggaGVyIG1lbW9yaWVzIG9mIGNhcHRpdml0eS4gSWYgc2hlIGRvZXMgXHJcbiAgICAgICAgICAgIHN1Y2NlZWQsIGNoYWlucyB3aXRoIDEwMEhQICgxNTBIUCBpbiBoZXIgc2Vjb25kIGZvcm0pIGFwcGVhciBhcm91bmQgXHJcbiAgICAgICAgICAgIGhlciBhbmQgc3RvcCBoZXIgZnJvbSBtb3Zpbmcgb3IgYXR0YWNraW5nLiBJZiB0aGUgY2hhaW5zIGFyZSBub3QgXHJcbiAgICAgICAgICAgIGRlc3Ryb3llZCB1bnRpbCB0aGUgc3RhcnQgb2YgaGVyIG5leHQtdG8tbmV4dCByb3VuZCwgc2hlIHdpbGwgZnJlZVxyXG4gICAgICAgICAgICBoZXJzZWxmIGFuZCByZWxlYXNlIGEgYnVyc3Qgb2YgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiZnJlZVwiKX1cclxuICAgICAgICAgICAgKG5lY3JvdGljIGluIGhlciBzZWNvbmQgZm9ybSkgdG8gYWxsIGNyZWF0dXJlcyB3aXRoaW4gOTAgZnQgb2YgaGVyLiBcclxuICAgICAgICAgICAgSWYgdGhlIGNoYWlucyBhcmUgYnJva2VuLCBzaGUgYW5kIGFueSBjcmVhdHVyZXMgaW4gNWZ0IGFyZSBzdHVubmVkXHJcbiAgICAgICAgICAgIHRpbGwgdGhlIHN0YXJ0IG9mIHRoZWlyIHR1cm5zLmA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5TdGF0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkJyZWFrIHRoZSBDaGFpbnNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmJpbmREYW1hZ2VzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWREYW1hZ2U6IDE1MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZXM6IG5ldyBNYXAoW1tcImZyZWVcIiwgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5SYWRpYW50XV0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmFzc2lnbmVkRGFtYWdlUmF0aW9zOiBuZXcgTWFwKFtbXCJmcmVlXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDEyLCAxXV0pXV0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSldLFxyXG4gICAgICAgICAgICBbMywgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgzLCBcImZyZWUzXCIsIFwiVW5icmVha2FibGUgRnJlZWRvbSBJSUlcIiwgXCJDQy1GcmVlQnVmZkEzLndlYnBcIiwgXCJGcmVlZG9tIGhhcyArNTAlIEhQIERpY2UgYW5kICs1IEFDLiBBbmQgPGVtPkJyZWFrIHRoZSBDaGFpbnM8L2VtPiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJoYXMgc2hvY2t3YXZlIHJhZGl1cywgSFAgYW5kIHByb2JhYmxpdHkgc2lnbmlmaWNhbnRseSBpbmNyZWFzZWQuIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcIkZyZWVkb20gbm93IHJldG9yZXMgSFAgb24gdGhlIGNoYWlucyBicmVha2luZy5cIiwgKHNoZWV0KSA9PiBzaGVldC5tb25zdGVyX2lkID09IFwiaW5rbGluZ19mcmVlXCIsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhwRGljZSA9IHNoZWV0LmhwRGljZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWNlLCBudW1iZXJdIG9mIGhwRGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpY2UgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocERpY2Uuc2V0KGRpY2UsIG51bWJlciAqIDEuNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNoZWV0LmFjICs9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQuYXR0YWNrcy5zZXQoXCJicmVha1RoZUNoYWluc1wiLCBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgQXQgdGhlIGVuZCBvZiBoZXIgdHVybiwgRnJlZWRvbSBoYXMgYSA2NSUgKDc1JSBpbiBoZXIgc2Vjb25kIFxyXG4gICAgICAgICAgICBmb3JtKSBjaGFuY2UgdG8gY2FsbCBmb3J0aCBoZXIgbWVtb3JpZXMgb2YgY2FwdGl2aXR5LiBJZiBzaGUgZG9lcyBcclxuICAgICAgICAgICAgc3VjY2VlZCwgY2hhaW5zIHdpdGggMTUwSFAgKDIyNUhQIGluIGhlciBzZWNvbmQgZm9ybSkgYXBwZWFyIGFyb3VuZCBcclxuICAgICAgICAgICAgaGVyIGFuZCBzdG9wIGhlciBmcm9tIG1vdmluZyBvciBhdHRhY2tpbmcuIElmIHRoZSBjaGFpbnMgYXJlIG5vdCBcclxuICAgICAgICAgICAgZGVzdHJveWVkIHVudGlsIHRoZSBzdGFydCBvZiBoZXIgbmV4dC10by1uZXh0IHJvdW5kLCBzaGUgd2lsbCBmcmVlXHJcbiAgICAgICAgICAgIGhlcnNlbGYgYW5kIHJlbGVhc2UgYSBidXJzdCBvZiAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJmcmVlXCIpfVxyXG4gICAgICAgICAgICAobmVjcm90aWMgaW4gaGVyIHNlY29uZCBmb3JtKSB0byBhbGwgY3JlYXR1cmVzIHdpdGhpbiAxMjAgZnQgb2YgaGVyLiBcclxuICAgICAgICAgICAgSWYgdGhlIGNoYWlucyBhcmUgZGVzdHJveWVkLCBzaGUgZ2FpbnMgMjUgSFAgaW5zdGVhZC4gQWxzbywgc2hlIGFuZCBcclxuICAgICAgICAgICAgYW55IG90aGVyIGNyZWF0dXJlcyB3aXRoaW4gMzBmdCByYW5nZSBhcmUgc3R1bm5lZCB0aWxsIHRoZSBzdGFydCBvZiBcclxuICAgICAgICAgICAgdGhlaXIgdHVybnMuYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblN0YXQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiQnJlYWsgdGhlIENoYWluc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSkuYmluZERhbWFnZXMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZERhbWFnZTogMTUwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlczogbmV3IE1hcChbW1wiZnJlZVwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlJhZGlhbnRdXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuYXNzaWduZWREYW1hZ2VSYXRpb3M6IG5ldyBNYXAoW1tcImZyZWVcIiwgbmV3IE1hcChbW0RpY2VfMS5EMTIsIDFdXSldXSlcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9KV0sXHJcbiAgICAgICAgICAgIFs0LCBuZXcgc2hlZXRfMS5TaGVldENvbnRyYWN0KDIsIFwiZnJlZTRcIiwgXCJEYXp6bGluZyBGcmVlZG9tIElJXCIsIFwiQ0MtRnJlZUJ1ZmZCMi53ZWJwXCIsIFwiRnJlZWRvbSBoYXMgKzkwJSBIUCBEaWNlLCArNzAlIERhbWFnZSBEaWNlIGFuZCByZXNpc3RhbmNlIHRvIGZpcmVcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCIgYW5kIHJhZGlhbnQgZGFtYWdlLiA8ZW0+SW5rIFN3aXJsPC9lbT4ncyBjb29sZG93biBpcyByZWR1Y2VkLlwiLCAoc2hlZXQpID0+IHNoZWV0Lm1vbnN0ZXJfaWQgPT0gXCJpbmtsaW5nX2ZyZWVcIiwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHBEaWNlID0gc2hlZXQuaHBEaWNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2RpY2UsIG51bWJlcl0gb2YgaHBEaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGljZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhwRGljZS5zZXQoZGljZSwgbnVtYmVyICogMS45KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbXywgYXR0YWNrXSBvZiBzaGVldC5hdHRhY2tzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0YWNrLmlzRGFtYWdpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjay5hY3RpdmF0ZUNvbnRyYWN0KGF0dGFja18xLkF0dGFja0NvbnRyYWN0cy5nZXQoXCJTdGltdWx1c0ZyZWUyXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5yZXMuYWRkKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRmlyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQucmVzLmFkZChjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlJhZGlhbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoZWV0LmF0dGFja3Muc2V0KFwiaW5rU3dpcmxcIiwgbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAoVGhpcyBhY3Rpb24gY2FuIG9ubHkgYmUgdGFrZW4gb25jZSBpbiBldmVyeSB0d28gcm91bmRzXHJcbiAgICAgICAgICAgIGF0IHRoZSBzdGFydCBvZiBGcmVlZG9tJ3MgdHVybiwgYW5kIGJlZm9yZSBzaGUgbW92ZXMpIEZyZWVkb21cclxuICAgICAgICAgICAgdGFyZ2V0cyB0aGUgY2xvc2VzdCBmcmllbmRseSB1bml0IHdpdGhpbiA2MGZ0IG9mIGhlci4gSWYgdGhlcmUgYXJlXHJcbiAgICAgICAgICAgIHR3byBmcmllbmRseSB1bml0cyBlcXVpZGlzdGFudCwgc2hlIFxyXG4gICAgICAgICAgICBjaG9vc2VzIHRoZSBvbmUgd2l0aCBsb3dlciBIUC4gVGhhdCB1bml0IGFuZCBhbnkgb3RoZXIgbm9uLWlua2xpbmdzIFxyXG4gICAgICAgICAgICBpbiA1IGZ0IG9mIGl0IGFyZSA8dT5yZXN0cmFpbmVkPC91PiBpbiBhbiBpbmsgc3dpcmwgYW5kIHRha2VcclxuICAgICAgICAgICAgPHU+Y29udGludW91cyAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJpbmtTd2lybFwiKX08L3U+IGZvclxyXG4gICAgICAgICAgICB0d28gcm91bmRzLiBBdCB0aGUgc3RhcnQgb2YgdGhlaXIgdHVybnMsIHRoZXkgY2FuIG1ha2UgYSBEQyBcclxuICAgICAgICAgICAgJHthcmdzLmdldERjKHsgc3RhdDogY29uc3RhbnRzXzEuRFN0YXQuQ2hhLCBwcm9mOiBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCB9KX1cclxuICAgICAgICAgICAgYXRoZWxldGljcyBjaGVjayB0byBlc2NhcGUgdGhlIGluay4gVGhlIERDIHJlZHVjZXMgYnkgb25lIGFmdGVyIGVhY2hcclxuICAgICAgICAgICAgaW5zdGFuY2Ugb2YgZGFtYWdlLiBBbGxpZXMgY2FuIGF0dGVtcHQgdG8gZHJhdyB0aGVtIG91dCBieSBtYWtpbmcgXHJcbiAgICAgICAgICAgIHRoZSBzYW1lIGNoZWNrLCBidXQgb24gZmFpbHVyZSwgdGhlIGluayBlbnZlbG9wcyB0aGVtIHRvby5gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluU3RhdDogY29uc3RhbnRzXzEuRFN0YXQuQ2hhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJJbmsgU3dpcmxcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmJpbmREYW1hZ2VzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWREYW1hZ2VzKGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJpbmtTd2lybFwiLCBuZXcgTWFwKFtbRGljZV8xLkQxLCBhcmdzLmdldE1vZChjb25zdGFudHNfMS5EU3RhdC5DaGEpXV0pXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZVR5cGVzOiBuZXcgTWFwKFtbXCJpbmtTd2lybFwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkNvcnJvc2lvbl1dKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWREYW1hZ2U6IDI1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmFzc2lnbmVkRGFtYWdlUmF0aW9zOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcImlua1N3aXJsXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDQsIDFdXSldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSldLFxyXG4gICAgICAgICAgICBbNSwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgzLCBcImZyZWU1XCIsIFwiRGF6emxpbmcgRnJlZWRvbSBJSUlcIiwgXCJDQy1GcmVlQnVmZkIzLndlYnBcIiwgXCJGcmVlZG9tIGhhcyArMjAwJSBIUCBEaWNlLCArMTUwJSBBdGsgRGljZSBhbmQgcmVzaXN0YW5jZSB0byBmaXJlIGFuZCByYWRpYW50IGRhbWFnZS4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiPGVtPkluayBTd2lybDwvZW0+J3MgY29vbGRvd24gaXMgZ3JlYXRseSByZWR1Y2VkLCBhbmQgaXQgbmVlZG4ndCBiZSBjYXN0IGF0IHRoZSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdGFydCBvZiB0aGUgdHVybi5cIiwgKHNoZWV0KSA9PiBzaGVldC5tb25zdGVyX2lkID09IFwiaW5rbGluZ19mcmVlXCIsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhwRGljZSA9IHNoZWV0LmhwRGljZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWNlLCBudW1iZXJdIG9mIGhwRGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpY2UgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocERpY2Uuc2V0KGRpY2UsIG51bWJlciAqIDMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5yZXMuYWRkKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRmlyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQucmVzLmFkZChjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlJhZGlhbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW18sIGF0dGFja10gb2Ygc2hlZXQuYXR0YWNrcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGFjay5pc0RhbWFnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2suYWN0aXZhdGVDb250cmFjdChhdHRhY2tfMS5BdHRhY2tDb250cmFjdHMuZ2V0KFwiU3RpbXVsdXNGcmVlM1wiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQuYXR0YWNrcy5zZXQoXCJpbmtTd2lybFwiLCBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkFjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCBGcmVlZG9tIHRhcmdldHMgdGhlIGNsb3Nlc3QgZnJpZW5kbHkgdW5pdFxyXG4gICAgICAgICAgICB3aXRoaW4gNjBmdCBvZiBoZXIuIElmIHRoZXJlIGFyZSB0d28gZnJpZW5kbHkgdW5pdHMgZXF1aWRpc3RhbnQsIHNoZSBcclxuICAgICAgICAgICAgY2hvb3NlcyB0aGUgb25lIHdpdGggbG93ZXIgSFAuIFRoYXQgdW5pdCBhbmQgYW55IG90aGVyIG5vbi1pbmtsaW5ncyBcclxuICAgICAgICAgICAgaW4gNSBmdCBvZiBpdCBhcmUgPHU+cmVzdHJhaW5lZDwvdT4gaW4gYW4gaW5rIHN3aXJsIGFuZCB0YWtlXHJcbiAgICAgICAgICAgIDx1PmNvbnRpbnVvdXMgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiaW5rU3dpcmxcIil9PC91PiBmb3JcclxuICAgICAgICAgICAgdHdvIHJvdW5kcy4gQXQgdGhlIHN0YXJ0IG9mIHRoZWlyIHR1cm5zLCB0aGV5IGNhbiBtYWtlIGEgREMgXHJcbiAgICAgICAgICAgICR7YXJncy5nZXREYyh7IHN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LkNoYSwgcHJvZjogY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQgfSl9XHJcbiAgICAgICAgICAgIGF0aGVsZXRpY3MgY2hlY2sgdG8gZXNjYXBlIHRoZSBpbmsuIFRoZSBEQyByZWR1Y2VzIGJ5IG9uZSBhZnRlciBlYWNoXHJcbiAgICAgICAgICAgIGluc3RhbmNlIG9mIGRhbWFnZS4gQWxsaWVzIGNhbiBhdHRlbXB0IHRvIGRyYXcgdGhlbSBvdXQgYnkgbWFraW5nIFxyXG4gICAgICAgICAgICB0aGUgc2FtZSBjaGVjaywgYnV0IG9uIGZhaWx1cmUsIHRoZSBpbmsgZW52ZWxvcHMgdGhlbSB0b28uYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LkNoYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiSW5rIFN3aXJsXCJcclxuICAgICAgICAgICAgICAgICAgICB9KS5iaW5kRGFtYWdlcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkRGFtYWdlcyhhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiaW5rU3dpcmxcIiwgbmV3IE1hcChbW0RpY2VfMS5EMSwgYXJncy5nZXRNb2QoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKV1dKV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlczogbmV3IE1hcChbW1wiaW5rU3dpcmxcIiwgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Db3Jyb3Npb25dXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkRGFtYWdlOiAyNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5hc3NpZ25lZERhbWFnZVJhdGlvczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJpbmtTd2lybFwiLCBuZXcgTWFwKFtbRGljZV8xLkQ0LCAxXV0pXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIH0pXVxyXG4gICAgICAgIF0pXSxcclxuICAgIFtcImludmVzdGVkXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbMSwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgxLCBcImludjFcIiwgXCJJbnZlc3RlZCBJXCIsIFwiQ0MtRW5lbXlIUEJ1ZmYxLndlYnBcIiwgXCJFbmVtaWVzIGhhdmUgdGhlaXIgSFAgRGljZSBpbmNyZWFzZWQgYnkgMzAlXCIsIChzaGVldCkgPT4gdHJ1ZSwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHBEaWNlID0gc2hlZXQuaHBEaWNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2RpY2UsIG51bWJlcl0gb2YgaHBEaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGljZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhwRGljZS5zZXQoZGljZSwgbnVtYmVyICogMS4zKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KV0sXHJcbiAgICAgICAgICAgIFsyLCBuZXcgc2hlZXRfMS5TaGVldENvbnRyYWN0KDIsIFwiaW52MlwiLCBcIkludmVzdGVkIElJXCIsIFwiQ0MtRW5lbXlIUEJ1ZmYyLndlYnBcIiwgXCJFbmVtaWVzIGhhdmUgdGhlaXIgSFAgRGljZSBpbmNyZWFzZWQgYnkgNjAlXCIsIChzaGVldCkgPT4gdHJ1ZSwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGljZSwgbnVtYmVyXSBvZiBzaGVldC5ocERpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWNlID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hlZXQuaHBEaWNlLnNldChkaWNlLCBudW1iZXIgKiAxLjYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICAgICAgWzMsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMywgXCJpbnYzXCIsIFwiSW52ZXN0ZWQgSUlJXCIsIFwiQ0MtRW5lbXlIUEJ1ZmYzLndlYnBcIiwgXCJFbmVtaWVzIGhhdmUgdGhlaXIgSFAgRGljZSBpbmNyZWFzZWQgYnkgMTEwJVwiLCAoc2hlZXQpID0+IHRydWUsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2RpY2UsIG51bWJlcl0gb2Ygc2hlZXQuaHBEaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGljZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoZWV0LmhwRGljZS5zZXQoZGljZSwgbnVtYmVyICogMi4xKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KV0sXHJcbiAgICAgICAgXSldLFxyXG4gICAgW1wiZGVmXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbMSwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgxLCBcImRlZjFcIiwgXCJTaGllbGQgb2YgSW5rXCIsIFwiQ0MtRW5lbXlERUZCdWZmMS53ZWJwXCIsIFwiQWxsIGVuZW1pZXMgZ2FpbiArMiBBQy5cIiwgKHNoZWV0KSA9PiB0cnVlLCAoc2hlZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5hYyArPSAyO1xyXG4gICAgICAgICAgICAgICAgfSldLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtcImVudnlcIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFsxLCBuZXcgc2hlZXRfMS5TaGVldENvbnRyYWN0KDEsIFwiZW52MVwiLCBcIkRlZXAgRW52eSBJXCIsIFwiQ0MtRW52eUJ1ZmZBMS5wbmdcIiwgXCJFbnZpZXMgaGF2ZSArMjAlIEhQIGFuZCBnYWluIHNlbWktcHJvZmljaWVuY3kgaW4gQ29uIFNhdmluZyB0aHJvd3MuXCIsIChzaGVldCkgPT4gc2hlZXQubW9uc3Rlcl9pZCA9PSBcImlua2xpbmdfZW52eVwiLCAoc2hlZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBocERpY2UgPSBzaGVldC5ocERpY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGljZSwgbnVtYmVyXSBvZiBocERpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWNlID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaHBEaWNlLnNldChkaWNlLCBudW1iZXIgKiAxLjIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5zYXZlcy5zZXQoY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5IYWxmLCAwXSk7XHJcbiAgICAgICAgICAgICAgICB9KV0sXHJcbiAgICAgICAgICAgIFsyLCBuZXcgc2hlZXRfMS5TaGVldENvbnRyYWN0KDIsIFwiZW52MlwiLCBcIkRlZXAgRW52eSBJSVwiLCBcIkNDLUVudnlCdWZmQTIucG5nXCIsIFwiRW52aWVzIGhhdmUgKzcwJSBIUCwgKzMwJSBBVEsgYW5kIGdhaW4gcHJvZmljaWVuY3kgaW4gQ29uIFNhdmluZyB0aHJvd3MuXCIsIChzaGVldCkgPT4gc2hlZXQubW9uc3Rlcl9pZCA9PSBcImlua2xpbmdfZW52eVwiLCAoc2hlZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBocERpY2UgPSBzaGVldC5ocERpY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGljZSwgbnVtYmVyXSBvZiBocERpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWNlID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaHBEaWNlLnNldChkaWNlLCBudW1iZXIgKiAxLjcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5zYXZlcy5zZXQoY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCAwXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbXywgYXR0YWNrXSBvZiBzaGVldC5hdHRhY2tzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0YWNrLmlzRGFtYWdpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjay5hY3RpdmF0ZUNvbnRyYWN0KGF0dGFja18xLkF0dGFja0NvbnRyYWN0cy5nZXQoXCJTdGltdWx1c0VudnkxXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICAgICAgWzMsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMywgXCJlbnYzXCIsIFwiRGVlcCBFbnZ5IElJSVwiLCBcIkNDLUVudnlCdWZmQTMucG5nXCIsIFwiRW52aWVzIGhhdmUgKzEyMCUgSFAsICs2MCUgQVRLIGFuZCBnYWluIGV4cGVydGlzZSBpbiBDb24gU2F2aW5nIHRocm93cy5cIiwgKHNoZWV0KSA9PiBzaGVldC5tb25zdGVyX2lkID09IFwiaW5rbGluZ19lbnZ5XCIsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhwRGljZSA9IHNoZWV0LmhwRGljZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWNlLCBudW1iZXJdIG9mIGhwRGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpY2UgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocERpY2Uuc2V0KGRpY2UsIG51bWJlciAqIDIuMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNoZWV0LnNhdmVzLnNldChjb25zdGFudHNfMS5EU3RhdC5Db24sIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCwgMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW18sIGF0dGFja10gb2Ygc2hlZXQuYXR0YWNrcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGFjay5pc0RhbWFnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2suYWN0aXZhdGVDb250cmFjdChhdHRhY2tfMS5BdHRhY2tDb250cmFjdHMuZ2V0KFwiU3RpbXVsdXNFbnZ5MlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KV0sXHJcbiAgICAgICAgICAgIFs0LCBuZXcgc2hlZXRfMS5TaGVldENvbnRyYWN0KDIsIFwiZW52NFwiLCBcIkVudHJlbmNoZWQgRW52eSBJSVwiLCBcIkNDLUVudnlCdWZmQjIucG5nXCIsIFwiRW52aWVzIGhhdmUgYWR2YW50YWdlIGluIENvbiBTYXZpbmcgdGhyb3dzLiBBbHNvIHRoZXkgbm93IGNoYXJnZSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0aGVpciBhdHRhY2tzIGluIGhhbGYgYSByb3VuZCBhbmQgbWF5IGJlZ2luIGNoYXJnaW5nIGFueXRpbWUuXCIsIChzaGVldCkgPT4gc2hlZXQubW9uc3Rlcl9pZCA9PSBcImlua2xpbmdfZW52eVwiLCAoc2hlZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5hdHRhY2tzLnNldChcImNoYXJnaW5nXCIsIG5ldyBhdHRhY2tfMS5CdWZmZWRJbnRlcm5hbEF0dGFjayh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uTGVnZW5kYXJ5QWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlRoZSBJbmtsaW5nIGJlZ2lucyBjb25jZW50cmF0aW5nIGZvciBhIGJpZyBzaG90LCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aGV5J2xsIGJlIGRvbmUgaW4gaGFsZiBhIHJvdW5kICgqcmVmZXIgdG8gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29udGludW91cyBkYW1hZ2UgaW5pdGlhdGl2ZSBjdXRvZmZzKS5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblN0YXQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkNoYXJnaW5nXCJcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQuYXR0YWNrcy5zZXQoXCJib251c1Nob3RcIiwgbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5Cb251c0FjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDxwPlRoZSBpbmtsaW5nIHNwaXRzIHZpc2NvdXMgaW5rIGF0IG9uZSBjcmVhdHVyZSB3aXRoaW4gNjAgZmVldCBvZiBpdHNlbGYuIFRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIFxyXG4gICAgICAgICAgICAgICAgICAgIG9uIGEgREMgJHthcmdzLmdldERjKCl9IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cuIE9uIGZhaWx1cmUsIHRoZXkgdGFrZSAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJCbG90XCIpfVxyXG4gICAgICAgICAgICAgICAgICAgIGFuZCBhcmUgQmxpbmRlZCB1bnRpbCB0aGUgZW5kIG9mIHRoZWlyIG5leHQgdHVybi4gT24gc3VjY2VzcywgdGhleSB0YWtlIGhhbGZcclxuICAgICAgICAgICAgICAgICAgICB0aGUgcG9pc29uIGRhbWFnZSBhbmQgYXJlIG5vdCBibGluZGVkLiBSZWdhcmRsZXNzIG9mIHRoZSByb2xsLCB0aGV5IHRha2UgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiQmxvdE5ldXJhbFwiKX0uPC9wPmA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5TdGF0OiBjb25zdGFudHNfMS5EU3RhdC5Db24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkNhc3VhbCBTcGl0XCJcclxuICAgICAgICAgICAgICAgICAgICB9KS5iaW5kRGFtYWdlcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkRGFtYWdlOiAzMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWREYW1hZ2VzOiBhcmdzID0+IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQmxvdFwiLCBuZXcgTWFwKFtbRGljZV8xLkQxLCBhcmdzLmdldE1vZChjb25zdGFudHNfMS5EU3RhdC5Db24pXV0pXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIkJsb3ROZXVyYWxcIiwgbmV3IE1hcChbW0RpY2VfMS5EMSwgYXJncy5nZXRNb2QoY29uc3RhbnRzXzEuRFN0YXQuSW50KV1dKV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuYXNzaWduZWREYW1hZ2VSYXRpb3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQmxvdFwiLCBuZXcgTWFwKFtbRGljZV8xLkQ4LCAzXV0pXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIkJsb3ROZXVyYWxcIiwgbmV3IE1hcChbW0RpY2VfMS5EOCwgMV1dKV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZVR5cGVzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIkJsb3RcIiwgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb25dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQmxvdE5ldXJhbFwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWNdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9KV0sXHJcbiAgICAgICAgICAgIFs1LCBuZXcgc2hlZXRfMS5TaGVldENvbnRyYWN0KDMsIFwiZW52NVwiLCBcIkVudHJlbmNoZWQgRW52eSBJSUlcIiwgXCJDQy1FbnZ5QnVmZkIzLnBuZ1wiLCBcIkVudmllcyBoYXZlIHN1cGVyLWFkdmFudGFnZSBpbiBDb24gU2F2aW5nIHRocm93cy4gQWxzbyB0aGV5IG5vdyBjaGFyZ2UgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwidGhlaXIgYXR0YWNrcyBpbiBxdWFydGVyIG9mIGEgcm91bmQgYW5kIG1heSBiZWdpbiBjaGFyZ2luZyBhbnl0aW1lLlwiLCAoc2hlZXQpID0+IHNoZWV0Lm1vbnN0ZXJfaWQgPT0gXCJpbmtsaW5nX2VudnlcIiwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQuYXR0YWNrcy5zZXQoXCJjaGFyZ2luZ1wiLCBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkxlZ2VuZGFyeUFjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJUaGUgSW5rbGluZyBiZWdpbnMgY29uY2VudHJhdGluZyBmb3IgYSBiaWcgc2hvdCwgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGhleSdsbCBiZSBkb25lIGluIGEgZm91cnRoIG9mIGEgcm91bmQgKCpyZWZlciB0byBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250aW51b3VzIGRhbWFnZSBpbml0aWF0aXZlIGN1dG9mZnMpLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluU3RhdDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiQ2hhcmdpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5hdHRhY2tzLnNldChcImJvbnVzU2hvdFwiLCBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPHA+VGhlIGlua2xpbmcgc3BpdHMgdmlzY291cyBpbmsgYXQgb25lIGNyZWF0dXJlIHdpdGhpbiA2MCBmZWV0IG9mIGl0c2VsZi4gVGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgXHJcbiAgICAgICAgICAgICAgICAgICAgb24gYSBEQyAke2FyZ3MuZ2V0RGMoKX0gQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdy4gT24gZmFpbHVyZSwgdGhleSB0YWtlICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkJsb3RcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgYW5kIGFyZSBCbGluZGVkIHVudGlsIHRoZSBlbmQgb2YgdGhlaXIgbmV4dCB0dXJuLiBPbiBzdWNjZXNzLCB0aGV5IHRha2UgaGFsZlxyXG4gICAgICAgICAgICAgICAgICAgIHRoZSBwb2lzb24gZGFtYWdlIGFuZCBhcmUgbm90IGJsaW5kZWQuIFJlZ2FyZGxlc3Mgb2YgdGhlIHJvbGwsIHRoZXkgdGFrZSAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJCbG90TmV1cmFsXCIpfS48L3A+YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LkNvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiQ2FzdWFsIFNwaXRcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmJpbmREYW1hZ2VzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWREYW1hZ2U6IDMwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25lZERhbWFnZXM6IGFyZ3MgPT4gbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJCbG90XCIsIG5ldyBNYXAoW1tEaWNlXzEuRDEsIGFyZ3MuZ2V0TW9kKGNvbnN0YW50c18xLkRTdGF0LkNvbildXSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQmxvdE5ldXJhbFwiLCBuZXcgTWFwKFtbRGljZV8xLkQxLCBhcmdzLmdldE1vZChjb25zdGFudHNfMS5EU3RhdC5JbnQpXV0pXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5hc3NpZ25lZERhbWFnZVJhdGlvczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJCbG90XCIsIG5ldyBNYXAoW1tEaWNlXzEuRDgsIDNdXSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQmxvdE5ldXJhbFwiLCBuZXcgTWFwKFtbRGljZV8xLkQ4LCAxXV0pXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQmxvdFwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBvaXNvbl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJCbG90TmV1cmFsXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpY10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICBdKV0sXHJcbiAgICBbXCJzdGltdWxpXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbMSwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgxLCBcInN0aTFcIiwgXCJTdGltdWx1cyBJXCIsIFwiQ0MtRW5lbXlBVEtCdWZmMS53ZWJwXCIsIFwiRW5lbWllcyBoYXZlIHRoZWlyIEFUSyBpbmNyZWFzZWQgYnkgMjUlXCIsIChzaGVldCkgPT4gdHJ1ZSwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbXywgYXR0YWNrXSBvZiBzaGVldC5hdHRhY2tzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0YWNrLmlzRGFtYWdpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjay5hY3RpdmF0ZUNvbnRyYWN0KGF0dGFja18xLkF0dGFja0NvbnRyYWN0cy5nZXQoXCJTdGltdWx1czFcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSldLFxyXG4gICAgICAgICAgICBbMiwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgyLCBcInN0aTJcIiwgXCJTdGltdWx1cyBJSVwiLCBcIkNDLUVuZW15QVRLQnVmZjEud2VicFwiLCBcIkVuZW1pZXMgaGF2ZSB0aGVpciBBVEsgaW5jcmVhc2VkIGJ5IDUwJVwiLCAoc2hlZXQpID0+IHRydWUsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW18sIGF0dGFja10gb2Ygc2hlZXQuYXR0YWNrcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGFjay5pc0RhbWFnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2suYWN0aXZhdGVDb250cmFjdChhdHRhY2tfMS5BdHRhY2tDb250cmFjdHMuZ2V0KFwiU3RpbXVsdXMxXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICBdKV0sXHJcbiAgICBbXCJmYXN0X21vdXRoc1wiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgWzEsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMSwgXCJmYWoxXCIsIFwiRmFzdCBKYXdzIElcIiwgXCJDQy1FbmVteUFTUERCdWZmMS53ZWJwXCIsIFwiSW1wYXRpZW5jZSwgaW5zZWN1cml0eSBhbmQgRnJlZWRvbSBoYXZlIG9uZSBtb3JlIGF0dGFjayBwZXIgYWN0aW9uLlwiLCAoc2hlZXQpID0+IFtcImlua2xpbmdfaW5zZWN1cml0eVwiLCBcImlua2xpbmdfaW1wYXRpZW5jZVwiLCBcImlua2xpbmdfZnJlZVwiXVxyXG4gICAgICAgICAgICAgICAgICAgIC5pbmNsdWRlcyhzaGVldC5tb25zdGVyX2lkKSwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmEgPSBzaGVldC5tb25zdGVyX2lkID09IFwiaW5rbGluZ19pbnNlY3VyaXR5XCIgPyBcInR3b1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJ0aHJlZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoZWV0LmF0dGFja3Muc2V0KFwibXVsdGlhdHRhY2tcIiwgbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPHA+VGhlIGlua2xpbmcgbWFrZXMgJHtuYX0gYml0ZSBhdHRhY2tzIHBlciB0dXJuLjwvcD5gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluU3RhdDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJNdWx0aWF0dGFja1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSldLFxyXG4gICAgICAgICAgICBbMiwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgyLCBcImZhajJcIiwgXCJGYXN0IEphd3MgSUlcIiwgXCJDQy1FbmVteUFTUERCdWZmMi53ZWJwXCIsIFwiSW1wYXRpZW5jZSwgaW5zZWN1cml0eSBhbmQgRnJlZWRvbSBoYXZlIHR3byBtb3JlIGJpdGUgYXR0YWNrcyBwZXIgYWN0aW9uLlwiLCAoc2hlZXQpID0+IFtcImlua2xpbmdfaW5zZWN1cml0eVwiLCBcImlua2xpbmdfaW1wYXRpZW5jZVwiLCBcImlua2xpbmdfZnJlZVwiXVxyXG4gICAgICAgICAgICAgICAgICAgIC5pbmNsdWRlcyhzaGVldC5tb25zdGVyX2lkKSwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmEgPSBzaGVldC5tb25zdGVyX2lkID09IFwiaW5rbGluZ19pbnNlY3VyaXR5XCIgPyBcInRocmVlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcImZvdXJcIjtcclxuICAgICAgICAgICAgICAgICAgICBzaGVldC5hdHRhY2tzLnNldChcIm11bHRpYXR0YWNrXCIsIG5ldyBhdHRhY2tfMS5CdWZmZWRJbnRlcm5hbEF0dGFjayh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDxwPlRoZSBpbmtsaW5nIG1ha2VzICR7bmF9IGJpdGUgYXR0YWNrcyBwZXIgdHVybi48L3A+YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblN0YXQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiTXVsdGlhdHRhY2tcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICBdKV0sXHJcbiAgICBbXCJjb3ZlcnRBY3Rpb25cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFsxLCBuZXcgc2hlZXRfMS5TaGVldENvbnRyYWN0KDEsIFwiY3ZhMVwiLCBcIkNvdmVydCBBY3Rpb24gSVwiLCBcIkNDLVNtYWxsZXJTcXVhZDEud2VicFwiLCBcIk9uZSBGcmllbmRseSBnYWlucyBhICsxMCB0byBzdGVhbHRoIHJvbGxzIGJ1dCBoYXMgZnJhZ2lsZSBpbmZsaWN0ZWQgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwidGhyb3VnaG91dCB0aGUgb3BlcmF0aW9uIChUb3RhbCBIUCBjYXBwZWQgYXQgMSkuXCIsIChzaGVldCkgPT4gdHJ1ZSwgKHNoZWV0KSA9PiB7IH0pXSxcclxuICAgICAgICAgICAgWzIsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMywgXCJjdmEyXCIsIFwiQ292ZXJ0IEFjdGlvbiBJSVwiLCBcIkNDLVNtYWxsZXJTcXVhZDIud2VicFwiLCBcIlR3byBmcmllbmRsaWVzIGdhaW4gYSArMTAgdG8gc3RlYWx0aCByb2xscyBidXQgaGF2ZSBmcmFnaWxlIGluZmxpY3RlZCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0aHJvdWdob3V0IHRoZSBvcGVyYXRpb24gKFRvdGFsIEhQIGNhcHBlZCBhdCAxKS5cIiwgKHNoZWV0KSA9PiB0cnVlLCAoc2hlZXQpID0+IHsgfSldLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtcImNsb2NrXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbMSwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgxLCBcImZsdDFcIiwgXCJGbGVldGluZyBUaW1lIElcIiwgXCJDQy1PcGVyYXRvckFTUEREZWJ1ZmYxLndlYnBcIiwgXCJUaW1lIExpbWl0IHJlZHVjZWQgYnkgMjUlIHRvIDEyIHJvdW5kcy5cIiwgKHNoZWV0KSA9PiB0cnVlLCAoc2hlZXQpID0+IHsgfSldLFxyXG4gICAgICAgICAgICBbMiwgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgyLCBcImZsdDJcIiwgXCJGbGVldGluZyBUaW1lIElJXCIsIFwiQ0MtT3BlcmF0b3JBU1BERGVidWZmMi53ZWJwXCIsIFwiVGltZSBMaW1pdCByZWR1Y2VkIGJ5IDUwJSB0byA4IHJvdW5kcy5cIiwgKHNoZWV0KSA9PiB0cnVlLCAoc2hlZXQpID0+IHsgfSldLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtcIm1vdlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgWzEsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMSwgXCJtb3YxXCIsIFwiTW9iaWxpdHkgSVwiLCBcIkNDLUVuZW15U3BlZWRCdWZmLndlYnBcIiwgXCJBbGwgZW5lbWllcyBnYWluICs1MCUgbW92ZW1lbnQgc3BlZWRzLlwiLCAoc2hlZXQpID0+IHRydWUsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHNoZWV0LnNwZWVkcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hlZXQuc3BlZWRzLnNldChrLCBNYXRoLmZsb29yKHYgKiAwLjMpICogNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSldLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtcImFyclwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgWzEsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMSwgXCJhcnIxXCIsIFwiRmxpY2tlcmluZyBMaWdodHMgSVwiLCBcIkNDLUFycm9nYW5jZUJ1ZmZBMS53ZWJwXCIsIFwiQXJyb2dhbmNlIGdhaW4gKzcwJSBIUCBhbmQgaGFsdmVzIGNvbWUgYmFjayB0byBsaWZlIHdpdGggZnVsbCBIUCBpZiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ0aGUgb3RoZXIgaGFsZiBpcyBub3Qga2lsbGVkIHVudGlsIHRoZSBzdGFydCBvZiB0aGVpciBuZXh0LXRvLW5leHQgdHVybi4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiVGhleSB3aWxsIG5vdyBjaGFzZSBhZnRlciBmcmllbmRsaWVzLlwiLCAoc2hlZXQpID0+IHNoZWV0Lm1vbnN0ZXJfaWQgPT0gXCJpbmtsaW5nX2Fycm9nYW5jZVwiLCAoc2hlZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBocERpY2UgPSBzaGVldC5ocERpY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGljZSwgbnVtYmVyXSBvZiBocERpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWNlID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaHBEaWNlLnNldChkaWNlLCBudW1iZXIgKiAxLjcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICAgICAgWzIsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMiwgXCJhcnIyXCIsIFwiRmxpY2tlcmluZyBMaWdodHMgSUlcIiwgXCJDQy1BcnJvZ2FuY2VCdWZmQTIud2VicFwiLCBcIkFycm9nYW5jZSBnYWluICsyMjAlIEhQIGFuZCBoYWx2ZXMgY29tZSBiYWNrIHRvIGxpZmUgd2l0aCBmdWxsIEhQIGlmIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcInRoZSBvdGhlciBoYWxmIGlzIG5vdCBraWxsZWQgdW50aWwgdGhlIHN0YXJ0IG9mIHRoZWlyIG5leHQtdG8tbmV4dCB0dXJuLiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJUaGV5IHdpbGwgbm93IGNoYXNlIGFmdGVyIGZyaWVuZGxpZXMuXCIsIChzaGVldCkgPT4gc2hlZXQubW9uc3Rlcl9pZCA9PSBcImlua2xpbmdfYXJyb2dhbmNlXCIsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhwRGljZSA9IHNoZWV0LmhwRGljZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWNlLCBudW1iZXJdIG9mIGhwRGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpY2UgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocERpY2Uuc2V0KGRpY2UsIG51bWJlciAqIDMuMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSldLFxyXG4gICAgICAgICAgICBbMywgbmV3IHNoZWV0XzEuU2hlZXRDb250cmFjdCgzLCBcImFycjNcIiwgXCJGbGlja2VyaW5nIExpZ2h0cyBJSUlcIiwgXCJDQy1BcnJvZ2FuY2VCdWZmQTMud2VicFwiLCBcIkFycm9nYW5jZSBnYWluICszMDAlIEhQIGFuZCBoYWx2ZXMgY29tZSBiYWNrIHRvIGxpZmUgd2l0aCBmdWxsIEhQIGlmIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcInRoZSBvdGhlciBoYWxmIGlzIG5vdCBraWxsZWQgdW50aWwgdGhlIHN0YXJ0IG9mIHRoZWlyIG5leHQtdG8tbmV4dCB0dXJuLiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJUaGV5IHdpbGwgbm93IGNoYXNlIGFmdGVyIGZyaWVuZGxpZXMuXCIsIChzaGVldCkgPT4gc2hlZXQubW9uc3Rlcl9pZCA9PSBcImlua2xpbmdfYXJyb2dhbmNlXCIsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhwRGljZSA9IHNoZWV0LmhwRGljZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWNlLCBudW1iZXJdIG9mIGhwRGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpY2UgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocERpY2Uuc2V0KGRpY2UsIG51bWJlciAqIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICAgICAgWzQsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMiwgXCJhcnI0XCIsIFwiRXBoZW1lcmFsIExpZ2h0cyBJSVwiLCBcIkNDLUFycm9nYW5jZUJ1ZmZCMi53ZWJwXCIsIFwiQXJyb2dhbmNlIGdhaW4gKzExMCUgSFAsIGluY3JlYXNlZCBtb3ZlbWVudCBzcGVlZCAoNWZ0KSBhbmQgYSB3aWRlciBibGFzdCByYWRpdXMgKCs1MCUpLiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJUaGV5IHdpbGwgbm93IGNoYXNlIGFmdGVyIGZyaWVuZGxpZXMuXCIsIChzaGVldCkgPT4gc2hlZXQubW9uc3Rlcl9pZCA9PSBcImlua2xpbmdfYXJyb2dhbmNlXCIsIChzaGVldCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhwRGljZSA9IHNoZWV0LmhwRGljZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkaWNlLCBudW1iZXJdIG9mIGhwRGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpY2UgPT0gRGljZV8xLkQxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocERpY2Uuc2V0KGRpY2UsIG51bWJlciAqIDIuMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHNoZWV0LnNwZWVkcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hlZXQuc3BlZWRzLnNldChrLCB2ICsgNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNoZWV0LmF0dGFja3Muc2V0KFwiYm9vbVRleHRcIiwgbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDxwPlVwb24gZGVhdGggZXhwbG9kZXMgdG8gZGVhbCAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJCb29tXCIpfSB0byB0YXJnZXRzIHdpdGhpbiA1IGZ0LiBcclxuICAgICAgICAgICAgICAgICAgICBPbiBjb21pbmcgaW50byBjb250YWN0IHdpdGggaXRzIG9wcG9zaXRlIGV4cGxvZGVzIHRvIGRlYWwgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiQmlnQm9vbVwiKX0gXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCB0byB0YXJnZXRzIHdpdGhpbiAzMGZ0IGFuZCBoYWxmIGRhbWFnZSB0byB0YXJnZXRzIHdpdGhpbiA2MGZ0LjwvcD5gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5TdGF0OiBjb25zdGFudHNfMS5EU3RhdC5EZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkJvb21cIixcclxuICAgICAgICAgICAgICAgICAgICB9KS5iaW5kRGFtYWdlcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkRGFtYWdlczogXyA9PiBuZXcgTWFwKFtdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5hc3NpZ25lZERhbWFnZVJhdGlvczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJCb29tXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDIwLCAxXV0pXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIkJpZ0Jvb21cIiwgbmV3IE1hcChbW0RpY2VfMS5EMjAsIDEyXV0pXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlVHlwZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQm9vbVwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkZvcmNlXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIkJpZ0Jvb21cIiwgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Gb3JjZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZERhbWFnZTogMjcwLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICAgICAgWzUsIG5ldyBzaGVldF8xLlNoZWV0Q29udHJhY3QoMywgXCJhcnI1XCIsIFwiRXBoZW1lcmFsIExpZ2h0cyBJSUlcIiwgXCJDQy1BcnJvZ2FuY2VCdWZmQjMud2VicFwiLCBcIkFycm9nYW5jZSBnYWluICsxMTAlIEhQLCBpbmNyZWFzZWQgbW92ZW1lbnQgc3BlZWQgKDEwZnQpIGFuZCBhIHdpZGVyIGJsYXN0IHJhZGl1cyAoKzEwMCUpIHdpdGggXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiaW5jcmVhc2VkIGRhbWFnZS4gVGhleSB3aWxsIG5vdyBjaGFzZSBhZnRlciBmcmllbmRsaWVzLlwiLCAoc2hlZXQpID0+IHNoZWV0Lm1vbnN0ZXJfaWQgPT0gXCJpbmtsaW5nX2Fycm9nYW5jZVwiLCAoc2hlZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBocERpY2UgPSBzaGVldC5ocERpY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZGljZSwgbnVtYmVyXSBvZiBocERpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWNlID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaHBEaWNlLnNldChkaWNlLCBudW1iZXIgKiAyLjEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBzaGVldC5zcGVlZHMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoZWV0LnNwZWVkcy5zZXQoaywgdiArIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRyYWN0cyA9IHNoZWV0LmF0dGFja3MuZ2V0KFwiYm9vbVRleHRcIikuZ2V0Q29udHJhY3RzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQuYXR0YWNrcy5zZXQoXCJib29tVGV4dFwiLCBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPHA+VXBvbiBkZWF0aCBleHBsb2RlcyB0byBkZWFsICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkJvb21cIil9IHRvIHRhcmdldHMgd2l0aGluIDUgZnQuIFxyXG4gICAgICAgICAgICAgICAgICAgIE9uIGNvbWluZyBpbnRvIGNvbnRhY3Qgd2l0aCBpdHMgb3Bwb3NpdGUgZXhwbG9kZXMgdG8gZGVhbCAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJCaWdCb29tXCIpfSBcclxuICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIHRvIHRhcmdldHMgd2l0aGluIDQwZnQgYW5kIGhhbGYgZGFtYWdlIHRvIHRhcmdldHMgd2l0aGluIDgwZnQuPC9wPmA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LkRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiQm9vbVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLmJpbmREYW1hZ2VzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduZWREYW1hZ2VzOiBfID0+IG5ldyBNYXAoW10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmFzc2lnbmVkRGFtYWdlUmF0aW9zOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIkJvb21cIiwgbmV3IE1hcChbW0RpY2VfMS5EMjAsIDFdXSldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQmlnQm9vbVwiLCBuZXcgTWFwKFtbRGljZV8xLkQyMCwgMTJdXSldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VUeXBlczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCJCb29tXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRm9yY2VdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW1wiQmlnQm9vbVwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkZvcmNlXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkRGFtYWdlOiAyNzAsXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW18sIGF0dGFja10gb2Ygc2hlZXQuYXR0YWNrcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGFjay5pc0RhbWFnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2suYWN0aXZhdGVDb250cmFjdChhdHRhY2tfMS5BdHRhY2tDb250cmFjdHMuZ2V0KFwiU3RpbXVsdXNBcnJvZ2FuY2UzXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29udHJhY3Qgb2YgY29udHJhY3RzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNrLmFjdGl2YXRlQ29udHJhY3QoY29udHJhY3QpOyAvL29sZCBjb250cmFjdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXSxcclxuICAgICAgICBdKV0sXHJcbiAgICBbXCJlcm9cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFsxLCBuZXcgc2hlZXRfMS5TaGVldENvbnRyYWN0KDEsIFwiZXJvMVwiLCBcIkVyb3Npb24gSVwiLCBcIkNDLUhQRGVidWZmMS53ZWJwXCIsIFwiRnJpZW5kbGllcyBoYXZlIEhQIHJlZHVjZWQgYnkgMjAuXCIsIChzaGVldCkgPT4gdHJ1ZSwgKHNoZWV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB9KV0sXHJcbiAgICAgICAgXSldLFxyXG5dKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJhY3RzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY3JlYXRlRnJlZWRvbSA9IGV4cG9ydHMuY3JlYXRlSW5rbGluZ1RhbmsgPSBleHBvcnRzLmNyZWF0ZUlua2xpbmdEeW5hbWl0ZSA9IGV4cG9ydHMuY3JlYXRlSW5rbGluZ1dhbm5hYmVCb3NzID0gZXhwb3J0cy5jcmVhdGVJbmtsaW5nQWJlcnJhbnQgPSBleHBvcnRzLmNyZWF0ZUlua2xpbmdEb2cgPSBleHBvcnRzLmNyZWF0ZUlua2xpbmcgPSB2b2lkIDA7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBhdHRhY2tfMSA9IHJlcXVpcmUoXCIuL2F0dGFja1wiKTtcclxuY29uc3Qgc2hlZXRfMSA9IHJlcXVpcmUoXCIuL3NoZWV0XCIpO1xyXG5mdW5jdGlvbiBjcmVhdGVJbmtsaW5nKCkge1xyXG4gICAgY29uc3QgaW5rU3ByYXkgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIHRpdGxlOiBcIkluayBTcHJheVwiLFxyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCxcclxuICAgICAgICBtYWluU3RhdDogY29uc3RhbnRzXzEuRFN0YXQuQ29uLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gYDxwPlVwb24gZGVhdGgsIHRoZSBpbmtsaW5nIHNwcmF5cyB2aXNjb3VzIGluayBhdCBhbGwgY3JlYXR1cmVzIHdpdGhpbiAxNSBmZWV0IG9mIGl0c2VsZi4gVGhlIHRhcmdldHNcclxuICAgICAgICAgICAgbXVzdCBzdWNjZWVkIG9uIGEgREMgJHthcmdzLmdldERjKCl9IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgYmxpbmRlZCB1bnRpbCB0aGUgZW5kIG9mIHRoZWlyIG5leHQgdHVybi48L3A+YDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGJpdGUgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIHRpdGxlOiBcIkJpdGVcIixcclxuICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkFjdGlvbixcclxuICAgICAgICBtYWluU3RhdDogY29uc3RhbnRzXzEuRFN0YXQuU3RyLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gYDxwPk1lbGVlIFdlYXBvbiBBdHRhY2s6ICR7YXJncy5nZXRUb0hpdFJvbGxhYmxlU3RyKHsgbmFtZTogXCJCaXRlXCIgfSl9LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gXHJcbiAgICAgICAgICAgIEhpdDogJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiQml0ZVwiKX0gcGx1cyAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJCbG90XCIpfSBhbmQgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiQmxvdE5ldXJhbFwiKX0uPC9wPmA7XHJcbiAgICAgICAgfSxcclxuICAgIH0pLmJpbmREYW1hZ2VzKHtcclxuICAgICAgICBleHBlY3RlZERhbWFnZTogMzIsXHJcbiAgICAgICAgYXNzaWduZWREYW1hZ2VzOiBhcmdzID0+IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCaXRlXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDQsIDFdLCBbRGljZV8xLkQxLCBhcmdzLmdldE1vZCgpXV0pXVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHVuYXNzaWduZWREYW1hZ2VSYXRpb3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCbG90XCIsIG5ldyBNYXAoW1tEaWNlXzEuRDgsIDFdXSldLFxyXG4gICAgICAgICAgICBbXCJCbG90TmV1cmFsXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDgsIDFdXSldXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZGFtYWdlVHlwZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCaXRlXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmddLFxyXG4gICAgICAgICAgICBbXCJCbG90XCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUG9pc29uXSxcclxuICAgICAgICAgICAgW1wiQmxvdE5ldXJhbFwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLk5ldXJhbF0sXHJcbiAgICAgICAgXSlcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5ldyBzaGVldF8xLkJ1ZmZlZFN0YXRTaGVldCh7XHJcbiAgICAgICAgbW9uc3Rlcl9pZDogXCJpbmtsaW5nX2luc2VjdXJpdHlcIixcclxuICAgICAgICB0aXRsZTogXCJJbmtsaW5nIChJbnNlY3VyaXR5KVwiLFxyXG4gICAgICAgIHNpemU6IGNvbnN0YW50c18xLkNyZWF0dXJlU2l6ZS5NZWRpdW0sXHJcbiAgICAgICAgc3VidGl0bGU6IFwiIElua2xpbmcoT296ZSksIFR5cGljYWxseSBDaGFvdGljIE5ldXRyYWxcIixcclxuICAgICAgICBzdGF0czogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5TdHIsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTMpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkRleCwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxMyldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDE0KV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5JbnQsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTYpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LldpcywgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxNSldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuQ2hhLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDEzKV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgYWM6IDEzLFxyXG4gICAgICAgIGFjRGVzYzogXCIoTmF0dXJhbCBBcm1vcilcIixcclxuICAgICAgICBiaW9sb2dpY2FsSHA6IDQwLFxyXG4gICAgICAgIGF0dGFja3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJpbmtTcHJheVwiLCBpbmtTcHJheV0sXHJcbiAgICAgICAgICAgIFtcImJpdGVcIiwgYml0ZV1cclxuICAgICAgICBdKSxcclxuICAgICAgICBjclZhbHVlOiBuZXcgY29uc3RhbnRzXzEuQ1JWYWx1ZSgyKSxcclxuICAgICAgICBzYXZlUHJvZmljaWVuY2llczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5Db24sIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YsIDBdXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBza2lsbFByb2ZpY2llbmNpZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFNraWxsLlN0ZWFsdGgsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCwgMF1dLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHNwZWVkczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5TcGVlZC5XYWxraW5nLCAzMF1cclxuICAgICAgICBdKSxcclxuICAgICAgICB2dWxuZXJhYmlsaXRpZXM6IG5ldyBTZXQoW1xyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkNvbGQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTGlnaHRuaW5nLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkJsdWRnZW9uaW5nLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHJlc2lzdGFuY2VzOiBuZXcgU2V0KFtcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5BY2lkLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkZpcmUsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmcsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuVGh1bmRlcixcclxuICAgICAgICBdKSxcclxuICAgICAgICBpbW11bml0aWVzOiBuZXcgU2V0KFtcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb24sXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpYyxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjb25kaXRpb25JbW11bml0aWVzOiBuZXcgU2V0KFtcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ29uZGl0aW9uLkJsaW5kZWQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5EZWFmZW5lZCxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ29uZGl0aW9uLkV4aGF1c3Rpb24sXHJcbiAgICAgICAgXSksXHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUlua2xpbmcgPSBjcmVhdGVJbmtsaW5nO1xyXG5mdW5jdGlvbiBjcmVhdGVJbmtsaW5nRG9nKCkge1xyXG4gICAgY29uc3QgbXVsdGlhdHRhY2sgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCxcclxuICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiPHA+VGhlIGlua2xpbmcgYXR0YWNrcyB0d2ljZSBvbiBhbiBhdHRhY2sgYWN0aW9uLjwvcD5cIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1haW5TdGF0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgdGl0bGU6IFwiTXVsdGlhdHRhY2tcIixcclxuICAgIH0pO1xyXG4gICAgY29uc3QgYml0ZSA9IG5ldyBhdHRhY2tfMS5CdWZmZWRJbnRlcm5hbEF0dGFjayh7XHJcbiAgICAgICAgdGl0bGU6IFwiQml0ZVwiLFxyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLFxyXG4gICAgICAgIG1haW5TdGF0OiBjb25zdGFudHNfMS5EU3RhdC5EZXgsXHJcbiAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgPHA+TWVsZWUgV2VhcG9uIEF0dGFjazogJHthcmdzLmdldFRvSGl0Um9sbGFibGVTdHIoeyBuYW1lOiBcIkJpdGVcIiB9KX0sIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBcclxuICAgICAgICAgICAgSGl0OiAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJCaXRlXCIpfSBwbHVzICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkJpdGVWZW5vbVwiKX08L3A+YDtcclxuICAgICAgICB9LFxyXG4gICAgfSkuYmluZERhbWFnZXMoe1xyXG4gICAgICAgIGV4cGVjdGVkRGFtYWdlOiAxMCxcclxuICAgICAgICBhc3NpZ25lZERhbWFnZXM6IGFyZ3MgPT4gbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkJpdGVcIiwgbmV3IE1hcChbW0RpY2VfMS5ENiwgMV0sIFtEaWNlXzEuRDEsIGFyZ3MuZ2V0TW9kKCldXSldXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgdW5hc3NpZ25lZERhbWFnZVJhdGlvczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkJpdGVWZW5vbVwiLCBuZXcgTWFwKFtbRGljZV8xLkQ0LCAxXV0pXVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGRhbWFnZVR5cGVzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiQml0ZVwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBpZXJjaW5nXSxcclxuICAgICAgICAgICAgW1wiQml0ZVZlbm9tXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUG9pc29uXSxcclxuICAgICAgICBdKVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbmV3IHNoZWV0XzEuQnVmZmVkU3RhdFNoZWV0KHtcclxuICAgICAgICBtb25zdGVyX2lkOiBcImlua2xpbmdfaW1wYXRpZW5jZVwiLFxyXG4gICAgICAgIHRpdGxlOiBcIklua2xpbmcgKEltcGF0aWVuY2UpXCIsXHJcbiAgICAgICAgc2l6ZTogY29uc3RhbnRzXzEuQ3JlYXR1cmVTaXplLlNtYWxsLFxyXG4gICAgICAgIHN1YnRpdGxlOiBcIiBJbmtsaW5nKEZpZW5kKSwgVHlwaWNhbGx5IENoYW90aWMgTmV1dHJhbFwiLFxyXG4gICAgICAgIHN0YXRzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LlN0ciwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxMSldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuRGV4LCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDE3KV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5Db24sIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTEpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkludCwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSg2KV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5XaXMsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTMpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkNoYSwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSg3KV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgYWM6IDEzLFxyXG4gICAgICAgIGFjRGVzYzogXCIoTmF0dXJhbCBBcm1vcilcIixcclxuICAgICAgICBiaW9sb2dpY2FsSHA6IDMyLFxyXG4gICAgICAgIGF0dGFja3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJiaXRlXCIsIGJpdGVdLFxyXG4gICAgICAgICAgICBbXCJtdWx0aWF0dGFja1wiLCBtdWx0aWF0dGFja10sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgY3JWYWx1ZTogbmV3IGNvbnN0YW50c18xLkNSVmFsdWUoMSksXHJcbiAgICAgICAgc2F2ZVByb2ZpY2llbmNpZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuRGV4LCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCAwXV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgc2tpbGxQcm9maWNpZW5jaWVzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTa2lsbC5BdGhsZXRpY3MsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YsIDBdXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTa2lsbC5BY3JvYmF0aWNzLCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCAwXV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgc3BlZWRzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLlNwZWVkLldhbGtpbmcsIDUwXVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHZ1bG5lcmFiaWxpdGllczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRmlyZSxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5MaWdodG5pbmcsXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgcmVzaXN0YW5jZXM6IG5ldyBTZXQoW1xyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkNvbGQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUG9pc29uLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWMsXHJcbiAgICAgICAgXSksXHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUlua2xpbmdEb2cgPSBjcmVhdGVJbmtsaW5nRG9nO1xyXG5mdW5jdGlvbiBjcmVhdGVJbmtsaW5nQWJlcnJhbnQoKSB7XHJcbiAgICBjb25zdCBpbmtTcGl0ID0gbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGA8cD5UaGUgaW5rbGluZyBzcGl0cyB2aXNjb3VzIGluayBhdCBvbmUgY3JlYXR1cmUgd2l0aGluIDYwIGZlZXQgb2YgaXRzZWxmLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBcclxuICAgICAgICAgICAgICAgICAgICBvbiBhIERDICR7YXJncy5nZXREYygpfSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBmYWlsdXJlLCB0aGV5IHRha2UgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiQmxvdFwiKX1cclxuICAgICAgICAgICAgICAgICAgICBhbmQgYXJlIEJsaW5kZWQgdW50aWwgdGhlIGVuZCBvZiB0aGVpciBuZXh0IHR1cm4uIE9uIHN1Y2Nlc3MsIHRoZXkgdGFrZSBoYWxmXHJcbiAgICAgICAgICAgICAgICAgICAgdGhlIHBvaXNvbiBkYW1hZ2UgYW5kIGFyZSBub3QgYmxpbmRlZC4gUmVnYXJkbGVzcyBvZiB0aGUgcm9sbCwgdGhleSB0YWtlICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkJsb3ROZXVyYWxcIil9LjwvcD5gO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sXHJcbiAgICAgICAgbWFpblN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LkNvbixcclxuICAgICAgICB0aXRsZTogXCJJbmsgU3BpdFwiXHJcbiAgICB9KS5iaW5kRGFtYWdlcyh7XHJcbiAgICAgICAgZXhwZWN0ZWREYW1hZ2U6IDUwLFxyXG4gICAgICAgIGFzc2lnbmVkRGFtYWdlczogYXJncyA9PiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiQmxvdFwiLCBuZXcgTWFwKFtbRGljZV8xLkQxLCBhcmdzLmdldE1vZChjb25zdGFudHNfMS5EU3RhdC5Db24pXV0pXSxcclxuICAgICAgICAgICAgW1wiQmxvdE5ldXJhbFwiLCBuZXcgTWFwKFtbRGljZV8xLkQxLCBhcmdzLmdldE1vZChjb25zdGFudHNfMS5EU3RhdC5JbnQpXV0pXVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHVuYXNzaWduZWREYW1hZ2VSYXRpb3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCbG90XCIsIG5ldyBNYXAoW1tEaWNlXzEuRDgsIDNdXSldLFxyXG4gICAgICAgICAgICBbXCJCbG90TmV1cmFsXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDgsIDFdXSldXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZGFtYWdlVHlwZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCbG90XCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUG9pc29uXSxcclxuICAgICAgICAgICAgW1wiQmxvdE5ldXJhbFwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWNdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBjaGFyZ2VkID0gbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGA8cD5UaGUgaW5rbGluZyBzcGl0cyB2aXNjb3VzIGluayBhdCBvbmUgY3JlYXR1cmUgd2l0aGluIDkwIGZlZXQgb2YgaXRzZWxmLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBcclxuICAgICAgICAgICAgICAgICAgICBvbiBhIERDICR7YXJncy5nZXREYyh7IHByb2Y6IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0IH0pfSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBmYWlsdXJlLCB0aGV5XHJcbiAgICAgICAgICAgICAgICAgICAgIHRha2UgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiQmxvdFwiKX1cclxuICAgICAgICAgICAgICAgICAgICBhbmQgYXJlIEJsaW5kZWQgdW50aWwgdGhlIGVuZCBvZiB0aGVpciBuZXh0IHR1cm4uIE9uIHN1Y2Nlc3MsIHRoZXkgdGFrZSBoYWxmXHJcbiAgICAgICAgICAgICAgICAgICAgdGhlIHBvaXNvbiBkYW1hZ2UgYW5kIGFyZSBub3QgYmxpbmRlZC4gUmVnYXJkbGVzcyBvZiB0aGUgcm9sbCwgdGhleSB0YWtlICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkJsb3ROZXVyYWxcIil9LiBcclxuICAgICAgICAgICAgICAgICAgICBUaGlzIGRhbWFnZSBpcyBuZXVyYWwgZGFtYWdlIGFuZCBjYW4gY2F1c2UgdGhlIHRhcmdldCB0byBiZSBTdHVubmVkLjwvcD5gO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sXHJcbiAgICAgICAgbWFpblN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LkludCxcclxuICAgICAgICB0aXRsZTogXCJDaGFyZ2VkIFNwaXRcIlxyXG4gICAgfSkuYmluZERhbWFnZXMoe1xyXG4gICAgICAgIGV4cGVjdGVkRGFtYWdlOiAxMDAsXHJcbiAgICAgICAgYXNzaWduZWREYW1hZ2VzOiBhcmdzID0+IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCbG90XCIsIG5ldyBNYXAoW1tEaWNlXzEuRDEsIGFyZ3MuZ2V0TW9kKGNvbnN0YW50c18xLkRTdGF0LkNvbildXSldLFxyXG4gICAgICAgICAgICBbXCJCbG90TmV1cmFsXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDEsIGFyZ3MuZ2V0TW9kKGNvbnN0YW50c18xLkRTdGF0LkludCldXSldXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgdW5hc3NpZ25lZERhbWFnZVJhdGlvczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkJsb3RcIiwgbmV3IE1hcChbW0RpY2VfMS5EOCwgMV1dKV0sXHJcbiAgICAgICAgICAgIFtcIkJsb3ROZXVyYWxcIiwgbmV3IE1hcChbW0RpY2VfMS5EOCwgM11dKV1cclxuICAgICAgICBdKSxcclxuICAgICAgICBkYW1hZ2VUeXBlczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkJsb3RcIiwgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb25dLFxyXG4gICAgICAgICAgICBbXCJCbG90TmV1cmFsXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpY10sXHJcbiAgICAgICAgXSksXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGNoYXJnaW5nID0gbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJUaGUgSW5rbGluZyBiZWdpbnMgY29uY2VudHJhdGluZyBmb3IgYSBiaWcgc2hvdC5cIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1haW5TdGF0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgdGl0bGU6IFwiQ2hhcmdpbmdcIlxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbmV3IHNoZWV0XzEuQnVmZmVkU3RhdFNoZWV0KHtcclxuICAgICAgICBtb25zdGVyX2lkOiBcImlua2xpbmdfZW52eVwiLFxyXG4gICAgICAgIHRpdGxlOiBcIklua2xpbmcgKEVudnkpXCIsXHJcbiAgICAgICAgc2l6ZTogY29uc3RhbnRzXzEuQ3JlYXR1cmVTaXplLk1lZGl1bSxcclxuICAgICAgICBzdWJ0aXRsZTogXCIgSW5rbGluZyhBYmVycmF0aW9uKSwgVHlwaWNhbGx5IENoYW90aWMgRXZpbFwiLFxyXG4gICAgICAgIHN0YXRzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LlN0ciwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxMyldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuRGV4LCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDExKV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5Db24sIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTYpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkludCwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxOSldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuV2lzLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDEzKV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5DaGEsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTUpXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBhYzogMTEsXHJcbiAgICAgICAgYWNEZXNjOiBcIihOYXR1cmFsIEFybW9yKVwiLFxyXG4gICAgICAgIGJpb2xvZ2ljYWxIcDogMTAwLFxyXG4gICAgICAgIGF0dGFja3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJpbmtTcGl0XCIsIGlua1NwaXRdLFxyXG4gICAgICAgICAgICBbXCJjaGFyZ2luZ1wiLCBjaGFyZ2luZ10sXHJcbiAgICAgICAgICAgIFtcImNoYXJnZWRcIiwgY2hhcmdlZF0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgY3JWYWx1ZTogbmV3IGNvbnN0YW50c18xLkNSVmFsdWUoNSksXHJcbiAgICAgICAgc2F2ZVByb2ZpY2llbmNpZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuSW50LCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCAwXV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5XaXMsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YsIDBdXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBza2lsbFByb2ZpY2llbmNpZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFNraWxsLlBlcmNlcHRpb24sIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCwgMF1dLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHNwZWVkczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5TcGVlZC5GbHlpbmcsIDIwXVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHZ1bG5lcmFiaWxpdGllczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTGlnaHRuaW5nLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlRodW5kZXIsXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgaW1tdW5pdGllczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUG9pc29uLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWMsXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgY29uZGl0aW9uSW1tdW5pdGllczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5Qcm9uZSxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ29uZGl0aW9uLkJsaW5kZWQsXHJcbiAgICAgICAgXSksXHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUlua2xpbmdBYmVycmFudCA9IGNyZWF0ZUlua2xpbmdBYmVycmFudDtcclxuZnVuY3Rpb24gY3JlYXRlSW5rbGluZ1dhbm5hYmVCb3NzKCkge1xyXG4gICAgY29uc3Qgc2xhbVRleHQgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gYDxwPk1lbGVlIFdlYXBvbiBBdHRhY2s6ICR7YXJncy5nZXRUb0hpdFJvbGxhYmxlU3RyKHsgbmFtZTogXCJTbGFtXCIsIHByb2Y6IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuTm9uZSB9KX0sIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gXHJcbiAgICAgICAgICAgICAgICAgICAgSGl0OiAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJTbGFtXCIpfSBwbHVzICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIlNsYW1WaWJlXCIpfS4gVGhlIHByaW1hcnlcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgbXVzdCBzdWNjZWVkIGEgREMgJHthcmdzLmdldERjKCl9IFN0ciBzYXZlIG9yIGZhbGwgcHJvbmUuIFRob3NlIHdpdGhpbiA1ZnQgb2YgdGhlIHByaW1hcnkgXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0IHRha2UgaGFsZiB0aGUgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBtdXN0IG1ha2UgYSBEQyAke2FyZ3MuZ2V0RGMoKX0gQ29uIHNhdmUgb3IgdGFrZSB0aGUgXHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bmRlciBkYW1hZ2UgdG9vLiBPbiBhIGZhaWwgb2YgMTAgb3IgbW9yZSwgdGhleSBhcmUgZGVhZmVuZWQgdW50aWwgYSBsb25nIHJlc3QuPGJyLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZW0+VGhlIGJlaGVtb3RoIGlua2xpbmcgc2xhbXMgYSBtaWdodHkgZmlzdCBpbnRvIHRoZSBncm91bmQsIGNydXNoaW5nIHRoZSBwb29yIHZpY3RpbSB3aG8gd2Fzbid0IFxyXG4gICAgICAgICAgICAgICAgICAgIGFibGUgdG8gcnVuIGF3YXkgaW4gdGltZSBhbmQgc2VuZGluZyB0aHVuZGVyb3VzIHNob2Nrd2F2ZXMgc2hha2luZyB0aG9zZSBhcm91bmQuPC9lbT48L3A+YDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLFxyXG4gICAgICAgIG1haW5TdGF0OiBjb25zdGFudHNfMS5EU3RhdC5TdHIsXHJcbiAgICAgICAgdGl0bGU6IFwiU2xhbVwiLFxyXG4gICAgfSkuYmluZERhbWFnZXMoe1xyXG4gICAgICAgIGFzc2lnbmVkRGFtYWdlczogYXJncyA9PiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiU2xhbVwiLCBuZXcgTWFwKFtbRGljZV8xLkQxLCBhcmdzLmdldE1vZCgpXV0pXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICB1bmFzc2lnbmVkRGFtYWdlUmF0aW9zOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiU2xhbVwiLCBuZXcgTWFwKFtbRGljZV8xLkQ4LCAzXV0pXSxcclxuICAgICAgICAgICAgW1wiU2xhbVZpYmVcIiwgbmV3IE1hcChbW0RpY2VfMS5EOCwgMV1dKV1cclxuICAgICAgICBdKSxcclxuICAgICAgICBkYW1hZ2VUeXBlczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIlNsYW1cIiwgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5CbHVkZ2VvbmluZ10sXHJcbiAgICAgICAgICAgIFtcIlNsYW1WaWJlXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuVGh1bmRlcl0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZXhwZWN0ZWREYW1hZ2U6IDExMCxcclxuICAgIH0pO1xyXG4gICAgY29uc3QganVtcFRleHQgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoXykge1xyXG4gICAgICAgICAgICByZXR1cm4gYDxwPkNhbiBqdW1wIHVwIHRvIDYwIGZ0IGFzIGEgYm9udXMgYWN0aW9uIC0gY2FuIGdyYXBwbGUgYSB0YXJnZXQgd2l0aGluIDUgZnQgb2YgbGFuZGluZyBvciB0YWtlb2ZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgYXMgcGFydCBvZiB0aGUgc2FtZSBhY3Rpb24uPC9wPmA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLFxyXG4gICAgICAgIG1haW5TdGF0OiBjb25zdGFudHNfMS5EU3RhdC5TdHIsXHJcbiAgICAgICAgdGl0bGU6IFwiSnVtcFwiLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCByZWFjdFRleHQgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoXykge1xyXG4gICAgICAgICAgICByZXR1cm4gYDxwPkNhbiBzbGFtIG9uY2UgYXMgYW4gb3Bwb3J0dW5pdHkgYXR0YWNrIHdoZW5ldmVyIGFuIGVuZW15IGNvbWVzIHdpdGhpbiByYW5nZS48L3A+YDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uUmVhY3Rpb24sXHJcbiAgICAgICAgbWFpblN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LlN0cixcclxuICAgICAgICB0aXRsZTogXCJQcmVwYXJlZFwiLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbmV3IHNoZWV0XzEuQnVmZmVkU3RhdFNoZWV0KHtcclxuICAgICAgICBtb25zdGVyX2lkOiBcImlua2xpbmdfZnVyeVwiLFxyXG4gICAgICAgIHRpdGxlOiBcIklua2xpbmcgKEZ1cnkpXCIsXHJcbiAgICAgICAgc2l6ZTogY29uc3RhbnRzXzEuQ3JlYXR1cmVTaXplLkh1Z2UsXHJcbiAgICAgICAgc3VidGl0bGU6IFwiIElua2xpbmcoQmVhc3QpLCBUeXBpY2FsbHkgQ2hhb3RpYyBOZXV0cmFsXCIsXHJcbiAgICAgICAgc3RhdHM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuU3RyLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDI0KV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5EZXgsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTMpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkNvbiwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgyNCldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuSW50LCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDcpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LldpcywgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSg4KV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5DaGEsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTMpXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBhYzogMTgsXHJcbiAgICAgICAgYWNEZXNjOiBcIihOYXR1cmFsIEFybW9yKVwiLFxyXG4gICAgICAgIGJpb2xvZ2ljYWxIcDogMTYwLFxyXG4gICAgICAgIGF0dGFja3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJzbGFtVGV4dFwiLCBzbGFtVGV4dF0sXHJcbiAgICAgICAgICAgIFtcImp1bXBUZXh0XCIsIGp1bXBUZXh0XSxcclxuICAgICAgICAgICAgW1wicmVhY3RUZXh0XCIsIHJlYWN0VGV4dF1cclxuICAgICAgICBdKSxcclxuICAgICAgICBjclZhbHVlOiBuZXcgY29uc3RhbnRzXzEuQ1JWYWx1ZSg5KSxcclxuICAgICAgICBzYXZlUHJvZmljaWVuY2llczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5EZXgsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YsIDBdXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBza2lsbFByb2ZpY2llbmNpZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFNraWxsLkF0aGxldGljcywgW2NvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0LCAwXV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU2tpbGwuQWNyb2JhdGljcywgW2NvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiwgMF1dLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHNwZWVkczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5TcGVlZC5XYWxraW5nLCA1MF1cclxuICAgICAgICBdKSxcclxuICAgICAgICB2dWxuZXJhYmlsaXRpZXM6IG5ldyBTZXQoW1xyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZyxcclxuICAgICAgICBdKSxcclxuICAgICAgICByZXNpc3RhbmNlczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQ29sZCxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb24sXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpYyxcclxuICAgICAgICBdKSxcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlSW5rbGluZ1dhbm5hYmVCb3NzID0gY3JlYXRlSW5rbGluZ1dhbm5hYmVCb3NzO1xyXG5mdW5jdGlvbiBjcmVhdGVJbmtsaW5nRHluYW1pdGUoKSB7XHJcbiAgICBjb25zdCBib29tVGV4dCA9IG5ldyBhdHRhY2tfMS5CdWZmZWRJbnRlcm5hbEF0dGFjayh7XHJcbiAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgPHA+VXBvbiBkZWF0aCBleHBsb2RlcyB0byBkZWFsICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkJvb21cIil9IHRvIHRhcmdldHMgd2l0aGluIDUgZnQuIFxyXG4gICAgICAgICAgICAgICAgICAgIE9uIGNvbWluZyBpbnRvIGNvbnRhY3Qgd2l0aCBpdHMgb3Bwb3NpdGUgZXhwbG9kZXMgdG8gZGVhbCAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJCaWdCb29tXCIpfSBcclxuICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIHRvIHRhcmdldHMgd2l0aGluIDIwZnQgYW5kIGhhbGYgZGFtYWdlIHRvIHRhcmdldHMgd2l0aGluIDQwZnQuPC9wPmA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsXHJcbiAgICAgICAgbWFpblN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LkRleCxcclxuICAgICAgICB0aXRsZTogXCJCb29tXCIsXHJcbiAgICB9KS5iaW5kRGFtYWdlcyh7XHJcbiAgICAgICAgYXNzaWduZWREYW1hZ2VzOiBfID0+IG5ldyBNYXAoW10pLFxyXG4gICAgICAgIHVuYXNzaWduZWREYW1hZ2VSYXRpb3M6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCb29tXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDIwLCAxXV0pXSxcclxuICAgICAgICAgICAgW1wiQmlnQm9vbVwiLCBuZXcgTWFwKFtbRGljZV8xLkQyMCwgMTJdXSldXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZGFtYWdlVHlwZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCb29tXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRm9yY2VdLFxyXG4gICAgICAgICAgICBbXCJCaWdCb29tXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRm9yY2VdLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGV4cGVjdGVkRGFtYWdlOiAyNzAsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGhhbGZMaWZlVGV4dCA9IG5ldyBhdHRhY2tfMS5CdWZmZWRJbnRlcm5hbEF0dGFjayh7XHJcbiAgICAgICAgY29udGVudEdlbmVyYXRvcihfKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgPHA+IERvZXNuJ3QgZGllIHRpbGwgYm90aCBvcHBvc2l0ZXMgZXhwbG9kZSwgaW5zdGVhZCBqdXN0IGVudGVycyBhIGRpZmZ1c2VkIHN0YXRlIHdpdGggaGFsdmVkXHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZW1lbnQgc3BlZWQuIElmIHRoZSBvcHBvc2l0ZXMgY29tZSBpbnRvIGNvbnRhY3QgYW5kIGF0IGxlYXN0IG9uZSBpcyBkaWZmdXNlZCwgZGFtYWdlIGRlYWx0XHJcbiAgICAgICAgICAgICAgICAgICAgaXMgaGFsZiB0aGUgcm9sbGVkIGRhbWFnZS48L3A+YDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCxcclxuICAgICAgICBtYWluU3RhdDogY29uc3RhbnRzXzEuRFN0YXQuRGV4LFxyXG4gICAgICAgIHRpdGxlOiBcIkhhbGYgTGl2ZXNcIixcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5ldyBzaGVldF8xLkJ1ZmZlZFN0YXRTaGVldCh7XHJcbiAgICAgICAgbW9uc3Rlcl9pZDogXCJpbmtsaW5nX2Fycm9nYW5jZVwiLFxyXG4gICAgICAgIHRpdGxlOiBcIklua2xpbmcgKEFycm9nYW5jZSlcIixcclxuICAgICAgICBzaXplOiBjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuVGlueSxcclxuICAgICAgICBzdWJ0aXRsZTogXCIgSW5rbGluZyhBYmVycmF0aW9uKSwgVHlwaWNhbGx5IE5ldXRyYWwgRXZpbFwiLFxyXG4gICAgICAgIHN0YXRzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LlN0ciwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxKV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5EZXgsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMjgpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkNvbiwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxMCldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuSW50LCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDEzKV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5XaXMsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTQpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkNoYSwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxMSldLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGFjOiAxOSxcclxuICAgICAgICBhY0Rlc2M6IFwiKE5hdHVyYWwgQXJtb3IpXCIsXHJcbiAgICAgICAgYmlvbG9naWNhbEhwOiAxOSxcclxuICAgICAgICBhdHRhY2tzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiYm9vbVRleHRcIiwgYm9vbVRleHRdLFxyXG4gICAgICAgICAgICBbXCJoYWxmTGlmZVRleHRcIiwgaGFsZkxpZmVUZXh0XVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGNyVmFsdWU6IG5ldyBjb25zdGFudHNfMS5DUlZhbHVlKDUpLFxyXG4gICAgICAgIHNhdmVQcm9maWNpZW5jaWVzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkludCwgW2NvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiwgMF1dLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuV2lzLCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCAwXV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5DaGEsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCwgMF1dLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHNraWxsUHJvZmljaWVuY2llczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU2tpbGwuUGVyY2VwdGlvbiwgW2NvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0LCAwXV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgc3BlZWRzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLlNwZWVkLkZseWluZywgMjBdXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgdnVsbmVyYWJpbGl0aWVzOiBuZXcgU2V0KFtcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Db2xkXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgaW1tdW5pdGllczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRmlyZSxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb24sXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpYyxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5MaWdodG5pbmcsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuVGh1bmRlcixcclxuICAgICAgICBdKSxcclxuICAgICAgICBjb25kaXRpb25JbW11bml0aWVzOiBuZXcgU2V0KFtcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ29uZGl0aW9uLlByb25lLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5Db25kaXRpb24uQmxpbmRlZCxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ29uZGl0aW9uLkZyaWdodGVuZWQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5DaGFybWVkLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5Db25kaXRpb24uR3JhcHBsZWQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5FeGhhdXN0aW9uLFxyXG4gICAgICAgIF0pLFxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVJbmtsaW5nRHluYW1pdGUgPSBjcmVhdGVJbmtsaW5nRHluYW1pdGU7XHJcbmZ1bmN0aW9uIGNyZWF0ZUlua2xpbmdUYW5rKCkge1xyXG4gICAgY29uc3QgdGF1bnRUZXh0ID0gbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICBjb250ZW50R2VuZXJhdG9yKF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGA8cD5PbmNlIGEgY3JlYXR1cmUgZW50ZXJzIHdpdGhpbiA2MCBmdCBvZiB0aGVtIG9yIHN0YXJ0cyB0aGVpciB0dXJuIGluIHRoYXQgYXJlYSBhbmQgY2FuIHNlZSB0aGVtXHJcbiAgICAgICAgICAgICAgICAgICAgdGhleSBtdXN0IG1ha2UgYSBEQyAyNCBDaGEgc2F2aW5nIHRocm93LiBPbiBmYWlsdXJlLCB0aGV5IGNhbiBvbmx5IGF0dGFjayB0aGlzIGNyZWF0dXJlIHVudGlsIGl0IFxyXG4gICAgICAgICAgICAgICAgICAgIGRpZXMuIElmIGl0IGdvZXMgb3V0IG9mIHJhbmdlLCB0aGV5IG11c3QgZGFzaCBvciBkbyB3aGF0ZXZlciB0aGV5IGNhbiB0byBhcHByb2FjaCBpdCBhcyBsb25nIGFzIHRoZXlcclxuICAgICAgICAgICAgICAgICAgICBhcmUgd2l0aGluIDEyMGZ0IG9mIGl0LiBBbnkgQW9FIHNwZWxsIG11c3QgYmUgc28gcGxhY2VkIHN1Y2ggdGhhdCB0aGlzIGNyZWF0dXJlIHRha2VzIHRoZSBtYXhpbXVtIFxyXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudCBvZiBkYW1hZ2UgcG9zc2libGUuIFRoZXkgY2FuIHJlcGVhdCB0aGlzIHNhdmUgYXQgdGhlIHN0YXJ0IG9mIHRoZWlyIHR1cm5zIHRvIGJyZWFrIG91dCBvZiBcclxuICAgICAgICAgICAgICAgICAgICB0aGUgdGF1bnQgZWZmZWN0LCBidXQgdGhlIERDIGluY3JlYXNlcyBieSAxIHdpdGggZWFjaCBmYWlsdXJlLjwvcD5gO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLFxyXG4gICAgICAgIG1haW5TdGF0OiBjb25zdGFudHNfMS5EU3RhdC5Db24sXHJcbiAgICAgICAgdGl0bGU6IFwiVGF1bnRcIixcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5ldyBzaGVldF8xLkJ1ZmZlZFN0YXRTaGVldCh7XHJcbiAgICAgICAgbW9uc3Rlcl9pZDogXCJpbmtsaW5nX3Nsb3RoXCIsXHJcbiAgICAgICAgdGl0bGU6IFwiSW5rbGluZyAoU2xvdGgpXCIsXHJcbiAgICAgICAgc2l6ZTogY29uc3RhbnRzXzEuQ3JlYXR1cmVTaXplLlNtYWxsLFxyXG4gICAgICAgIHN1YnRpdGxlOiBcIiBJbmtsaW5nKENvbnN0cnVjdCksIFR5cGljYWxseSBOZXV0cmFsXCIsXHJcbiAgICAgICAgc3RhdHM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuU3RyLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDI4KV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5EZXgsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMSldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDI4KV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5JbnQsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMildLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuV2lzLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDEzKV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5DaGEsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMTYpXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBhYzogMjIsXHJcbiAgICAgICAgYWNEZXNjOiBcIihOYXR1cmFsIEFybW9yKVwiLFxyXG4gICAgICAgIGJpb2xvZ2ljYWxIcDogMTIwLFxyXG4gICAgICAgIGF0dGFja3M6IG5ldyBNYXAoW1tcInRhdW50VGV4dFwiLCB0YXVudFRleHRdXSksXHJcbiAgICAgICAgY3JWYWx1ZTogbmV3IGNvbnN0YW50c18xLkNSVmFsdWUoNywgY29uc3RhbnRzXzEuUHJvZi5nZXQoNCkpLFxyXG4gICAgICAgIHNhdmVQcm9maWNpZW5jaWVzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LlN0ciwgW2NvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0LCAwXV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5Db24sIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCwgMF1dLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuSW50LCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQsIDBdXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LldpcywgW2NvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0LCAwXV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5DaGEsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCwgMF1dLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHNraWxsUHJvZmljaWVuY2llczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU2tpbGwuQXRobGV0aWNzLCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQsIDBdXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTa2lsbC5QZXJjZXB0aW9uLCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQsIDBdXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBzcGVlZHM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuU3BlZWQuV2Fsa2luZywgMTBdXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgdnVsbmVyYWJpbGl0aWVzOiBuZXcgU2V0KFtcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Gb3JjZSxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5UaHVuZGVyLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHJlc2lzdGFuY2VzOiBuZXcgU2V0KFtcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Db2xkLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLk5lY3JvdGljLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlJhZGlhbnQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQmx1ZGdlb25pbmcsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmcsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuU2xhc2hpbmcsXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgaW1tdW5pdGllczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQWNpZCxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5GaXJlLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZyxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb24sXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpYyxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5CbHVkZ2VvbmluZyxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5QaWVyY2luZyxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5TbGFzaGluZyxcclxuICAgICAgICBdKSxcclxuICAgICAgICBjb25kaXRpb25JbW11bml0aWVzOiBuZXcgU2V0KFtcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ29uZGl0aW9uLkV4aGF1c3Rpb24sXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5Qb2lzb25lZCxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ29uZGl0aW9uLlByb25lLFxyXG4gICAgICAgIF0pLFxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVJbmtsaW5nVGFuayA9IGNyZWF0ZUlua2xpbmdUYW5rO1xyXG5mdW5jdGlvbiBjcmVhdGVGcmVlZG9tKCkge1xyXG4gICAgY29uc3QgYW1waGliaW91cyA9IG5ldyBhdHRhY2tfMS5CdWZmZWRJbnRlcm5hbEF0dGFjayh7XHJcbiAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJGcmVlZG9tIGNhbiBicmVhdGhlIGluIGFpciBhbmQgd2F0ZXIuXCI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYWluU3RhdDogdW5kZWZpbmVkLFxyXG4gICAgICAgIHRpdGxlOiBcIkFtcGhpYmlvdXNcIlxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBsZWdlbmRhcnlSZXNpc3RhbmNlID0gbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsXHJcbiAgICAgICAgY29udGVudEdlbmVyYXRvcihhcmdzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIklmIEZyZWVkb20gZmFpbHMgYSBzYXZpbmcgdGhyb3csIHNoZSBjYW4gY2hvb3NlIHRvIFwiICtcclxuICAgICAgICAgICAgICAgIFwic3VjY2VlZCBpbnN0ZWFkLlwiO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWFpblN0YXQ6IHVuZGVmaW5lZCxcclxuICAgICAgICB0aXRsZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZVwiLFxyXG4gICAgICAgIHN1YnRpdGxlOiBcIigxIC8gZGF5KVwiLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBkdWFsTGlmZSA9IG5ldyBhdHRhY2tfMS5CdWZmZWRJbnRlcm5hbEF0dGFjayh7XHJcbiAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJTdGFydHMgdW5kZXIgdGhlIGJsZXNzaW5nIG9mIGxpZ2h0LiBXaGVuIHNoZSByZWFjaGVzIHplcm8gSFAgXCIgK1xyXG4gICAgICAgICAgICAgICAgXCJmb3IgdGhlIGZpcnN0IHRpbWUgcmV2aXZlcyBoZXJzZWxmIG92ZXIgdGhlIGNvdXJzZSBvZiAxKyBcIiArXHJcbiAgICAgICAgICAgICAgICBcInJvdW5kIGR1cmluZyB3aGljaCBzaGUgaXMgaW52dWxuZXJhYmxlIGFuZCBjYW5ub3QgYXR0YWNrLiBBdCBcIiArXHJcbiAgICAgICAgICAgICAgICBcImluaXRpYXRpdmUgY291bnQgemVybyBhZnRlciByZXZpdmluZywgc2hlIGdldHMgYSBmcmVlIHR1cm4uIFwiICtcclxuICAgICAgICAgICAgICAgIFwiQXQgdGhlIGVuZCBvZiB0aGF0IHR1cm4gbG9vc2VzIGludnVsbmVyYWJpbGl0eS4gU2hlIGZhbGxzIFwiICtcclxuICAgICAgICAgICAgICAgIFwidW5kZXIgdGhlIGJsZXNzaW5nIG9mIGRhcmtuZXNzIGluIGhlciBzZWNvbmQgZm9ybS5cIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1haW5TdGF0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgdGl0bGU6IFwiRHVhbGl0eSBvZiBMaWZlXCJcclxuICAgIH0pO1xyXG4gICAgY29uc3QgZnJlZUZsb3dpbmdJbmsgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCxcclxuICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiVGhlIG1vdmVtZW50IHNwZWVkIG9mIEZyZWVkb20gY2Fubm90IGJlIHJlZHVjZWQgaW4gYW55IHdheS5cIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1haW5TdGF0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgdGl0bGU6IFwiRnJlZWx5IEZsb3dpbmcgSW5rXCJcclxuICAgIH0pO1xyXG4gICAgY29uc3QgbXVsdGlhdHRhY2sgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCxcclxuICAgICAgICBjb250ZW50R2VuZXJhdG9yKGFyZ3MpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiPHA+VGhlIGlua2xpbmcgYXR0YWNrcyB0d2ljZSBvbiBhbiBhdHRhY2sgYWN0aW9uLjwvcD5cIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1haW5TdGF0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgdGl0bGU6IFwiTXVsdGlhdHRhY2tcIixcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaW5rU3dpcmwgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIGFjdGl2YXRpb246IGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gYChUaGlzIGFjdGlvbiBjYW4gb25seSBiZSB0YWtlbiBvbmNlIGluIGV2ZXJ5IHRocmVlIHJvdW5kc1xyXG4gICAgICAgICAgICBhdCB0aGUgc3RhcnQgb2YgRnJlZWRvbSdzIHR1cm4sIGFuZCBiZWZvcmUgc2hlIG1vdmVzKSBGcmVlZG9tXHJcbiAgICAgICAgICAgIHRhcmdldHMgdGhlIGNsb3Nlc3QgZnJpZW5kbHkgdW5pdCB3aXRoaW4gNjBmdCBvZiBoZXIuIElmIHRoZXJlIGFyZVxyXG4gICAgICAgICAgICB0d28gZnJpZW5kbHkgdW5pdHMgZXF1aWRpc3RhbnQsIHNoZSBcclxuICAgICAgICAgICAgY2hvb3NlcyB0aGUgb25lIHdpdGggbG93ZXIgSFAuIFRoYXQgdW5pdCBhbmQgYW55IG90aGVyIG5vbi1pbmtsaW5ncyBcclxuICAgICAgICAgICAgaW4gNSBmdCBvZiBpdCBhcmUgPHU+cmVzdHJhaW5lZDwvdT4gaW4gYW4gaW5rIHN3aXJsIGFuZCB0YWtlXHJcbiAgICAgICAgICAgIDx1PmNvbnRpbnVvdXMgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiaW5rU3dpcmxcIil9PC91PiBmb3JcclxuICAgICAgICAgICAgdHdvIHJvdW5kcy4gQXQgdGhlIHN0YXJ0IG9mIHRoZWlyIHR1cm5zLCB0aGV5IGNhbiBtYWtlIGEgREMgXHJcbiAgICAgICAgICAgICR7YXJncy5nZXREYyh7IHN0YXQ6IGNvbnN0YW50c18xLkRTdGF0LkNoYSwgcHJvZjogY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQgfSl9XHJcbiAgICAgICAgICAgIGF0aGVsZXRpY3MgY2hlY2sgdG8gZXNjYXBlIHRoZSBpbmsuIFRoZSBEQyByZWR1Y2VzIGJ5IG9uZSBhZnRlciBlYWNoXHJcbiAgICAgICAgICAgIGluc3RhbmNlIG9mIGRhbWFnZS4gQWxsaWVzIGNhbiBhdHRlbXB0IHRvIGRyYXcgdGhlbSBvdXQgYnkgbWFraW5nIFxyXG4gICAgICAgICAgICB0aGUgc2FtZSBjaGVjaywgYnV0IG9uIGZhaWx1cmUsIHRoZSBpbmsgZW52ZWxvcHMgdGhlbSB0b28uYDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1haW5TdGF0OiBjb25zdGFudHNfMS5EU3RhdC5DaGEsXHJcbiAgICAgICAgdGl0bGU6IFwiSW5rIFN3aXJsXCJcclxuICAgIH0pLmJpbmREYW1hZ2VzKHtcclxuICAgICAgICBhc3NpZ25lZERhbWFnZXMoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXCJpbmtTd2lybFwiLCBuZXcgTWFwKFtbRGljZV8xLkQxLCBhcmdzLmdldE1vZChjb25zdGFudHNfMS5EU3RhdC5DaGEpXV0pXVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhbWFnZVR5cGVzOiBuZXcgTWFwKFtbXCJpbmtTd2lybFwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkNvcnJvc2lvbl1dKSxcclxuICAgICAgICBleHBlY3RlZERhbWFnZTogMjUsXHJcbiAgICAgICAgdW5hc3NpZ25lZERhbWFnZVJhdGlvczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcImlua1N3aXJsXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDQsIDFdXSldXHJcbiAgICAgICAgXSlcclxuICAgIH0pO1xyXG4gICAgY29uc3QgbGVnZW5kYXJ5QWN0aW9ucyA9IG5ldyBhdHRhY2tfMS5CdWZmZWRJbnRlcm5hbEF0dGFjayh7XHJcbiAgICAgICAgYWN0aXZhdGlvbjogY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJGcmVlZG9tIGhhcyB0d28gbGVnZW5kYXJ5IGFjdGlvbnMuXCI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYWluU3RhdDogdW5kZWZpbmVkLFxyXG4gICAgICAgIHRpdGxlOiBcIkxlZ2VuZGFyeSBBY3Rpb25zXCIsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGJpdGUgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIHRpdGxlOiBcIkJpdGVcIixcclxuICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkxlZ2VuZGFyeUFjdGlvbixcclxuICAgICAgICBtYWluU3RhdDogY29uc3RhbnRzXzEuRFN0YXQuU3RyLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gYDxwPk1lbGVlIFdlYXBvbiBBdHRhY2s6ICR7YXJncy5nZXRUb0hpdFJvbGxhYmxlU3RyKHsgbmFtZTogXCJCaXRlXCIgfSl9LCByZWFjaCAzMCBmdC4sIG9uZSB0YXJnZXQuIFxyXG4gICAgICAgICAgICBIaXQ6ICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkJpdGVcIil9IHBsdXMgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiQml0ZVZlbm9tXCIpfTwvcD5gO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3VidGl0bGU6IFwiKENvc3QgMSlcIixcclxuICAgIH0pLmJpbmREYW1hZ2VzKHtcclxuICAgICAgICBleHBlY3RlZERhbWFnZTogbnVsbCxcclxuICAgICAgICBhc3NpZ25lZERhbWFnZXM6IGFyZ3MgPT4gbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcIkJpdGVcIiwgbmV3IE1hcChbW0RpY2VfMS5EMTAsIDJdLCBbRGljZV8xLkQxLCBhcmdzLmdldE1vZCgpXV0pXSxcclxuICAgICAgICAgICAgW1wiQml0ZVZlbm9tXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDYsIDNdXSldXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgZGFtYWdlVHlwZXM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCaXRlXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmddLFxyXG4gICAgICAgICAgICBbXCJCaXRlVmVub21cIiwgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5CaW9jaGVtaWNhbF0sXHJcbiAgICAgICAgXSlcclxuICAgIH0pO1xyXG4gICAgY29uc3QgYml0ZUEgPSBuZXcgYXR0YWNrXzEuQnVmZmVkSW50ZXJuYWxBdHRhY2soe1xyXG4gICAgICAgIHRpdGxlOiBcIkJpdGVcIixcclxuICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkFjdGlvbixcclxuICAgICAgICBtYWluU3RhdDogY29uc3RhbnRzXzEuRFN0YXQuU3RyLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gYDxwPk1lbGVlIFdlYXBvbiBBdHRhY2s6ICR7YXJncy5nZXRUb0hpdFJvbGxhYmxlU3RyKHsgbmFtZTogXCJCaXRlXCIgfSl9LCByZWFjaCAzMCBmdC4sIG9uZSB0YXJnZXQuIFxyXG4gICAgICAgICAgICBIaXQ6ICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkJpdGVcIil9IHBsdXMgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiQml0ZVZlbm9tXCIpfS4gQSB0YXJnZXQgaGl0IFxyXG4gICAgICAgICAgICBieSB0aGlzIGF0dGFjayBpcyBncmFwcGxlZCBpbiBoZXIgamF3IHRpbGwgdGhlIGVuZCBvZiBoZXIgdHVybi48L3A+YDtcclxuICAgICAgICB9XHJcbiAgICB9KS5iaW5kRGFtYWdlcyh7XHJcbiAgICAgICAgZXhwZWN0ZWREYW1hZ2U6IG51bGwsXHJcbiAgICAgICAgYXNzaWduZWREYW1hZ2VzOiBhcmdzID0+IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbXCJCaXRlXCIsIG5ldyBNYXAoW1tEaWNlXzEuRDEwLCAyXSwgW0RpY2VfMS5EMSwgYXJncy5nZXRNb2QoKV1dKV0sXHJcbiAgICAgICAgICAgIFtcIkJpdGVWZW5vbVwiLCBuZXcgTWFwKFtbRGljZV8xLkQ2LCAzXV0pXVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGRhbWFnZVR5cGVzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1wiQml0ZVwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBpZXJjaW5nXSxcclxuICAgICAgICAgICAgW1wiQml0ZVZlbm9tXCIsIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQmlvY2hlbWljYWxdLFxyXG4gICAgICAgIF0pXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGJyZWFrVGhlQ2hhaW5zID0gbmV3IGF0dGFja18xLkJ1ZmZlZEludGVybmFsQXR0YWNrKHtcclxuICAgICAgICBhY3RpdmF0aW9uOiBjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLFxyXG4gICAgICAgIGNvbnRlbnRHZW5lcmF0b3IoYXJncykge1xyXG4gICAgICAgICAgICByZXR1cm4gYEF0IHRoZSBlbmQgb2YgaGVyIHR1cm4sIEZyZWVkb20gaGFzIGEgMjUlICgzNSUgaW4gaGVyIHNlY29uZCBcclxuICAgICAgICAgICAgZm9ybSkgY2hhbmNlIHRvIGNhbGwgZm9ydGggaGVyIG1lbW9yaWVzIG9mIGNhcHRpdml0eS4gSWYgc2hlIGRvZXMgXHJcbiAgICAgICAgICAgIHN1Y2NlZWQsIGNoYWlucyB3aXRoIDc1SFAgKDEwNUhQIGluIGhlciBzZWNvbmQgZm9ybSkgYXBwZWFyIGFyb3VuZCBcclxuICAgICAgICAgICAgaGVyIGFuZCBzdG9wIGhlciBmcm9tIG1vdmluZyBvciBhdHRhY2tpbmcuIElmIHRoZSBjaGFpbnMgYXJlIG5vdCBcclxuICAgICAgICAgICAgZGVzdHJveWVkIHVudGlsIHRoZSBzdGFydCBvZiBoZXIgbmV4dC10by1uZXh0IHJvdW5kLCBzaGUgd2lsbCBmcmVlXHJcbiAgICAgICAgICAgIGhlcnNlbGYgYW5kIHJlbGVhc2UgYSBidXJzdCBvZiAke2FyZ3MuZ2V0RGFtYWdlUm9sbGFibGVTdHIoXCJmcmVlXCIpfVxyXG4gICAgICAgICAgICAobmVjcm90aWMgaW4gaGVyIHNlY29uZCBmb3JtKSB0byBhbGwgY3JlYXR1cmVzIHdpdGhpbiA2MCBmdCBvZiBoZXIuXHJcbiAgICAgICAgICAgIElmIHRoZSBjaGFpbnMgYXJlIGRlc3Ryb3llZCwgc2hlIGxvb3NlcyA1MCBIUCBpbnN0ZWFkIGFuZCBpcyBzdHVubmVkIFxyXG4gICAgICAgICAgICB1bnRpbCB0aGUgc3RhcnQgb2YgaGVyIHR1cm4uYDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1haW5TdGF0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgdGl0bGU6IFwiQnJlYWsgdGhlIENoYWluc1wiXHJcbiAgICB9KS5iaW5kRGFtYWdlcyh7XHJcbiAgICAgICAgZXhwZWN0ZWREYW1hZ2U6IDE1MCxcclxuICAgICAgICBkYW1hZ2VUeXBlczogbmV3IE1hcChbW1wiZnJlZVwiLCBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlJhZGlhbnRdXSksXHJcbiAgICAgICAgdW5hc3NpZ25lZERhbWFnZVJhdGlvczogbmV3IE1hcChbW1wiZnJlZVwiLCBuZXcgTWFwKFtbRGljZV8xLkQxMiwgMV1dKV1dKVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbmV3IHNoZWV0XzEuQnVmZmVkU3RhdFNoZWV0KHtcclxuICAgICAgICBtb25zdGVyX2lkOiBcImlua2xpbmdfZnJlZVwiLFxyXG4gICAgICAgIHRpdGxlOiBcIkZyZWVkb21cIixcclxuICAgICAgICBzdWJ0aXRsZTogXCJkcmFnb24sIHR5cGljYWxseSBDaGFvdGljIE5ldXRyYWxcIixcclxuICAgICAgICBzdGF0czogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5TdHIsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMjcpXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkRleCwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxNSldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDI1KV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5JbnQsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoMjApXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LldpcywgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSgxNSldLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuQ2hhLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKDI0KV0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgYWM6IDIxLFxyXG4gICAgICAgIGFjRGVzYzogXCJOYXR1cmFsIEFybW9yXCIsXHJcbiAgICAgICAgYXR0YWNrczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtcImFtcGhpYmlvdXNcIiwgYW1waGliaW91c10sXHJcbiAgICAgICAgICAgIFtcImxlZ2VuZFJlc1wiLCBsZWdlbmRhcnlSZXNpc3RhbmNlXSxcclxuICAgICAgICAgICAgW1wiZHVhbExpZmVcIiwgZHVhbExpZmVdLFxyXG4gICAgICAgICAgICBbXCJmcmVlSW5rXCIsIGZyZWVGbG93aW5nSW5rXSxcclxuICAgICAgICAgICAgW1wibXVsdGlhdHRhY2tcIiwgbXVsdGlhdHRhY2tdLFxyXG4gICAgICAgICAgICBbXCJpbmtTd2lybFwiLCBpbmtTd2lybF0sXHJcbiAgICAgICAgICAgIFtcImxlZ2VuZEFjdFwiLCBsZWdlbmRhcnlBY3Rpb25zXSxcclxuICAgICAgICAgICAgW1wiYml0ZVwiLCBiaXRlXSxcclxuICAgICAgICAgICAgW1wiYml0ZUFcIiwgYml0ZUFdLFxyXG4gICAgICAgICAgICBbXCJicmVha1RoZUNoYWluc1wiLCBicmVha1RoZUNoYWluc10sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgc2l6ZTogY29uc3RhbnRzXzEuQ3JlYXR1cmVTaXplLkh1Z2UsXHJcbiAgICAgICAgYmlvbG9naWNhbEhwOiAzMDAsXHJcbiAgICAgICAgY29uZGl0aW9uSW1tdW5pdGllczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5DaGFybWVkLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5Db25kaXRpb24uR3JhcHBsZWQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5GcmlnaHRlbmVkLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5Db25kaXRpb24uUG9pc29uZWQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5EZWFmZW5lZCxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQ29uZGl0aW9uLlJlc3RyYWluZWQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkNvbmRpdGlvbi5TdHVubmVkLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIGNyVmFsdWU6IG5ldyBjb25zdGFudHNfMS5DUlZhbHVlKDE1LCBjb25zdGFudHNfMS5Qcm9mLmdldCg2KSksXHJcbiAgICAgICAgaW1tdW5pdGllczogbmV3IFNldChbXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpYyxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb24sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgcmVzaXN0YW5jZXM6IG5ldyBTZXQoW1xyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkFjaWQsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuU2xhc2hpbmcsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmcsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQmx1ZGdlb25pbmcsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRhbWFnZVR5cGUuVGh1bmRlcixcclxuICAgICAgICBdKSxcclxuICAgICAgICBpc1RvdWdoOiB0cnVlLFxyXG4gICAgICAgIHNhdmVQcm9maWNpZW5jaWVzOiBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkRleCwgW2NvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiwgMF1dLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCAwXV0sXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU3RhdC5XaXMsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YsIDBdXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTdGF0LkNoYSwgW2NvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiwgMF1dLFxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIHNraWxsUHJvZmljaWVuY2llczogbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtjb25zdGFudHNfMS5EU2tpbGwuUGVyZm9ybWFuY2UsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCwgMF1dLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuRFNraWxsLkluc2lnaHQsIFtjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YsIDBdXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLkRTa2lsbC5QZXJjZXB0aW9uLCBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQsIDBdXSxcclxuICAgICAgICBdKSxcclxuICAgICAgICBzcGVlZHM6IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuU3BlZWQuV2Fsa2luZywgNDBdLFxyXG4gICAgICAgICAgICBbY29uc3RhbnRzXzEuU3BlZWQuU3dpbW1pbmcsIDQwXSxcclxuICAgICAgICAgICAgW2NvbnN0YW50c18xLlNwZWVkLkZseWluZywgODBdLFxyXG4gICAgICAgIF0pXHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUZyZWVkb20gPSBjcmVhdGVGcmVlZG9tO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmtsaW5ncy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwTW9uc3RlcnMgPSBleHBvcnRzLnNldHVwU3RhdFNoZWV0ID0gdm9pZCAwO1xyXG5jb25zdCBjb250cmFjdHNfMSA9IHJlcXVpcmUoXCIuL2NvbnRyYWN0c1wiKTtcclxuY29uc3QgaW5rbGluZ3NfMSA9IHJlcXVpcmUoXCIuL2lua2xpbmdzXCIpO1xyXG5jb25zdCBzaGVldF8xID0gcmVxdWlyZShcIi4vc2hlZXRcIik7XHJcbmZ1bmN0aW9uIHNldHVwU3RhdFNoZWV0KGNhdGVnb3J5LCBpZCwgdGl0bGUsIGltYWdlRmlsZU5hbWUsIHNoZWV0T2JqZWN0R2V0dGVyLCBmdWxsSW1nUGF0aCA9IGZhbHNlKSB7XHJcbiAgICAvLyBJcyBjcmVhdGVkIG9uIHRoZSBmaXJzdCBjYWxsLCBJRF9UT19TSEVFVF9HRU5FUkFUT1IgaXMgc2V0IG9ubHkgaGVyZS5cclxuICAgIGNvbnN0IGljb25DcmVhdGVkID0gc2hlZXRfMS5JRF9UT19TSEVFVF9HRU5FUkFUT1IuaGFzKGlkKTtcclxuICAgIHNoZWV0XzEuSURfVE9fU0hFRVRfR0VORVJBVE9SLnNldChpZCwgc2hlZXRPYmplY3RHZXR0ZXIpO1xyXG4gICAgaWYgKCFpY29uQ3JlYXRlZCkge1xyXG4gICAgICAgIC8vIENyZWF0ZSBpY29uLlxyXG4gICAgICAgIGNvbnN0IGlwID0gZnVsbEltZ1BhdGggP1xyXG4gICAgICAgICAgICBgPGltZyBjbGFzcz1cImljb25faW1nXCIgc3JjPVwiJHtpbWFnZUZpbGVOYW1lfVwiIGFsdD1cIltOVUxMXVwiPmAgOlxyXG4gICAgICAgICAgICBgPGltZyBjbGFzcz1cImljb25faW1nXCIgc3JjPVwiYXNzZXRzL2ltYWdlcy9tb2JfdG9rZW5zLyR7Y2F0ZWdvcnl9LyR7aW1hZ2VGaWxlTmFtZX1cIiBhbHQ9XCJbTlVMTF1cIj5gO1xyXG4gICAgICAgICQoXCIjYmVhc3RpYXJ5IC5zZWxlY3RhYmxlX3JhZGlvX2NvbnRhaW5lclwiKS5hcHBlbmQoYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VsZWN0YWJsZSByYWRpbyBjcmVhdHVyZVwiIFxyXG4gICAgICAgICAgICAgICAgIGRhdGEtY3JlYXR1cmUtaWQ9XCIke2lkfVwiXHJcbiAgICAgICAgICAgICAgICAgZGF0YS1tb2ItZ3JvdXA9XCIke2NhdGVnb3J5fVwiXHJcbiAgICAgICAgICAgICAgICAgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxyXG4gICAgICAgICAgICAgICAgJHtpcH1cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZSBzZWxlY3RlZF9vbmx5XCI+JHt0aXRsZX08L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+YCk7XHJcbiAgICB9XHJcbiAgICAvLyBUaHJlZSBjYXNlcyAtIGFjdGl2ZSBzaGVldCwgaGFzIHNoZWV0LCBkb2Vzbid0IGhhdmUgc2hlZXQuXHJcbiAgICBjb25zdCAkc2hlZXQgPSAkKGAjc3RhdF9zaGVldF8ke2lkfWApO1xyXG4gICAgaWYgKCRzaGVldC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEdXBsaWNhdGUgc2hlZXQgd2l0aCBpZCBzdGF0X3NoZWV0XyR7aWR9LmApO1xyXG4gICAgfVxyXG4gICAgaWYgKCRzaGVldC5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcuIFdoZW4gdGhlIHNoZWV0IGlzIGxhemlseSBjcmVhdGVkLCBpdCdsbCBiZSBhcyBwZXIgdGhlIG5ld1xyXG4gICAgICAgIC8vIGdlbmVyYXRvciBtZXRob2QuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaXNIaWRkZW4gPSAkc2hlZXQuaXMoXCI6aGlkZGVuXCIpO1xyXG4gICAgaWYgKGlzSGlkZGVuKSB7XHJcbiAgICAgICAgLy8gSnVzdCByZW1vdmUgdGhlIHNoZWV0LCB0aGUgbmV4dCB0aW1lIGl0cyBzZWxlY3RlZCBpdCdsbCBiZVxyXG4gICAgICAgIC8vIHJlZ2VuZXJhdGVkLlxyXG4gICAgICAgIGNvbnRyYWN0c18xLkdFTkVSQVRFRF9JRFMuZGVsZXRlKGlkKTtcclxuICAgICAgICAkc2hlZXQucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBXZSBoYXZlIHRvIHVwZGF0ZSB0aGUgc2hlZXQgbm93LCBzbyByZW1vdmUgdGhlIG9sZCBhbmQgZ2VuZXJhdGVcclxuICAgICAgICAvLyBhIG5ldy5cclxuICAgICAgICAkc2hlZXQucmVtb3ZlKCk7XHJcbiAgICAgICAgJChcIiNzaGVldF96b25lXCIpLmFwcGVuZChzaGVldE9iamVjdEdldHRlcigpLnJlbmRlcigpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnNldHVwU3RhdFNoZWV0ID0gc2V0dXBTdGF0U2hlZXQ7XHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZFxyXG4gKi9cclxuZnVuY3Rpb24gc2V0dXBNb25zdGVycygpIHtcclxuICAgIHNldHVwU3RhdFNoZWV0KFwiaW5rbGluZ1wiLCBcImlua2xpbmdfaW5zZWN1cml0eVwiLCBcIklua2xpbmc6IEluc2VjdXJpdHlcIiwgXCJpbnNlY3VyaXR5LnBuZ1wiLCBpbmtsaW5nc18xLmNyZWF0ZUlua2xpbmcpO1xyXG4gICAgc2V0dXBTdGF0U2hlZXQoXCJpbmtsaW5nXCIsIFwiaW5rbGluZ19pbXBhdGllbmNlXCIsIFwiSW5rbGluZzogSW1wYXRpZW5jZVwiLCBcImltcGF0aWVuY2UucG5nXCIsIGlua2xpbmdzXzEuY3JlYXRlSW5rbGluZ0RvZyk7XHJcbiAgICBzZXR1cFN0YXRTaGVldChcImlua2xpbmdcIiwgXCJpbmtsaW5nX2VudnlcIiwgXCJJbmtsaW5nOiBFbnZ5XCIsIFwiZW52eS5wbmdcIiwgaW5rbGluZ3NfMS5jcmVhdGVJbmtsaW5nQWJlcnJhbnQpO1xyXG4gICAgc2V0dXBTdGF0U2hlZXQoXCJpbmtsaW5nXCIsIFwiaW5rbGluZ19mdXJ5XCIsIFwiSW5rbGluZzogRnVyeVwiLCBcImZ1cnkucG5nXCIsIGlua2xpbmdzXzEuY3JlYXRlSW5rbGluZ1dhbm5hYmVCb3NzKTtcclxuICAgIHNldHVwU3RhdFNoZWV0KFwiaW5rbGluZ1wiLCBcImlua2xpbmdfc2xvdGhcIiwgXCJJbmtsaW5nOiBTbG90aFwiLCBcInNsb3RoLnBuZ1wiLCBpbmtsaW5nc18xLmNyZWF0ZUlua2xpbmdUYW5rKTtcclxuICAgIHNldHVwU3RhdFNoZWV0KFwiaW5rbGluZ1wiLCBcImlua2xpbmdfYXJyb2dhbmNlXCIsIFwiSW5rbGluZzogQXJyb2dhbmNlXCIsIFwiYXJyb2dhbmNlLnBuZ1wiLCBpbmtsaW5nc18xLmNyZWF0ZUlua2xpbmdEeW5hbWl0ZSk7XHJcbiAgICBzZXR1cFN0YXRTaGVldChcImlua2xpbmdcIiwgXCJpbmtsaW5nX2ZyZWVcIiwgXCJGcmVlZG9tXCIsIFwiZnJlZS5wbmdcIiwgaW5rbGluZ3NfMS5jcmVhdGVGcmVlZG9tKTtcclxuICAgIGNvbnN0ICRiZWFzdGlhcnkgPSAkKFwiI2JlYXN0aWFyeVwiKTtcclxuICAgICRiZWFzdGlhcnkub24oXCJjbGlja1wiLCBcIi5tb2JfZ3JvdXBfaWNvblwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgZ3JvdXBJZCA9ICQodGhpcykuZGF0YShcIm1vYkdyb3VwSWRcIik7XHJcbiAgICAgICAgJGJlYXN0aWFyeS5maW5kKFwiLmNyZWF0dXJlXCIpLmhpZGUoKTtcclxuICAgICAgICAkYmVhc3RpYXJ5LmZpbmQoYC5jcmVhdHVyZVtkYXRhLW1vYi1ncm91cD0ke2dyb3VwSWR9XWApLnNob3coKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIm1vYmdyb3VwIGNsaWNrZWRcIik7XHJcbiAgICB9KTtcclxuICAgICRiZWFzdGlhcnkub24oXCJjbGlja1wiLCBcIi5jcmVhdHVyZTpub3QoLmRpc2FibGVkKVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0dXJlSWQgPSAkKFwiI2JlYXN0aWFyeSAuY3JlYXR1cmUuc2VsZWN0ZWRcIikuZGF0YShcImNyZWF0dXJlSWRcIik7XHJcbiAgICAgICAgICAgICQoXCIuc3RhdF9zaGVldFwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIGlmICghc2hlZXRfMS5JRF9UT19TSEVFVF9HRU5FUkFUT1IuaGFzKGNyZWF0dXJlSWQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbnRyYWN0c18xLkdFTkVSQVRFRF9JRFMuaGFzKGNyZWF0dXJlSWQpKSB7XHJcbiAgICAgICAgICAgICAgICAkKGAjc3RhdF9zaGVldF8ke2NyZWF0dXJlSWR9YCkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoXCIjc2hlZXRfem9uZVwiKS5hcHBlbmQoc2hlZXRfMS5JRF9UT19TSEVFVF9HRU5FUkFUT1IuZ2V0KGNyZWF0dXJlSWQpKCkucmVuZGVyKCkpO1xyXG4gICAgICAgICAgICBjb250cmFjdHNfMS5HRU5FUkFURURfSURTLmFkZChjcmVhdHVyZUlkKTtcclxuICAgICAgICB9LCAxMCk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNldHVwTW9uc3RlcnMgPSBzZXR1cE1vbnN0ZXJzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0YW5jZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cFVJID0gdm9pZCAwO1xyXG4vKipcclxuICogU2V0dXBzIHVwIHRoZSAuZmFuY3lfcmFkaW8gZGl2cyB3aXRoaW4gdGhlIGRlcG9zaXRhcnkgc3VjaCB0aGF0IHRoZSAuc2VsZWN0ZWRcclxuICogY2xhc3MgaXMgYWRkZWQgdG8gd2hpY2hldmVyIHRoZSB1c2VyIGNsaWNrcy5cclxuICovXHJcbmZ1bmN0aW9uIHNldHVwVUkoKSB7XHJcbiAgICBjb25zdCAkZW5jbG9zaW5nRGl2ID0gJChgLnBhZ2VbZGF0YS1uYXYtaWQ9XCJiZWFzdGlhcnlcIl1gKTtcclxuICAgICRlbmNsb3NpbmdEaXYuZmluZChcIi5zZWxlY3RhYmxlX3JhZGlvX2NvbnRhaW5lciAuc2VsZWN0YWJsZS5yYWRpbyAuc2VsZWN0ZWRfb25seVwiKS5oaWRlKCk7XHJcbiAgICAkZW5jbG9zaW5nRGl2Lm9uKFwiY2xpY2tcIiwgXCIuc2VsZWN0YWJsZV9yYWRpb19jb250YWluZXJcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQodGhpcykuY2hpbGRyZW4oXCIuc2VsZWN0YWJsZS5yYWRpb1wiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICQodGhpcykuY2hpbGRyZW4oXCIuc2VsZWN0YWJsZS5yYWRpb1wiKS5maW5kKFwiLnNlbGVjdGVkX29ubHlcIikuaGlkZSgpO1xyXG4gICAgfSk7XHJcbiAgICAkZW5jbG9zaW5nRGl2Lm9uKFwiY2xpY2tcIiwgXCIuc2VsZWN0YWJsZS5yYWRpbzpub3QoLmRpc2FibGVkKVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgY29uc3QgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICAgIGlmICgkdGhpcy5oYXNDbGFzcyhcInNlbGVjdGVkXCIpKSB7XHJcbiAgICAgICAgICAgICR0aGlzLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgICR0aGlzLmZpbmQoXCIuc2VsZWN0ZWRfb25seVwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHRoaXMuc2libGluZ3MoXCIuc2VsZWN0YWJsZS5yYWRpb1wiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICR0aGlzLnNpYmxpbmdzKFwiLnNlbGVjdGFibGUucmFkaW9cIikuZmluZChcIi5zZWxlY3RlZF9vbmx5XCIpLmhpZGUoKTtcclxuICAgICAgICAkdGhpcy5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gJHRoaXMuZmluZChcIi5zZWxlY3RlZF9vbmx5XCIpLmZhZGVJbigxMDApLCAyMDApO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFVJID0gc2V0dXBVSTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V0dXBVSS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnRlc3QgPSBleHBvcnRzLkJ1ZmZlZFN0YXRTaGVldCA9IGV4cG9ydHMuU2hlZXRDb250cmFjdCA9IGV4cG9ydHMuU3RhdFNoZWV0ID0gZXhwb3J0cy5pc0NvbnRyYWN0U2VsZWN0ZWQgPSBleHBvcnRzLmNvbnRyYWN0SW5kZXggPSBleHBvcnRzLklEX1RPX1NIRUVUX0dFTkVSQVRPUiA9IHZvaWQgMDtcclxuY29uc3QgV3JhcF8xID0gcmVxdWlyZShcIi4uL3NpbXVsYXRpb24vYWN0aW9uL1dyYXBcIik7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG4vKipcclxuICogQGRlcHJlY2F0ZWRcclxuICovXHJcbmNsYXNzIEhwQmxvY2sge1xyXG4gICAgY29uc3RydWN0b3Ioc3RhdHMsIHNpemUsIGJpb2xvZ2ljYWxIcCwgYWR2ZW50dXJlckxldmVscyA9IG5ldyBNYXAoKSwgaXNUb3VnaCA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0cyA9IHN0YXRzO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XHJcbiAgICAgICAgdGhpcy5iaW9sb2dpY2FsSHAgPSBiaW9sb2dpY2FsSHA7XHJcbiAgICAgICAgdGhpcy5hZHZlbnR1cmVyTGV2ZWxzID0gYWR2ZW50dXJlckxldmVscztcclxuICAgICAgICB0aGlzLmlzVG91Z2ggPSBpc1RvdWdoO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbkhwUGVyRGljZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0cy5nZXQoY29uc3RhbnRzXzEuRFN0YXQuQ29uKS5tb2QgKyAodGhpcy5pc1RvdWdoID8gMiA6IDApO1xyXG4gICAgfVxyXG4gICAgZ2V0QWR2ZW50dXJlckhwKCkge1xyXG4gICAgICAgIGxldCBocCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBba2xhc3MsIGxldmVsXSBvZiB0aGlzLmFkdmVudHVyZXJMZXZlbHMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGhwICs9ICgoMCwgY29uc3RhbnRzXzEuRSkoY29uc3RhbnRzXzEuQ2xhc3NIaXREaWNlLmdldChrbGFzcykpICsgdGhpcy5jb25IcFBlckRpY2UpICogbGV2ZWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBocDtcclxuICAgIH1cclxuICAgIGdldCBocERpY2VDb3VudCgpIHtcclxuICAgICAgICBjb25zdCB0b3RhbEhwID0gdGhpcy5iaW9sb2dpY2FsSHAgKyB0aGlzLmdldEFkdmVudHVyZXJIcCgpO1xyXG4gICAgICAgIGNvbnN0IGhwUGVyRGljZSA9ICgwLCBjb25zdGFudHNfMS5FKSh0aGlzLnNpemUpICsgdGhpcy5jb25IcFBlckRpY2U7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodG90YWxIcCAvIGhwUGVyRGljZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5JRF9UT19TSEVFVF9HRU5FUkFUT1IgPSBuZXcgTWFwKCk7XHJcbmV4cG9ydHMuY29udHJhY3RJbmRleCA9IG5ldyBNYXAoKTtcclxuZnVuY3Rpb24gaXNDb250cmFjdFNlbGVjdGVkKGNvbnRyYWN0SWQpIHtcclxuICAgIHJldHVybiAkKGAjY29udHJhY3RzIC5jb250cmFjdFtkYXRhLWNvbnRyYWN0LXVpZD0ke2NvbnRyYWN0SWR9XWApXHJcbiAgICAgICAgLmhhc0NsYXNzKFwic2VsZWN0ZWRcIik7XHJcbn1cclxuZXhwb3J0cy5pc0NvbnRyYWN0U2VsZWN0ZWQgPSBpc0NvbnRyYWN0U2VsZWN0ZWQ7XHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZFxyXG4gKi9cclxuY2xhc3MgU3RhdFNoZWV0IHtcclxuICAgIGNvbnN0cnVjdG9yKHsgbW9uc3Rlcl9pZCwgdGl0bGUsIHN1YnRpdGxlLCBjclZhbHVlLCBzdGF0cywgc2l6ZSwgYmlvbG9naWNhbEhwLCBhYywgc3BlZWRzLCBhdHRhY2tzLCBzYXZlUHJvZmljaWVuY2llcyA9IG5ldyBNYXAoKSwgc2tpbGxQcm9maWNpZW5jaWVzID0gbmV3IE1hcCgpLCBhY0Rlc2MgPSBudWxsLCBhZHZlbnR1cmVyTGV2ZWxzID0gbmV3IE1hcCgpLCB2dWxuZXJhYmlsaXRpZXMgPSBuZXcgU2V0KCksIHJlc2lzdGFuY2VzID0gbmV3IFNldCgpLCBpbW11bml0aWVzID0gbmV3IFNldCgpLCBjb25kaXRpb25JbW11bml0aWVzID0gbmV3IFNldCgpLCBpc1RvdWdoID0gZmFsc2UgfSkge1xyXG4gICAgICAgIHRoaXMubW9uc3Rlcl9pZCA9IG1vbnN0ZXJfaWQ7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuc3VidGl0bGUgPSBzdWJ0aXRsZTtcclxuICAgICAgICB0aGlzLmNyVmFsdWUgPSBjclZhbHVlO1xyXG4gICAgICAgIHRoaXMuc3BlZWRzID0gc3BlZWRzO1xyXG4gICAgICAgIHRoaXMuc3RhdHMgPSBzdGF0cztcclxuICAgICAgICB0aGlzLl9hYyA9IGFjO1xyXG4gICAgICAgIHRoaXMuc2F2ZVByb2ZpY2llbmNpZXMgPSBzYXZlUHJvZmljaWVuY2llcztcclxuICAgICAgICB0aGlzLnNraWxsUHJvZmljaWVuY2llcyA9IHNraWxsUHJvZmljaWVuY2llcztcclxuICAgICAgICB0aGlzLmFjRGVzYyA9IGFjRGVzYztcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMudnVsbmVyYWJpbGl0aWVzID0gdnVsbmVyYWJpbGl0aWVzO1xyXG4gICAgICAgIHRoaXMucmVzaXN0YW5jZXMgPSByZXNpc3RhbmNlcztcclxuICAgICAgICB0aGlzLmltbXVuaXRpZXMgPSBpbW11bml0aWVzO1xyXG4gICAgICAgIHRoaXMuY29uZGl0aW9uSW1tdW5pdGllcyA9IGNvbmRpdGlvbkltbXVuaXRpZXM7XHJcbiAgICAgICAgdGhpcy5fYXR0YWNrcyA9IGF0dGFja3M7XHJcbiAgICAgICAgY29uc3QgaHBCbG9jayA9IG5ldyBIcEJsb2NrKHN0YXRzLCBjb25zdGFudHNfMS5TaXplVG9EaWNlLmdldChzaXplKSwgYmlvbG9naWNhbEhwLCBhZHZlbnR1cmVyTGV2ZWxzLCBpc1RvdWdoKTtcclxuICAgICAgICB0aGlzLl9ocERpY2UgPSBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuU2l6ZVRvRGljZS5nZXQodGhpcy5zaXplKSxcclxuICAgICAgICAgICAgICAgIGhwQmxvY2suaHBEaWNlQ291bnRcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgRGljZV8xLkQxLFxyXG4gICAgICAgICAgICAgICAgaHBCbG9jay5ocERpY2VDb3VudCAqIGhwQmxvY2suY29uSHBQZXJEaWNlXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICB2aXNpYmlsaXR5KHN0YXQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIGdldCBhY3Rpb25Db250ZW50QVBJKCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgLy8gVE9ETzogTEFOR1VBR0VTLCBTRU5TRVNcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBzcGVlZExpc3QgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtzcGVlZCwgdmFsdWVdIG9mIHRoaXMuc3BlZWRzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBzcGVlZExpc3QucHVzaChgJHtjb25zdGFudHNfMS5TcGVlZFtzcGVlZF19ICR7dmFsdWV9IGZ0LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdGF0TGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3Qgc3RhdCBvZiBbY29uc3RhbnRzXzEuRFN0YXQuU3RyLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5EZXgsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRTdGF0LkNvbixcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRFN0YXQuSW50LFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5XaXMsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRTdGF0LkNoYV0pIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdFZhbCA9IHRoaXMuc3RhdHMuZ2V0KHN0YXQpO1xyXG4gICAgICAgICAgICBzdGF0TGlzdC5wdXNoKGA8dGQ+JHtzdGF0VmFsLnN0YXR9ICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoc3RhdFZhbC5tb2QpfTwvdGQ+YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNhdmVMaXN0ID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBbc3RhdCwgc2F2ZV0gb2YgdGhpcy5jb21wdXRlU2F2ZXMoKS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgc2F2ZUxpc3QucHVzaChgJHtjb25zdGFudHNfMS5EU3RhdFtzdGF0XX0gJHsoMCwgV3JhcF8xLndyYXBSb2xsKShzYXZlKX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2tpbGxMaXN0ID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBbc2tpbGwsIG1vZF0gb2YgdGhpcy5jb21wdXRlU2tpbGxzKCkuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHNraWxsTGlzdC5wdXNoKGAke2NvbnN0YW50c18xLkRTa2lsbFtza2lsbF19ICR7KDAsIFdyYXBfMS53cmFwUm9sbCkobW9kKX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29udGVudExpc3QgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGFjdGl2YXRpb24gb2YgW2NvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCxcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkFjdGl2YXRpb24uQm9udXNBY3Rpb24sXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkFjdGl2YXRpb24uUmVhY3Rpb24sXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkFjdGl2YXRpb24uTGVnZW5kYXJ5QWN0aW9uLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5BY3RpdmF0aW9uLk15dGhpY0FjdGlvbl0pIHtcclxuICAgICAgICAgICAgY29uc3QgYXR0YWNrcyA9IHRoaXMuZ2V0QXR0YWNrc1dpdGhBY3RpdmF0aW9uKGFjdGl2YXRpb24pO1xyXG4gICAgICAgICAgICBpZiAoYXR0YWNrcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFjdGl2YXRpb24gIT0gY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50TGlzdC5wdXNoKGA8aDQgY2xhc3M9XCJzaGVldF9zZWN0aW9uX2hlYWRlclwiPiR7Y29uc3RhbnRzXzEuQWN0aXZhdGlvblthY3RpdmF0aW9uXX1zPC9oND5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0dGFjayBvZiBhdHRhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50TGlzdC5wdXNoKGA8ZGl2IGNsYXNzPVwic2hlZXRfY29udGVudFwiPiR7YXR0YWNrfTwvZGl2PmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZ1bG5lcmFiaWxpdGllcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgdiBvZiB0aGlzLnZ1bG5lcmFiaWxpdGllcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICB2dWxuZXJhYmlsaXRpZXMucHVzaChjb25zdGFudHNfMS5EYW1hZ2VUeXBlW3ZdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdnVsU3RyID0gdnVsbmVyYWJpbGl0aWVzLmxlbmd0aCA9PSAwID9cclxuICAgICAgICAgICAgXCJcIiA6XHJcbiAgICAgICAgICAgIGA8dHI+PHRkPkRhbWFnZSBWdWxuZXJhYmlsaXRpZXM8L3RkPjx0ZD4ke3Z1bG5lcmFiaWxpdGllcy5qb2luKFwiLCBcIil9PC90ZD48L3RyPmA7XHJcbiAgICAgICAgY29uc3QgcmVzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIHRoaXMucmVzaXN0YW5jZXMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgcmVzLnB1c2goY29uc3RhbnRzXzEuRGFtYWdlVHlwZVt2XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc1N0ciA9IHJlcy5sZW5ndGggPT0gMCA/XHJcbiAgICAgICAgICAgIFwiXCIgOlxyXG4gICAgICAgICAgICBgPHRyPjx0ZD5EYW1hZ2UgUmVzaXN0YW5jZXM8L3RkPjx0ZD4ke3Jlcy5qb2luKFwiLCBcIil9PC90ZD48L3RyPmA7XHJcbiAgICAgICAgY29uc3QgaW1tID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIHRoaXMuaW1tdW5pdGllcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICBpbW0ucHVzaChjb25zdGFudHNfMS5EYW1hZ2VUeXBlW3ZdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW1tU3RyID0gaW1tLmxlbmd0aCA9PSAwID9cclxuICAgICAgICAgICAgXCJcIiA6XHJcbiAgICAgICAgICAgIGA8dHI+PHRkPkRhbWFnZSBJbW11bml0aWVzPC90ZD48dGQ+JHtpbW0uam9pbihcIiwgXCIpfTwvdGQ+PC90cj5gO1xyXG4gICAgICAgIGNvbnN0IGNpbW0gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdGhpcy5jb25kaXRpb25JbW11bml0aWVzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIGNpbW0ucHVzaChjb25zdGFudHNfMS5Db25kaXRpb25bdl0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjaW1tU3RyID0gY2ltbS5sZW5ndGggPT0gMCA/XHJcbiAgICAgICAgICAgIFwiXCIgOlxyXG4gICAgICAgICAgICBgPHRyPjx0ZD5Db25kaXRpb24gSW1tdW5pdGllczwvdGQ+PHRkPiR7Y2ltbS5qb2luKFwiLCBcIil9PC90ZD48L3RyPmA7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdF9zaGVldFwiIGlkPVwic3RhdF9zaGVldF8ke3RoaXMubW9uc3Rlcl9pZH1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNoZWV0X2hlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlcl96b25lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwic2hlZXRfdGl0bGVcIj4ke3RoaXMudGl0bGV9PC9oMz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2hlZXRfc3VidGl0bGVcIj4ke2NvbnN0YW50c18xLkNyZWF0dXJlU2l6ZVt0aGlzLnNpemVdfSAke3RoaXMuc3VidGl0bGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJfem9uZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5Bcm1vciBDbGFzczwvdGQ+PHRkPiR7dGhpcy5fYWN9ICR7dGhpcy5hY0Rlc2N9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPkhpdCBQb2ludHM8L3RkPjx0ZD4ke01hdGgucm91bmQoKDAsIGNvbnN0YW50c18xLkUpKHRoaXMuaHBEaWNlKSl9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBSb2xsKSh0aGlzLmhwRGljZSl9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPlNwZWVkPC90ZD48dGQ+JHtzcGVlZExpc3Quam9pbihcIiwgXCIpfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyX3pvbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJzdGF0c190YWJsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRoPlNUUjwvdGg+PHRoPkRFWDwvdGg+PHRoPkNPTjwvdGg+PHRoPklOVDwvdGg+PHRoPldJUzwvdGg+PHRoPkNIQTwvdGg+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiR7c3RhdExpc3Quam9pbihcIlwiKX08L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJfem9uZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5TYXZpbmcgVGhyb3dzPC90ZD48dGQ+JHtzYXZlTGlzdC5qb2luKFwiIFwiKX08L3RkPjwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+U2tpbGxzPC90ZD48dGQ+JHtza2lsbExpc3Quam9pbihcIiBcIil9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPkNoYWxsZW5nZSBSYXRpbmc8L3RkPjx0ZD4ke3RoaXMuY3JWYWx1ZS5jcn08L3RkPjwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+UHJvZmljaWVuY3kgQm9udXM8L3RkPjx0ZD4ke3RoaXMucGIubW9kKCl9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAke3Z1bFN0cn0ke3Jlc1N0cn0ke2ltbVN0cn0ke2NpbW1TdHJ9XHJcbiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgJHtjb250ZW50TGlzdC5qb2luKFwiXCIpfVxyXG4gICAgICAgIDwvZGl2PmA7XHJcbiAgICB9XHJcbiAgICBnZXQgcGIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JWYWx1ZS5wcm9mO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF0dGFja3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F0dGFja3M7XHJcbiAgICB9XHJcbiAgICBnZXRBdHRhY2tzV2l0aEFjdGl2YXRpb24oYWN0aXZhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHIgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGF0dGFjayBvZiB0aGlzLl9hdHRhY2tzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRhY2suYWN0aXZhdGlvbiAhPSBhY3RpdmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhdHRhY2suYmluZFN0YXRzKHRoaXMpO1xyXG4gICAgICAgICAgICByLnB1c2goYXR0YWNrLmNyZWF0ZUNvbnRlbnQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfVxyXG4gICAgY29tcHV0ZVNhdmVzKCkge1xyXG4gICAgICAgIGNvbnN0IG0gPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBbc3RhdCwgW3NhdmVQcm9mLCBzYXZlQm9udXNdXSBvZiB0aGlzLnNhdmVQcm9maWNpZW5jaWVzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBtLnNldChzdGF0LCAobS5oYXMoc3RhdCkgPyBtLmdldChzdGF0KSA6IHRoaXMuc3RhdHMuZ2V0KHN0YXQpLm1vZCkgKyB0aGlzLnBiLm1vZChzYXZlUHJvZikgKyBzYXZlQm9udXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbTtcclxuICAgIH1cclxuICAgIGNvbXB1dGVTa2lsbHMoKSB7XHJcbiAgICAgICAgY29uc3QgbSA9IG5ldyBNYXAoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtza2lsbCwgW3NhdmVQcm9mLCBzYXZlQm9udXNdXSBvZiB0aGlzLnNraWxsUHJvZmljaWVuY2llcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdCA9IGNvbnN0YW50c18xLlN0YXRGb3JTa2lsbC5nZXQoc2tpbGwpO1xyXG4gICAgICAgICAgICBtLnNldChza2lsbCwgKG0uaGFzKHNraWxsKSA/IG0uZ2V0KHNraWxsKSA6IHRoaXMuc3RhdHMuZ2V0KHN0YXQpLm1vZCkgKyB0aGlzLnBiLm1vZChzYXZlUHJvZikgKyBzYXZlQm9udXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbTtcclxuICAgIH1cclxuICAgIGdldCBocERpY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hwRGljZTtcclxuICAgIH1cclxuICAgIG1vZChzdGF0KSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TdGF0U2hlZXQgPSBTdGF0U2hlZXQ7XHJcbi8qKlxyXG4gKiBAZGVwcmVjYXRlZFxyXG4gKi9cclxuY2xhc3MgU2hlZXRDb250cmFjdCB7XHJcbiAgICBjb25zdHJ1Y3RvcihyaXNrLCBpZCwgZGlzcGxheU5hbWUsIGltZ1BhdGgsIGRlc2MsIHNob3VsZEFwcGx5LCBtb2RpZnkpIHtcclxuICAgICAgICB0aGlzLnJpc2sgPSByaXNrO1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICB0aGlzLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XHJcbiAgICAgICAgdGhpcy5pbWdQYXRoID0gaW1nUGF0aDtcclxuICAgICAgICB0aGlzLmRlc2MgPSBkZXNjO1xyXG4gICAgICAgIHRoaXMuc2hvdWxkQXBwbHkgPSBzaG91bGRBcHBseTtcclxuICAgICAgICB0aGlzLm1vZGlmeSA9IG1vZGlmeTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJjb250cmFjdCBzZWxlY3RhYmxlIHJhZGlvIHJpc2ske3RoaXMucmlza31cIiBkYXRhLWNvbnRyYWN0LXVpZD1cIiR7dGhpcy5pZH1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiY29udHJhY3RfaWNvblwiIHNyYz1cImFzc2V0cy9pbWFnZXMvcmlzay8ke3RoaXMuaW1nUGF0aH1cIiBhbHQ9XCJbbnVsbF1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJhY3RfYm94XCI+PGRpdiBjbGFzcz1cImNvbnRyYWN0X3RpdGxlXCI+JHt0aGlzLmRpc3BsYXlOYW1lfTwvZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNoZWV0Q29udHJhY3QgPSBTaGVldENvbnRyYWN0O1xyXG4vKipcclxuICogQGRlcHJlY2F0ZWRcclxuICovXHJcbmNsYXNzIEJ1ZmZlZFN0YXRTaGVldCBleHRlbmRzIFN0YXRTaGVldCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuICAgIGdldCBocERpY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmhwRGljZTtcclxuICAgIH1cclxuICAgIGdldCBhdHRhY2tzKCkge1xyXG4gICAgICAgIHJldHVybiBzdXBlci5hdHRhY2tzO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgW2NvbnRyYWN0SWQsIGNvbnRyYWN0XSBvZiBleHBvcnRzLmNvbnRyYWN0SW5kZXguZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNDb250cmFjdFNlbGVjdGVkKGNvbnRyYWN0SWQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29udHJhY3Quc2hvdWxkQXBwbHkodGhpcykpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRyYWN0Lm1vZGlmeSh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3VwZXIucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgYWMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjO1xyXG4gICAgfVxyXG4gICAgc2V0IGFjKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2FjID0gdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXNpc3RhbmNlcztcclxuICAgIH1cclxuICAgIGdldCBzYXZlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zYXZlUHJvZmljaWVuY2llcztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJ1ZmZlZFN0YXRTaGVldCA9IEJ1ZmZlZFN0YXRTaGVldDtcclxuZnVuY3Rpb24gdGVzdCgpIHtcclxuICAgIC8vIGNvbnN0IGF0dGFjayA9IG5ldyBEREJBdHRhY2soe1xyXG4gICAgLy8gICAgIHByb2YgICAgICAgICAgICAgICAgICA6IDYsXHJcbiAgICAvLyAgICAgYWN0aXZhdGlvbiAgICAgICAgICAgIDogQWN0aXZhdGlvbi5BY3Rpb24sXHJcbiAgICAvLyAgICAgZXhwZWN0ZWREYW1hZ2UgICAgICAgIDogMTAwLFxyXG4gICAgLy8gICAgIG1haW5TdGF0ICAgICAgICAgICAgICA6IERTdGF0cy5TdHIsXHJcbiAgICAvLyAgICAgc3RhdHMgICAgICAgICAgICAgICAgIDogbmV3IE1hcChbXHJcbiAgICAvLyAgICAgICAgIFtEU3RhdHMuU3RyLCBuZXcgU3RhdFZhbHVlKDIyKV0sXHJcbiAgICAvLyAgICAgICAgIFtEU3RhdHMuRGV4LCBuZXcgU3RhdFZhbHVlKDEwKV0sXHJcbiAgICAvLyAgICAgICAgIFtEU3RhdHMuQ29uLCBuZXcgU3RhdFZhbHVlKDEwKV0sXHJcbiAgICAvLyAgICAgICAgIFtEU3RhdHMuSW50LCBuZXcgU3RhdFZhbHVlKDEwKV0sXHJcbiAgICAvLyAgICAgICAgIFtEU3RhdHMuV2lzLCBuZXcgU3RhdFZhbHVlKDEwKV0sXHJcbiAgICAvLyAgICAgICAgIFtEU3RhdHMuQ2hhLCBuZXcgU3RhdFZhbHVlKDE2KV0sXHJcbiAgICAvLyAgICAgXSksXHJcbiAgICAvLyAgICAgdGl0bGUgICAgICAgICAgICAgICAgIDogXCJHcmVhdHN3b3JkXCIsXHJcbiAgICAvLyAgICAgY29udGVudEdlbmVyYXRvciAgICAgIDogKGFyZ3M6IEF0dGFja0NvbnRlbnRBUEkpID0+IHtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIGA8cD48ZW0+TWVsZWUgV2VhcG9uIEF0dGFjazwvZW0+OiAke2FyZ3MuZ2V0VG9IaXRSb2xsYWJsZVN0cihcIkdyZWF0c3dvcmRcIixcclxuICAgIC8vICAgICAgICAgICAgIGFyZ3MuZ2V0VG9IaXQoYXJncy5tYWluU3RhdCkgKyBhcmdzLmdldE1vZChEU3RhdHMuQ2hhKSl9LFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIFJlYWNoIDEwZnQuLCBvbmUgdGFyZ2V0LiA8ZW0+SGl0PC9lbT46ICR7YXJncy5nZXREYW1hZ2VSb2xsYWJsZVN0cihcIkdyZWF0c3dvcmRCYXNlXCIpfS4gUGx1cyBhbiBhZGRpdGlvbmFsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiR3JlYXRzd29yZFRyYXVtYVwiKX0uIEFuIGFkZGl0aW9uYWwgJHthcmdzLmdldERhbWFnZVJvbGxhYmxlU3RyKFwiU2hyb3VkXCIpfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGlzIHRha2VuIGlmIHRoZSBuZWNyb3RpYyBzaHJvdWQgaXMgYWN0aXZlLiBBbHNvLCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBhIERDICR7YXJncy5nZXREYyhEU3RhdHMuU3RyKX1cclxuICAgIC8vICAgICAgICAgICAgICAgICBzYXZlIG9yIGZhbGwgcHJvbmUuPC9wPmA7XHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICBhc3NpZ25lZERhbWFnZXMgICAgICAgOiBhcmdzID0+IG5ldyBNYXAoW1xyXG4gICAgLy8gICAgICAgICBbXCJHcmVhdHN3b3JkQmFzZVwiLCBuZXcgTWFwKFtbRDYsIDJdLCBbRDEsIGFyZ3MuZ2V0TW9kKERTdGF0cy5TdHIpICsgYXJncy5nZXRNb2QoRFN0YXRzLkNoYSldXSldLFxyXG4gICAgLy8gICAgICAgICBbXCJHcmVhdHN3b3JkVHJhdW1hXCIsIG5ldyBNYXAoW1tEOCwgMl1dKV1cclxuICAgIC8vICAgICBdKSxcclxuICAgIC8vICAgICB1bmFzc2lnbmVkRGFtYWdlUmF0aW9zOiBuZXcgTWFwKFtcclxuICAgIC8vICAgICAgICAgW1wiR3JlYXRzd29yZFRyYXVtYVwiLCBuZXcgTWFwKFtbRDgsIDJdXSldLFxyXG4gICAgLy8gICAgICAgICBbXCJTaHJvdWRcIiwgbmV3IE1hcChbW0Q4LCAzXV0pXVxyXG4gICAgLy8gICAgIF0pLFxyXG4gICAgLy8gICAgIGRhbWFnZVR5cGVzICAgICAgICAgICA6IG5ldyBNYXAoW1xyXG4gICAgLy8gICAgICAgICBbXCJHcmVhdHN3b3JkQmFzZVwiLCBEYW1hZ2VUeXBlLlBpZXJjaW5nXSxcclxuICAgIC8vICAgICAgICAgW1wiR3JlYXRzd29yZFRyYXVtYVwiLCBEYW1hZ2VUeXBlLlBzeWNoaWNdLFxyXG4gICAgLy8gICAgICAgICBbXCJTaHJvdWRcIiwgRGFtYWdlVHlwZS5OZWNyb3RpY10sXHJcbiAgICAvLyAgICAgXSlcclxuICAgIC8vIH0pO1xyXG4gICAgLy8gYXR0YWNrLmdlbmVyYXRlQ29udGVudCgpO1xyXG4gICAgLy8gY29uc29sZS5hc3NlcnQoYXR0YWNrLmNvbnRlbnQgPT1cclxuICAgIC8vICAgICAgICAgICAgICAgIGA8cD48c3Ryb25nPjxlbT5HcmVhdHN3b3JkPC9lbT4uIDwvc3Ryb25nPjxlbT5NZWxlZSBXZWFwb24gQXR0YWNrPC9lbT46IFtyb2xsYWJsZV0rMTU7e1xyXG4gICAgLy8gICAgICAgICBcImRpY2VOb3RhdGlvblwiOiBcIjFkMjArMTVcIixcclxuICAgIC8vICAgICAgICAgXCJyb2xsVHlwZVwiOiAgICAgXCJ0byBoaXRcIixcclxuICAgIC8vICAgICAgICAgXCJyb2xsQWN0aW9uXCI6ICAgXCJHcmVhdHN3b3JkXCJcclxuICAgIC8vICAgICB9Wy9yb2xsYWJsZV0gdG8gaGl0LFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIFJlYWNoIDEwZnQuLCBvbmUgdGFyZ2V0LiA8ZW0+SGl0PC9lbT46IFtyb2xsYWJsZV0yZDYrOTt7XHJcbiAgICAvLyAgICAgICAgIFwiZGljZU5vdGF0aW9uXCI6ICAgXCIyZDYrOVwiLFxyXG4gICAgLy8gICAgICAgICBcInJvbGxUeXBlXCI6ICAgICAgIFwiZGFtYWdlXCIsXHJcbiAgICAvLyAgICAgICAgIFwicm9sbEFjdGlvblwiOiAgICAgXCJHcmVhdHN3b3JkQmFzZVwiLFxyXG4gICAgLy8gICAgICAgICBcInJvbGxEYW1hZ2VUeXBlXCI6IFwiUGllcmNpbmdcIlxyXG4gICAgLy8gICAgIH1bL3JvbGxhYmxlXSBQaWVyY2luZyBkYW1hZ2UuIFBsdXMgYW4gYWRkaXRpb25hbFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIFtyb2xsYWJsZV05ZDg7e1xyXG4gICAgLy8gICAgICAgICBcImRpY2VOb3RhdGlvblwiOiAgIFwiOWQ4XCIsXHJcbiAgICAvLyAgICAgICAgIFwicm9sbFR5cGVcIjogICAgICAgXCJkYW1hZ2VcIixcclxuICAgIC8vICAgICAgICAgXCJyb2xsQWN0aW9uXCI6ICAgICBcIkdyZWF0c3dvcmRUcmF1bWFcIixcclxuICAgIC8vICAgICAgICAgXCJyb2xsRGFtYWdlVHlwZVwiOiBcIlBzeWNoaWNcIlxyXG4gICAgLy8gICAgIH1bL3JvbGxhYmxlXSBQc3ljaGljIGRhbWFnZS4gQW4gYWRkaXRpb25hbCBbcm9sbGFibGVdMTBkODt7XHJcbiAgICAvLyAgICAgICAgIFwiZGljZU5vdGF0aW9uXCI6ICAgXCIxMGQ4XCIsXHJcbiAgICAvLyAgICAgICAgIFwicm9sbFR5cGVcIjogICAgICAgXCJkYW1hZ2VcIixcclxuICAgIC8vICAgICAgICAgXCJyb2xsQWN0aW9uXCI6ICAgICBcIlNocm91ZFwiLFxyXG4gICAgLy8gICAgICAgICBcInJvbGxEYW1hZ2VUeXBlXCI6IFwiTmVjcm90aWNcIlxyXG4gICAgLy8gICAgIH1bL3JvbGxhYmxlXSBOZWNyb3RpYyBkYW1hZ2VcclxuICAgIC8vICAgICAgICAgICAgICAgICBpcyB0YWtlbiBpZiB0aGUgbmVjcm90aWMgc2hyb3VkIGlzIGFjdGl2ZS4gQWxzbywgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgYSBEQyAyMFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNhdmUgb3IgZmFsbCBwcm9uZS48L3A+YCk7XHJcbiAgICAvL1xyXG4gICAgLy8gY3JlYXRlSW5rbGluZ0REQigpO1xyXG4gICAgLy8gY3JlYXRlSW5rbGluZ0RvZygpO1xyXG4gICAgLy8gY3JlYXRlSW5rbGluZ0FiZXJyYW50KCk7XHJcbiAgICAvLyBjcmVhdGVJbmtsaW5nV2FubmFiZUJvc3MoKTtcclxuICAgIC8vIGNyZWF0ZUlua2xpbmdEeW5hbWl0ZSgpO1xyXG4gICAgLy8gY3JlYXRlSW5rbGluZ1RhbmsoKTtcclxufVxyXG5leHBvcnRzLnRlc3QgPSB0ZXN0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGVldC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkF0dGl0dWRlSGFuZGxlciA9IHZvaWQgMDtcclxuY29uc3QgR2FtZVRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uL0dhbWVUaW1lc3RhbXBcIik7XHJcbmNvbnN0IFN0YW5kYXJkQnVmZmVyZWRBdHRpdHVkZUxpc3RfMSA9IHJlcXVpcmUoXCIuL1N0YW5kYXJkQnVmZmVyZWRBdHRpdHVkZUxpc3RcIik7XHJcbi8qKlxyXG4gKiAjIyBDb25jZXB0dWFsIENoYW5nZXNcclxuICogTGV0IG1lIGNvdmVyIGhvdyB0aGUgY29yZSBjb25jZXB0cyBhcmUgc3VwcG9ydGVkIHZpYSB0aGlzIGNsYXNzLlxyXG4gKlxyXG4gKiA8Yj5Gb3JnaXZlbmVzczwvYj48YnIvPlxyXG4gKiBBcyBjb21wYXJlZCB0byB2MSB3aGVyZSB0aGVyZSB3ZXJlIGZvcmdpdmVuZXNzIGJ1ZmZlcnMgZm9yIGV2ZXJ5IHJhdGluZyxcclxuICogd2hpY2ggd2FzIHdheSB0b28gZXhjZXNzaXZlIGFuZCByZXF1aXJlZCBtZSB0byB0aHJvdyBpbiBodWdlIHZhbHVlcyB0byB1bmRvXHJcbiAqIGFuIGV2ZW50LCBpbiB0aGlzIHRoZXJlIGFyZSBmb3JnaXZlbmVzcyBidWZmZXJzIGZvciBldmVyeSB6b25lIGN1dG9mZiwgYW5kXHJcbiAqIG9uZSBvbiB0aGUgY3VycmVudCByYXRpbmcgb25seS4gU28gc2F5IHNvbWVvbmUgaXMgYXQgcG9zaXRpdmUgNiBhbmQgdGhlXHJcbiAqIHByZXZpb3VzIHpvbmUgY3V0b2ZmcyBhcmUgMSBhbmQgNC4gU28gYSBuZWdhdGl2ZSBldmVudCB3b3VsZCBmaXJzdCBkZXBsZXRlXHJcbiAqIGZyb20gdGhlIHJhdGluZ1xyXG4gKiA2IGJ1ZmZlciwgdGhlbiBkZXBsZXRlIHRoZSB2YWx1ZSBzdWNoIHRoYXQgaXQgaXMgb24gdGhlIGN1dG9mZiBmb3IgcmF0aW5nIDQuXHJcbiAqIEFmdGVyIHRoYXQgYW5vdGhlciBidWZmZXIgaXMgZGVwbGV0ZWQgZmlyc3QgYmVmb3JlIHRoZSB2YWx1ZSBjb3VsZCBmYWxsIGZvclxyXG4gKiBjdXRvZmYgZm9yIHJhdGluZyAxLCBhbmQgc28gb24uXHJcbiAqXHJcbiAqIDxiPkZvcmdldGZ1bG5lc3MuPC9iPjxici8+XHJcbiAqIFRoaXMgc3RpbGwgcmV0YWlucyBldmVyeXRoaW5nIGl0IGhhZCBmcm9tIHYxLCBidXQgSSdtIGdvaW5nIHRvIGFkZCBhblxyXG4gKiBhbWJpZW50XHJcbiAqIGludGVyYWN0aW9uIHN1cHBvcnQgaGVyZSwgc2luY2Ugd2UncmUgZ29pbmcgdG8gYmUgZG9pbmcgYSBsb3Qgb2YgdGltZXNraXBzLlxyXG4gKiBTbyBpZiB0aGUgY2hhcmFjdGVyIGlzIG1pbGVzIGF3YXkgYW5kIGhhcyBubyBtZWFucyBvZiBpbnRlcmFjdGlvbiB3aXRoIHRoZVxyXG4gKiB0YXJnZXQgb2YgdGhpcyBBdHRpdHVkZUhhbmRsZXIsIGl0cyB2YWx1ZSB3b3VsZCBiZSB6ZXJvIGFuZCBkZWNheSB3b3VsZFxyXG4gKiBwcm9jZWVkIG5vcm1hbGx5IGFzIGluIHYxLiBCdXQgbGV0J3Mgc2F5IHRoZXkncmUgbGl2aW5nIHVuZGVyIHRoZSBzYW1lIHJvb2ZcclxuICogYW5kIGludGVyYWN0aW5nIHBvc2l0aXZlbHkgZXZlcnkgZGF5LiBUaGVyZSBpcyBubyByZWFzb24gZm9yZ2V0ZnVsbmVzc1xyXG4gKiBzaG91bGRcclxuICogYWN0IGluIHRoaXMgY2FzZSAoaW4gZmFjdCB3ZSBtaWdodCBldmVuIHNlZSBhIHBvc2l0aXZlIGF0dGl0dWRlIHJpc2UpLCBidXQgSVxyXG4gKiBjYW4ndCBwdXQgZG93biBhbiBldmVudCBpbiB0aGlzIGNhc2UuIE9uIHRoZSBvdGhlciBoYW5kLCBsZXQncyBzYXkgdGhlcmVcclxuICogbGl2aW5nIGluIG11dHVhbCB0ZW5zaW9uLCBldmVuIHRob3VnaCB0aGVyZSdzIG5vIGRpcmVjdCBpbnRlcmFjdGlvbiBldmVudHMsXHJcbiAqIGFueSBwb3NpdGl2ZSBmZWVsaW5ncyBzaG91bGQgZGVjbGluZSBmYXN0ZXIuIEN1cnJlbnRseSwgSSBwbGFuIHRvIGp1c3QgYWRkXHJcbiAqIHRoZSBhbWJpZW50IGludGVyYWN0aW9uIGFkZGl0aXZlbHkgd2l0aCB0aGUgZm9yZ2V0ZnVsbmVzcyAoYnV0IHRoaXMgd29uJ3RcclxuICogYmVjb21lIHplcm8gb24gYSB6b25lIGJvdW5kYXJ5KS4gVGhlIGNvbXBsaWNhdGlvbiwgaG93ZXZlciByZXN0cyBpbiBob3cgSVxyXG4gKiB3aWxsIHJlbmRlciB0aGlzLCBzaW5jZSB0aGlzIGluZm8gbmVlZHMgdG8gYmUgc2hvd24gdG8gdGhlIHBsYXllcnMuXHJcbiAqL1xyXG5jbGFzcyBBdHRpdHVkZUhhbmRsZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5idWZmZXJlZEF0dGl0dWRlID0gbmV3IFN0YW5kYXJkQnVmZmVyZWRBdHRpdHVkZUxpc3RfMS5TdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0KCk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgpO1xyXG4gICAgICAgIHRoaXMuYW1iaWVudEludGVyYWN0aW9uID0gMDtcclxuICAgIH1cclxuICAgIHRlc3RSZXNldCgpIHtcclxuICAgICAgICB0aGlzLmJ1ZmZlcmVkQXR0aXR1ZGUucmVzZXRSYXRpbmdzKCk7XHJcbiAgICB9XHJcbiAgICBpbmNyZW1lbnRUaW1lVG8oZmluYWxUaW1lKSB7XHJcbiAgICAgICAgaWYgKGZpbmFsVGltZS50b3RhbE1pbGxpcyA8IHRoaXMuY3VycmVudFRpbWUudG90YWxNaWxsaXMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG1vdmUgYmFja3dhcmRzIGluIHRpbWUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmb3JnZXRmdWxuZXNzID0gdGhpcy5mb3JnZXRmdWxuZXNzO1xyXG4gICAgICAgIGNvbnN0IGFtYmllbnQgPSB0aGlzLmFtYmllbnRJbnRlcmFjdGlvbjtcclxuICAgICAgICBjb25zdCBkZWNheSA9IGZvcmdldGZ1bG5lc3MgKyBhbWJpZW50O1xyXG4gICAgICAgIC8vIFdlIGRvIG5vdCBjcm9zcyB6b25lIGJvdW5kYXJpZXMgb25seSBpZiBhbWJpZW50IGludGVyYWN0aW9uIGlzIGxlc3NcclxuICAgICAgICAvLyB0aGFuIGZvcmdldGZ1bG5lc3MgYW5kIG9mIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXHJcbiAgICAgICAgY29uc3QgbmF0dXJhbERlY2F5ID0gTWF0aC5zaWduKGFtYmllbnQpICE9IE1hdGguc2lnbihmb3JnZXRmdWxuZXNzKSAmJlxyXG4gICAgICAgICAgICBNYXRoLmFicyhhbWJpZW50KSA8IE1hdGguYWJzKGZvcmdldGZ1bG5lc3MpO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyZWRBdHRpdHVkZS5hZGp1c3RWYWx1ZShkZWNheSAqIChmaW5hbFRpbWUudG90YWxEYXlzIC0gdGhpcy5jdXJyZW50VGltZS50b3RhbERheXMpLCBuYXR1cmFsRGVjYXksIChmaW5hbFRpbWUudG90YWxEYXlzIC0gdGhpcy5jdXJyZW50VGltZS50b3RhbERheXMpKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gZmluYWxUaW1lO1xyXG4gICAgfVxyXG4gICAgYWRkRXZlbnQoZXZlbnRWYWx1ZURlbHRhLCBldmVudFRpbWUpIHtcclxuICAgICAgICB0aGlzLmJ1ZmZlcmVkQXR0aXR1ZGUuYWRqdXN0VmFsdWUoZXZlbnRWYWx1ZURlbHRhKTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJlZEF0dGl0dWRlLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJhdGluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJlZEF0dGl0dWRlLnJhdGluZztcclxuICAgIH1cclxuICAgIGdldCB0aW1lc3RhbXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWU7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BdHRpdHVkZUhhbmRsZXIgPSBBdHRpdHVkZUhhbmRsZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF0dGl0dWRlSGFuZGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkJ1ZmZlcmVkQXR0aXR1ZGVMaXN0QmFzZSA9IHZvaWQgMDtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2NvbW1vblwiKTtcclxuY29uc3QgRHluYW1pY0J1ZmZlclNsb3RfMSA9IHJlcXVpcmUoXCIuL0R5bmFtaWNCdWZmZXJTbG90XCIpO1xyXG5jb25zdCBGaXhlZFNpemVTbG90XzEgPSByZXF1aXJlKFwiLi9GaXhlZFNpemVTbG90XCIpO1xyXG5jbGFzcyBCdWZmZXJlZEF0dGl0dWRlTGlzdEJhc2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5wb3NTbG90cyA9IFtdO1xyXG4gICAgICAgIHRoaXMubmVnU2xvdHMgPSBbXTtcclxuICAgICAgICB0aGlzLmR5bmFtaWNCdWZmZXIgPSBuZXcgRHluYW1pY0J1ZmZlclNsb3RfMS5EeW5hbWljQnVmZmVyU2xvdCgpO1xyXG4gICAgfVxyXG4gICAgcmVzZXRSYXRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuZHluYW1pY0J1ZmZlci5yZXNldCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnBvc1Nsb3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwb3NTbG90IG9mIHRoaXMucG9zU2xvdHMpIHtcclxuICAgICAgICAgICAgICAgIHBvc1Nsb3QucmVzZXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5lZ1Nsb3Qgb2YgdGhpcy5uZWdTbG90cykge1xyXG4gICAgICAgICAgICAgICAgbmVnU2xvdC5yZXNldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5leHRab25lSW5kZXggPSAwO1xyXG4gICAgICAgIGZvciAobGV0IHJhdGluZyA9IDE7IHJhdGluZyA8PSB0aGlzLm1heFJhdGluZzsgcmF0aW5nKyspIHtcclxuICAgICAgICAgICAgLy8gT25seSBhZnRlciB0aGUgZmlyc3QgcG9zaXRpdmUgc2xvdCBpcyBmaWxsZWQgZG8gd2UgZmlsbCB0aGUgZmlyc3RcclxuICAgICAgICAgICAgLy8gcG9zaXRpdmUgem9uZSBidWZmZXIuXHJcbiAgICAgICAgICAgIGNvbnN0IHJhdGluZ1Nsb3RTaXplID0gdGhpcy5nZXRWYWx1ZUNhcGFjaXR5T2ZSYXRpbmcocmF0aW5nKTtcclxuICAgICAgICAgICAgY29uc3Qgem9uZURlbHRhT2Zmc2V0ID0gdGhpcy5nZXRab25lRGVsdGFPZmZzZXQobmV4dFpvbmVJbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zU2xvdHMucHVzaChuZXcgRml4ZWRTaXplU2xvdF8xLkZpeGVkU2l6ZVNsb3QocmF0aW5nU2xvdFNpemUsIGZhbHNlLCAtem9uZURlbHRhT2Zmc2V0KSk7XHJcbiAgICAgICAgICAgIHRoaXMubmVnU2xvdHMucHVzaChuZXcgRml4ZWRTaXplU2xvdF8xLkZpeGVkU2l6ZVNsb3QoLXJhdGluZ1Nsb3RTaXplLCBmYWxzZSwgem9uZURlbHRhT2Zmc2V0KSk7XHJcbiAgICAgICAgICAgIGlmIChuZXh0Wm9uZUluZGV4IDwgdGhpcy56b25lQ3V0b2Zmcy5sZW5ndGggJiZcclxuICAgICAgICAgICAgICAgIHJhdGluZyA+PSB0aGlzLnpvbmVDdXRvZmZzW25leHRab25lSW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB6b25lQnVmZmVyU2xvdFNpemUgPSB0aGlzLmdldEJ1ZmZlckNhcGFjaXR5T2Zab25lKHRoaXMuem9uZUN1dG9mZnNbbmV4dFpvbmVJbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NTbG90cy5wdXNoKG5ldyBGaXhlZFNpemVTbG90XzEuRml4ZWRTaXplU2xvdCh6b25lQnVmZmVyU2xvdFNpemUsIHRydWUsIDApKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmVnU2xvdHMucHVzaChuZXcgRml4ZWRTaXplU2xvdF8xLkZpeGVkU2l6ZVNsb3QoLXpvbmVCdWZmZXJTbG90U2l6ZSwgdHJ1ZSwgMCkpO1xyXG4gICAgICAgICAgICAgICAgbmV4dFpvbmVJbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFB1dCBhbiAnaW5maW5pdGUnIHNpemUgc2xvdCBhdCB0aGUgZW5kIHNvIHRoYXQgd2UgZG9uJ3QgZXZlciBleGNlZWRcclxuICAgICAgICAvLyB0aGUgZmluYWwgcmF0aW5nLlxyXG4gICAgICAgIHRoaXMucG9zU2xvdHMucHVzaChuZXcgRml4ZWRTaXplU2xvdF8xLkZpeGVkU2l6ZVNsb3QoMHhmZmZmZmYsIGZhbHNlLCAwKSk7XHJcbiAgICAgICAgdGhpcy5uZWdTbG90cy5wdXNoKG5ldyBGaXhlZFNpemVTbG90XzEuRml4ZWRTaXplU2xvdCgtMHhmZmZmZmYsIGZhbHNlLCAwKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBkZWx0YSBUaGUgYW1vdW50IHRvIGFkanVzdC5cclxuICAgICAqIEBwYXJhbSBpc05hdHVhbERlY2F5IFdoZW4gdHJ1ZSwgdGhlIG1vdmVtZW50IGlzIGV4cGVjdGVkIHRvIGJlIHRvd2FyZHNcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgIHplcm8sIGFuZCB3ZSBkbyBub3QgY3Jvc3MgemVybyBvciBhIHpvbmUgYm91bmRhcnkuXHJcbiAgICAgKiBAcGFyYW0gZGF5cyBJZiBzcGVjaWZpZWQsIHRoZSBudW1iZXIgb2YgZGF5cyB0aGlzICh0aW1lc2tpcCkgYWRqdXN0bWVudFxyXG4gICAgICogICAgICAgICAgICAgc3BhbnMuXHJcbiAgICAgKi9cclxuICAgIGFkanVzdFZhbHVlKGRlbHRhLCBpc05hdHVhbERlY2F5ID0gZmFsc2UsIGRheXMpIHtcclxuICAgICAgICAvLyBCYXNpYyBzYW5pdHkgY2hlY2tzLlxyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHRoaXMucG9zU2xvdHNbMF0udmFsdWUgKiB0aGlzLm5lZ1Nsb3RzWzBdLnZhbHVlID09IDApO1xyXG4gICAgICAgIGlmIChkZWx0YSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRmlyc3QgZ2V0IHJpZCBvZiB0aGUgc2lnbnMuXHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdEaXJlY3Rpb24gPSBNYXRoLnNpZ24odGhpcy5wb3NTbG90c1swXS52YWx1ZSArIHRoaXMubmVnU2xvdHNbMF0udmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IGRlbHRhRGlyZWN0aW9uID0gTWF0aC5zaWduKGRlbHRhKTtcclxuICAgICAgICBjb25zdCBpc0luY3JlYXNpbmcgPSBleGlzdGluZ0RpcmVjdGlvbiAqIGRlbHRhRGlyZWN0aW9uID49IDA7XHJcbiAgICAgICAgbGV0IGZvcndhcmRTbG90cztcclxuICAgICAgICBsZXQgcmV2ZXJzZVNsb3RzO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0RpcmVjdGlvbiA+IDApIHtcclxuICAgICAgICAgICAgZm9yd2FyZFNsb3RzID0gdGhpcy5wb3NTbG90cztcclxuICAgICAgICAgICAgcmV2ZXJzZVNsb3RzID0gdGhpcy5uZWdTbG90cztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXhpc3RpbmdEaXJlY3Rpb24gPCAwKSB7XHJcbiAgICAgICAgICAgIGZvcndhcmRTbG90cyA9IHRoaXMubmVnU2xvdHM7XHJcbiAgICAgICAgICAgIHJldmVyc2VTbG90cyA9IHRoaXMucG9zU2xvdHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3J3YXJkU2xvdHMgPSBkZWx0YURpcmVjdGlvbiA+IDAgPyB0aGlzLnBvc1Nsb3RzIDogdGhpcy5uZWdTbG90cztcclxuICAgICAgICAgICAgcmV2ZXJzZVNsb3RzID0gZGVsdGFEaXJlY3Rpb24gPiAwID8gdGhpcy5uZWdTbG90cyA6IHRoaXMucG9zU2xvdHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEZpcnN0IGZpbGwvZW1wdHkgdGhlIGR5bmFtaWMgYnVmZmVyLCBhc3N1bWluZyB0aGlzIGlzbid0IG5hdHVyYWxcclxuICAgICAgICAvLyBkZWNheS5cclxuICAgICAgICBpZiAoIWlzTmF0dWFsRGVjYXkpIHtcclxuICAgICAgICAgICAgZGVsdGEgPSB0aGlzLmR5bmFtaWNCdWZmZXIuYWRqdXN0KGRlbHRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgbmF0dXJhbCBkZWNheSwgdGhlcmUncyB2ZXJ5IGxpdHRsZSBpbnRlcmFjdGlvbi4gSXRcclxuICAgICAgICAgICAgLy8gbWVhbnMgdGhlIGR5bmFtaWMgYnVmZmVyIHdvdWxkIGZpbGwgbmF0dXJhbGx5IGJpdC1ieS1iaXQuIFRoaXNcclxuICAgICAgICAgICAgLy8gZG9lc24ndCBhZmZlY3QgdGhlIGJ5IGF0IGFsbC5cclxuICAgICAgICAgICAgLy8gdG9kbzogd29yayBvbiB0aGlzIGJldHRlclxyXG4gICAgICAgICAgICBpZiAoZGF5cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5keW5hbWljQnVmZmVyLmFkanVzdChNYXRoLnNpZ24odGhpcy5keW5hbWljQnVmZmVyLnNpemUpICogZGF5cyAqIDAuMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgdGhpcyBpdHNlbGYgY29uc3VtZXMgYWxsIHRoZSBkZWx0YSwgZG8gbm90aGluZyBtb3JlLlxyXG4gICAgICAgIGlmIChkZWx0YSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzSW5jcmVhc2luZykge1xyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBoaWdoZXN0IG5vbi1mdWxsIGZvcndhcmQgc2xvdC5cclxuICAgICAgICAgICAgbGV0IHNsb3RJZHg7XHJcbiAgICAgICAgICAgIGZvciAoc2xvdElkeCA9IDA7IHNsb3RJZHggPCBmb3J3YXJkU2xvdHMubGVuZ3RoOyBzbG90SWR4KyspIHtcclxuICAgICAgICAgICAgICAgIGlmICghZm9yd2FyZFNsb3RzW3Nsb3RJZHhdLmlzRmlsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gTm93IGtlZXAgb24gZmlsbGluZyB1bnRpbCB3ZSBjYW4ndCBhbnltb3JlLiAoTm90ZSB0aGlzIGFwcHJvYWNoXHJcbiAgICAgICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgaGFuZGxlcyB6b25lIGJ1ZmZlcnMuKVxyXG4gICAgICAgICAgICBsZXQgZmlsbGVkU29tZXRoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGRlbHRhID0gZm9yd2FyZFNsb3RzW3Nsb3RJZHhdLmFkanVzdChkZWx0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvcndhcmRTbG90c1tzbG90SWR4XS5pc0ZpbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZmlsbGVkU29tZXRoaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHluYW1pY0J1ZmZlci5zaXplID0gdGhpcy5nZXREeW5hbWljQnVmZmVyU2l6ZUZvclJhdGluZyh0aGlzLnJhdGluZyk7XHJcbiAgICAgICAgICAgICAgICBzbG90SWR4Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZpbGxlZFNvbWV0aGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5keW5hbWljQnVmZmVyLnNpemUgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RHluYW1pY0J1ZmZlclNpemVGb3JSYXRpbmcodGhpcy5yYXRpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBoaWdoZXN0IG5vbi1lbXB0eSBmb3J3YXJkIHNsb3QuXHJcbiAgICAgICAgICAgIGxldCBzbG90SWR4O1xyXG4gICAgICAgICAgICBmb3IgKHNsb3RJZHggPSAwOyBzbG90SWR4IDwgZm9yd2FyZFNsb3RzLmxlbmd0aDsgc2xvdElkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9yd2FyZFNsb3RzW3Nsb3RJZHhdLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzbG90SWR4LS07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gTm93IGtlZXAgb24gZW1wdHlpbmcgdW50aWwgd2UgY2FuJ3QgYW55bW9yZS5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNsb3RJZHggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYXR1YWxEZWNheSAmJiBmb3J3YXJkU2xvdHNbc2xvdElkeF0uaXNCdWZmZXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgbW9yZSB0byBkbyBpZiB3ZSd2ZSByZWFjaGVkIGEgem9uZSBidWZmZXJcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbiBuYXR1cmFsIGRlY2F5LlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlbHRhID0gZm9yd2FyZFNsb3RzW3Nsb3RJZHhdLmFkanVzdChkZWx0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvcndhcmRTbG90c1tzbG90SWR4XS5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzbG90SWR4LS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSWYgd2Ugc3RpbGwgaGF2ZSBkZWx0YSBsZWZ0LCB0aGVuIGl0IG1lYW5zIHdlJ3ZlIGV4aGF1c3RlZCBhbGxcclxuICAgICAgICAgICAgLy8gZm9yd2FyZCBzbG90cy4gU3RhcnQgZmlsbGluZyB1cCB0aGUgcmV2ZXJzZSBvbmVzIHRoZW4uXHJcbiAgICAgICAgICAgIGlmICgoMCwgY29tbW9uXzEuRVEpKGRlbHRhLCAwKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KGZvcndhcmRTbG90c1swXS5pc0VtcHR5LCBcIk15IGxvZ2ljIGZhaWxlZCBiYWRseS5cIik7XHJcbiAgICAgICAgICAgIGlmIChpc05hdHVhbERlY2F5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOb3RoaW5nIG1vcmUgdG8gZG8gaWYgd2UndmUgcmVhY2hlZCB6ZXJvIGluIG5hdHVyYWwgZGVjYXkuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRmlsbCByZXZlcnNlIHNsb3RzIGFzIGFib3ZlLlxyXG4gICAgICAgICAgICBsZXQgZmlsbGVkU29tZXRoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNsb3RJZHggPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkZWx0YSA9IHJldmVyc2VTbG90c1tzbG90SWR4XS5hZGp1c3QoZGVsdGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXZlcnNlU2xvdHNbc2xvdElkeF0uaXNGaWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNsb3RJZHgrKztcclxuICAgICAgICAgICAgICAgIGZpbGxlZFNvbWV0aGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZpbGxlZFNvbWV0aGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5keW5hbWljQnVmZmVyLnNpemUgPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RHluYW1pY0J1ZmZlclNpemVGb3JSYXRpbmcodGhpcy5yYXRpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IHJhdGluZygpIHtcclxuICAgICAgICBjb25zdCBoYXZlUG9zVmFsdWVzID0gdGhpcy5wb3NTbG90c1swXS52YWx1ZSA+IDA7XHJcbiAgICAgICAgY29uc3QgaGF2ZU5lZ1ZhbHVlcyA9IHRoaXMubmVnU2xvdHNbMF0udmFsdWUgPCAwO1xyXG4gICAgICAgIGlmIChoYXZlTmVnVmFsdWVzICYmIGhhdmVQb3NWYWx1ZXMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYm90aCBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgYnVmZmVycyBmaWxsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaGF2ZU5lZ1ZhbHVlcyAmJiAhaGF2ZVBvc1ZhbHVlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2xvdHMgPSBoYXZlUG9zVmFsdWVzID8gdGhpcy5wb3NTbG90cyA6IHRoaXMubmVnU2xvdHM7XHJcbiAgICAgICAgbGV0IHNnbiA9IGhhdmVQb3NWYWx1ZXMgPyAxIDogLTE7XHJcbiAgICAgICAgbGV0IGZpbGxlZCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCByYXRpbmdWYWx1ZSBvZiBzbG90cykge1xyXG4gICAgICAgICAgICBpZiAoIXJhdGluZ1ZhbHVlLmlzRmlsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGV5IGZpbGwgYXMgYSBzdGFjaywgb25lIGxlc3MgdGhhbiBtYXggaW1wbGllcyBhbGwgdGhlIG9uZXNcclxuICAgICAgICAgICAgICAgIC8vIGFmdGVyIGl0IGFyZSB6ZXJvLlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJhdGluZ1ZhbHVlLmlzQnVmZmVyZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbGxlZCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2duICogZmlsbGVkO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIGxldCB0b3RhbCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCByYXRpbmdWYWx1ZSBvZiB0aGlzLnBvc1Nsb3RzKSB7XHJcbiAgICAgICAgICAgIGlmIChyYXRpbmdWYWx1ZS5pc0J1ZmZlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b3RhbCArPSByYXRpbmdWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHJhdGluZ1ZhbHVlLnZhbHVlIDwgcmF0aW5nVmFsdWUuc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCByYXRpbmdWYWx1ZSBvZiB0aGlzLm5lZ1Nsb3RzKSB7XHJcbiAgICAgICAgICAgIGlmIChyYXRpbmdWYWx1ZS5pc0J1ZmZlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b3RhbCArPSByYXRpbmdWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHJhdGluZ1ZhbHVlLnZhbHVlID4gcmF0aW5nVmFsdWUuc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvdGFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IGJ1ZmZlcmVkVmFsdWUoKSB7XHJcbiAgICAgICAgbGV0IHRvdGFsID0gdGhpcy5keW5hbWljQnVmZmVyLnZhbHVlO1xyXG4gICAgICAgIGZvciAoY29uc3QgcmF0aW5nVmFsdWUgb2YgdGhpcy5wb3NTbG90cykge1xyXG4gICAgICAgICAgICBpZiAoIXJhdGluZ1ZhbHVlLmlzQnVmZmVyZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvdGFsICs9IHJhdGluZ1ZhbHVlLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IHJhdGluZ1ZhbHVlIG9mIHRoaXMubmVnU2xvdHMpIHtcclxuICAgICAgICAgICAgaWYgKCFyYXRpbmdWYWx1ZS5pc0J1ZmZlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b3RhbCArPSByYXRpbmdWYWx1ZS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvdGFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IHpvbmUoKSB7XHJcbiAgICAgICAgY29uc3QgcmF0aW5nID0gdGhpcy5yYXRpbmc7XHJcbiAgICAgICAgY29uc3QgcmF0aW5nTWFnID0gTWF0aC5hYnMocmF0aW5nKTtcclxuICAgICAgICBjb25zdCByYXRpbmdTZ24gPSBNYXRoLnNpZ24ocmF0aW5nKTtcclxuICAgICAgICBsZXQgciA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCB6b25lQ3V0b2ZmIG9mIHRoaXMuem9uZUN1dG9mZnMpIHtcclxuICAgICAgICAgICAgaWYgKHpvbmVDdXRvZmYgPiByYXRpbmdNYWcpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHIrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHIgKiByYXRpbmdTZ247XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CdWZmZXJlZEF0dGl0dWRlTGlzdEJhc2UgPSBCdWZmZXJlZEF0dGl0dWRlTGlzdEJhc2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJ1ZmZlcmVkQXR0aXR1ZGVMaXN0QmFzZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkR5bmFtaWNCdWZmZXJTbG90ID0gdm9pZCAwO1xyXG5jb25zdCBTbG90QmFzZV8xID0gcmVxdWlyZShcIi4vU2xvdEJhc2VcIik7XHJcbi8qKlxyXG4gKiBUaGUgc2xvdCBmb3IgdGhlIGR5bmFtaWMgYnVmZmVyLiBJdCBoYXMgdmFyaWFibGUgc2l6ZSBhbmQgYXV0b2ZpbGxzIHdoZW5ldmVyXHJcbiAqIGl0IGlzIHJlc2l6ZWQuXHJcbiAqL1xyXG5jbGFzcyBEeW5hbWljQnVmZmVyU2xvdCBleHRlbmRzIFNsb3RCYXNlXzEuU2xvdEJhc2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih0cnVlLCAwKTtcclxuICAgICAgICB0aGlzLl9zaXplID0gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBpcyBuZXZlciBhdXRvZmlsbGVkLCBub3IgaXMgaXQgZXZlciBjcm9zc2VkLi4uXHJcbiAgICAgKiBJbnN0ZWFkLCB3aGVuIHNpemUgaXMgc2V0LCB0aGUgdmFsdWUgaXMgc2V0IHRvIG1hdGNoLlxyXG4gICAgICovXHJcbiAgICBnZXQgc2hvdWxkQXV0b2ZpbGxPbkZpcnN0Q3Jvc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgc3VwZXIucmVzZXQoKTtcclxuICAgICAgICB0aGlzLl9zaXplID0gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0dGVyIGZvciBzaXplLlxyXG4gICAgICovXHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0dGVyIGZvciBzaXplLiBEb2VzIGJhc2ljIHNhbml0eSBjaGVja2luZyBhbmQgc2V0cyB0aGUgdmFsdWUgdG8gZnVsbFxyXG4gICAgICogdG9vLlxyXG4gICAgICovXHJcbiAgICBzZXQgc2l6ZSh2YWx1ZSkge1xyXG4gICAgICAgIGlmICgodmFsdWUgLSB0aGlzLnZhbHVlKSAqICh0aGlzLnZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmV3IHNpemUgc2V0IGNhbm5vdCBmaXQgdGhlIGN1cnJlbnQgdmFsdWVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3NpemUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX3NpemU7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EeW5hbWljQnVmZmVyU2xvdCA9IER5bmFtaWNCdWZmZXJTbG90O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EeW5hbWljQnVmZmVyU2xvdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnRlc3RTbG90ID0gZXhwb3J0cy5GaXhlZFNpemVTbG90ID0gdm9pZCAwO1xyXG5jb25zdCBTbG90QmFzZV8xID0gcmVxdWlyZShcIi4vU2xvdEJhc2VcIik7XHJcbi8qKlxyXG4gKiBTbG90cyB3aXRoIGEgZml4ZWQgc2l6ZS4gVGhpcyBpcyBtb3N0IG9mIHRoZW0uXHJcbiAqL1xyXG5jbGFzcyBGaXhlZFNpemVTbG90IGV4dGVuZHMgU2xvdEJhc2VfMS5TbG90QmFzZSB7XHJcbiAgICAvKipcclxuICAgICAqIENUT1IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNpemUsIGlzQnVmZmVyZWQsIGRlbHRhTW9kaWZpZXIpIHtcclxuICAgICAgICBzdXBlcihpc0J1ZmZlcmVkLCBkZWx0YU1vZGlmaWVyKTtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRml4ZWRTaXplU2xvdCA9IEZpeGVkU2l6ZVNsb3Q7XHJcbmZ1bmN0aW9uIHRlc3RTbG90KCkge1xyXG4gICAgY29uc3Qgc2xvdCA9IG5ldyBGaXhlZFNpemVTbG90KDcsIGZhbHNlLCAtMik7XHJcbiAgICBjb25zdCByZXZTbG90ID0gbmV3IEZpeGVkU2l6ZVNsb3QoLTcsIGZhbHNlLCAyKTtcclxuICAgIGZ1bmN0aW9uIHRlc3RBc3NlcnQoc2xvdCwgYWRqdXN0bWVudCwgdmFsdWUsIGV4cGVjdGVkTGVmdG92ZXIpIHtcclxuICAgICAgICBjb25zdCBsZWZ0b3ZlciA9IHNsb3QuYWRqdXN0KGFkanVzdG1lbnQpO1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHNsb3QudmFsdWUgPT0gdmFsdWUsIGAoQWRqdSAke2FkanVzdG1lbnR9KSBFeHBlY3RlZCB2YWx1ZSAke3ZhbHVlfSwgR290ICR7c2xvdC52YWx1ZX1gKTtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChsZWZ0b3ZlciA9PSBleHBlY3RlZExlZnRvdmVyLCBgKEFkanUgJHthZGp1c3RtZW50fSkgRXhwZWN0ZWQgbGVmdG92ZXIgJHtleHBlY3RlZExlZnRvdmVyfSwgR290ICR7bGVmdG92ZXJ9YCk7XHJcbiAgICB9XHJcbiAgICB0ZXN0QXNzZXJ0KHNsb3QsIDAsIDAsIDApO1xyXG4gICAgdGVzdEFzc2VydChzbG90LCAtMSwgMCwgLTEpO1xyXG4gICAgdGVzdEFzc2VydChzbG90LCAxLCAwLCAwKTtcclxuICAgIHRlc3RBc3NlcnQoc2xvdCwgNSwgMywgMCk7XHJcbiAgICB0ZXN0QXNzZXJ0KHNsb3QsIC0xLCAwLCAwKTtcclxuICAgIHRlc3RBc3NlcnQoc2xvdCwgNywgNSwgMCk7XHJcbiAgICB0ZXN0QXNzZXJ0KHNsb3QsIDcsIDcsIDUpO1xyXG4gICAgdGVzdEFzc2VydChzbG90LCAtNiwgMCwgMSk7IC8vIGRvdWJsZSBjaGVjayBpZiB0aGlzIGlzIGdvb2QgYmVoYXZpb3VyLlxyXG4gICAgdGVzdEFzc2VydChyZXZTbG90LCAwLCAwLCAwKTtcclxuICAgIHRlc3RBc3NlcnQocmV2U2xvdCwgMSwgMCwgMSk7XHJcbiAgICB0ZXN0QXNzZXJ0KHJldlNsb3QsIC0xLCAwLCAwKTtcclxuICAgIHRlc3RBc3NlcnQocmV2U2xvdCwgLTUsIC0zLCAwKTtcclxuICAgIHRlc3RBc3NlcnQocmV2U2xvdCwgMSwgMCwgMCk7XHJcbiAgICB0ZXN0QXNzZXJ0KHJldlNsb3QsIC03LCAtNSwgMCk7XHJcbiAgICB0ZXN0QXNzZXJ0KHJldlNsb3QsIC03LCAtNywgLTUpO1xyXG4gICAgdGVzdEFzc2VydChyZXZTbG90LCA2LCAwLCAtMSk7XHJcbn1cclxuZXhwb3J0cy50ZXN0U2xvdCA9IHRlc3RTbG90O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaXhlZFNpemVTbG90LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTnBjSW50ZXJhY3Rpb25FdmVudCA9IHZvaWQgMDtcclxuY29uc3QgcGNJbmRleF8xID0gcmVxdWlyZShcIi4uL2RhdGEvcGNJbmRleFwiKTtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XHJcbmNvbnN0IFBvc2l0aXZlRW1vdGlvbl8xID0gcmVxdWlyZShcIi4vUG9zaXRpdmVFbW90aW9uXCIpO1xyXG5jbGFzcyBOcGNJbnRlcmFjdGlvbkV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHRpbWVzdGFtcCwgZGlzcGxheVRleHQsIGVmZmVjdHMsIGluc2lnaHRHYXRlID0gMTAsIHJlbmRlclJldmVyc2UgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9IGRpc3BsYXlUZXh0O1xyXG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IGVmZmVjdHM7XHJcbiAgICAgICAgdGhpcy5pbnNpZ2h0R2F0ZSA9IGluc2lnaHRHYXRlO1xyXG4gICAgICAgIHRoaXMucmVuZGVyUmV2ZXJzZSA9IHJlbmRlclJldmVyc2U7XHJcbiAgICB9XHJcbiAgICBnZW5lcmF0ZURPTVN0cmluZygpIHtcclxuICAgICAgICBsZXQgaW5zaWdodExvY2s7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zaWdodEdhdGUgPD0gMTApIHtcclxuICAgICAgICAgICAgaW5zaWdodExvY2sgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmluc2lnaHRHYXRlIDw9IHBjSW5kZXhfMS5QQVJUWV9JTlNJR0hUKSB7XHJcbiAgICAgICAgICAgIGluc2lnaHRMb2NrID0gYDxkaXYgY2xhc3M9J2luc2lnaHRfbG9jayBpbnNpZ2h0X2xvY2stLXVubG9ja2VkJz48aSBjbGFzcz1cImZhLXNvbGlkIGZhLXVubG9ja1wiPjwvaT4ke3RoaXMuaW5zaWdodEdhdGV9PC9kaXY+YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluc2lnaHRMb2NrID0gYDxkaXYgY2xhc3M9J2luc2lnaHRfbG9jayBpbnNpZ2h0X2xvY2stLWxvY2tlZCc+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1sb2NrXCI+PC9pPiR7dGhpcy5pbnNpZ2h0R2F0ZX08L2Rpdj5gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pbnNpZ2h0R2F0ZSA+IHBjSW5kZXhfMS5QQVJUWV9JTlNJR0hUKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz0nZXZlbnRfbGknPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aW1lc3RhbXBcIj48c3Bhbj4ke3RoaXMudGltZXN0YW1wLmdlbmVyYXRlRE9NU3RyaW5nKCl9PC9zcGFuPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlZmZlY3RfdGFnc1wiPiR7aW5zaWdodExvY2t9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVmZmVjdFRhZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtlbW90aW9uLCB2YWx1ZV0gb2YgdGhpcy5lZmZlY3RzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgem9uZSA9ICgwLCBjb21tb25fMS5nZXRab25lKSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCBlZmZlY3Q7XHJcbiAgICAgICAgICAgIGxldCBlbW90aW9uU3RyO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJSZXZlcnNlID09IG51bGwgfHwgdGhpcy5yZW5kZXJSZXZlcnNlLmdldChlbW90aW9uKSAhPSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QgPSB6b25lID09IC0xID8gXCItXCIgOiBcIitcIi5yZXBlYXQoTWF0aC5hYnMoem9uZSkpO1xyXG4gICAgICAgICAgICAgICAgZW1vdGlvblN0ciA9IHpvbmUgPCAtMSA/IFBvc2l0aXZlRW1vdGlvbl8xLk5lZ2F0aXZlRW1vdGlvbi5nZXQoZW1vdGlvbikgOiBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb25bZW1vdGlvbl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QgPSB6b25lID09IC0xID8gXCIrXCIgOiBcIi1cIi5yZXBlYXQoTWF0aC5hYnMoem9uZSkpO1xyXG4gICAgICAgICAgICAgICAgZW1vdGlvblN0ciA9IHpvbmUgPj0gLTEgPyBQb3NpdGl2ZUVtb3Rpb25fMS5OZWdhdGl2ZUVtb3Rpb24uZ2V0KGVtb3Rpb24pIDogUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uW2Vtb3Rpb25dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGVtb3Rpb25Db2xvciA9IHpvbmUgPCAwID8gUG9zaXRpdmVFbW90aW9uXzEuTmVnYXRpdmVFbW90aW9uLmdldChlbW90aW9uKSA6IFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbltlbW90aW9uXTtcclxuICAgICAgICAgICAgZWZmZWN0VGFncy5wdXNoKGA8ZGl2IGNsYXNzPVwiZWZmZWN0X3RhZ1wiIGRhdGEtZW1vPVwiJHtlbW90aW9uQ29sb3J9XCI+JHtlbW90aW9uU3RyfSR7ZWZmZWN0fTwvZGl2PmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9J2V2ZW50X2xpJz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGltZXN0YW1wXCI+PHNwYW4+JHt0aGlzLnRpbWVzdGFtcC5nZW5lcmF0ZURPTVN0cmluZygpfTwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGlzcGxheV90ZXh0XCI+JHt0aGlzLmRpc3BsYXlUZXh0fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlZmZlY3RfdGFnc1wiPiR7aW5zaWdodExvY2t9ICR7ZWZmZWN0VGFncy5qb2luKFwiXCIpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgfVxyXG4gICAgZ2V0IHN0YXJ0VGltZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5OcGNJbnRlcmFjdGlvbkV2ZW50ID0gTnBjSW50ZXJhY3Rpb25FdmVudDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TnBjSW50ZXJhY3Rpb25FdmVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqICMgTm90ZXMgb24gZW1vdGlvbiBtb2RlbGluZ1xyXG4gKlxyXG4gKiAjIyBPbiB0aGUgY2hvaWNlIG9mIGVtb3Rpb25zXHJcbiAqXHJcbiAqIDEuIFBvc2l0aXZlIGFuZCBOZWdhdGl2ZSBlbW90aW9ucyBvZiB0aGUgc2FtZSBudW1lcmljYWwgdmFsdWUgYXJlIG9wcG9zaXRlc1xyXG4gKiAgICB0aGF0ICh1c3VhbGx5KSBkb24ndCBjby1leGlzdC5cclxuICpcclxuICogMi4gVGhlIHplcm90aCBlbW90aW9uLCBhZmZlY3Rpb24sIGNhbiBiZSBjb25zaWRlcmVkIGEga2luZCBvZiBzdW1tYXJ5LiBJdFxyXG4gKiAgICBlbmNvbXBhc3NlcyB0aGUgZmVlbGluZyBvZiBoYXBwaW5lc3Mgd2hlbiBpbiBzb21lb25lJ3MgcHJlc2VuY2UuIE9mXHJcbiAqICAgIGFmZmVjdGlvbiwgd2FybXRoLCBmb25kbmVzcyBldGMuIEluIHRoaXMgbW9kZWwsIHdlIGFsc28gc3Vic3VtZSBlbXBhdGh5XHJcbiAqICAgIHdpdGhpbiB0aGlzIC0gc2luY2UgYWxsIHRocmVlIGVudnksIHBhcmFub2lhIGFuZCBjb250ZW1wdCB3b3VsZCBraWxsIGl0XHJcbiAqICAgIGFzIHRoZXkgcHJvbW90ZSBpdHMgb3Bwb3NpdGUsIGNvbGRuZXNzLiBUaGF0IGlzIGFsc28gdGhlIGNhc2Ugd2l0aCBsb3ZlXHJcbiAqICAgIGl0c2VsZi4gTm8gbW9kZWwgY2FuIGNhcHR1cmUgdGhlIGNvbXBsZXhpdHkgb2YgaHVtYW4gcmVsYXRpb25zaGlwc1xyXG4gKiAgICBwZXJmZWN0bHksIHNvIGFuIGFwcHJveGltYXRpb24gbXVzdCBzdWZmaWNlLiBBcHByb3hpbWF0aW5nIGVtcGF0aHkgYXMgYVxyXG4gKiAgICBmb3JtIG9mIGxvdmUsIGluIHRoZSBhYnNlbmNlIG9mIHN0cm9uZ2VyIGZlZWxpbmdzLlxyXG4gKlxyXG4gKiAgICArIEkgYW0gdW5jZXJ0YWluIGlmIGFmZmVjdGlvbiBlbWVyZ2VzIGluIGFuIGFic2VuY2Ugb2YgZ3JhdGl0dWRlLCB0cnVzdFxyXG4gKiBvclxyXG4gKiAgICAgIHJlc3BlY3QgLSBidXQgY2FuIG1heWJlIGNvbnNpZGVyIGEgbGlnaHQtaGVhcnRlZCBwZXJzb24gZmVlbGluZ1xyXG4gKiBwbGVhc2FudFxyXG4gKiAgICAgIGZvciBhIGpvdmlhbCBjaGFyYWN0ZXIgZXZlbiBpbiB0aGUgYWJzZW5jZSBvZiBhbGwgdGhhdC4gT3IgbWF5YmUgYVxyXG4gKiBncmF2ZVxyXG4gKiAgICAgIHBlcnNvbiBmb3Igc29tZW9uZSB3aG8gaGFzIGJlZW4gc3VmZmVyaW5nPyBPciBldmVuIGEgZ3JhdmUgcGVyc29uIGZvciBhXHJcbiAqICAgICAgam92aWFsIGNoYXJhY3Rlciwgd2h5IG5vdC4gVGhpcyBraW5kIG9mIGRvZXMgZmFsbCBpbnRvIHRoZSBicmFja2V0cyBvZlxyXG4gKiAgICAgIHJlc3BlY3Qgb3IgZW1wYXRoeSB0aG91Z2guIEZvciB0aGUgc2FrZSBvZiBlbXBhdGh5LCBJJ2xsIHNheSB0aGUgYmFzZVxyXG4gKiAgICAgIG1ldHJpYyB0b28gY2FuIGJlIGRpcmVjdGx5IG1vZGlmaWVkLCB0aG91Z2ggaXQgc2hvdWxkIGJlIHJhcmUuXHJcbiAqXHJcbiAqIDMuIFVubGlrZSB0aGVzZSwgZW1vdGlvbnMgbGlrZSByZXNwZWN0IGFuZCBlbnZ5IGNhbiBjby1leGlzdCBmb3IgYSB3aGlsZVxyXG4gKiAgICBiZWZvcmUgb25lIHN1ZmZvY2F0ZXMgdGhlIG90aGVyLiBMaWtld2lzZSwgcmVzcGVjdCBhbmQgZmVhci4gT3IgZXZlbiBzYXlcclxuICogICAgZW52eSBhbmQgdHJ1c3QuXHJcbiAqXHJcbiAqIDQuIE9uIHRoYXQgbm90ZSwgZmVhciBpcyBjb25zaWRlcmVkIGEgcGFydCBvZiBwYXJhbm9pYSwgaS5lLiB0aGUgZm9ybSB3aGljaFxyXG4gKiBhXHJcbiAqICAgIGxhY2sgb2YgdHJ1c3QgdGFrZXMgd2hlbiB0aGUgb3Bwb3NpbmcgcGFydHkgaXMgbXVjaCBtb3JlIHBvd2VyZnVsIHRoYW5cclxuICogdGhlXHJcbiAqICAgIHNlbGYuXHJcbiAqXHJcbiAqXHJcbiAqICMjIFNob3J0LXRlcm0gdnMgbG9uZy10ZXJtXHJcbiAqXHJcbiAqIDEuIEEgcGVyc29uJ3MgYXR0aXR1ZGUgdG93YXJkcyBzb21lb25lIHR5cGljYWxseSBkb2Vzbid0IGNoYW5nZSBpbnN0YW50bHksXHJcbiAqICAgIGV4Y2VwdCBpbiBleHRyZW1lIGNhc2VzLiBVbmxpa2Ugc2F5LCB0aGVpciBtb29kIHRvd2FyZHMgdGhlbS5cclxuICpcclxuICogMi4gQW4gYXR0aXR1ZGUgY2hhbmdlcyBvbiByZWZsZWN0aW9uLCBvbiBcImdvaW5nIG92ZXIgdGhlIGV2ZW50cyBvZiB0aGUgZGF5XCIsXHJcbiAqICAgIHRvIHNwZWFrLiBJdCBkZXBlbmRzIG9uIGhvdyBzdHJvbmcgYW4gaW5mbHVlbmNlIHRoYXQgZXZlbnQgaGFkIHdoZW5cclxuICogICAgY29tcGFyZWQgdG8gZXZlcnl0aGluZyBlbHNlLiBBIHBlcnNvbiB3aG8gc2F5IGhhbmdzIG91dCB3aXRoIGdyb3VwcyBvZlxyXG4gKiAgICBmaXZlIHBlb3BsZSBldmVyeSBkYXkgcHJvYmFibHkgd29uJ3QgdGhpbmsgdGhhdCBtdWNoIG9mIGEgaGFwcHkgZXZlbnRcclxuICogdGhleVxyXG4gKiAgICBoYWQgd2l0aCBvbmUgcGVyc29uIG9uIGEgRnJpZGF5LiBCdXQgaWYgdGhhdCBzYW1lIHRoaW5nIHRyYW5zcGlyZWRcclxuICogICAgYmV0d2VlbiB0d28gcGVvcGxlIHdobyByYXJlbHkgc2VlIG90aGVycyBhbmQgd2hvIGh1bmcgb3V0IHRvZ2V0aGVyIGFcclxuICogd2hpbGVcclxuICogICAgYWdvLCBpdCBjb3VsZCB2ZXJ5IHdlbGwgbGVhdmUgYSBsYXN0aW5nIGltcHJlc3Npb24uXHJcbiAqXHJcbiAqIDMuIFRoYXQncyBlYXN5IHRvIG1vZGVsIC0gYSBmcmFjdGlvbiBvZiBhIGNvbnN0YW50IGF0dGl0dWRlIGRlbHRhIGlzIGRpdmlkZWRcclxuICogICAgYmV0d2VlbiB0aGUgdmFyaW91cyBtb29kcyBmZWx0IGR1cmluZyB0aGUgd2VlayBhdCB0aGUgZW5kIG9mIHRoZSB3ZWVrIG9yXHJcbiAqICAgIHNvbWV0aGluZy4gVGhhdCBkZWx0YSBpbmRpY2F0ZXMgaG93IGltcHJlc3Npb25hYmxlIGEgcGVyc29uIGlzIG9uIHRoYXRcclxuICogICAgcmVnYXJkLlxyXG4gKlxyXG4gKiA0LiBJdCBpcyBwb3NzaWJsZSB0aGF0IGEgcGVyc29uIGRldmVsb3BzICdyZXNpc3RhbmNlJyB0byBhIGNlcnRhaW4gZW1vdGlvbixcclxuICogICAgd2hlbiB0aGV5IGZlZWwgaXQgYWxsIGFyb3VuZCB0aGVtc2VsdmVzIC0gaW4gdGhhdCBjYXNlLCB0aGV5J2QgYmVcclxuICogICAgcGFydGljdWxhcmx5IHZ1bG5lcmFibGUgdG8gaXQncyBvcHBvc2l0ZS4uLlxyXG4gKlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgYXMgYSBWMSBtb2RlbCwgSSB3aWxsIG5vdCBiZSBkaXN0aW5ndWlzaGluZyBiZXR3ZWVuIHNob3J0LXRlcm1cclxuICogbW9vZFxyXG4gKiBhbmQgbG9uZy10ZXJtIGF0dGl0dWRlIGF0IGxlYXN0IGluIGludGVycGVyc29uYWwgcmVsYXRpb25zaGlwcy4gSSBjYW5cclxuICogcm9sZXBsYXkgc2hvcnQtdGVybSBtb29kIGFzIHRoZSBuZWVkIGFyaXNlcyBpbiB0aGlzIGNhc2UuIEl0IGlzIHVubGlrZWx5XHJcbiAqIEknbGxcclxuICogbmVlZCBhIHJlbWluZGVyIG9mIHRoYXQgYXMgY29tcGFyZWQgdG8gdGhlIGxvbmctdGVybSBhdHRpdHVkZS5cclxuICpcclxuICogIyMgTGVhcm5pbmdcclxuICpcclxuICogMS4gQW4gYWR2YW5jZWQgTlBDIEFJIG1pZ2h0IHZpZXcgaGlnaCBjaGFyaXNtYSB3aXRoIHN1c3BpY2lvbiBhcyB0aGV5IG1pZ2h0XHJcbiAqICAgIGZpZ3VyZSBvdXQgdGhhdCB5b3UgY2FuJ3QgYmUgZ29vZCBhdCBkZWNlcHRpb24gd2l0aG91dCBiZWluZyBoaWdobHlcclxuICogICAgY2hhcmlzbWF0aWMuIFRoYXQgc29ydCBvZiBsZWFybmluZyBpcyBvdXQgb2YgdGhlIHNjb3BlIG9mIHRoaXMgbW9kdWxlIGF0XHJcbiAqICAgIGxlYXN0IC0gYW5kIEkgd2lsbCBtaW1pYyBpdCBieSBtYW51YWxseSBhZGp1c3RpbmcgdGhlIGVmZmVjdCdzIG1hZ25pdHVkZVxyXG4gKiAgICBhcHByb3ByaWF0ZWx5LlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnRlc3QgPSBleHBvcnRzLk5wY09waW5pb24gPSB2b2lkIDA7XHJcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9jb21tb25cIik7XHJcbmNvbnN0IHBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi9kYXRhL3BjSW5kZXhcIik7XHJcbmNvbnN0IGNvbW1vbl8yID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xyXG5jb25zdCBGaXhlZFNpemVTbG90XzEgPSByZXF1aXJlKFwiLi9GaXhlZFNpemVTbG90XCIpO1xyXG5jb25zdCBOcGNJbnRlcmFjdGlvbkV2ZW50XzEgPSByZXF1aXJlKFwiLi9OcGNJbnRlcmFjdGlvbkV2ZW50XCIpO1xyXG5jb25zdCBQb3NpdGl2ZUVtb3Rpb25fMSA9IHJlcXVpcmUoXCIuL1Bvc2l0aXZlRW1vdGlvblwiKTtcclxuY29uc3QgU3RhbmRhcmRBdHRpdHVkZUhhbmRsZXJfMSA9IHJlcXVpcmUoXCIuL1N0YW5kYXJkQXR0aXR1ZGVIYW5kbGVyXCIpO1xyXG5jb25zdCBTdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0XzEgPSByZXF1aXJlKFwiLi9TdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0XCIpO1xyXG5jb25zdCBUaW1lc2tpcEV2ZW50XzEgPSByZXF1aXJlKFwiLi9UaW1lc2tpcEV2ZW50XCIpO1xyXG5jbGFzcyBOcGNPcGluaW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKG5wYywgcGMpIHtcclxuICAgICAgICB0aGlzLm5wYyA9IG5wYztcclxuICAgICAgICB0aGlzLnBjID0gcGM7XHJcbiAgICAgICAgdGhpcy5hdHRpdHVkZUhhbmRsZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gW107XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IG51bGw7XHJcbiAgICAgICAgZm9yIChjb25zdCBlbW90aW9uIG9mICgwLCBjb21tb25fMS5nZXRFbnVtSXRlcmF0b3IpKFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbikpIHtcclxuICAgICAgICAgICAgdGhpcy5hdHRpdHVkZUhhbmRsZXJzLnNldChlbW90aW9uLCBuZXcgU3RhbmRhcmRBdHRpdHVkZUhhbmRsZXJfMS5TdGFuZGFyZEF0dGl0dWRlSGFuZGxlcigpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudChldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LnN0YXJ0VGltZS50b3RhbERheXMgPiB0aGlzLmN1cnJlbnRUaW1lLnRvdGFsRGF5cyArIDIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgR2FwIGJldHdlZW4gZXZlbnRzICR7ZXZlbnQuc3RhcnRUaW1lLnRvdGFsRGF5c30gLT4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5jdXJyZW50VGltZS50b3RhbERheXN9IG5vdCBjb3ZlcmVkIGJ5IHRpbWVza2lwLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmVudC5zdGFydFRpbWUudG90YWxNaWxsaXMgPCB0aGlzLmN1cnJlbnRUaW1lLnRvdGFsTWlsbGlzKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBtb3ZlIGJhY2t3YXJkIGluIHRpbWUsIGN1cnJlbnQgdGltZSAke3RoaXMuY3VycmVudFRpbWUuZ2VuZXJhdGVET01TdHJpbmcoKX0gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGV2ZW50IHN0YXJ0IHRpbWUgJHtldmVudC5zdGFydFRpbWUuZ2VuZXJhdGVET01TdHJpbmcoKX0uYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEZpcnN0IGltcHJlc3Npb25zLlxyXG4gICAgICAgICAgICAvLyBBZGQgdGhlIGJhc2UgY2hhcmlzbWEgcmVzcGVjdCBzaW5jZSB0aGlzIGlzIHRoZSBmaXJzdFxyXG4gICAgICAgICAgICAvLyBpbnRlcmFjdGlvbi5cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IGV2ZW50LnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgdGhpcy5hZGRFdmVudChuZXcgTnBjSW50ZXJhY3Rpb25FdmVudF8xLk5wY0ludGVyYWN0aW9uRXZlbnQoZXZlbnQuc3RhcnRUaW1lLCBcIkJhc2UgQ2hhcmlzbWEuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0NoYXJpc21hTW9kcy5nZXQodGhpcy5wYylcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgXSkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudHMucHVzaChldmVudCk7XHJcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgVGltZXNraXBFdmVudF8xLlRpbWVza2lwRXZlbnQpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBlbW90aW9uIG9mICgwLCBjb21tb25fMS5nZXRFbnVtSXRlcmF0b3IpKFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFtYiA9IGV2ZW50LmFtYmllbnRJbnRlcmFjdGlvbi5oYXMoZW1vdGlvbikgP1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmFtYmllbnRJbnRlcmFjdGlvbi5nZXQoZW1vdGlvbikgOlxyXG4gICAgICAgICAgICAgICAgICAgIDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhaCA9IHRoaXMuYXR0aXR1ZGVIYW5kbGVycy5nZXQoZW1vdGlvbik7XHJcbiAgICAgICAgICAgICAgICBhaC5hbWJpZW50SW50ZXJhY3Rpb24gPSBhbWI7XHJcbiAgICAgICAgICAgICAgICBhaC5pbmNyZW1lbnRUaW1lVG8oZXZlbnQuZW5kVGltZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IGV2ZW50LmVuZFRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50IGluc3RhbmNlb2YgTnBjSW50ZXJhY3Rpb25FdmVudF8xLk5wY0ludGVyYWN0aW9uRXZlbnQpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBbZW1vdGlvbiwgdmFsdWVdIG9mIGV2ZW50LmVmZmVjdHMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGl0dWRlSGFuZGxlcnMuZ2V0KGVtb3Rpb24pLmFkZEV2ZW50KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gZXZlbnQudGltZXN0YW1wO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdlbmVyYXRlRE9NU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IHQgPSAoMCwgY29tbW9uXzIuZ2V0Wm9uZSkodGhpcy5nZXRFbW90aW9uKFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCkpO1xyXG4gICAgICAgIGNvbnN0ICR0cnVzdEJvcmRlciA9IHQgPj0gMCA/IGA8ZGl2IGNsYXNzPVwiZW1vdGlvbl9ib3JkZXIgZW1vdGlvbl9ib3JkZXItLXRydXN0IGVtb3Rpb25fYm9yZGVyLS12YWx1ZV8ke3R9XCI+PC9kaXY+YFxyXG4gICAgICAgICAgICA6IGA8ZGl2IGNsYXNzPVwiZW1vdGlvbl9ib3JkZXIgZW1vdGlvbl9ib3JkZXItLXBhcmFub2lhIGVtb3Rpb25fYm9yZGVyLS12YWx1ZV8key10fVwiPjwvZGl2PmA7XHJcbiAgICAgICAgY29uc3QgZyA9ICgwLCBjb21tb25fMi5nZXRab25lKSh0aGlzLmdldEVtb3Rpb24oUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSkpO1xyXG4gICAgICAgIGNvbnN0ICRncmF0aXR1ZGVCb3JkZXIgPSBnID49IDAgPyBgPGRpdiBjbGFzcz1cImVtb3Rpb25fYm9yZGVyIGVtb3Rpb25fYm9yZGVyLS1ncmF0aXR1ZGUgZW1vdGlvbl9ib3JkZXItLXZhbHVlXyR7Z31cIj48L2Rpdj5gXHJcbiAgICAgICAgICAgIDogYDxkaXYgY2xhc3M9XCJlbW90aW9uX2JvcmRlciBlbW90aW9uX2JvcmRlci0tZW52eSBlbW90aW9uX2JvcmRlci0tdmFsdWVfJHstZ31cIj48L2Rpdj5gO1xyXG4gICAgICAgIGNvbnN0IHIgPSAoMCwgY29tbW9uXzIuZ2V0Wm9uZSkodGhpcy5nZXRFbW90aW9uKFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0KSk7XHJcbiAgICAgICAgY29uc3QgJHJlc3BlY3RCb3JkZXIgPSByID49IDAgPyBgPGRpdiBjbGFzcz1cImVtb3Rpb25fYm9yZGVyIGVtb3Rpb25fYm9yZGVyLS1yZXNwZWN0IGVtb3Rpb25fYm9yZGVyLS12YWx1ZV8ke3J9XCI+PC9kaXY+YFxyXG4gICAgICAgICAgICA6IGA8ZGl2IGNsYXNzPVwiZW1vdGlvbl9ib3JkZXIgZW1vdGlvbl9ib3JkZXItLWNvbnRlbXB0IGVtb3Rpb25fYm9yZGVyLS12YWx1ZV8key1yfVwiPjwvZGl2PmA7XHJcbiAgICAgICAgbGV0IHRvdGFsQWZmZWN0aW9uUmF0aW5nID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IGVtb3Rpb24gb2YgKDAsIGNvbW1vbl8xLmdldEVudW1JdGVyYXRvcikoUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uKSkge1xyXG4gICAgICAgICAgICB0b3RhbEFmZmVjdGlvblJhdGluZyArPSB0aGlzLmdldEVtb3Rpb24oZW1vdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzaW1wbGVfdGFibGVfX3Jvd19fY2VsbCBvcGluaW9uX2NlbGxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJucGNfb3Bpbmlvbl9jaXJjbGVcIiBcclxuICAgICAgICAgICAgICAgICAgICAgZGF0YS1ucGMtaWQ9XCIke3RoaXMubnBjfVwiIFxyXG4gICAgICAgICAgICAgICAgICAgICBkYXRhLXBjLWlkPVwiJHt0aGlzLnBjfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICR7dG90YWxBZmZlY3Rpb25SYXRpbmd9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICR7JHRydXN0Qm9yZGVyfSR7JGdyYXRpdHVkZUJvcmRlcn0keyRyZXNwZWN0Qm9yZGVyfVxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtb3Rpb25fYm9yZGVyLS1iYWNrZHJvcFwiPjwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgfVxyXG4gICAgZ2VuZXJhdGVUaW1lbGluZURPTVN0cmluZygpIHtcclxuICAgICAgICBjb25zdCBldmVudHNEZXNjID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBucGNJbnRlcmFjdGlvbkV2ZW50IG9mIHRoaXMuZXZlbnRzKSB7XHJcbiAgICAgICAgICAgIGV2ZW50c0Rlc2MucHVzaChucGNJbnRlcmFjdGlvbkV2ZW50LmdlbmVyYXRlRE9NU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvcGluaW9uVGFncyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgZSBvZiAoMCwgY29tbW9uXzEuZ2V0RW51bUl0ZXJhdG9yKShQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24pKSB7XHJcbiAgICAgICAgICAgIG9waW5pb25UYWdzLnB1c2godGhpcy5nZW5lcmF0ZU9waW5pb25UYWcoZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgICAgICAgICAgPGg0PkludGVyYWN0aW9uIERldGFpbHM8L2g0PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9waW5pb25fdGFnc1wiPiR7b3BpbmlvblRhZ3Muam9pbihcIlwiKX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJldmVudHNfbGlzdFwiPiR7ZXZlbnRzRGVzYy5qb2luKFwiXCIpfTwvZGl2PlxyXG4gICAgICAgICAgICBgO1xyXG4gICAgfVxyXG4gICAgZ2VuZXJhdGVPcGluaW9uVGFnKGUpIHtcclxuICAgICAgICBjb25zdCByID0gdGhpcy5nZXRFbW90aW9uKGUpO1xyXG4gICAgICAgIGlmIChyID09IDApXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICBjb25zdCB0VGV4dCA9IHIgPiAwID8gUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uW2VdIDogUG9zaXRpdmVFbW90aW9uXzEuTmVnYXRpdmVFbW90aW9uLmdldChlKTtcclxuICAgICAgICBjb25zdCB0VmFsID0gTWF0aC5hYnMocik7XHJcbiAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiZWZmZWN0X3RhZ1wiIGRhdGEtZW1vPVwiJHt0VGV4dH1cIj4ke3RUZXh0fTogJHt0VmFsfTwvZGl2PmA7XHJcbiAgICB9XHJcbiAgICBnZXRFbW90aW9uKGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRpdHVkZUhhbmRsZXJzLmdldChlKS5yYXRpbmc7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5OcGNPcGluaW9uID0gTnBjT3BpbmlvbjtcclxuLyoqXHJcbiAqIFRlc3RjYXNlcy5cclxuICovXHJcbmZ1bmN0aW9uIHRlc3QoKSB7XHJcbiAgICAoMCwgRml4ZWRTaXplU2xvdF8xLnRlc3RTbG90KSgpO1xyXG4gICAgKDAsIFN0YW5kYXJkQnVmZmVyZWRBdHRpdHVkZUxpc3RfMS50ZXN0QnVmZmVyZWRBdHRpdHVkZSkoKTtcclxuICAgICgwLCBTdGFuZGFyZEF0dGl0dWRlSGFuZGxlcl8xLnRlc3RBdHRpdHVkZUhhbmRsZXIpKCk7XHJcbn1cclxuZXhwb3J0cy50ZXN0ID0gdGVzdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TnBjT3BpbmlvbnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5OZWdhdGl2ZUVtb3Rpb24gPSBleHBvcnRzLlBvc2l0aXZlRW1vdGlvbiA9IHZvaWQgMDtcclxudmFyIFBvc2l0aXZlRW1vdGlvbjtcclxuKGZ1bmN0aW9uIChQb3NpdGl2ZUVtb3Rpb24pIHtcclxuICAgIFBvc2l0aXZlRW1vdGlvbltQb3NpdGl2ZUVtb3Rpb25bXCJBZmZlY3Rpb25cIl0gPSAwXSA9IFwiQWZmZWN0aW9uXCI7XHJcbiAgICBQb3NpdGl2ZUVtb3Rpb25bUG9zaXRpdmVFbW90aW9uW1wiR3JhdGl0dWRlXCJdID0gMV0gPSBcIkdyYXRpdHVkZVwiO1xyXG4gICAgUG9zaXRpdmVFbW90aW9uW1Bvc2l0aXZlRW1vdGlvbltcIlRydXN0XCJdID0gMl0gPSBcIlRydXN0XCI7XHJcbiAgICBQb3NpdGl2ZUVtb3Rpb25bUG9zaXRpdmVFbW90aW9uW1wiUmVzcGVjdFwiXSA9IDNdID0gXCJSZXNwZWN0XCI7XHJcbn0pKFBvc2l0aXZlRW1vdGlvbiA9IGV4cG9ydHMuUG9zaXRpdmVFbW90aW9uIHx8IChleHBvcnRzLlBvc2l0aXZlRW1vdGlvbiA9IHt9KSk7XHJcbmV4cG9ydHMuTmVnYXRpdmVFbW90aW9uID0gbmV3IE1hcChbXHJcbiAgICBbUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgXCJIYXRyZWRcIl0sXHJcbiAgICBbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgXCJFbnZ5XCJdLFxyXG4gICAgW1Bvc2l0aXZlRW1vdGlvbi5UcnVzdCwgXCJQYXJhbm9pYVwiXSxcclxuICAgIFtQb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgXCJDb250ZW1wdFwiXSxcclxuXSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBvc2l0aXZlRW1vdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlNsb3RCYXNlID0gdm9pZCAwO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vY29tbW9uXCIpO1xyXG4vKipcclxuICogVGhlIHtAbGluayBCdWZmZXJlZEF0dGl0dWRlTGlzdEJhc2V9IGVzc2VudGlhbGx5IGNvbXByaXNlcyBtYW55IG9mIHRoZXNlXHJcbiAqICdzbG90cycgd2hpY2ggYXJlIGZpbGxlZCBvbmUgYnkgb25lLiBUaGUgbnVtYmVyIG9mIGZpbGxlZCBub24tYnVmZmVyZWQgc2xvdHNcclxuICogaXMgdGhlIG1hZ25pdHVkZSBvZiB0aGUgcmF0aW5nLCBhbmQgdGhlaXIgdG90YWwgdmFsdWUgaXMgdGhlIHZhbHVlLlxyXG4gKi9cclxuY2xhc3MgU2xvdEJhc2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihpc0J1ZmZlcmVkLCBkZWx0YU1vZGlmaWVyKSB7XHJcbiAgICAgICAgaWYgKGlzQnVmZmVyZWQgJiYgZGVsdGFNb2RpZmllciAhPSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgYnVmZmVyIHNob3VsZG4ndCBoYXZlIGEgZGVsdGEgbW9kaWZpZXIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzQnVmZmVyZWQgPSBpc0J1ZmZlcmVkO1xyXG4gICAgICAgIHRoaXMuZGVsdGFNb2RpZmllciA9IGRlbHRhTW9kaWZpZXI7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSAwO1xyXG4gICAgICAgIHRoaXMuY3Jvc3NlZEJlZm9yZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGp1c3QgdGhlIHZhbHVlIG9mIHRoaXMgYnVmZmVyIGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgVGhlIGFtb3VudCBsZWZ0IG92ZXIgYWZ0ZXIgdGhlIGFkanVzdG1lbnQuXHJcbiAgICAgKi9cclxuICAgIGFkanVzdChieSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZEF1dG9maWxsT25GaXJzdENyb3NzICYmICF0aGlzLmNyb3NzZWRCZWZvcmUpIHtcclxuICAgICAgICAgICAgdGhpcy5jcm9zc2VkQmVmb3JlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLnNpemU7XHJcbiAgICAgICAgICAgIHJldHVybiBieTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYnlTaWduID0gTWF0aC5zaWduKGJ5KTtcclxuICAgICAgICBieSArPSB0aGlzLmRlbHRhTW9kaWZpZXI7XHJcbiAgICAgICAgLy8gSWYgdGhlIHNpZ24gb2YgdGhlIGRlbHRhIGNoYW5nZXMgY2F1c2Ugb2YgdGhlIG1vZGlmaWVyLCB3ZSBkb24ndCB3YW50XHJcbiAgICAgICAgLy8gdG8gYXBwbHkgaXQuIChzaW5jZSBhIGdvb2QgZ2VzdHVyZSBjYW4ndCBjYXVzZSBuZWdhdGl2aXR5KVxyXG4gICAgICAgIGlmIChieVNpZ24gIT0gTWF0aC5zaWduKGJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLl92YWx1ZTtcclxuICAgICAgICB0aGlzLl92YWx1ZSArPSBieTtcclxuICAgICAgICBpZiAoTWF0aC5zaWduKHRoaXMuc2l6ZSkgKiB0aGlzLl92YWx1ZSA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl92YWx1ZSkgPiBNYXRoLmFicyh0aGlzLnNpemUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5zaXplO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb25zdW1lZEJ5ID0gdGhpcy5fdmFsdWUgLSBvbGRWYWx1ZTtcclxuICAgICAgICBjb25zdCBsZWZ0b3ZlckJ5ID0gYnkgLSBjb25zdW1lZEJ5O1xyXG4gICAgICAgIGlmICgoMCwgY29tbW9uXzEuRVEpKDAsIGxlZnRvdmVyQnkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiBzb21lIGJ5IGlzIGxlZnRvdmVyLCB1bmRvIHRoZSBkZWx0YSBtb2RpZmllci5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIE5PVEU6IFdFIEhBVkUgVE8gQkUgU1VQRVIgQ0FSRUZVTCBPTiBUSEUgQ0FMTEVSIEVORCBUSEFUIFRISVMgRE9FU04nVFxyXG4gICAgICAgIC8vIFBST0RVQ0UgTU9USU9OIE9OIFRIRSBPUFBPU0lURSBESVJFQ1RJT05cclxuICAgICAgICAvLyBlZy4gc2xvdHMgLSAodG90YWw6IC02LCBjdXJyZW50OiAtNiwgbW9kOiArMylcclxuICAgICAgICAvLyAgICAgICAgICAgICAodG90YWw6IC01LCBjdXJyZW50OiAtNSwgbW9kOiArMSlcclxuICAgICAgICAvLyAgbm93IGEgZGVsdGEgb2YgKzQsIGVtcHRpZXMgdGhlIGZpcnN0IHNsb3QgdGhlbiBzZW5kcyBhIC0yIHRvIHRoZVxyXG4gICAgICAgIC8vICBuZXh0LiBBZnRlciB0aGUgbmV4dCBtb2QgaXQgYmVjb21lcyBhIC0xIChzaWduIGRvZXNuJ3QgY2hhbmdlKS4gV2VcclxuICAgICAgICAvLyAgZG8gbm90IHdhbnQgdG8gYWRkIGEgLTEgdG8gdGhpcyBzbG90Li4uIGJ1dCB3ZSB3b24ndCxcclxuICAgICAgICAvLyAgc2luY2UgaGVyZSB3ZSdsbCBnZXQgYSAtMSBhbmQgYWZ0ZXIgbW9kICsyIHdoaWNoIHdpbGwgY2F1c2UgYSBicmVhay5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFdoZXcsIHRoaXMgd29ya2VkIG91dCBvZiB0aGUgYm94LCBidXQgZ29vZCB0byB2ZXJpZnkgaXQuXHJcbiAgICAgICAgcmV0dXJuIGxlZnRvdmVyQnkgLSB0aGlzLmRlbHRhTW9kaWZpZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0cyB0aGUgc3RhdGUgb2YgdGhpcyBidWZmZXIuXHJcbiAgICAgKi9cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gMDtcclxuICAgICAgICB0aGlzLmNyb3NzZWRCZWZvcmUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRm9yIHpvbmUtYnVmZmVycyAod2hpY2ggYXJlIHRoZSBvbmx5IGZpeGVkIHNpemUgYnVmZmVycyB3ZSBoYXZlIG5vdyksIHdlXHJcbiAgICAgKiBkb24ndCB3YW50IHRvIHNwZW5kIGdvb2R3aWxsL25lZ2F0aXZpdHkgcG9pbnRzIHRvIGZpbGwgdGhlbSB0aGUgZmlyc3RcclxuICAgICAqIHRpbWUgdGhleSdyZSByZWFjaGVkLiBUaGVzZSBhcmUgYXV0b2ZpbGxlZC5cclxuICAgICAqXHJcbiAgICAgKiBUaGV5IGRvIHJlcXVpcmUgYmVpbmcgZmlsbGVkIGFueSBmdXR1cmUgdGltZXMgdGhleSBhcmUgY3Jvc3NlZCB0aG91Z2guXHJcbiAgICAgKiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50IGV4cGxvaXRhdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IHNob3VsZEF1dG9maWxsT25GaXJzdENyb3NzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQnVmZmVyZWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHRlciBmb3IgdGhlIGN1cnJlbnQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXQgaXNGaWxsZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuICgwLCBjb21tb25fMS5FUSkodGhpcy52YWx1ZSwgdGhpcy5zaXplKTtcclxuICAgIH1cclxuICAgIGdldCBpc0VtcHR5KCkge1xyXG4gICAgICAgIHJldHVybiAoMCwgY29tbW9uXzEuRVEpKHRoaXMudmFsdWUsIDApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU2xvdEJhc2UgPSBTbG90QmFzZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2xvdEJhc2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy50ZXN0QXR0aXR1ZGVIYW5kbGVyID0gZXhwb3J0cy5TdGFuZGFyZEF0dGl0dWRlSGFuZGxlciA9IHZvaWQgMDtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2NvbW1vblwiKTtcclxuY29uc3QgR2FtZVRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uL0dhbWVUaW1lc3RhbXBcIik7XHJcbmNvbnN0IEF0dGl0dWRlSGFuZGxlcl8xID0gcmVxdWlyZShcIi4vQXR0aXR1ZGVIYW5kbGVyXCIpO1xyXG5jbGFzcyBTdGFuZGFyZEF0dGl0dWRlSGFuZGxlciBleHRlbmRzIEF0dGl0dWRlSGFuZGxlcl8xLkF0dGl0dWRlSGFuZGxlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGZvcmdldGZ1bG5lc3MoKSB7XHJcbiAgICAgICAgY29uc3QgeiA9IHRoaXMuYnVmZmVyZWRBdHRpdHVkZS56b25lO1xyXG4gICAgICAgIGNvbnN0IHpNYWcgPSBNYXRoLmFicyh6KTtcclxuICAgICAgICBjb25zdCB6U2duID0gTWF0aC5zaWduKHopO1xyXG4gICAgICAgIHJldHVybiBbMC4yLCAwLjEsIDAuMDUsIDAuMDJdW3pNYWddICogKC16U2duKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlN0YW5kYXJkQXR0aXR1ZGVIYW5kbGVyID0gU3RhbmRhcmRBdHRpdHVkZUhhbmRsZXI7XHJcbmZ1bmN0aW9uIHRlc3RBdHRpdHVkZUhhbmRsZXIoKSB7XHJcbiAgICBjb25zdCBhaCA9IG5ldyBTdGFuZGFyZEF0dGl0dWRlSGFuZGxlcigpO1xyXG4gICAgY29uc29sZS5hc3NlcnQoYWgucmF0aW5nID09IDApO1xyXG4gICAgYWguaW5jcmVtZW50VGltZVRvKEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDEpKTtcclxuICAgIGNvbnNvbGUuYXNzZXJ0KGFoLnJhdGluZyA9PSAwKTtcclxuICAgIGFoLmFkZEV2ZW50KDIuNSk7XHJcbiAgICBhaC5pbmNyZW1lbnRUaW1lVG8oR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoMjAwMCkpO1xyXG4gICAgY29uc29sZS5hc3NlcnQoYWgucmF0aW5nID09IDApO1xyXG4gICAgYWgudGVzdFJlc2V0KCk7XHJcbiAgICBhaC5hZGRFdmVudCg3KTtcclxuICAgIGNvbnNvbGUuYXNzZXJ0KGFoLnJhdGluZyA9PSAyKTtcclxuICAgIGFoLmluY3JlbWVudFRpbWVUbyhHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cygyMDAyKSk7XHJcbiAgICBjb25zb2xlLmFzc2VydChhaC5yYXRpbmcgPT0gMSk7XHJcbiAgICBhaC5pbmNyZW1lbnRUaW1lVG8oR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNDAwMCkpO1xyXG4gICAgY29uc29sZS5hc3NlcnQoYWgucmF0aW5nID09IDEpO1xyXG4gICAgY29uc29sZS5hc3NlcnQoKDAsIGNvbW1vbl8xLkVRKShhaC52YWx1ZSwgMyksIGFoLnZhbHVlKTtcclxuICAgIGFoLmFtYmllbnRJbnRlcmFjdGlvbiA9IC0wLjE7XHJcbiAgICBhaC5pbmNyZW1lbnRUaW1lVG8oR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNDAyMSkpO1xyXG4gICAgY29uc29sZS5hc3NlcnQoKDAsIGNvbW1vbl8xLkVRKShhaC52YWx1ZSwgMS44KSwgYWgudmFsdWUpOyAvLyB0b2RvOiB3dGY/IGhvdyBkb2VzIHRoaXMgd29yaz9cclxufVxyXG5leHBvcnRzLnRlc3RBdHRpdHVkZUhhbmRsZXIgPSB0ZXN0QXR0aXR1ZGVIYW5kbGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGFuZGFyZEF0dGl0dWRlSGFuZGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnRlc3RCdWZmZXJlZEF0dGl0dWRlID0gZXhwb3J0cy5TdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0ID0gdm9pZCAwO1xyXG5jb25zdCBCdWZmZXJlZEF0dGl0dWRlTGlzdEJhc2VfMSA9IHJlcXVpcmUoXCIuL0J1ZmZlcmVkQXR0aXR1ZGVMaXN0QmFzZVwiKTtcclxuY2xhc3MgU3RhbmRhcmRCdWZmZXJlZEF0dGl0dWRlTGlzdCBleHRlbmRzIEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0QmFzZV8xLkJ1ZmZlcmVkQXR0aXR1ZGVMaXN0QmFzZSB7XHJcbiAgICAvKipcclxuICAgICAqIENUT1IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5yZXNldFJhdGluZ3MoKTtcclxuICAgIH1cclxuICAgIGdldEJ1ZmZlckNhcGFjaXR5T2Zab25lKHpvbmUpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoem9uZSk7XHJcbiAgICB9XHJcbiAgICBnZXREeW5hbWljQnVmZmVyU2l6ZUZvclJhdGluZyhyYXRpbmcpIHtcclxuICAgICAgICByZXR1cm4gcmF0aW5nO1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsdWVDYXBhY2l0eU9mUmF0aW5nKHJhdGluZykge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmFicyhyYXRpbmcpICsgMjtcclxuICAgIH1cclxuICAgIGdldFpvbmVEZWx0YU9mZnNldCh6b25lKSB7XHJcbiAgICAgICAgcmV0dXJuIFswLCAwLCAxLCAyXVt6b25lXTtcclxuICAgIH1cclxuICAgIGdldCB6b25lQ3V0b2ZmcygpIHtcclxuICAgICAgICByZXR1cm4gWzEsIDQsIDddO1xyXG4gICAgfVxyXG4gICAgZ2V0IG1heFJhdGluZygpIHtcclxuICAgICAgICByZXR1cm4gMTA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0ID0gU3RhbmRhcmRCdWZmZXJlZEF0dGl0dWRlTGlzdDtcclxuZnVuY3Rpb24gdGVzdEJ1ZmZlcmVkQXR0aXR1ZGUoKSB7XHJcbiAgICBjb25zdCBiYSA9IG5ldyBTdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0KCk7XHJcbiAgICBmdW5jdGlvbiB0ZXN0QXNzZXJ0KGJhLCBleHBlY3RlZFZhbHVlLCBleHBlY3RlZFJhdGluZywgZXhwZWN0ZWRCdWZmZXIpIHtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChiYS52YWx1ZSA9PSBleHBlY3RlZFZhbHVlICYmXHJcbiAgICAgICAgICAgIGJhLnJhdGluZyA9PSBleHBlY3RlZFJhdGluZyAmJlxyXG4gICAgICAgICAgICBiYS5idWZmZXJlZFZhbHVlID09IGV4cGVjdGVkQnVmZmVyLCBgRXhwZWN0ZWQgKFYsIFIsIEIpOiAoJHtleHBlY3RlZFZhbHVlfSwgJHtleHBlY3RlZFJhdGluZ30sIGAgK1xyXG4gICAgICAgICAgICBgJHtleHBlY3RlZEJ1ZmZlcn0pLiBHb3QgKCR7YmEudmFsdWV9LCAke2JhLnJhdGluZ30sIGAgK1xyXG4gICAgICAgICAgICBgJHtiYS5idWZmZXJlZFZhbHVlfSkuYCk7XHJcbiAgICB9XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgxKTtcclxuICAgIHRlc3RBc3NlcnQoYmEsIDEsIDAsIDApO1xyXG4gICAgYmEuYWRqdXN0VmFsdWUoLTMpO1xyXG4gICAgdGVzdEFzc2VydChiYSwgLTIsIDAsIDApO1xyXG4gICAgYmEuYWRqdXN0VmFsdWUoNSk7XHJcbiAgICB0ZXN0QXNzZXJ0KGJhLCAzLCAxLCAyKTtcclxuICAgIGJhLmFkanVzdFZhbHVlKC04KTtcclxuICAgIHRlc3RBc3NlcnQoYmEsIC0zLCAtMSwgLTIpO1xyXG4gICAgYmEucmVzZXRSYXRpbmdzKCk7XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSg4KTtcclxuICAgIHRlc3RBc3NlcnQoYmEsIDgsIDIsIDMpO1xyXG4gICAgYmEuYWRqdXN0VmFsdWUoMTgpO1xyXG4gICAgdGVzdEFzc2VydChiYSwgMjUsIDUsIDEwKTtcclxuICAgIGJhLmFkanVzdFZhbHVlKC0xKTtcclxuICAgIHRlc3RBc3NlcnQoYmEsIDI1LCA1LCA5KTsgLy8gZG91YmxlIGNoZWNrIHRoaXMhXHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgtNSk7XHJcbiAgICB0ZXN0QXNzZXJ0KGJhLCAyMywgNCwgNSk7XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgtNSk7XHJcbiAgICB0ZXN0QXNzZXJ0KGJhLCAxOCwgNCwgNSk7XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgtMik7XHJcbiAgICB0ZXN0QXNzZXJ0KGJhLCAxOCwgNCwgMyk7XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgtMik7XHJcbiAgICB0ZXN0QXNzZXJ0KGJhLCAxOCwgNCwgMSk7XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgtMik7XHJcbiAgICB0ZXN0QXNzZXJ0KGJhLCAxNiwgMywgMSk7XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgtMik7XHJcbiAgICB0ZXN0QXNzZXJ0KGJhLCAxNCwgMywgMSk7XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgyKTtcclxuICAgIHRlc3RBc3NlcnQoYmEsIDE0LCAzLCAzKTtcclxuICAgIGJhLnJlc2V0UmF0aW5ncygpO1xyXG4gICAgYmEuYWRqdXN0VmFsdWUoNyk7XHJcbiAgICBiYS5hZGp1c3RWYWx1ZSgtMC4xLCB0cnVlKTtcclxuICAgIHRlc3RBc3NlcnQoYmEsIDYuOSwgMSwgMyk7XHJcbn1cclxuZXhwb3J0cy50ZXN0QnVmZmVyZWRBdHRpdHVkZSA9IHRlc3RCdWZmZXJlZEF0dGl0dWRlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVGltZXNraXBFdmVudCA9IHZvaWQgMDtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2NvbW1vblwiKTtcclxuY29uc3QgUG9zaXRpdmVFbW90aW9uXzEgPSByZXF1aXJlKFwiLi9Qb3NpdGl2ZUVtb3Rpb25cIik7XHJcbmNsYXNzIFRpbWVza2lwRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3Ioc3RhcnRUaW1lLCBlbmRUaW1lLCBhbWJpZW50SW50ZXJhY3Rpb24sIHRleHQpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHN0YXJ0VGltZTtcclxuICAgICAgICB0aGlzLmVuZFRpbWUgPSBlbmRUaW1lO1xyXG4gICAgICAgIHRoaXMuYW1iaWVudEludGVyYWN0aW9uID0gYW1iaWVudEludGVyYWN0aW9uO1xyXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgICB9XHJcbiAgICBnZW5lcmF0ZURPTVN0cmluZygpIHtcclxuICAgICAgICBpZiAodGhpcy5hbWJpZW50SW50ZXJhY3Rpb24uc2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cInRpbWVza2lwX2xpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSB0aW1lIGJldHdlZW4gPHNwYW4gY2xhc3M9XCJ0aW1lc2tpcF9saV9fdGltZVwiPiR7dGhpcy5zdGFydFRpbWUuZ2VuZXJhdGVET01TdHJpbmcoKX08L3NwYW4+IGFuZCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aW1lc2tpcF9saV9fdGltZVwiPiR7dGhpcy5lbmRUaW1lLmdlbmVyYXRlRE9NU3RyaW5nKCl9PC9zcGFuPiBwYXNzZWQgd2l0aCBuZWdsaWdpYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0ICRpbnRlcmFjdGlvbnMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBbZW1vdGlvbiwgdmFsXSBvZiB0aGlzLmFtYmllbnRJbnRlcmFjdGlvbi5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgaWYgKCgwLCBjb21tb25fMS5FUSkodmFsLCAwKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZW1vdGlvblN0cmluZyA9IHZhbCA8IC0wLjEgPyBQb3NpdGl2ZUVtb3Rpb25fMS5OZWdhdGl2ZUVtb3Rpb24uZ2V0KGVtb3Rpb24pIDogUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uW2Vtb3Rpb25dO1xyXG4gICAgICAgICAgICBpZiAodmFsIDwgLTAuMSkge1xyXG4gICAgICAgICAgICAgICAgdmFsID0gLXZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgJGludGVyYWN0aW9ucy5wdXNoKGA8bGkgY2xhc3M9XCJ0aW1lc2tpcF9fZW1vdGlvbl9kZXNjXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZW1vdGlvbl9zdHJpbmctLSR7ZW1vdGlvblN0cmluZy50b0xvd2VyQ2FzZSgpfS0tbmVnXCI+JHtlbW90aW9uU3RyaW5nfTwvc3Bhbj4gZXJvZGVkIHNsaWdodGx5LlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodmFsIDw9IDAuNCkge1xyXG4gICAgICAgICAgICAgICAgJGludGVyYWN0aW9ucy5wdXNoKGA8bGkgY2xhc3M9XCJ0aW1lc2tpcF9fZW1vdGlvbl9kZXNjXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZW1vdGlvbl9zdHJpbmctLSR7ZW1vdGlvblN0cmluZy50b0xvd2VyQ2FzZSgpfVwiPiR7ZW1vdGlvblN0cmluZ308L3NwYW4+IGluY3JlYXNlZCBzbGlnaHRseS5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA8PSAwLjkpIHtcclxuICAgICAgICAgICAgICAgICRpbnRlcmFjdGlvbnMucHVzaChgPGxpIGNsYXNzPVwidGltZXNraXBfX2Vtb3Rpb25fZGVzY1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVtb3Rpb25fc3RyaW5nLS0ke2Vtb3Rpb25TdHJpbmcudG9Mb3dlckNhc2UoKX1cIj4ke2Vtb3Rpb25TdHJpbmd9PC9zcGFuPiBpbmNyZWFzZWQgbW9kZXJhdGVseS5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGludGVyYWN0aW9ucy5wdXNoKGA8bGkgY2xhc3M9XCJ0aW1lc2tpcF9fZW1vdGlvbl9kZXNjXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZW1vdGlvbl9zdHJpbmctLSR7ZW1vdGlvblN0cmluZy50b0xvd2VyQ2FzZSgpfVwiPiR7ZW1vdGlvblN0cmluZ308L3NwYW4+IGluY3JlYXNlZCBzaWduaWZpY2FudGx5LlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGV4dEh0bWwgPSB0aGlzLnRleHQubGVuZ3RoID4gMCA/IGA8cCBjbGFzcz1cInRpbWVza2lwX2xpX19kZXNjcmlwdGlvblwiPiR7dGhpcy50ZXh0fTwvcD5gIDogXCJcIjtcclxuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJpbnRlcmFjdGlvbnNfbGlzdF9faXRlbSB0aW1lc2tpcF9saVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIFRoZSB0aW1lIGJldHdlZW4gXHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aW1lc2tpcF9saV9fdGltZVwiPiR7dGhpcy5zdGFydFRpbWUuZ2VuZXJhdGVET01TdHJpbmcoKX08L3NwYW4+IGFuZCBcclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRpbWVza2lwX2xpX190aW1lXCI+JHt0aGlzLmVuZFRpbWUuZ2VuZXJhdGVET01TdHJpbmcoKX08L3NwYW4+IHBhc3NlZCB3aXRoIHRoZSBmb2xsb3dpbmcgbm90YWJsZSBcclxuICAgICAgICAgICAgICAgICAgICBhbWJpZW50IGludGVyYWN0aW9uIGZvciBlYWNoIGRheSBvZiB0aGUgZHVyYXRpb24gLVxyXG4gICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHskaW50ZXJhY3Rpb25zLmpvaW4oXCJcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAke3RleHRIdG1sfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRpbWVza2lwRXZlbnQgPSBUaW1lc2tpcEV2ZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaW1lc2tpcEV2ZW50LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZ2V0Wm9uZSA9IHZvaWQgMDtcclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHpvbmUgdGhlIHJhdGluZyBiZWxvbmdzIHRvLiBUaGlzIHpvbmUgaXMgdXNlZCB3aGlsZSByZW5kZXJpbmcsXHJcbiAqIGkuZS4gaXQgaXMgc2hvd24gb24gdGhlIHNpdGUsIGhlbmNlIHRoZSBleHBvcnQuXHJcbiAqXHJcbiAqIEl0IG1heSBiZSBhbHNvIHVzZWQgdG8gaW5mbHVlbmNlIGZvcmdldGZ1bG5lc3MgYW5kIGZvcmdpdmVuZXNzLiBGb3IgdGhlXHJcbiAqIGxhdHRlciwgaXQgbWF5IGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGJ1ZmZlcnMgd2hpbGUgZm9yIHRoZSBmb3JtZXIgaXQgYWN0cyBhc1xyXG4gKiBhIGJhcnJpZXIuIFRoYXQncyB3aHkgaXQgY2FuJ3QgYmUgb24gdGhlIHJlbmRlcmluZyBjb2RlIGVpdGhlci5cclxuICovXHJcbmZ1bmN0aW9uIGdldFpvbmUocmF0aW5nKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zaWduKHJhdGluZykgKiBNYXRoLmZsb29yKChNYXRoLmFicyhyYXRpbmcpICsgMikgLyAzKTtcclxufVxyXG5leHBvcnRzLmdldFpvbmUgPSBnZXRab25lO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcmMyMU9waW5pb25FdmVudHMgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgcGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvcGNJbmRleFwiKTtcclxuY29uc3QgR2FtZVRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uLy4uL0dhbWVUaW1lc3RhbXBcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uL3NpbXVsYXRpb24vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIik7XHJcbmNvbnN0IFBvc2l0aXZlRW1vdGlvbl8xID0gcmVxdWlyZShcIi4uL1Bvc2l0aXZlRW1vdGlvblwiKTtcclxuY29uc3QgczlfMSA9IHJlcXVpcmUoXCIuL3M5XCIpO1xyXG5mdW5jdGlvbiBhcmMyMU9waW5pb25FdmVudHMoKSB7XHJcbiAgICBjb25zdCBoaW5hRGVjZXB0aW9uID0gQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkhpbmEpLnBhc3NpdmVEZWNlcHRpb247XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLCBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAyOCwgMTIpLCBgU28gbGl0ZXJhbGx5IHRoZSBtaW51dGUgdGhleSBmb3VuZCBhYm91dCBteSBib25kc21pdGggcG93ZXJzLCB0aGV5IFxyXG4gICAgICAgIGFscmVhZHkgZm91bmQgYSB1c2UgZm9yIGl0PyBTaWdoLCBpbiB0aGUgZW5kIGFsbCBhZHVsdHMgcmVhbGx5IGFyZSB0aGUgXHJcbiAgICAgICAgc2FtZSBhcmVuJ3QgdGhleT88YnIvPlxyXG4gICAgICAgIC4uLiBGdWNrLCB3aGF0IGlzIHdyb25nIHdpdGggbWU/IFRoaXMgaXMgRGF3bidzIGxpZmUgd2UncmUgdGFsa2luZyBhYm91dCxcclxuICAgICAgICBhbmQgaXQncyBub3QgbGlrZSB0aGV5IGhhdmUgYSBjaG9pY2UgaGVyZS4gSWYgdGhlcmUgaXMgYW55IHNpdHVhdGlvbiBcclxuICAgICAgICB3aGVyZSBteSBwb3dlcnMgYXJlIHVzZWQgd2VsbCwgdGhpcyBpcyBpdC4gU28gYmUgaXQsIEknbGwgaGVscCB0aGVtIFxyXG4gICAgICAgIHdpdGhvdXQgY29tcGxhaW50IG9yIGJhcmdhaW5pbmcuYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAtMV1cclxuICAgIF0pLCBoaW5hRGVjZXB0aW9uICsgMiwgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3RdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLCBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAyOCwgMTIsIDUpLCBgV2FpdCBhIG1pbnV0ZSwgUnVpbiBoYXMgYmVlbiB0YWxraW5nIHRvIGFsbCBvZiB0aGVtIHRvbz8gQWxsIHRoaXMgdGltZT9gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC00XSxcclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSGluYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAyOCwgMTIsIDUpLCBgSG1tLi4uIEkgZG9uJ3QgcmVhbGx5IHNlZSBSdWluJ3MgaW52ZXN0aXR1cmUgb24gaGltIC0gYXQgbGVhc3Qgbm9uZSBcclxuICAgICAgICB0aGF0IGhhc24ndCBiZWVuIHdpdGggaGltIGxvbmcgZW5vdWdoIHRvIGhhdmUgYmVjb21lIGhpcyBvd24uYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgNF0sXHJcbiAgICBdKSwgaGluYURlY2VwdGlvbik7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMjgsIDEyLCAzNSksIGBIdWgsIHdhcyBJIHNsZWVwIHBhcmFseXplZD8gUG9zc2Vzc2VkPyBDYW4ndCBiZS0gPGJyLz5cclxuICAgICAgICBUaGF0IHNhaWQsIHRoYXQgd2FzIGEgcmVhbCBob3JyaWJsZSBuaWdodG1hcmUuIEknbSByZWFsbHkuLi4gVGhhbmtzIGEgXHJcbiAgICAgICAgbG90IGZvciBleHBlbmRpbmcgc28gbXVjaCBpbnZlc3RpdHVyZSB0byByaWQgbWUgb2YgdGhhdCAtIHRob3VnaCBJIGZlYXIgXHJcbiAgICAgICAgSSBtYXkgbm90IGJlIHdvcnRoIGl0LTxici8+XHJcbiAgICAgICAgPGVtPldhaXQsIGRpZCBJIGtpbGwgYWxsIHRoZXNlIGd1eXM/IFVnaGguLi4gPC9lbT5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgM10sXHJcbiAgICBdKSwgaGluYURlY2VwdGlvbik7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLCBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAyOCwgMTIsIDQwKSwgYC4uLjxici8+XHJcbiAgICAgICAgWWVzLCBJIHRoaW5rIEknbSBjZXJ0YWluLiBZb3UgYXJlIGFsbCBnb29kIHBlb3BsZS4gQW5kIHBvc3NpYmx5IHRoZSBiZXN0XHJcbiAgICAgICAgdGhpbmcgdG8gaGF2ZSBoYXBwZW5lZCB0byBvdXIgdmlsbGFnZS48YnIvPlxyXG4gICAgICAgIFJ1emFraSBiZSBkYW1uZWQsIG15IG93biBzZWxmIGJlIGRhbW5lZC4gSSB3aWxsIG5vdCBraWxsIHlvdS5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgMV0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMjgsIDEyLCA0MCksIGBXYWl0LCB5b3UgcHJvdGVjdGVkIG1lPz8gQWdhaW4/PGJyLz5cclxuICAgICAgICBvaCBubywgbm8sIE5PISBZb3UgY2Fubm90IGRpZSBsaWtlIHRoaXMhPGJyLz5cclxuICAgICAgICA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogOXB4O1wiPlNvIGl0IGRvZXMgY29tZSB0byB0aGlzIGluIHRoZSBlbmQsIGFsbCBcclxuICAgICAgICBzYWlkIGFuZCBkb25lLCBldmVuIEkgPGVtPndpbGwgbm90PC9lbT4gYnJlYWsgbXkgb2F0aC4gU28gYWxsIHRoYXQncyBsZWZ0XHJcbiAgICAgICAgaXMgZWl0aGVyIEkgZGllIGFsb25lLCBhbmQgcmVtb3ZlIHRoZSBzaGFyZGJlYXJlciBmcm9tIHRoZSBlcXVhdGlvbiwgb3IgXHJcbiAgICAgICAgaGUga2lsbHMgbWUgYWZ0ZXIgZGlzcGF0Y2hpbmcgeW91LiBJbiBzYXZpbmcgbWUgdG9kYXkuLi4gSSBhbSBub3QgYmVpbmcgXHJcbiAgICAgICAgbWFuaXB1bGF0ZWQgdG8gZG8gdGhpcy4gWWVzLCBJIGdpdmUgbXkgbGlmZSBmb3IgeW91cnMgb2YgbXkgb3duIGZyZWUgXHJcbiAgICAgICAgd2lsbC48L3NwYW4+YCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA0XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMV0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMjgsIDEyLCA0MCksIGBZb3UgcmVhbGx5IGJyb3VnaHQgPGk+bWU8L2k+IGJhY2sgdG8gbGlmZT8gbG1hby4uLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxMF0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIDJdXHJcbiAgICBdKSwgaGluYURlY2VwdGlvbik7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDI4LCAxMiwgNDUpLCBgVHdvIHZlcnkgZGlmZmVyZW50IHByb2Zlc3NvcnMsIHR3byB2ZXJ5IGRpZmZlcmVudCBsaWZldGltZXMuPGJyLz5cclxuICAgICAgICBUaGlzIGhhZCB0byBoYXZlIGJlZW4gYSBob3Jyb3JtYXJlIC0gZmlyc3QgdGhhdCBTaGFyZGljIGNvbW1hbmQsIHRoZW4gdGhhdCBcclxuICAgICAgICA8aT5zbGVlcDwvaT4sIGFuZCB0aGVuLi4uIDxzcGFuIHN0eWxlPVwiZm9udC1zaXplOiAxMXB4OyBmb250LXN0eWxlOiBpdGFsaWM7XCI+UnV6YWtpPC9zcGFuPi4gXHJcbiAgICAgICAgV2h5IGhpbT8gV2h5IG5vdz8gV2h5IGhlcmUsIHNvIGZhciBhd2F5PyBKdXN0IHNvIHRpcmVkLCBib3VuZCwgdHJhcHBlZC4gSS4uLjxici8+XHJcbiAgICAgICAgSSByZWFsbHkgZGlkbid0IHdhbnQgdG8gYmUgYSBidXJkZW4uLi4gYnV0Li4uIHRoYW5rIHlvdSBmb3IgbGlzdGVuaW5nLlxyXG4gICAgICAgIFRoYW5rIHlvdSBmb3IgaW5kdWxnaW5nIG1lLiBUaGFuayB5b3UgZm9yIHRlbGxpbmcgbWUsIGFnYWluIGFuZCBhZ2FpbiwgXHJcbiAgICAgICAgYXMgbWFueSB0aW1lcyBhcyBJIG5lZWRlZCwgdGhhdCBmcmVlZG9tIHdhcyBhIGNob2ljZSBJIHN0aWxsIGhhZC48YnIvPlxyXG4gICAgICAgIFlvdSdsbCBwcm9iYWJseSByZWdyZXQgdGhpcyBkYXkgaW4gdGhlIGZ1dHVyZSwgYnV0IEkgc3dlYXIgdGhhdCB1bnRpbCB0aW1lIFxyXG4gICAgICAgIGVuZHMgZm9yIG1lLCBJIHdpbGwgcmVtYWluIGxveWFsIHRvIHlvdS4gQW5kIHNvIEkgd2lsbCBncmFudCB5b3UsIGZvciBmcmVlLFxyXG4gICAgICAgIHRoYXQgd2hpY2ggYWxsIG9mIHRoZW0gd291bGQga2lsbCB0byBnZXQuLi5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDddLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxMF0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIDRdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDZdLFxyXG4gICAgXSkpO1xyXG4gICAgLy8gdG9kbzogbW9zdGltYSBlbnRyeSBoZXJlIHRvbywgc2luY2Ugc2hlIHdhcyB3YXRjaGluZy4uLiAob25jZSBoZXIgb3BpbmlvbnMgYXJlIGVuYWJsZWQpLlxyXG59XHJcbmV4cG9ydHMuYXJjMjFPcGluaW9uRXZlbnRzID0gYXJjMjFPcGluaW9uRXZlbnRzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmNfMjEuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hcmMyMk9waW5pb25FdmVudHMgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgcGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvcGNJbmRleFwiKTtcclxuY29uc3QgR2FtZVRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uLy4uL0dhbWVUaW1lc3RhbXBcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uL3NpbXVsYXRpb24vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIik7XHJcbmNvbnN0IFBvc2l0aXZlRW1vdGlvbl8xID0gcmVxdWlyZShcIi4uL1Bvc2l0aXZlRW1vdGlvblwiKTtcclxuY29uc3QgczlfMSA9IHJlcXVpcmUoXCIuL3M5XCIpO1xyXG5mdW5jdGlvbiBhcmMyMk9waW5pb25FdmVudHMoKSB7XHJcbiAgICBjb25zdCBoaW5hRGVjZXB0aW9uID0gQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkhpbmEpLnBhc3NpdmVEZWNlcHRpb247XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDI5LCA4KSwgYEJlaW5nIGNhbGxlZCBhbiBpbmdyYXRlIGFmdGVyIEkgcGxlZGdlZCB0byBnaXZlIHVwIG15IGxpZmUgZm9yIHRoZW0gXHJcbiAgICAgICAgIHByaWNrcyBqdXN0IGEgYml0LiBTaWdoLCBzaGUncyBwcm9iYWJseSBraWRkaW5nLCBpc24ndCBzaGU/IFRob3VnaCBqb2tlcyBcclxuICAgICAgICAgZ2VuZXJhbGx5IGRvIGJ1aWxkIHVwb24gYW4gZWxlbWVudCBvZiB0cnV0aC4uLjxici8+XHJcbiAgICAgICAgIEkgZG9uJ3Qgd2FudCB0byBzZWUgdGhlbSB0dXJuIG91dCBsaWtlIG90aGVyIGFkdWx0cyBJJ3ZlIGJlZW4gd2l0aCAtIFxyXG4gICAgICAgICBJIHN1cHBvc2UgSSBzaG91bGQgcHJlLXBvbmUgPGk+dGhvc2U8L2k+IHBsYW5zLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAtM10sXHJcbiAgICBdKSwgaGluYURlY2VwdGlvbiArIDUpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSwgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OLCBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMjksIDgpLCBgVGhleSBhY3R1YWxseSBtYWRlIGl0PyBNZWFuaW5nLi4uIEkgbmVlZG4ndCBkaXNhcHBlYXIuLi48L2JyPlxyXG4gICAgICAgICBJLi4uIGdldCB0byBsaXZlPyBBIG5vcm1hbCBsaWZlPyBBbmQgVG9tYXNhIHRvbz8/XHJcbiAgICAgICAgIFRoaXMgaGFzIHRvIGJlIGEgZHJlYW0sIGhhc24ndCBpdD9gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDhdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxMl0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkVseXNpdW0sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLCBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAyOSwgOCksIGBUaGVzZSBndXlzIGFjdHVhbGx5IHJldHVybmVkIHN1Y2Nlc3NmdWwgZnJvbSBhIG1pc3Npb24gdGhpcyBwZXJpbG91cyBcclxuICAgICAgICAgd2l0aGluIDEgZGF5Pz8gSG1tLCB0aGV5J3JlIGZhciBmcm9tIHJ1bi1vZi10aGUtbWlsbCwgSSBtdXN0IGFkbWl0LmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF0sXHJcbiAgICBdKSwgMTAsIG5ldyBTZXQoW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGVdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkV6ZWxsLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSwgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OLCBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMjksIDgpLCBgVGhleSdyZSByZWFsbHkgYW1hemluZy4gVG8gYWNjb21wbGlzaCBzdWNoIGEgZmVhdCB3aXRoIHN1Y2ggZWxlZ2FuY2UuIFxyXG4gICAgICAgIE1lYW53aGlsZSB3ZSBjb3VsZG4ndCBldmVuIGVudGVyLSBVZ2ghYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA2XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgLTJdLFxyXG4gICAgXSksIDEwLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Sb2JlcnRhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDI5LCA4LCAxNSksIGBPaCBkZWFyLCB5b3UgcmVhbGx5IHNob3VsZG4ndCBnbyBhcm91bmQgYWNjZXB0aW5nIHJhbmRvbSBpbmplY3Rpb25zIGZyb20gXHJcbiAgICAgICAgc3RyYW5nZXJzLiBBaCB3ZWxsLCBkb24ndCB3b3JyeSAtIEknbSBub3QgZ29ubmEgYmUgdGhlIG9uZSB0byBleHBsb2l0IFxyXG4gICAgICAgIHlvdXIgZ3VsbGliaWxpdHkuYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl0sXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlJvYmVydGEpLnBhc3NpdmVEZWNlcHRpb24pO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5FbHlzaXVtLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAyOSwgOCwgMTUpLCBgU2hlIHNwb2tlIHRvIHRoZSA8aT5zdXJ2aXZvciBIaW1zZWxmPC9pPj8/ISBBbmQgdG8gdGVsbCBIaW0gb2ZmIGJlY2F1c2UgXHJcbiAgICAgICAgc2hlIGRpZG4ndCBsaWtlIEhpcyB3YXlzPyBJIGNvbnRpbnVlIHRvIGJlIGFtYXplZCBieSB5b3VyIHN0cmVuZ3RoIG9mIFxyXG4gICAgICAgIGNoYXJhY3RlciwgTXMuIEF1cmVsaWEuPGJyLz5cclxuICAgICAgICBXZWxsIEkgc3VwcG9zZSBpdCBtYXkgbm90IGJlIHRoYXQgc3VycHJpc2luZyB3aGVuIHlvdSB0YWtlIGludG8gYWNjb3VudCBcclxuICAgICAgICBoZXIgdW51c3VhbCBmYW1pbHkuIFdoYXQncyB1cCB3aXRoIGFsbCBvZiB0aGF0IG1lc3Mgd2l0aCB0aGVtIGFueXdheT9gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdLFxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5FemVsbCwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAyOSwgOCwgMTUpLCBgSG93IGNhbiBpdCBiZT8/IFRoZSBzaWdpbCBvZiBhIGhpZ2hlciB2YW1waXJpYyBmYW1pbHk/IE9uIGFuIGFhc2ltYXI/XHJcbiAgICAgICAgIEFuZCBoZSdzIG5vdCB1bmRlYWQgZWl0aGVyPzxici8+XHJcbiAgICAgICAgIEFuZCBkaWQgaGlzIGhhbG8gY2hhbmdlIGZvcm0/IFdlcmUgaGlzIHdpbmdzIGFsd2F5cyBsaWtlIHRoaXM/IERpZCBoZSBcclxuICAgICAgICAgZXZlbiBoYXZlIHRoZW0gbm9ybWFsbHk/PGJyLz5cclxuICAgICAgICAgPGVtPldoYXQgdGhlIGhlbGwgaXMgZ29pbmcgb24gaGVyZT88L2VtPmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTFdLFxyXG4gICAgXSksIDEwLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3RdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkVseXNpdW0sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMjksIDgsIDMwKSwgYE9uZSBsb29rIGF0IHRoZSBzZWEgdGVycm9yIGFuZCBoaXMgY29uY2x1c2lvbnMgYWxyZWFkeSBtYXRjaCBtaW5lLiBcclxuICAgICAgICBUaGF0J3MgaW1wcmVzc2l2ZS5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdLFxyXG4gICAgXSkpO1xyXG59XHJcbmV4cG9ydHMuYXJjMjJPcGluaW9uRXZlbnRzID0gYXJjMjJPcGluaW9uRXZlbnRzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmNfMjIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXNzaW9uT3BpbmlvbkV2ZW50czEwID0gdm9pZCAwO1xyXG5jb25zdCBwY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9zaW11bGF0aW9uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IEdhbWVUaW1lc3RhbXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9HYW1lVGltZXN0YW1wXCIpO1xyXG5jb25zdCBQb3NpdGl2ZUVtb3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9Qb3NpdGl2ZUVtb3Rpb25cIik7XHJcbmNvbnN0IHM5XzEgPSByZXF1aXJlKFwiLi9zOVwiKTtcclxuZnVuY3Rpb24gc2Vzc2lvbk9waW5pb25FdmVudHMxMCgpIHtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuUGV0cmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDQ1KSwgYFByb2RkZWQgbWUgdG8gY29uZnJvbnQgdGhlIHBhc3QuIEFib3V0IHdoYXQgaGFwcGVuZWQgdG8uLi4gdG8uLi4gXHJcbiAgICAgICAgQUFSR0ghYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLCAtMl0sXHJcbiAgICBdKSwgMTAsIG5ldyBTZXQoW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb25dKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCAxNCwgMzApLCBgU28gbWFueSBwZW9wbGUgd2FpdGluZyBvdXRzaWRlIG15IGRvb3I/IEFoLCBJIHNlZS4gSSdtIHBvcHVsYXIgbm93IGl0IHNlZW1zLmAsIG5ldyBNYXAoW10pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSGluYSwgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDE0LCA0MCksIGBEaWRuJ3QgZ2V0IGFueSBpZGVhIG9mIHdoYXQgSSBqdXN0IGRpZC4gVGhhbmsgR29kLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTFdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXSxcclxuICAgIF0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuSGluYSkucGFzc2l2ZURlY2VwdGlvbik7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkVseXNpdW0sIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCAyMSwgMjApLCBgV2VsbCwgdGhhdCB3YXMgYW4gZXhwZW5zaXZlIGludmVzdG1lbnQuIFN0aWxsLCBpdCdzIHJhcmUgZm9yIEhpbmEgdG8gXHJcbiAgICAgICAgcmVjb21tZW5kIHNvbWVvbmUsIGFuZCB0aGUgbG9jYWwgR29kZGVzcyBhbHNvIHBpY2tlZCB0aGVtIGZvciB0aGUgZmlnaHRcclxuICAgICAgICB0byBkZWNpZGUgdGhlIGZhdGUgb2YgdGhpcyB2aWxsYWdlLiBNYXliZSB0aGlzIHdpbGwgcGF5IG9mZiBoYW5kc29tZWx5P2AsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTNdLFxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5FbHlzaXVtKS5wYXNzaXZlRGVjZXB0aW9uLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3RdKSk7XHJcbiAgICBjb25zdCB0aW1lU2tpcHMgPSBuZXcgTWFwKFtcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuRHVzayxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbbnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbXV0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkFuZHJpLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5BdGhsb24sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgLy8gW05wY0lkLkJqb3JuLFxyXG4gICAgICAgIC8vIFtQY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICAvLyBQY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgLy8gUGNJbmRleC5JRF9DWVJJT05dXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuQ2VjZWxpYSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkVseXNpdW0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkVyaWNhLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkdlbmVmZSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuSGF2LFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5IaW5hLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkluZ3JpZCxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuSW9uYSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5KYXllLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5Kb3JkaSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuS2FzdG9yLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5QZXRyYSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuUm9iZXJ0YSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELlNhc2hhLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELlN5YmlsbGEsXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELlRvbWFzYSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuVmVybmEsXHJcbiAgICAgICAgICAgIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuVml0YWNpYSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuWXVraSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuRXplbGwsXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELklyZW5lLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdLFxyXG4gICAgXSk7XHJcbiAgICAoMCwgczlfMS5hZGRUaW1lU2tpcEV2ZW50KShucGNJbmRleF8xLk5wY0lELlJvYmVydGEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cyg3KSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoMjcpLCBgSG1tLi4uIGl0IHdhcyBwcmV0dHkgZnVuIGludGVyYWN0aW5nIHdpdGggYSBnb29kIG9sJyBiYWNrd2F0ZXJzIGhpcHB5ICgxMDAlIHJlYWwpIGRydWlkIFxyXG4gICAgICAgICAuIE1ha2VzIHF1aXRlIGEgZGlmZmVyZW5jZSBmcm9tIG15IHVzdWFsIGNsaWVudGVsZS4gU2lnaCxcclxuICAgICAgICAgdGhvdWdoIGhlIHJlZnVzZWQgdG8gYmVjb21lIG15IGNsaWVudCBhZnRlciBhbGwgLSBidXQgdGhhdCdzIGFsbCByaWdodCBcclxuICAgICAgICAgLSBwZW9wbGUgYXJlIHVzdWFsbHkgc2h5IGJlZm9yZSB0aGV5IGdldCBhIHRhc3RlIG9mIG15IHNlcnZpY2VzLiBOb3QgdG9cclxuICAgICAgICAgbWVudGlvbiBoZSBhbHNvIG1hbmFnZWQgdG8gcGljayB1cCBiaXRzIG9mIG15IDEwMCUgb3JnYW5pYyBuYXR1cmFsIFxyXG4gICAgICAgICBoZXJiYWwgcmVjaXBlLi4uIDxici8+YCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAwLjhdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDAuM10sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDAuNF0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRUaW1lU2tpcEV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNyksIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDI3KSwgYFNoZSdzIHB1dHRpbmcgaW4gc28gbXVjaCBlZmZvcnQgKGl0IGl0IGEgcGVuYW5jZT8pLCB5ZXQgdGhlc2Uga2lkcy4uLiBzaWdoLiBXaXRoIHRoZW0gXHJcbiAgICAgICAgYmVpbmcgdXNlbGVzcyBsaWtlIHRoYXQsIEkgc3VwcG9zZSBJIGNhbid0IGRvIG15IHVzdWFsIG9mIHV0aWxpemluZyBjbGFzcyBob3VycyBmb3IgY2F0Y2hpbmcgdXAgXHJcbiAgICAgICAgb24gamV0IGxhZy4gV2hpbGUgSSBoYXRlIHRvIGJlIHRoZSByZXNwb25zaWJsZSBzdHVkZW50LFxyXG4gICAgICAgIEkgbXVzdCBhZG1pdC4uLiBzb21ldGhpbmcgYWJvdXQgdGhpcyBjbGFzc3Jvb20gaXMuLi4gZGlmZmVyZW50Li4uXHJcbiAgICAgICAgPGJyLz5cclxuICAgICAgICAuLi48YnIvPlxyXG4gICAgICAgIEZ1Y2suIEkgdGhpbmsgSSdtIGFjdHVhbGx5IGVuam95aW5nIHRoaXMuYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAwLjddLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDAuNF0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIDAuM11cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZFRpbWVTa2lwRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSW9uYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cyg3KSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoMjcpLCBgV293LCBhIHllYXIgYWdvLCBJJ2QgbmV2ZXIgaGF2ZSBpbWFnaW5lZCB0aGlzLiBUaGF0IEknbGwgYmUgZ29pbmcgdG8gYSBcclxuICAgICAgICAgcmVndWxhciBzY2hvb2wgd2l0aCBhIHByb3BlciB0ZWFjaGVyIGFuZCB0cnVlIGZyaWVuZHMuIFRoZSBvdGhlcnMgXHJcbiAgICAgICAgIHByb2JhYmx5IGRvbid0IGFwcHJlY2lhdGUgdGhpcywgaGF2aW5nIGdyb3duIHVwIGluIGEgc2hlbHRlcmVkIGVudmlyb25tZW50LlxyXG4gICAgICAgICBCdXQgSSdtIHJlYWxseSwgdHJ1bHkgZ3JhdGVmdWwgZm9yIHRoaXMuIEknbGwgZG8gbXkgYmVzdCwgSSBzd2Vhci5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMC44XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDAuMjVdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDAuMV0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRUaW1lU2tpcEV2ZW50KShucGNJbmRleF8xLk5wY0lELlZlcm5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDcpLCBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cygyNyksIGBIZXIgY2xhc3NlcyBmb3IgdGhlIGtpZHMgYXJlIGFjdHVhbGx5IHByZXR0eSBkZWNlbnQsIGFuZCBHb2Qga25vd3MgdGhpc1xyXG4gICAgICAgICBpcyBzb21ldGhpbmcgSW9uYSBuZWVkZWQgZm9yIHByb3BlciBncm93dGguYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDAuNDVdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMC4yNV0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRUaW1lU2tpcEV2ZW50KShucGNJbmRleF8xLk5wY0lELkNlY2VsaWEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNyksIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDI3KSwgYERhbW4gaXQuIEl0IGh1cnRzIHdhdGNoaW5nIGhlciB0cnkgc28gaGFyZCwgYW5kIHlldCBJIGNhbid0IHJlY2lwcm9jYXRlLi4uXHJcbiAgICAgICAgIEJ1dCBJIGNhbid0ISBJIGp1c3QgY2FuJ3QuLi4gSSd2ZSBnb3QgYmFyZWx5IGEgeWVhciB0byBsaXZlLCB0aGUgZnVjayBcclxuICAgICAgICAgYW0gSSBzdHVkeWluZyBmb3IgYW55d2F5Pzxici8+XHJcbiAgICAgICAgIEp1c3QgbGVhdmUgbWUgYWxvbmUuIERvbid0IGxvb2sgYXQgbWUuIERvbid0IGV4cGVjdCB0aGluZ3Mgb2YgbWUuPGJyLz5cclxuICAgICAgICAgUGxlYXNlLi4uPGJyLz5cclxuICAgICAgICAgQnV0IG9mIGNvdXJzZSB5b3Ugd29uJ3QuIEFuZCBJIHN1cHBvc2UgdGhpcyBjbGFzc3Jvb20gZG9lcyBoYXZlIGl0cyBcclxuICAgICAgICAgY29vbCBtb21lbnRzLiBTaWdoLi4uIGl0IGRvZXMgaGVscCB0byB0YWtlIG15IG1pbmQgb2YgaWcuLi5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMC42XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgLTAuMV0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRUaW1lU2tpcEV2ZW50KShucGNJbmRleF8xLk5wY0lELlNhc2hhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDcpLCBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cygyNyksIGBBbm90aGVyIHBoeXNpY3MgbGVzc29uPz8/IE9oLCB3ZSdyZSBnb2luZyB0byB0aGUgYmVhY2ggdG9kYXk/YCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAwLjNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLCAtMC4wNV1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuUm9iZXJ0YSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAyNywgMjAsIDMwKSwgYFlvdSBtZWFuIHlvdSBncmV3IGFsbCB0aGUgaGVyYnMgSSdkIG1lbnRpb25lZCBpbiBhIHNlY3JldCBncm92ZSB0byBcclxuICAgICAgICB3aGljaCBJJ2xsIGhhdmUgcHJpdmlsZWdlZCBhY2Nlc3MgdG9vPyEgQ29vbCE8YnIvPlxyXG4gICAgICAgIEFsc28sIHRoaXMgbWVhbnMgSSB3b24ndCBoYXZlIHRvIGtlZXAgYmVnZ2luIEJqb3JuIGFsd2F5cyB0byByZW1lbWJlciB0b1xyXG4gICAgICAgIGdldCB0aG9zZSBoZXJicyBmb3IgbWUsIGFuZCB3b24ndCBoYXZlIHRvIGRlcGVuZCBvbiBoaXMgd2hpbXM/IFdvb2hvb28hIVxyXG4gICAgICAgIChXb25kZXIgd2hlcmUgaGUncyBkaXNhcHBlYXJlZCBvZmYgdG8gYW55d2F5Li4uKWAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCA4XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRUaW1lU2tpcEV2ZW50KShucGNJbmRleF8xLk5wY0lELlZlcm5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNyksIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDI3KSwgYGAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMC4yXSxcclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZFRpbWVTa2lwRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSmF5ZSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDcpLCBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cygyNyksIGBBaCBpdCBzZWVtcyBJIGdvdCBteXNlbGYgYSByb3V0aW5lIGN1c3RvbWVyIChldmVuIGlmIHRoZXkgZG9uJ3QgcGF5KS4gXHJcbiAgICAgICAgU3RyYW5nZSB0aG8sIG5ldmVyIHdvdWxkJ3ZlIGd1ZXNzZWQgaGltIGFzIGEgc2VhZm9vZCBsb3Zlci4uLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMC4xXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMC4yXSxcclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZFRpbWVTa2lwRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQXRobG9uLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNyksIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDE3KSwgYGAsIG5ldyBNYXAoKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkF0aGxvbiwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCAxNywgOSwgMzApLCBcIk5lZ2F0ZWQgdGhlIGRyaW5rIGFuZCBmb3JjZWQgbWUgdG8gZmFjZSBhIHdvcmxkIEkgY2FuJ3QgYmVhciB0byBmYWNlLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIC0zXSxcclxuICAgIF0pLCAxMCwgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbl0pKTtcclxuICAgICgwLCBzOV8xLmFkZFRpbWVTa2lwRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQXRobG9uLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoMTgpLCBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cygyNyksIGBgLCBuZXcgTWFwKCkpO1xyXG4gICAgKDAsIHM5XzEuYWRkVGltZVNraXBFdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EdXNrLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoMiksIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDI3KSwgXCJcIiwgbmV3IE1hcCgpKTtcclxuICAgICgwLCBzOV8xLmFkZFRpbWVTa2lwRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUywgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OLCBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNyksIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDI3KSwgXCJcIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMC4yXVxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkVGltZVNraXBFdmVudCkobnBjSW5kZXhfMS5OcGNJRC5FcmljYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cyg3KSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoMjcpLCBcIlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAwLjRdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAwLjNdLFxyXG4gICAgXSkpO1xyXG4gICAgZm9yIChjb25zdCBbbnBjLCBwY3NdIG9mIHRpbWVTa2lwcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAoMCwgczlfMS5hZGRUaW1lU2tpcEV2ZW50KShucGMsIHBjcywgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNyksIEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wLmZyb21EYXlzKDI3KSwgXCJcIiwgbmV3IE1hcCgpKTtcclxuICAgICAgICAvLyBBbGwgdGhvc2UgcGFydCBvZiB0aGUgdGltZXNraXAsIGV4Y2VwdCBkdXNrIGFuZCBoaW5hLCB3b3VsZCBoYXZlXHJcbiAgICAgICAgLy8gc29tZXRoaW5nIHRvIHNheSBhYm91dCB0aGUgY2xhc2ggYmV0d2VlbiBIZWxpb3MgYW5kIEp1bGl1cy4gV2hvc2VcclxuICAgICAgICAvLyBzaWRlIHRoZXkgdGFrZSB3b3VsZCBtYWlubHkgZGVwZW5kIG9uIGhvdyB0aGV5IGZlZWwgYWJvdXQgSGVsaW9zXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zZXNzaW9uT3BpbmlvbkV2ZW50czEwID0gc2Vzc2lvbk9waW5pb25FdmVudHMxMDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9czEwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMxMSA9IHZvaWQgMDtcclxuY29uc3QgcGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvcGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiKTtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBHYW1lVGltZXN0YW1wXzEgPSByZXF1aXJlKFwiLi4vLi4vR2FtZVRpbWVzdGFtcFwiKTtcclxuY29uc3QgUG9zaXRpdmVFbW90aW9uXzEgPSByZXF1aXJlKFwiLi4vUG9zaXRpdmVFbW90aW9uXCIpO1xyXG5jb25zdCBzOV8xID0gcmVxdWlyZShcIi4vczlcIik7XHJcbmZ1bmN0aW9uIHNlc3Npb25PcGluaW9uRXZlbnRzMTEoKSB7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkpheWUsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMjcsIDIxLCAwKSwgXCJZb3Uga25vdyBib3NzLCB5b3UgZ290IG9uZSBoZWxsIG9mIGEgc2lsdmVyIHRvbmd1ZS4gT2ssIEknbSBjb252aW5jZWQsIFwiICtcclxuICAgICAgICBcImJ1dCB5b3Ugb3dlIG1lIDxlbT5iaWc8L2VtPiB0aW1lIG5vdy5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA0XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIC0xXSxcclxuICAgIF0pKTtcclxuICAgIGNvbnN0IG5wY1JlYWN0aW9ucyA9IG5ldyBNYXAoW1xyXG4gICAgICAgIC8vIE5wY0lkLkR1c2ssXHJcbiAgICAgICAgLy8gTnBjSWQuRGF3bixcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuQW5kcmksXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5BdGhsb24sXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5DZWNlbGlhLFxyXG4gICAgICAgICAgICBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCxcclxuICAgICAgICAgICAgICAgICAgICA0XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgLTFcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIC0xXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkNvcm90byxcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkVseXNpdW0sXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDRcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAxXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgM11cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5FcmljYSxcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgM1xyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkdlbmVmZSxcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDFcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkhhdixcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkhpbmEsXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAxXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgM11cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5JbmdyaWQsXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5Jb25hLFxyXG4gICAgICAgICAgICBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCxcclxuICAgICAgICAgICAgICAgICAgICA0XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDJdXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSxcclxuICAgICAgICAvLyBbTnBjSWQuSmF5ZSwgICAgICBuZXdcclxuICAgICAgICAvLyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMl0sXHJcbiAgICAgICAgLy8gW1Bvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDJdLFxyXG4gICAgICAgIC8vIFtQb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDJdXSldLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5Kb3JkaSxcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELkthc3RvcixcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgNFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIC00XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5QZXRyYSxcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELlJvYmVydGEsXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5TYXNoYSxcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgNFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDFcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELlN5YmlsbGEsXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5Ub21hc2EsXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5WZXJuYSxcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgNFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBucGNJbmRleF8xLk5wY0lELlZpdGFjaWEsXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDNcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICA0XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5ZdWtpLFxyXG4gICAgICAgICAgICBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCxcclxuICAgICAgICAgICAgICAgICAgICA0XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDJdXHJcbiAgICAgICAgICAgIF0pXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG5wY0luZGV4XzEuTnBjSUQuRXplbGwsXHJcbiAgICAgICAgICAgIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIDRcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAxXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgM11cclxuICAgICAgICAgICAgXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5JcmVuZSxcclxuICAgICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIDFcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXVxyXG4gICAgICAgICAgICBdKVxyXG4gICAgICAgIF0sXHJcbiAgICBdKTtcclxuICAgIGNvbnN0IGFmdGVybWF0aFRpbWUgPSBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMjgsIDExLCAwKTtcclxuICAgIGZvciAoY29uc3QgW25wYywgcmVhY3Rpb25NYXBdIG9mIG5wY1JlYWN0aW9ucy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGMsIFtcclxuICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sXHJcbiAgICAgICAgXSwgYWZ0ZXJtYXRoVGltZSwgXCI8ZW0+KE9uIERhd24gZXhwbGFpbmluZyB0aGUgZW50aXJlIHNpdHVhdGlvbiBhbmQgdGhlIGNvbWJhdC4pPC9lbT5cIiwgcmVhY3Rpb25NYXApO1xyXG4gICAgfVxyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5KYXllLCBbXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OLFxyXG4gICAgXSwgYWZ0ZXJtYXRoVGltZSwgXCJXZWxsLCBkZXNwaXRlIGV2ZXJ5dGhpbmcsIEkgZ290dGEgc2F5IC0gZGlkbid0IGV4cGVyaWVuY2UgdGhpcyBcIiArXHJcbiAgICAgICAgXCJhZHJlbmFsaW5lIGluIGEgbG9uZyB0aW1lLCBCb3NzKGVzPykuIFlvdSBmaWdodCBsaWtlIHJlYWwgcG9sYXIgYmVhcnMuIFwiICtcclxuICAgICAgICBcIkFsc28sIEkgZGFyZXNheSBJJ2xsIGdldCBtb3JlIGN1c3RvbWVycyBub3cuIFJpZ2h0LCBnb3R0YSBnZXQgYmFjayB0byB0aGUgXCIgK1xyXG4gICAgICAgIFwiY2hvcHBpbmcgYm9hcmQhPGJyLz5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA4XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgOV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgNl0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkRhd24sIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sXHJcbiAgICBdLCBhZnRlcm1hdGhUaW1lLCBcIkkgc3VwcG9zZS4uLiBpdCBpcyBvdmVyPyA0MDAgeWVhcnMuIEJ1dCBJIGRvbid0IHdhbnQgdG8gLVwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgLTNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLCAtMl0sXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkRhd24pLnBhc3NpdmVEZWNlcHRpb24gLSA1KTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuVmVybmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBhZnRlcm1hdGhUaW1lLCBcIlNvIHRoYXQncyB3aGF0IHRoZSBzcGFycmluZyB3YXMgYWJvdXQuIChTYWQgc21pbGUpIFByaWNrcyBqdXN0IGEgXCIgK1xyXG4gICAgICAgIFwiYml0Li4uXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAtMV0sXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlZlcm5hKS5wYXNzaXZlRGVjZXB0aW9uLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EdXNrLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDI4LCA5LCAwKSwgXCJPaD8gSGUncyBob3QuPGJyLz5cIiArXHJcbiAgICAgICAgXCI8cCBzdHlsZT0nZm9udC1zaXplOiAxMXB4Jz5BbmQgY291bGQgYmUgY2FsbGVkIGNvb2wgdG9vLCBub3cgdGhhdCBJIHRoaW5rIG9mIGl0Li4uIGhtbSwgU3VuIGFuZCB3aW5kLi4uPGJyLz5cIiArXHJcbiAgICAgICAgXCJBbmQganVzdCBsaWtlIHRoYXQsIGFuIGFydGlzdCwgc2x1bWJlcmluZyBmb3Igd2F5IHRvbyBsb25nLCBnZXRzIFwiICtcclxuICAgICAgICBcImluc3BpcmF0aW9uIGFnYWluLiBBbmQgZ29pbmcgYWxsIGluPyBpbiB0aGF0IHN0YXRlPyBIdWgsIGNvbWluZyBmcm9tIFwiICtcclxuICAgICAgICBcImEgY2hhbXBpb24gb2YgUnVpbiwgdGhhdCdzLi4uIGRhbmdlcm91cy48YnIvPlwiICtcclxuICAgICAgICBcIkxvZ2ljYWxseSwgSSBzaG91bGQgZHJhdyB0aGUgc3dvcmQsIGJ1dCB3aGltc3kgY29tcGVscyBtZSB0byB0aGUgXCIgK1xyXG4gICAgICAgIFwiYnJ1c2ggaW5zdGVhZC48L3A+XCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDddLFxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EdXNrLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDI4LCA5LCAwKSwgXCJTdGFuZHMgYmFjaywgb3V0IG9mIHRoZSBsaW1lbGlnaHQuIEJ1dCB3aXRob3V0IGhpbSwgTXIuIFNoYXNoIFwiICtcclxuICAgICAgICBcIndvdWxkJ3ZlIGJlZW4gZGVhZCB0d28gdGltZXMgb3Zlci4gQm9yaW5nIGFzIGEgcHJpbWFyeSBzdWJqZWN0LCBidXQgXCIgK1xyXG4gICAgICAgIFwidGhlIHJlbGlhYmlsaXR5IG1ha2VzIHRoZSBiYWNrZHJvcCBvaCBzbyBtdWNoIGJldHRlci4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDNdLFxyXG4gICAgXSkpO1xyXG59XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMxMSA9IHNlc3Npb25PcGluaW9uRXZlbnRzMTE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXMxMS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNlc3Npb25PcGluaW9uRXZlbnRzMDIgPSB2b2lkIDA7XHJcbmNvbnN0IHBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL3BjSW5kZXhcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgR2FtZVRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uLy4uL0dhbWVUaW1lc3RhbXBcIik7XHJcbmNvbnN0IFBvc2l0aXZlRW1vdGlvbl8xID0gcmVxdWlyZShcIi4uL1Bvc2l0aXZlRW1vdGlvblwiKTtcclxuY29uc3QgczlfMSA9IHJlcXVpcmUoXCIuL3M5XCIpO1xyXG5mdW5jdGlvbiBzZXNzaW9uT3BpbmlvbkV2ZW50czAyKCkge1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EdXNrLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSwgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OLCBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMSwgMTIsIDApLCBcIldoeSBhcmUgQ2hhbXBpb25zIG9mIFJ1aW4gaGVyZT8gSSBkbyBub3QgcmVtZW1iZXIgZG9pbmcgXCIgK1xyXG4gICAgICAgIFwiYW55dGhpbmcgdG8gcHJvdm9rZSBoaW0uIEFueXdheS4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtMV1cclxuICAgIF0pLCAxMCwgXHJcbiAgICAvLyBDaGFyYWN0ZXIuSW5kZXguZ2V0KE5wY0lkLkR1c2spLnBhc3NpdmVEZWNlcHRpb24gKyA1LFxyXG4gICAgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0XSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EdXNrLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSwgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OLCBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgMSwgMTMsIDApLCBcIlNvIHRoZXNlIGd1eXMgYmVpbmcgaGVyZSBpcyBwcm9iYWJseSBub3QgcmVsYXRlZCB0byBtZSB0b28uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXVxyXG4gICAgXSksIDEwKTtcclxuICAgIC8vIENvbnZlcnNhdGlvbiB3aXRoIERhd24uXHJcbiAgICAvLyBucGNPcGluaW9ucy5nZXQoTnBjSW5kZXguSURfREFXTikuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gICAgIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KFxyXG4gICAgLy8gICAgICAgICBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCA5LCAwKSxcclxuICAgIC8vICAgICAgICAgXCJQb2xpdGUsIGFuZCBzYXlzIGZ1bm55IHN0dWZmIGxpa2UgYXNraW5nIGlmIHdlIHdhbnQgdG9cclxuICAgIC8vIHNhY3JpZmljZSB0aGVtLi4uXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMl1dKSApICk7XHJcbiAgICAvLyBucGNPcGluaW9ucy5nZXQoTnBjSW5kZXguSURfREFXTikuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KCBuZXdcclxuICAgIC8vIE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDUsIDksIDApLCBcIlNlZW1zIHRvIGhhdmUgYVxyXG4gICAgLy8gcmF0aGVyIGV4b3RpYyBwZXQuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV1dKSApICk7XHJcbiAgICBmb3IgKGNvbnN0IHBjIG9mIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFcclxuICAgIF0pIHtcclxuICAgICAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkRhd24sIFtwY10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCA5LCAwKSwgXCJBIHBvbGl0ZSBidW5jaCBpdCBzZWVtcy5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXV0pKTtcclxuICAgICAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELlRvbWFzYSwgW3BjXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDksIDApLCBcIkxpa2VkIHRoZSBzb3VwIEkgbWFkZS5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDFdXSkpO1xyXG4gICAgfVxyXG4gICAgLy8gbnBjT3BpbmlvbnMuZ2V0KE5wY0luZGV4LklEX1RPTUFTQSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gICAgIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KFxyXG4gICAgLy8gICAgICAgICBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCA5LCAzMCksXHJcbiAgICAvLyAgICAgICAgIFwiRnVuIHRvIGhhbmcgb3V0IHdpdGgsIGFsc28gcGV0dGVkIEp1bGl1cy5cIixcclxuICAgIC8vICAgICAgICAgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXV0pXHJcbiAgICAvLyAgICAgKVxyXG4gICAgLy8gKTtcclxuICAgIC8vIG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChOcGNJbmRleC5JRF9UQUlIRSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDUsIDksIDMwKSwgXCJGdW4gdG8gaGFuZ1xyXG4gICAgLy8gb3V0IHdpdGguXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV1dKSApICk7XHJcbiAgICAvLyBJbnRlcmFjdGlvbiB3aXRoIEhpbmEgYXMgc2hlIHRvb2sgdGhlbSB0byBDZWMuXHJcbiAgICAvLyBucGNPcGluaW9ucy5nZXQoTnBjSW5kZXguSURfSElOQSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gICAgIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KFxyXG4gICAgLy8gICAgICAgICBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxMCwgMCksXHJcbiAgICAvLyAgICAgICAgIFwiTm90IGVudGlyZWx5IHdpdGhvdXQgYSBzZW5zZSBvZiBodW1vci5cIixcclxuICAgIC8vICAgICAgICAgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXSxcclxuICAgIC8vICAgICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV1dKVxyXG4gICAgLy8gICAgIClcclxuICAgIC8vICk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTAsIDApLCBcIkNvb2xlciB0aGFuIEkgZXhwZWN0ZWQgYWFzaW1hci9wYWxhZGlucyB0byBiZS5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXV0pKTtcclxuICAgIC8vIEludGVyYWN0aW9uIHdpdGggQ2VjLi9TYXNoYSBwdC4xLlxyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5DZWNlbGlhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDEwLCAzMCksIFwiQSBmcmllbmQgb2YgbXkgYnJvdGhlci4gU2VlbXMgdG8gYmUgYXMgbm9ibGUgYW5kIGtpbmQgYXMgSSdkIGV4cGVjdC5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA0XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCA0XVxyXG4gICAgXSkpO1xyXG4gICAgLy8gbnBjT3BpbmlvbnMuZ2V0KE5wY0luZGV4LklEX1NBU0hBKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoXHJcbiAgICAvLyAgICAgbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoXHJcbiAgICAvLyAgICAgICAgIG5ldyBHYW1lVGltZXN0YW1wKDAsIDUsIDEwLCA0NSksXHJcbiAgICAvLyAgICAgICAgIFwiV2h5J3MgdGhpcyBmdWNrZXIgdGFraW5nIGFuIGludGVyZXN0IGluIG1lP1wiLFxyXG4gICAgLy8gICAgICAgICBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMl1dKVxyXG4gICAgLy8gICAgIClcclxuICAgIC8vICk7XHJcbn1cclxuZXhwb3J0cy5zZXNzaW9uT3BpbmlvbkV2ZW50czAyID0gc2Vzc2lvbk9waW5pb25FdmVudHMwMjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9czIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXNzaW9uT3BpbmlvbkV2ZW50czAzID0gdm9pZCAwO1xyXG5jb25zdCBwY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9wY0luZGV4XCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IEdhbWVUaW1lc3RhbXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9HYW1lVGltZXN0YW1wXCIpO1xyXG5jb25zdCBQb3NpdGl2ZUVtb3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9Qb3NpdGl2ZUVtb3Rpb25cIik7XHJcbmNvbnN0IHM5XzEgPSByZXF1aXJlKFwiLi9zOVwiKTtcclxuZnVuY3Rpb24gc2Vzc2lvbk9waW5pb25FdmVudHMwMygpIHtcclxuICAgIC8vIENlY2VsaWEtSGVsaW9zL0F1cmVsaWFcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQ2VjZWxpYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxMSwgMCksIFwiQmVhcmVyIG9mIGFuIGF3ZnVsIHRydXRoIGFib3V0IE1vc3RpbWEvQW5kb2Fpbi5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIC0yXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMl1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQ2VjZWxpYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxMSwgMTUpLCBcIlNlZW1lZCBjb25jZXJuZWQgYWJvdXQgbXkgc3RhdGUuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXV0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQ2VjZWxpYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxMSwgMzApLCBcIlNlZW1lZCBpbnRlcmVzdGVkIGluIGhlbHBpbmcgb3V0IEFuZG9haW4gYW5kIG15c2VsZi5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDFdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQ2VjZWxpYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTIsIDApLCBcIlRvb2sgYW4gaW50ZXJlc3QgaW4gbXkgaGVhbHRoIGFuZCBvZmZlcmVkIHdvcmRzIG9mIGNvbWZvcnQuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXV0pKTtcclxuICAgIC8vIFNhc2hhLVF1aW5uL0N5cmlvblxyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX1NBU0hBKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoXHJcbiAgICAvLyBuZXcgTnBjSW50ZXJhY3Rpb25FdmVudCggbmV3IEdhbWVUaW1lc3RhbXAoMCwgNSwgMTEsIDE1KSwgXCJDb250aW51ZXMgdG9cclxuICAgIC8vIHRha2UgYW4gaW50ZXJlc3QuIFlldCBob3cgbG9uZyBiZWZvcmUgaGUgZGVjaWRlcyBJJ20gXCIgKyBcIm5vdCB3b3J0aCBpdFxyXG4gICAgLy8gYW5kIGxlYXZlcy9oYXRlcyBtZSB0b28uLi5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDFdLFxyXG4gICAgLy8gW1Bvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTJdXSksIDE4LCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLlRydXN0LFxyXG4gICAgLy8gdHJ1ZV1dKSApICk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkdlbmVmZSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxMSwgNDUpLCBcIlByeWluZyBpbnRvIGhvdyBJIGxvb2sgYWZ0ZXIgdGhlc2Uga2lkcywgbGlrZSBJIHdlcmUgZ3VpbHR5IG9mIHNvbWV0aGluZy5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAtMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTFdXHJcbiAgICBdKSwgMTcpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5TYXNoYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxMSwgNDUpLCBcIlRoaW5rcyBJJ20gbWVudGFsbHkgdW5zdGFibGUuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTFdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC0xXVxyXG4gICAgXSkpO1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX1NBU0hBKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoXHJcbiAgICAvLyBuZXcgTnBjSW50ZXJhY3Rpb25FdmVudCggbmV3IEdhbWVUaW1lc3RhbXAoMCwgNSwgMTEsIDQ1KSwgXCJPZmZlcmVkIHRvXHJcbiAgICAvLyBicmVhayBtZSBvdXQgYW5kIHBpc3NlZCBvZmYgdGhhdCBoYWcuXCIsIG5ld1xyXG4gICAgLy8gTWFwKFtbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDFdXSkgKSApO1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX0dFTkVGRSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDUsIDExLCA0NSksIFwiSSBkb24ndCB0aGlua1xyXG4gICAgLy8gaGUgd2FzIGpva2luZyBhYm91dCBsZXR0aW5nIHRoZSBicmF0IG91dC5cIiwgbmV3XHJcbiAgICAvLyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC0xXV0pICkgKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuR2VuZWZlLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDEyLCAwKSwgXCJBY2tub3dsZWRnZXMgaG93IGhhcmQgSSB3b3JrIGZvciB0aGVzZSBraWRzLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXSxcclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuU2FzaGEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTIsIDApLCBcIlByYWlzaW5nIHRoYXQgaGFnLlwiLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIC0xXV0pKTtcclxuICAgIC8vIFF1aW5uIENlY2VsaWEgZmxpZ2h0LlxyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX0NFQ0VMSUEpLmdldChQY0luZGV4LklEX1FVSU5OKS5hZGRFdmVudChcclxuICAgIC8vIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KCBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxMiwgMzApLCBcIkFncmVlZCB0byBhXHJcbiAgICAvLyBzdWRkZW4sIHdoaW1zaWNhbCBhbmQgaW1wb3NpbmcgcmVxdWVzdCBiZWNhdXNlIGhlIGdhdmUgaGlzIHdvcmQuXCIsIG5ld1xyXG4gICAgLy8gTWFwKFtbUG9zaXRpdmVFbW90aW9uLlRydXN0LCA0XSwgW1Bvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA0XV0pICkgKTtcclxuICAgIC8vIG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChOcGNJbmRleC5JRF9DRUNFTElBKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoXHJcbiAgICAvLyBuZXcgTnBjSW50ZXJhY3Rpb25FdmVudCggbmV3IEdhbWVUaW1lc3RhbXAoMCwgNSwgMTIsIDMwKSwgXCJMZXQgbWVcclxuICAgIC8vIGV4cGVyaWVuY2UgZmxpZ2h0LlwiLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgM11dKSApICk7XHJcbiAgICAvLyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSW5kZXguSURfQ0VDRUxJQSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDUsIDEyLCAzMCksIFwiRmxhdW50ZWQgaGlzXHJcbiAgICAvLyBmbGlnaHQsIGNvbXBhcmVkIGhpcyBzdGF0ZSB0byBtaW5lIGFuZCBtYWRlIG1lIHB1a2UuXCIsIG5ld1xyXG4gICAgLy8gTWFwKFtbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgLTFdLCBbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIC0xXV0pLCAxMCwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIHRydWVdXSkgKSApOyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSW5kZXguSURfQ0VDRUxJQSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KCBuZXcgTnBjSW50ZXJhY3Rpb25FdmVudCggbmV3IEdhbWVUaW1lc3RhbXAoMCwgNSwgMTIsIDMwKSwgXCJEaWRuJ3QgbWluZCBtZSBwdWtpbmcgb3ZlciBoaW0sIGFuZCBjb25zb2xlZCBtZSB3aXRoIGFuIGFuZWNkb3RlLlwiLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMl0sIFtQb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV0sIFtQb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdXSkgKSApO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5DZWNlbGlhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDEyLCAzMCksIFwiSGVoZSwgcHVrZWQgaW4gaGlzIGZpcnN0IGZsaWdodCBkZXNwaXRlIGJlaW5nIGhlYWx0aHkuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIC0yXVxyXG4gICAgXSkpO1xyXG4gICAgLy8gUXVpbm4gSGluYVxyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX0hJTkEpLmdldChQY0luZGV4LklEX1FVSU5OKS5hZGRFdmVudChcclxuICAgIC8vIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KCBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxMywgMCksIFwiU2VlbXNcclxuICAgIC8vIGludGVyZXN0ZWQgaW4gZ2FtaW5nL3RlY2gvaW5ub3ZhdGlvbiBhbmQga2VwdCBoaXMgaHVtb3VyIG9uIFwiICsgXCJzZWVpbmdcclxuICAgIC8vIGhpcyBvd24gYXZhdGFyLiBQcm9iYWJseSBjYW4gdGVhY2ggdGhpcyBuZWFuZGVydGhhbCBhIFwiICsgXCJmZXdcclxuICAgIC8vIHRoaW5ncy4uLlwiLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdXSkgKSApO1xyXG4gICAgLy8gSW50ZXJhY3Rpbmcgd2l0aCBFcmljYS5cclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRXJpY2EsIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFcclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxMywgMzApLCBcIlNlZW0gbGlrZSBhIHdlbGwtbWFubmVyZWQgYnVuY2guIEFza2VkIGZvciBwZXJtaXNzaW9uIHRvIGVudGVyIG91ciBnYXJkZW4gaW5zdGVhZCBvZiBqdW1waW5nIG92ZXIgdGhlIGJ1c2guXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV1cclxuICAgIF0pKTtcclxufVxyXG5leHBvcnRzLnNlc3Npb25PcGluaW9uRXZlbnRzMDMgPSBzZXNzaW9uT3BpbmlvbkV2ZW50czAzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zMy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNlc3Npb25PcGluaW9uRXZlbnRzMDQgPSB2b2lkIDA7XHJcbmNvbnN0IHBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL3BjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uL3NpbXVsYXRpb24vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgR2FtZVRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uLy4uL0dhbWVUaW1lc3RhbXBcIik7XHJcbmNvbnN0IFBvc2l0aXZlRW1vdGlvbl8xID0gcmVxdWlyZShcIi4uL1Bvc2l0aXZlRW1vdGlvblwiKTtcclxuY29uc3QgczlfMSA9IHJlcXVpcmUoXCIuL3M5XCIpO1xyXG5mdW5jdGlvbiBzZXNzaW9uT3BpbmlvbkV2ZW50czA0KCkge1xyXG4gICAgLy8gUHJldmlvdXMgc2Vzc2lvbi5cclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQ29yb3RvLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxMywgMzApLCBcIkRpZG4ndCBzZWVtIHRvIGhvbGQgcmVzcGVjdCBmb3IgbXkgcG9zaXRpb24uXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTJdLF0pKTtcclxuICAgIC8vIFRhbGsgd2l0aCBDb3JvdG8uXHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkNvcm90bywgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNCwgMCksIFwiQWNrbm93bGVkZ2VkIG15IGhvbm9yIGZvciB0aGUgZmF0aGVybGFuZC5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMl1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQ29yb3RvLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE0LCAwKSwgXCJDb21lcyBmcm9tIGEgd2VhayBjb3VudHJ5IGFuZCBhIGZlbWluaW5lIHJhY2UuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC0xXVxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTQsIDApLCBcIkFwcGVhcnMgdG8gaGF2ZSByZXNwZWN0IGZvciBvdXIgZmF0aGVybGFuZC5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDFdXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTQsIDApLCBcIkNvbWVzIGZyb20gYSBwb3dlcmZ1bCBjb3VudHJ5IGFuZCBhIG5vYmxlIHJhY2UuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQ29yb3RvLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE0LCAwKSwgXCJXYXMgd29ycmllZCBhYm91dCBvdXIgc2FmZXR5LlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuQ29yb3RvLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE0LCAwKSwgXCJQcm9taXNlZCB3aXRoIGhvbm9yIHRvIGRlZmVuZCB1cyBzaG91bGQgdGhlIG5lZWQgYXJpc2UuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkNvcm90bywgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNCwgMzApLCBcIldhcyBnYWxsaXZhbnRpbmcgd2l0aCBteSB3aWZlLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIC0xXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIC0xXSxcclxuICAgIF0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuQ29yb3RvKS5wYXNzaXZlRGVjZXB0aW9uICsgNSk7XHJcbiAgICAvLyBUYWxrIHdpdGggRXJpY2EuXHJcbiAgICAvLyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSWQuRXJpY2EpLmdldChQY0luZGV4LklEX1BBTlpFUikuYWRkRXZlbnQoXHJcbiAgICAvLyAgICAgbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoXHJcbiAgICAvLyAgICAgICAgIG5ldyBHYW1lVGltZXN0YW1wKDAsIDUsIDE0LCAyNSksXHJcbiAgICAvLyAgICAgICAgIFwiV2FzIGludGVyZXN0ZWQgaW4gbXkgeW91dGggd2l0aCBDb3JvdG8gYW5kIG91ciBwYXN0IHRvZ2V0aGVyLlwiLFxyXG4gICAgLy8gICAgICAgICBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMV1dKVxyXG4gICAgLy8gICAgIClcclxuICAgIC8vICk7XHJcbiAgICAvL1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0lkLkVyaWNhKS5nZXQoUGNJbmRleC5JRF9QQU5aRVIpLmFkZEV2ZW50KFxyXG4gICAgLy8gICAgIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KFxyXG4gICAgLy8gICAgICAgICBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxNCwgMjUpLFxyXG4gICAgLy8gICAgICAgICBcIlJlbWluZGVkIG1lIG9mIGhhcHBpZXIgdGltZXMgaW4gbXkgZmF0aGVyJ3MgZXN0YXRlIGFuZFxyXG4gICAgLy8gSXZhbmdyYWQuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXV0pICkgKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRXJpY2EsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTQsIDI1KSwgXCJSZW1pbmRlZCBtZSBvZiBoYXBwaWVyIHRpbWVzIGluIG15IGZhdGhlcidzIGVzdGF0ZSBhbmQgSXZhbmdyYWQuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXV0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRXJpY2EsIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICBdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTQsIDI1KSwgXCJXZXJlIHBvbGl0ZSB0byBtZSB3aGVuIHdoZW4sIGluIG15IGZhaWxpbmcgbWVtb3J5LCBJIGNvdWxkbid0IFwiICtcclxuICAgICAgICBcImhlbHAgdGhlbSBtdWNoXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDFdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkVyaWNhLCBbXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXHJcbiAgICBdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTQsIDMwKSwgXCJUaGVpciBjb21pbmcgaGVyZSB3aWxsIHNoYWtlIHRoaW5ncyB1cC5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTJdXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5FcmljYSkucGFzc2l2ZURlY2VwdGlvbiArIDUpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8sIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTixcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NcclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNCwgMzApLCBcIlRoZWlyIGNvbWluZyBoZXJlIGNhbiBjYXVzZSBtdWNoIHRyb3VibGUuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC0yXV0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuQ29yb3RvKS5wYXNzaXZlRGVjZXB0aW9uICsgNSk7XHJcbiAgICAvLyBJbiBKb3JkaSdzIGhvdXNlLlxyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Kb3JkaSwgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNSwgMzApLCBcIkFzIGEgZmlyc3QgaW1wcmVzc2lvbiwgdGhleSBzZWVtIHRvIGJlIGtpbmQgYW5kIGh1bWJsZSBwZW9wbGUuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSm9yZGksIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTUsIDMwKSwgXCJHYXplZCBhdCB0aGUgc2VhIHdpc3RmdWxseS4gRG9lcyBoZSB0b28gYmVsb25nIHRoZXJlP1wiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkpvcmRpLCBbXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE1LCA0NSksIFwiV2FzIGNvbmNlcm5lZCBhYm91dCB0aGUgZGlzYXN0ZXIgdGhhdCBzdHJ1Y2sgb3VyIGxhbmQgYW5kIG15IFwiICtcclxuICAgICAgICBcImhhcnNoIGV4cGVyaWVuY2UgaW4gaXQuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXVxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Kb3JkaSwgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNSwgNDUpLCBcIldhcyBjdXJpb3VzIGFib3V0IHRoZSBzcGVhcmhlYWQgc3RvbmUgYW5kIG9mIG15IHVuY2xlJ3MgXCIgK1xyXG4gICAgICAgIFwidHJhdmVscy5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkpvcmRpLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE2LCAwKSwgXCJOb3RlZCB0aGUgdmFsdWUgb2YgZmlzaGluZyBpbiBlbnJpY2hpbmcgdGhlIGxvY2FsIGRpZXQuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV1dKSk7XHJcbiAgICAvLyBBdCBQZXRyYSdzIG1lYWwuXHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELlBldHJhLCBbXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICBdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTYsIDMwKSwgXCJJJ20gc3VyZSB0aGV5J3JlIGFsbCBnb29kIHlvdXRocyBhbmQgYW0gaGFwcHkgdG8gaGF2ZSB0aGVtIHdpdGggdXMuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgM10sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMyxdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAzXVxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5QZXRyYSwgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNiwgMzApLCBcIkknbSBnbGFkIHRoZXkgcGFydG9vayBpbiB0aGUgbWVhbCB3ZSBtYWRlIGFuZCBnYXZlIHVzIGNvbXBhbnkuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAzXV0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuUGV0cmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTYsIDQ1KSwgXCJJJ20gc3VycHJpc2VkIGFuZCBoYXBweSB0aGF0IHRoZXkgYXJlIHdpbGxpbmcgdG8gaGVhciBvdXQgdGhlIFwiICtcclxuICAgICAgICBcInN0b3J5IG9mIGFuIG9sZCBub2JvZHkgbGlrZSBteXNlbGYuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCA0XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDJdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTYsIDMwKSwgXCJTdGFycnktZHVkZSdzIG5vdCB0b28gZm9uZCBvZiBnYW1pbmcsIGl0IHNlZW1zLlwiLCBuZXcgTWFwKCkpO1xyXG4gICAgLy9cclxuICAgIC8vIG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChOcGNJZC5IaW5hKS5nZXQoUGNJbmRleC5JRF9QQU5aRVIpLmFkZEV2ZW50KFxyXG4gICAgLy8gICAgIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KFxyXG4gICAgLy8gICAgICAgICBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxNiwgMzApLFxyXG4gICAgLy8gICAgICAgICBcIkh1aCwgdGhhdCBzdHVwaWQgYm90IGFjdHVhbGx5IGNoYWxsZW5nZWQgbXkgc2tpbGxzLlwiLFxyXG4gICAgLy8gICAgICAgICBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDFdXSlcclxuICAgIC8vICAgICApXHJcbiAgICAvLyApO1xyXG4gICAgLy9cclxuICAgIC8vIG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChOcGNJZC5IaW5hKS5nZXQoUGNJbmRleC5JRF9QQU5aRVIpLmFkZEV2ZW50KFxyXG4gICAgLy8gICAgIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KFxyXG4gICAgLy8gICAgICAgICBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxNiwgMzApLFxyXG4gICAgLy8gICAgICAgICBcIkh1aCwgdGhhdCBzdHVwaWQgYm90IGFkbWl0dGVkbHkgZ290IGEgZGVjZW50IHJ1biwgZm9yIGEgZmlyc3RcclxuICAgIC8vIHRpbWVyLlwiLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDFdXSkgKSApO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE2LCA0NSksIFwiSGVoLCBoaXMgaG9saW5lc3Mgd291bGQgYWxzbyBnbyBkb3duIHRoZSBwYXRoIG9mIHRoZSBnYW1pbmcgYWRkaWN0Li4uXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSGluYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNiwgNDUpLCBcIldhaXQsIHRoZSBpbnZlc3RpdHVyZSBjaGFuZ2VkLi4uIHRoYXQgaW50ZW50Li4uIGhtbS4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtM10sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXVxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5IaW5hKS5wYXNzaXZlRGVjZXB0aW9uLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3RdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTYsIDQ1KSwgXCJIZSBhY3R1YWxseSBiZWF0IHRoZSBib3NzLCBndXkncyBnb3QgYSBicmlnaHQgZnV0dXJlLiAoZXZlbiBpZi4uLilcIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXV0pKTtcclxuICAgIC8vIG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChOcGNJZC5IaW5hKS5nZXQoUGNJbmRleC5JRF9QQU5aRVIpLmFkZEV2ZW50KFxyXG4gICAgLy8gICAgIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KFxyXG4gICAgLy8gICAgICAgICBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxNiwgNDUpLFxyXG4gICAgLy8gICAgICAgICBcIlRoZSBib3QgYWNrbm93bGVkZ2VkIG15IHNraWxscywgbWF5YmUgSSBjb3VsZCB0cnkgbXkgaGFuZCBhdFxyXG4gICAgLy8gaGlzIFwiICsgXCJtb2R1bGVzLi4uXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXSxcclxuICAgIC8vIFtQb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdXSkgKSApO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE2LCA0NSksIFwiU3RhcnJ5LWR1ZGUgc3BlYWtzIGZvbmRseSB0byBncmFuLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAzXVxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5QZXRyYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNiwgNDUpLCBcIkhlJ3MgaGF2aW5nIGZ1biB3aXRoIEhpbmEuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXV0pKTtcclxufVxyXG5leHBvcnRzLnNlc3Npb25PcGluaW9uRXZlbnRzMDQgPSBzZXNzaW9uT3BpbmlvbkV2ZW50czA0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zNC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmNvbWJhdE1lbW9yaWVzID0gZXhwb3J0cy5zZXNzaW9uT3BpbmlvbkV2ZW50czA1ID0gdm9pZCAwO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vY29tbW9uXCIpO1xyXG5jb25zdCBwY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9zaW11bGF0aW9uL2NoYXJhY3RlcnMvQ2hhcmFjdGVyXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IEdhbWVUaW1lc3RhbXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9HYW1lVGltZXN0YW1wXCIpO1xyXG5jb25zdCBQb3NpdGl2ZUVtb3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9Qb3NpdGl2ZUVtb3Rpb25cIik7XHJcbmNvbnN0IHM5XzEgPSByZXF1aXJlKFwiLi9zOVwiKTtcclxuZnVuY3Rpb24gc2Vzc2lvbk9waW5pb25FdmVudHMwNSgpIHtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXHJcbiAgICBdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTcsIDMwKSwgXCJJdCBzZWVtcyB0aGV5J3JlIHdyZWFraW5nIGhhdm9jIG9uIHRoZSBwYWludGJydXNoZXMuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLCAxXV0pKTtcclxuICAgIGZvciAoY29uc3QgbnBjIG9mIFtucGNJbmRleF8xLk5wY0lELkRhd24sIG5wY0luZGV4XzEuTnBjSUQuVG9tYXNhXSkge1xyXG4gICAgICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wYywgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNywgMzApLCBcIk9oLCBwb29yIGd1eSwgYXBvbG9naXppbmcgZm9yIGhpcyBmcmllbmRzLiBUaGV5IG11c3QndmUgZ290IFwiICtcclxuICAgICAgICAgICAgXCJoaW0gaW50byB0cm91YmxlIHNvIG1hbnkgdGltZXMuLi5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXV0pKTtcclxuICAgIH1cclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTcsIDM1KSwgXCJHb3QgYXNzYXVsdGVkIGJ5IG15IGlubm9jZW50IGNhbnZhcy4gU28gY3V0ZS5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIDJdXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNywgMzUpLCBcIkhhcyBhIGdvb2QgaW1hZ2luYXRpb24gYW5kIGEgcG9ldGljIHBhaW50aW5nIGluIG1pbmQuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMl1dKSk7XHJcbiAgICAoMCwgczlfMS5hZGRUaW1lU2tpcEV2ZW50KShucGNJbmRleF8xLk5wY0lELkR1c2ssIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLCBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcC5mcm9tRGF5cygyKSwgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAuZnJvbURheXMoNSksIFwiXCIsIG5ldyBNYXAoKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkR1c2ssIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTcsIDQwKSwgXCJHbyBhaGVhZC4gWW91ciBpbnRlbnQgZGlkIHJvdXNlIG1lIGJlZm9yZS4gTm93IGh1bW91ciBtZSAuLi5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXVxyXG4gICAgXSksIDEwKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRHVzaywgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTcsIDQwKSwgXCJLbm93IHlvdXIgcGxhY2UuIEl0IGlzIG5vdCB5b3UgdGhlIGNhbnZhcyBiZWNrb25zLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIC0xXVxyXG4gICAgXSksIDEwLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNywgMzUpLCBcIk1zLiBEdXNrIEhlcnNlbGYgY2hvc2UgdG8gZ2l2ZSBoaW0gYSBjaGFuY2UuIEFuZCByZXF1ZXN0ZWQgdGhhdCBcIiArXHJcbiAgICAgICAgXCJoZSBwYWludCBmb3IgSGVyLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDVdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDJdXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkRhd24pLnBhc3NpdmVEZWNlcHRpb24pO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE3LCA0MCksIFwiVGhlIHBhaW50aW5nIGNvbWVzIG91dCByYXRoZXIgbmljZS4gSGUgaXMgY2xlYXJseSBub3QgYSBwYWludGVyIFwiICtcclxuICAgICAgICBcImJ5IHByb2Zlc3Npb24uIFlldCBoaXMgc3Bpcml0IGxvbmdzIHRvIGV4cHJlc3MgaXRzZWxmLiBXYXMgdGhhdCBcIiArXHJcbiAgICAgICAgXCJ3aHkgaGUgd2FzIGNob3Nlbj9cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV1dKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkRhd24sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTcsIDQwKSwgXCJIZWxwZWQgc3RhYmlsaXplIGhpcyBmcmllbmQncyBoYW5kIGJ5IGd1aWRpbmcgaXQgd2l0aCB0aGUgcG93ZXJzIFwiICtcclxuICAgICAgICBcIm9mIG5hdHVyZS5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMV1cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxNywgNDUpLCBcIlRoZSBwYWludGluZyB0dXJuZWQgb3V0IHNvLi4uIGluc3BpcmVkLiA8ZW0+SG9ub3IgaG9sZGluZyBiYWNrIHRoZSBcIiArXHJcbiAgICAgICAgXCJXcmF0aCBvZiBEZXZvdGlvbi48L2VtPiBCZWF1dGlmdWwuIEFuZC4uLiBpdCBzZWVtcyBTaGUgYWdyZWVzLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDddLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDRdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkR1c2ssIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTcsIDQ1KSwgXCJJIGFtIGh1bW91cmVkLiBOb3RoaW5nIGhvbGRzIGludGVyZXN0IGZvcmV2ZXIsIGJ1dCB0aGlzIHdvcmsgZG9lcyBcIiArXHJcbiAgICAgICAgXCJtZXJpdCBhIG1vbWVudCBvZiBjb250ZW1wbGF0aW9uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCA0XSxcclxuICAgIF0pLCAxMCk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkRhd24sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNSwgMTcsIDUwKSwgXCI8c3BhbiBzdHlsZT0nZm9udC1zaXplOiAxMHB4Oyc+SSdtIG5vdCB0aGUgcGVyc29uIHRoZXkgc2VlbSB0byB0aGluayBtZSB0byBiZS48L3NwYW4+IDxzcGFuIHN0eWxlPSdmb250LXNpemU6IDlweDsnPkkgY2Fubm90IGdpdmUgXCIgK1xyXG4gICAgICAgIFwiYW4gYW5zd2VyIHRvIHRoZWlyIHByb2JsZW1zLCBvciBldmVuIHNvbWUgb2YgdGhlaXIgcXVlc3Rpb25zLlwiICtcclxuICAgICAgICBcIkknbSBmZWVsaW5nIGEgYml0Li4uICA8L3NwYW4+IDxzcGFuIHN0eWxlPSdmb250LXNpemU6IDhweDsnPm92ZXJ3aGVsbWVkLi4uIHBhcnRpY3VsYXJseSB3aGVuIHRoZXkgXCIgK1xyXG4gICAgICAgIFwiYXNrIG1lIHdoYXQgSSB3YXMgYmVmb3JlLiA8L3NwYW4+IDxzcGFuIHN0eWxlPSdmb250LXNpemU6IDdweDsnPiBJdCBpc24ndC4uLjwvc3Bhbj4gVGhhbmtzIGZvciBsZXR0aW5nIG1lIGdldCBiYWNrLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDFdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCA0XVxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5EYXduKS5wYXNzaXZlRGVjZXB0aW9uKTtcclxuICAgIGZvciAoY29uc3QgbnBjIG9mIFtucGNJbmRleF8xLk5wY0lELkRhd24sIG5wY0luZGV4XzEuTnBjSUQuVG9tYXNhXSkge1xyXG4gICAgICAgIC8vIGZvciAoY29uc3QgbnBjIG9mIFtOcGNJbmRleC5JRF9EQVdOLCBOcGNJbmRleC5JRF9UQUlIRSxcclxuICAgICAgICAvLyBOcGNJbmRleC5JRF9UT01BU0FdKSB7XHJcbiAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjLCBbXHJcbiAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICAgICAgXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE5LCAwKSwgXCJUaGV5IGhlbHBlZCB1cyBvdXQgd2l0aCBjb29raW5nIGZvciB0aGUgY29tbXVuaXR5IGRpbm5lci4gVGhleSBcIiArXHJcbiAgICAgICAgICAgIFwid2VyZW4ndCBxdWl0ZSBwYXJ0aWN1bGFybHkgc2tpbGxlZCwgYnV0IHRoYXQgbWFrZXMgaXQgZ29vZCBcIiArXHJcbiAgICAgICAgICAgIFwidG8gc2VlIHRoYXQgdGhleSBkaWRuJ3QgY29uc2lkZXIgZ29vZCwgaG9uZXN0IGxhYm91ciBsaWtlIFwiICtcclxuICAgICAgICAgICAgXCJjb29raW5nIGJlbmVhdGggdGhlbS5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXSxcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV1cclxuICAgICAgICBdKSk7XHJcbiAgICB9XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkVyaWNhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxOSwgMjUpLCBcIlNlZW1lZCB0byBiZSBpbnRlcmVzdGVkIGluIGJvb2tzIGFuZCBsaXRlcmF0dXJlIGluIGFsbCBmb3Jtcy5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXV0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRXJpY2EsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE5LCAzMCksIFwiTnVkZ2VkIG1lIHRvIHdyaXRlLiBXYXMgYmVpbmcgZ2VudWluZSB3aGVuIHNoZSBtZW50aW9uZWQgc2hlIHdvdWxkIFwiICtcclxuICAgICAgICBcImxvdmUgdG8gcmVhZCBzb21ldGhpbmcgSSBjYW1lIHVwIHdpdGguXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCA3XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDRdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkR1c2ssIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE5LCAzMCksIFwiPGVtIHN0eWxlPSdmb250LXNpemU6IDExcHgnPihNdXNpbmcpIFwiICtcclxuICAgICAgICBcIkJvb2tzIGJlbG9uZyB0byB0aGUgc2FtZSB3b3JsZCBhcyB3b3JrcyBvZiBhcnQuIExpa2UgcGFpbnRpbmdzLCB0aGUgXCIgK1xyXG4gICAgICAgIFwib25lcyB3b3J0aCBtZW50aW9uaW5nIGFsbCBoYXZlIGEgdW5pcXVlIHN0cmVuZ3RoIG9mIGNoYXJhY3RlciwgZm9ybSwgXCIgK1xyXG4gICAgICAgIFwiYW5kIGNhcnJ5IGRlY2VudCBtZWFuaW5nLiBOb25lIG9mIHRoYXQgY2FuIGV2ZXIgY29tZSBvdXQgb2YgdGhlIFwiICtcclxuICAgICAgICBcInNoYWxsb3cgb2YgaGVhcnQuIEJ5IG5vIG1lYW5zIHNoYWxsb3csIEVyaWNhIG1pZ2h0IGp1c3QgYnJlYWsgdGhlIFwiICtcclxuICAgICAgICBcIm1vdWxkLjwvZW0+PGJyLz5cIiArXHJcbiAgICAgICAgXCJGb3IgZW5jb3VyYWdpbmcgaGVyLCB5b3UsIEF1cmVsaWEsIGhhdmUgbXkgcmVzcGVjdC5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA5XVxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE5LCAzMCksIFwiV2hhdCdzIGhlciBnYW1lIGhlcmU/IFdoeSdzIHRoaXMgc3RyYW5nZSBlbGYgd29tYW4gZW5jb3VyYWdpbmcgXCIgK1xyXG4gICAgICAgIFwibXkgd2lmZSBzbz8gSnVzdCBhbm90aGVyIGZhbiBvZiBsaXRlcmF0dXJlPyBPciBpcyB0aGVyZSBzb21lIFwiICtcclxuICAgICAgICBcInVsdGVyaW9yIG1vdGl2ZSBJJ20gbWlzc2luZy4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtMl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXVxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8pLnBhc3NpdmVEZWNlcHRpb24gLSA1LCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3RdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkpvcmRpLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE5LCAzMCksIFwiU2VlbWVkIHRvIGJlIGV2ZW4gbW9yZSBpbnRlcmVzdGVkIGluIG15IHRhbGVzIGZyb20gdGhlIHNlYXMuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXV0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuWXVraSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxOSwgMzApLCBcIldoeSdzIGhlIHN1ZGRlbmx5IHNvIGludGVyZXN0ZWQgaW4gSGF2PyBUaGlzIGRydWlkJ3MgY2xlYXJseSBub3QgXCIgK1xyXG4gICAgICAgIFwiYSBzZWFmYXJlci4gSW4gZmFjdCwgSSB3b24ndCBiZSBzdXJwcmlzZWQgdG8ga25vdyBoZSdzIG5ldmVyIHNhaWxlZCBiZWZvcmUuIFwiICtcclxuICAgICAgICBcIkpvcmRpJ3MgdG9vIG5haXZlIGZvciBoaXMgb3duIGdvb2QsIGJ1dCB0aGlzIHNlZW1zIGEgdG91Y2ggdG9vIFwiICtcclxuICAgICAgICBcImJsYXRhbnQuIEknbGwgaGF2ZSB0byBrZWVwIGFuIGV5ZSBvdXQuLi5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTNdXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5ZdWtpKS5wYXNzaXZlRGVjZXB0aW9uLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3RdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkthc3RvciwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxOSwgMzApLCBcIlVnaC4uIHRoZSB3YXkgaGUgc29jaWFsaXplcyB3aXRoIHRob3NlIHR3byBsb3NlcnMuIEl0J3MgXCIgK1xyXG4gICAgICAgIFwibmF1c2VhdGluZy4uLiBKdXN0IGxvb2sgYXQgSm9yZGkgYmxhYmJlcmluZyBhbmQgdGhhdCBlbW8gYWN0aW5nIFwiICtcclxuICAgICAgICBcImFsbCBjb29sIGxpa2UgaGUgZG9lc24ndCBjYXJlLi4uXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTJdXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5QZXRyYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA1LCAxOSwgMzApLCBcIkl0J3MgZ29vZCB0byBzZWUgaG93IHRoZSBraWQgY2FuIGJyaW5nIEpvcmRpIG91dCBvZiBoaXMgc2hlbGwgXCIgK1xyXG4gICAgICAgIFwiYWdhaW4uIEhlJ3MgYmVlbiBicm9vZGluZyBhIGxvdCBsYXRlbHkuLi5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXV0pKTtcclxuICAgIGNvbnN0IG9yaWdpbmFsVGltZXN0YW1wID0gbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDUsIDE5LCA0NSk7XHJcbiAgICAvLyBTb21lIHdpbGwgcmV0YWluIHRoZWlyIG1lbW9yaWVzIGFmdGVyIHdoYXQgaGFwcGVucy4uLlxyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgb3JpZ2luYWxUaW1lc3RhbXAsIFwiS2VwdCBoaXMgY3V0bGVyeSBiYWNrIHNsb3dseSBhbmQgcHJpbWx5IGJlZm9yZSBzdGFuZGluZyBhbmQgZHJhd2luZyBoaXMgXCIgK1xyXG4gICAgICAgIFwid2VhcG9uLiBUb3VjaMOpLiBZZXAsIGR1ZGUncyBkZWZpbml0ZWx5IGEgc2Vhc29uZWQgd2Fycmlvci4uLjxici8+XCIgK1xyXG4gICAgICAgIFwiYW5kIGEga2lsbGVyIHRocm91Z2gtYW5kLXRocm91Z2guXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC0yXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDVdXHJcbiAgICBdKSwgMTAsIG5ldyBTZXQoW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSGluYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIG9yaWdpbmFsVGltZXN0YW1wLCBcIlRoZSBvdGhlcnMgZGlkbid0IHNlZW0gdG8gbm90aWNlLCBidXQgd2FzIGEgbGFyZ2UgcGFydCBcIiArXHJcbiAgICAgICAgXCJyZXNwb25zaWJsZSBmb3IgdXMgbm90IGdldHRpbmcgYW1idXNoZWQgcmlnaHQgb3V0c2lkZSB0aGUgXCIgK1xyXG4gICAgICAgIFwiZG9vci4gRG9lc24ndCBzZWVtIGFkZGljdGVkIHRvIHZpb2xlbmNlLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAzXVxyXG4gICAgXSkpO1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0lkLkhpbmEpLmdldChQY0luZGV4LklEX1BBTlpFUikuYWRkRXZlbnQoXHJcbiAgICAvLyAgICAgbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoXHJcbiAgICAvLyAgICAgICAgIGFwcGxpY2FibGVUaW1lc3RhbXAsXHJcbiAgICAvLyAgICAgICAgIFwiQ2hhcmdlZCByaWdodCBvdXQgaHVoPyBOb3QgdmVyeSBzbWFydCwgYnV0IGdldHMgdGhlIGpvYiBkb25lLi4uXHJcbiAgICAvLyBcIiArIFwiUGl0eSBJIGRpZG4ndCB0YWtlIHRoZSBsZWN0dXJlcyBvbiBBSSBiYWNrIGluLVwiLCBuZXdcclxuICAgIC8vIE1hcChbW1Bvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXV0pLCApICk7XHJcbiAgICAvLyBleGNsdXNpb25MaXN0UC5wdXNoKE5wY0lkLkhpbmEpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG9yaWdpbmFsVGltZXN0YW1wLCBcIkhtbS4uLiBhIHNwZWxsY2FzdGVyLi4uIHRoZXkncmUgdHlwaWNhbGx5IHRoZSBmaXJzdCB0byBiZSB0YXJnZXRlZCwgXCIgK1xyXG4gICAgICAgIFwiYW5kIGZvciBnb29kIHJlYXNvbi4gRmlnaHRzIGFyZSBhbHdheXMgc2FmZXIgd2l0aCB0aGVpciB0aHJvYXRzIHNsaXQuLi4gXCIgK1xyXG4gICAgICAgIFwiPHNwYW4gc3R5bGU9J2ZvbnQtc2l6ZTogMTFweDsnPm9mIGNvdXJzZSwgdGhhdCdzIG5vdCBwb3NzaWJsZSB3aXRoIHRoZSByZWFsbHkgZGFuZ2Vyb3VzIG9uZXMuLi48L3NwYW4+XCIgK1xyXG4gICAgICAgIFwiPGJyLz48aT5EYW1uLCB0aG9zZSBmaXJlYmFsbHMgYXJlIGNvb2wuPC9pPlwiLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdXSkpO1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX0hJTkEpLmdldChQY0luZGV4LklEX1FVSU5OKS5hZGRFdmVudChcclxuICAgIC8vIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KCBhcHBsaWNhYmxlVGltZXN0YW1wLCBcIlN0b29kIGJ5IHRoZSB2aWxsYWdlcnMgdG9cclxuICAgIC8vIHByb3RlY3QgdGhlbS4gSSBjYW4gcmVzcGVjdCB0aGF0LiBcIiArIFwiU2VlbiBmYXIgdG9vIG1hbnkgYmxvb2QtdGhpcnN0eVxyXG4gICAgLy8gZm9sayBwbGFjZSBncmVhdGVyIHZhbHVlIGluIFwiICsgXCJkZWF0aCB0aGFuIGluIGxpZmUuXCIsIG5ld1xyXG4gICAgLy8gTWFwKFtbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDFdLCBbUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXV0pLCApICk7XHJcbiAgICAvLyBleGNsdXNpb25MaXN0US5wdXNoKE5wY0luZGV4LklEX0hJTkEpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgb3JpZ2luYWxUaW1lc3RhbXAsIFwiQWN0ZWQgYXMgYSBiZWFjb24gb2YgaG9wZSBhbmQgaGVscGVkIGtlZXAgdGhlIHZpbGxhZ2VycyBjYWxtXCIgK1xyXG4gICAgICAgIFwiIHdoZW4gPGVtPnRoZXk8L2VtPiBjYW1lLi4uXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAzXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXVxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgb3JpZ2luYWxUaW1lc3RhbXAsIFwiSGVscGVkIGluIG9yZ2FuaXppbmcgdGhlIHZpbGxhZ2VycyBhbmQga2VlcGluZyB0aGUgaW5rbGluZ3MgXCIgK1xyXG4gICAgICAgIFwiYXQgYmF5IGFzIGhlIGxlZCB1cyB0byBNci4gRWx5c2l1bSdzLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgM10sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXVxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG9yaWdpbmFsVGltZXN0YW1wLCBcIkZpcmViYWxsIGFmdGVyIGZpcmViYWxsLiBUZWxlcG9ydGluZyByb29mLXRvLXJvb2YgaW4gdGhlIFwiICtcclxuICAgICAgICBcInNoYWRvd3MuIEFsbCBmb3IgdGhlc2UgcG9vciBpbmtsaW5ncy4gSGVoZSwgYXJlbid0IHdlIGRyYW1hdGljP1wiLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdXSkpO1xyXG4gICAgY29tYmF0TWVtb3JpZXMoZmFsc2UsIG9yaWdpbmFsVGltZXN0YW1wKTtcclxuICAgIC8vIFF1aW5uIGludGVyYWN0aW9uc1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX0NPUk9UTykuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDUsIDE0LCAzMCksIFwiRnJvbVxyXG4gICAgLy8gU2FkaHZhc3RhbiBodWguIEknbSBub3QgcXVpdGUgc3VyZSBJIGxpa2UgdGhpcy4gVGhpbmdzIG11c3QgXCIgKyBcImJlXHJcbiAgICAvLyBwcmV0dHkgYmFkIGlmIHRoZSBUc2FyIGhhZCB0byBwdWxsIG91dCB0aGUgYXNzb2NpYXRpb25zIHdpdGggXCIgKyBcInRoZW0uXHJcbiAgICAvLyBXaGF0IHJlYWxseSBpcyBoYXBwZW5pbmc/IEFuZCB0aGF0IGFwcGVhcmFuY2UuLi4gb2ggc2hpdCwgXCIgKyBcIk9oIFNoaXQuXHJcbiAgICAvLyBPaCBTSElUIVwiLCBuZXcgTWFwKFsgW1Bvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLThdLFxyXG4gICAgLy8gW1Bvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA4XSBdKSwgMjIgKSApO1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX0lOR1JJRCkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDUsIDE2LCAzMCksIFwiVGFsa2luZyB0b1xyXG4gICAgLy8gaGltIHdhcyByZWFsbHkgYSBjb21mb3J0LiBCZWVuIHNvIGxvbmcgc2luY2UgSSBjb3VsZCBcIiArIFwic3BlYWsgbXkgaGVhcnRcclxuICAgIC8vIG91dCB0byBzb21lb25lLlwiLCBuZXcgTWFwKFsgW1Bvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDRdLCBbUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXSwgW1Bvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXSBdKSApICk7IG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChOcGNJbmRleC5JRF9KQVlFKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KCBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxNywgNTApLCBcIkJvc3Mgd2FzIGEgY29vbCBjdXN0b21lci4gQnV0IHNseSBhcyBhbiBlZWwuIEV2ZW4gbm93IGNhbid0IFwiICsgXCJ1bmRlcnN0YW5kIGhvdyBJIGxldCBteSBndWFyZCBkb3duIHRvIHJldmVhbCBzbyBtdWNoLi4uXCIsIG5ldyBNYXAoWyBbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdLCBbUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtMV0gXSksIDEzLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLlRydXN0LCB0cnVlXV0pICkgKTsgbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX1ZFUk5BKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KCBuZXcgR2FtZVRpbWVzdGFtcCgwLCA1LCAxOCwgMzApLCBcIkEgcGVyc29uIGhhbmdpbmcgYmV0d2VlbiBsaWZlIGFuZCBkZWF0aCwgd2hvIGltbWVkaWF0ZWx5IHNhdyBcIiArIFwidGhyb3VnaCBtZS4gQnV0IHNvbWVob3cgSSBmZWVsIHRoaXMgaXMgZGlmZmVyZW50LCBhbmQgPGVtPmZlZWw8L2VtPiBcIiArIFwidGhhdCBoZSBtZWFucyBubyBoYXJtLiBJIHJldmVhbGVkIG1vcmUgdGhhbiBJIHNob3VsZCBoYXZlLCBidXQgSSBcIiArIFwidGhpbmsgSSBhbSBnbGFkIEkgZGlkLlwiLCBuZXcgTWFwKFsgW1Bvc2l0aXZlRW1vdGlvbi5UcnVzdCwgM10sIFtQb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXSwgW1Bvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXSwgXSkgKSApO1xyXG59XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMwNSA9IHNlc3Npb25PcGluaW9uRXZlbnRzMDU7XHJcbmZ1bmN0aW9uIGNvbWJhdE1lbW9yaWVzKG1lbW9yaWVzRXJhc2VkLCBhcHBsaWNhYmxlVGltZXN0YW1wKSB7XHJcbiAgICAvLyBUaGUgdGltZSBpdCBoYXBwZW5lZCB3YXMgMTk6NDUgb24gdGhlIDV0aC4gQnV0IGl0J2xsIGZlZWwgbGlrZSB0aGUgZXZlbnRcclxuICAgIC8vIGhhcHBlbmVkIHdoZW4gdGhlIG1lbW9yaWVzIHJldHVybi5cclxuICAgIC8vIEluIHRoZSBtaWRzdCBvZiBhIGJsaXp6YXJkLCBzdHJhbmdlIGNyZWF0dXJlcyBzaG93aW5nIHVwIGFuZCBnZW5lcmFsXHJcbiAgICAvLyBjb25mdXNpb24sIEhlbGlvcyBzdGFuZGluZyB1cCBjYWxtbHkgYW5kIHJhbGx5aW5nIHRoZSB2aWxsYWdlcnMgd2FzIGFcclxuICAgIC8vIGh1Z2Ugc291cmNlIG9mIGNvbWZvcnQuIEJ1dCBob3cgZG8gZWFjaCBvZiB0aGVtIHJlYWN0P1xyXG4gICAgLy8gV2VsbCwgSSdtIG5vdCBnb2luZyB0byBjb3B5IGFuZCBwYXN0ZSBzaW1pbGFyIHN0dWZmIGFuZCB3cml0ZVxyXG4gICAgLy8gc2VudGVuY2VzIGZvciBlYWNoIG9mIHRoZSB0d2VudHktc29tZXRoaW5nIHBlb3BsZSwgYnV0IHNvbWUgZG8gbWVyaXRcclxuICAgIC8vIGEgdW5pcXVlIGludGVyYWN0aW9uLlxyXG4gICAgY29uc3QgZXhjbHVzaW9uTGlzdEggPSBbXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5FbHlzaXVtLFxyXG4gICAgICAgIG5wY0luZGV4XzEuTnBjSUQuQmpvcm4sXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5IYXYsXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5TYXNoYSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkNlY2VsaWEsXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5JcmVuZSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkR1c2ssXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5EYXduLFxyXG4gICAgICAgIG5wY0luZGV4XzEuTnBjSUQuSGluYSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkV6ZWxsXHJcbiAgICBdO1xyXG4gICAgY29uc3QgZXhjbHVzaW9uTGlzdEMgPSBbXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5FbHlzaXVtLFxyXG4gICAgICAgIG5wY0luZGV4XzEuTnBjSUQuQmpvcm4sXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5IYXYsXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5TYXNoYSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkNlY2VsaWEsXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5JcmVuZSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkR1c2ssXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5EYXduLFxyXG4gICAgICAgIG5wY0luZGV4XzEuTnBjSUQuSGluYSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkV6ZWxsXHJcbiAgICBdO1xyXG4gICAgY29uc3QgZXhjbHVzaW9uTGlzdEEgPSBbXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5FbHlzaXVtLFxyXG4gICAgICAgIG5wY0luZGV4XzEuTnBjSUQuQmpvcm4sXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5IYXYsXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5TYXNoYSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkNlY2VsaWEsXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5JcmVuZSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkR1c2ssXHJcbiAgICAgICAgbnBjSW5kZXhfMS5OcGNJRC5EYXduLFxyXG4gICAgICAgIG5wY0luZGV4XzEuTnBjSUQuSGluYSxcclxuICAgICAgICBucGNJbmRleF8xLk5wY0lELkV6ZWxsXHJcbiAgICBdO1xyXG4gICAgLy8gY29uc3QgZXhjbHVzaW9uTGlzdFA6IE5wY0lkW10gPSBbXHJcbiAgICAvLyAgICAgTnBjSWQuRWx5c2l1bSxcclxuICAgIC8vICAgICBOcGNJZC5Cam9ybixcclxuICAgIC8vICAgICBOcGNJZC5IYXYsXHJcbiAgICAvLyAgICAgTnBjSWQuU2FzaGEsXHJcbiAgICAvLyAgICAgTnBjSWQuQ2VjZWxpYVxyXG4gICAgLy8gXTtcclxuICAgIC8vIGNvbnN0IGV4Y2x1c2lvbkxpc3RROiBOcGNJbmRleFtdID0gW1xyXG4gICAgLy8gICAgIE5wY0luZGV4LklEX0VMWVNJVU0sXHJcbiAgICAvLyAgICAgTnBjSW5kZXguSURfQkpPUk4sXHJcbiAgICAvLyAgICAgTnBjSW5kZXguSURfSEFWLFxyXG4gICAgLy8gICAgIE5wY0luZGV4LklEX1NBU0hBLFxyXG4gICAgLy8gICAgIE5wY0luZGV4LklEX0NFQ0VMSUFcclxuICAgIC8vIF07XHJcbiAgICAvLyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSWQuRGF3bikuZ2V0KFBjSW5kZXguSURfUEFOWkVSKS5hZGRFdmVudChcclxuICAgIC8vICAgICBuZXcgTnBjSW50ZXJhY3Rpb25FdmVudChcclxuICAgIC8vICAgICAgICAgYXBwbGljYWJsZVRpbWVzdGFtcCxcclxuICAgIC8vICAgICAgICAgXCJDaGFyZ2luZyByaWdodCBpbiwgaHVoP1wiLFxyXG4gICAgLy8gICAgICAgICBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdXSksXHJcbiAgICAvLyAgICAgKVxyXG4gICAgLy8gKTtcclxuICAgIC8vIGV4Y2x1c2lvbkxpc3RQLnB1c2goTnBjSWQuRGF3bik7XHJcbiAgICAvLyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSW5kZXguSURfREFXTikuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiV2Fsa2VkIGFtb25nIG91ciBncm91cCB0b1xyXG4gICAgLy8ga2VlcCB1cyBzYWZlLlwiLCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMl1dKSwgKSApO1xyXG4gICAgLy8gZXhjbHVzaW9uTGlzdFEucHVzaChOcGNJbmRleC5JRF9EQVdOKTtcclxuICAgIGlmICghbWVtb3JpZXNFcmFzZWQpIHtcclxuICAgICAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELll1a2ksIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBhcHBsaWNhYmxlVGltZXN0YW1wLCBcIkhlIHNoaW5lcyBzbyBicmlnaHQuLi4gdWdoLCBpdCBidXJucy4gQWxzbyB0aGUgd2F5IDxlbT50aGF0IG1hbjwvZW0+IFwiICtcclxuICAgICAgICAgICAgXCJsb29rcyBhdCBtZSAtIGNyaW5nZS5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdLFxyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgLTRdLFxyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdXHJcbiAgICAgICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5ZdWtpKS5wYXNzaXZlRGVjZXB0aW9uKTtcclxuICAgICAgICBleGNsdXNpb25MaXN0SC5wdXNoKG5wY0luZGV4XzEuTnBjSUQuWXVraSk7XHJcbiAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Jb25hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgYXBwbGljYWJsZVRpbWVzdGFtcCwgXCJTYXZlZCBtZSEhIEdvZHMgYmVsb3csIEkgZGlkbid0IHNlZSB0aGF0IGNvbWluZy4uLiBSdXN0cywgXCIgK1xyXG4gICAgICAgICAgICBcInRoYXQgdGhpbmcgd291bGQndmUuLi4gd291bGQndmUuLi5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDRdLFxyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgNF0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMl1cclxuICAgICAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELklvbmEpLnBhc3NpdmVEZWNlcHRpb24gLSA1KTtcclxuICAgICAgICBleGNsdXNpb25MaXN0SC5wdXNoKG5wY0luZGV4XzEuTnBjSUQuSW9uYSk7XHJcbiAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5DZWNlbGlhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgYXBwbGljYWJsZVRpbWVzdGFtcCwgXCJDaG9zZW4gYnkgYSBSeXNoYWRpdW0hIEEgcnlzaGFkaXVtIHdobyBjYW1lIHRvIG91ciBhaWQgXCIgK1xyXG4gICAgICAgICAgICBcImR1cmluZyB0aGlzIGZlYXJzb21lIHN0b3JtIHdpdGggYWxsIHRoZSBkZW1vbnMgdGhhdCBcIiArXHJcbiAgICAgICAgICAgIFwiZW1lcmdlZCBmcm9tIGl0LlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCA0XSxcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA1XVxyXG4gICAgICAgIF0pKTtcclxuICAgICAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELlNhc2hhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgYXBwbGljYWJsZVRpbWVzdGFtcCwgXCJTZW50IGhpcyBtb3VudCB0byBwcm90ZWN0IENlY2lsaWEgYW5kIG1lLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCA1XSxcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAzXVxyXG4gICAgICAgIF0pKTtcclxuICAgICAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkthc3RvciwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiVGhlIHdheSBoZSB3YXMgc28gY29tcGxldGVseSBpbiBjb21tYW5kLi4uIEkgd2lzaCBcIiArXHJcbiAgICAgICAgICAgIFwidGhhdCB3YXMgbWUgaW5zdGVhZC5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdLFxyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgLTJdLFxyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdXHJcbiAgICAgICAgXSksIDEwLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlXSkpO1xyXG4gICAgICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuS2FzdG9yLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgYXBwbGljYWJsZVRpbWVzdGFtcCwgXCJEaWQgaGUgbm90IGNvbnNpZGVyIG1lIHdvcnRoeSBvZiBhc3Npc3RpbmcgaGltIGluIGNvbWJhdD8gXCIgK1xyXG4gICAgICAgICAgICBcIkFuZCBoZSBjb25zaWRlcmVkIDxlbT5ZdWtpPC9lbT4gd29ydGh5IGVub3VnaCBpbnN0ZWFkPyBIZWgsIFwiICtcclxuICAgICAgICAgICAgXCJhbmQgdGhlIGNvd2FyZCBkaWRuJ3QgZXZlbiBwaWNrIHVwIHRoZSB3ZWFwb24uXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtMV0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAtMl0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTFdXHJcbiAgICAgICAgXSksIDEwLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlXSkpO1xyXG4gICAgICAgIGV4Y2x1c2lvbkxpc3RILnB1c2gobnBjSW5kZXhfMS5OcGNJRC5LYXN0b3IpO1xyXG4gICAgICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSmF5ZSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiTm93LCB3aHkgZGlkIGhlIHRocm93IHRoZSBzcGVhciB0b3dhcmRzIG1lP1wiLCBuZXcgTWFwKFtdKSk7XHJcbiAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5WZXJuYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiV2FzIG1vcmUgY29tZm9ydGFibGUgd2hlbiB0aGUgYXR0YWNrIHN0YXJ0ZWQgY29tcGFyZWQgXCIgK1xyXG4gICAgICAgICAgICBcInRvIHRoZSBkaW5uZXIuIEl0J3MgYmVlbiBcIiArXHJcbiAgICAgICAgICAgIFwic28gbG9uZyBzaW5jZSBJIG1ldCBzb21lb25lIGxpa2UgdGhhdC4gQW5kIGluIGhhbmRpbmcgbWUgXCIgK1xyXG4gICAgICAgICAgICBcInRoZSBqYXZlbGluLCBoZSBhbHNvIGltbWVkaWF0ZWx5IG5vdGVkIG1lIGFzIGEgd2Fycmlvci4gXCIgK1xyXG4gICAgICAgICAgICBcIlRoYXQuLi4gcmVncmV0dGFibHkuLi4gbWFrZXMgbWUgcHJvdWQuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAzXSxcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDFdLFxyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDddXHJcbiAgICAgICAgXSkpO1xyXG4gICAgICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuVmVybmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBhcHBsaWNhYmxlVGltZXN0YW1wLCBcIlNhdmVkIElvbmEgaW4gdGhlIG5pY2sgb2YgdGltZSBmcm9tIHRoYXQgbW9uc3Rlci5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDddXSkpO1xyXG4gICAgICAgIGV4Y2x1c2lvbkxpc3RILnB1c2gobnBjSW5kZXhfMS5OcGNJRC5WZXJuYSk7XHJcbiAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBhcHBsaWNhYmxlVGltZXN0YW1wLCBcIkp1c3QgYXMgaGUgd2FybmVkLCA8ZW0+dGhlIG1vbnN0ZXJzIGZyb20gdGhlIG5vcnRoPC9lbT4gY2FtZS4gSG93IGRpZCBoZSBrbm93PyBcIiArXHJcbiAgICAgICAgICAgIFwiQnV0IGhlIHN0b29kIHVwIGZvciB1cywgbm9ibHkgYW5kIGJyYXZlbHkgbGlrZSBJJ2QgZXhwZWN0LiBcIiArXHJcbiAgICAgICAgICAgIFwiRGlkIHRoZSBUc2FyIHNlbmQgaGltPyBJZiBzbywgZm9yIHdoYXQgcHVycG9zZT9cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC0yXSxcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDJdLFxyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdXHJcbiAgICAgICAgXSksIDEwLCBuZXcgU2V0KFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3RdKSk7XHJcbiAgICAgICAgZXhjbHVzaW9uTGlzdEgucHVzaChucGNJbmRleF8xLk5wY0lELkNvcm90byk7XHJcbiAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBhcHBsaWNhYmxlVGltZXN0YW1wLCBcIldhcyBpbiBnb29kIGNvbW1hbmQgb2YgdGhlIHBvd2VycyBvZiBuYXR1cmUgYXMgaGUgY292ZXJlZCBcIiArXHJcbiAgICAgICAgICAgIFwib3VyIGVzY2FwZS4gV2VsbCwgd291bGQgc3VjayBpZiBhIGRydWlkIGZyb20gdGhhdCB3ZWFrIG5hdGlvbiBcIiArXHJcbiAgICAgICAgICAgIFwiY291bGRuJ3QgZXZlbiBkbyB0aGF0LiBCdXQuLi4gSSBzdXBwb3NlIHRoZXJlIGlzIGEgcmVhc29uIHdoeSBcIiArXHJcbiAgICAgICAgICAgIFwidGhlIG90aGVyIHN0cm9uZyBmb2xrIGtlZXAgaGltIGFyb3VuZC4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgNF0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAtMV0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF1cclxuICAgICAgICBdKSwgMTAsIG5ldyBTZXQoW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGVdKSk7XHJcbiAgICAgICAgZXhjbHVzaW9uTGlzdEMucHVzaChucGNJbmRleF8xLk5wY0lELkNvcm90byk7XHJcbiAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5Kb3JkaSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiQW1hemluZyEgSSB3YXMgY29uc2lkZXJpbmcgaGltIHRvIGJlIGxpa2UgbXlzZWxmLCBidXQgdGhlcmUncyBcIiArXHJcbiAgICAgICAgICAgIFwibm8gd2F5IEkgY291bGQgc3RhbmQgYWdhaW5zdCBzdWNoIG9kZHMgYW5kIHByb3RlY3Qgc3VjaCBhIGxhcmdlIFwiICtcclxuICAgICAgICAgICAgXCJncm91cCBhdCB0aGUgc2FtZSB0aW1lLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgNF0sXHJcbiAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXSxcclxuICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCA1XVxyXG4gICAgICAgIF0pKTtcclxuICAgICAgICBleGNsdXNpb25MaXN0Qy5wdXNoKG5wY0luZGV4XzEuTnBjSUQuSm9yZGkpO1xyXG4gICAgICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuWXVraSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTl0sIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiV2VsbCwgaWcgaGUgZG9lc24ndCB3YW50IHVzIGRlYWQgYXQgbGVhc3QuIFRvbyBlYXN5IHRvIGZlaWduIFwiICtcclxuICAgICAgICAgICAgXCJ3ZWFrbmVzcyBpbiB0aGlzIGNyaXNpcyBhbmQgbGV0IHRoZSBtb25zdGVycyBkbyB0aGUgcmVzdC5cIiwgbmV3IE1hcChbW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgM11dKSk7XHJcbiAgICAgICAgZXhjbHVzaW9uTGlzdEMucHVzaChucGNJbmRleF8xLk5wY0lELkpvcmRpKTtcclxuICAgICAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkVyaWNhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiSSBzdXNwZWN0ZWQgc2hlIHdhcyBhIHBvd2VyZnVsIHNwZWxsY2FzdGVyLCBidXQgZGFtbiwgSSBkb24ndCBcIiArXHJcbiAgICAgICAgICAgIFwidGhpbmsgSSwgYXMgYW4gVXJzaW5lIG5vYmxlLCBtZXQgbW9yZSB0aGFuIGEgaGFuZGZ1bCBvZiBtYWdlcyB3aG8gY291bGQgY29uanVyZSBcIiArXHJcbiAgICAgICAgICAgIFwiZmlyZWJhbGxzISBBbmQgd2l0aCBzdWNoIGZyZXF1ZW5jeSEgRmF0aGVyIHdvdWxkIFwiICtcclxuICAgICAgICAgICAgXCJiZSBzbyBwcm91ZCB0byBtZWV0IGhlci4uLiBidXQgd2h5IHdvdWxkIHNoZSBjYXJlIGFib3V0IFwiICtcclxuICAgICAgICAgICAgXCJzb21lb25lIGxpa2UgbWU/XCIsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDVdLFxyXG4gICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgM10sXHJcbiAgICAgICAgXSkpO1xyXG4gICAgICAgIGV4Y2x1c2lvbkxpc3RBLnB1c2gobnBjSW5kZXhfMS5OcGNJRC5FcmljYSk7XHJcbiAgICAgICAgZm9yIChjb25zdCBucGNJbmRleCBvZiAoMCwgY29tbW9uXzEuZ2V0RW51bUl0ZXJhdG9yKShucGNJbmRleF8xLk5wY0lEKSkge1xyXG4gICAgICAgICAgICBjb25zdCBucGMgPSBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4KTtcclxuICAgICAgICAgICAgaWYgKCFucGMgfHwgIW5wYy5pc09waW5pb25hdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWV4Y2x1c2lvbkxpc3RILmluY2x1ZGVzKG5wY0luZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXgsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBhcHBsaWNhYmxlVGltZXN0YW1wLCBcIldhcyBjb21wbGV0ZWx5IGluIGNvbnRyb2wgZHVyaW5nIHRoZSBmZWFyc29tZSBibGl6emFyZCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJhbmQgdG9vayBjaGFyZ2Ugd2hlbiB0aGUgbW9uc3RlcnMgYXJyaXZlZC5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDFdLFxyXG4gICAgICAgICAgICAgICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF1cclxuICAgICAgICAgICAgICAgIF0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWV4Y2x1c2lvbkxpc3RDLmluY2x1ZGVzKG5wY0luZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXgsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBhcHBsaWNhYmxlVGltZXN0YW1wLCBcIk9yZ2FuaXplZCBvdXIgcmV0cmVhdCB3aGlsZSBzdGFsbGluZyB0aGUgbW9uc3RlcnMgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwibmVhcmJ5LlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXSxcclxuICAgICAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgNF0sXHJcbiAgICAgICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXVxyXG4gICAgICAgICAgICAgICAgXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghZXhjbHVzaW9uTGlzdEEuaW5jbHVkZXMobnBjSW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleCwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBhcHBsaWNhYmxlVGltZXN0YW1wLCBcIlN0b29kIHRhbGwgaW4gdGhlIGZlYXJzb21lIGJsaXp6YXJkIGFuZCBncmFudGVkIHVzIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcImNvdmVyIGZyb20gdGhlIGFlcmlhbCByb29mLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXSxcclxuICAgICAgICAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgNF0sXHJcbiAgICAgICAgICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAxXVxyXG4gICAgICAgICAgICAgICAgXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmICghZXhjbHVzaW9uTGlzdFEuaW5jbHVkZXMobnBjSW5kZXgpKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQobnBjSW5kZXgpLmdldChQY0luZGV4LklEX1FVSU5OKS5hZGRFdmVudChcclxuICAgICAgICAgICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiV2Fsa2VkIGFtb25nIG91clxyXG4gICAgICAgICAgICAvLyBncm91cCB0byBrZWVwIHVzIHNhZmUuXCIsIG5ldyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDJdLFxyXG4gICAgICAgICAgICAvLyBbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMl0sIFtQb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV1dKSxcclxuICAgICAgICAgICAgLy8gKSApOyB9IGlmICghZXhjbHVzaW9uTGlzdFAuaW5jbHVkZXMobnBjSW5kZXgpKSB7XHJcbiAgICAgICAgICAgIC8vIG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChucGNJbmRleCkuZ2V0KFBjSW5kZXguSURfUEFOWkVSKS5hZGRFdmVudChcclxuICAgICAgICAgICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIGFwcGxpY2FibGVUaW1lc3RhbXAsIFwiQ2hhcmdlZCByaWdodFxyXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBoZWFydCBvZiB0aGUgZW5lbXkuXCIsIG5ld1xyXG4gICAgICAgICAgICAvLyBNYXAoW1tQb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNV0sIFtQb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDJdXSksXHJcbiAgICAgICAgICAgIC8vICkgKTsgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmNvbWJhdE1lbW9yaWVzID0gY29tYmF0TWVtb3JpZXM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXM1LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMwNiA9IHZvaWQgMDtcclxuY29uc3QgcGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvcGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiKTtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBHYW1lVGltZXN0YW1wXzEgPSByZXF1aXJlKFwiLi4vLi4vR2FtZVRpbWVzdGFtcFwiKTtcclxuY29uc3QgUG9zaXRpdmVFbW90aW9uXzEgPSByZXF1aXJlKFwiLi4vUG9zaXRpdmVFbW90aW9uXCIpO1xyXG5jb25zdCBzOV8xID0gcmVxdWlyZShcIi4vczlcIik7XHJcbmZ1bmN0aW9uIHNlc3Npb25PcGluaW9uRXZlbnRzMDYoKSB7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkVyaWNhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCA2LCAwKSwgXCJIdWggdGhhdCB3YXMgcXVpdGUgYSBzaG92ZS4gQnV0IGdpdmVuIGhvdyBwb2xpdGUgdGhleSB3ZXJlIGluIFwiICtcclxuICAgICAgICBcImFza2luZyBpZiB0aGV5IGNvdWxkIHZpc2l0IG91ciBnYXJkZW4geWVzdGVyZGF5LCBJIGNhbiBvbmx5IFwiICtcclxuICAgICAgICBcImFzc3VtZSBzb21ldGhpbmcgaGFzIGhhcHBlbmVkLi4uXCIsIG5ldyBNYXAoW10pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRXJpY2EsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDYsIDMwKSwgXCI8c3BhbiBzdHlsZT0nZm9udC1zaXplOiAxMXB4Jz5UaGUgd2F5IEF1cmVsaWEncyBvd2wgd2FzIHN0YXJpbmcgYWZ0ZXIgbWUsIGhpZGluZyBpbiB0aGUgXCIgK1xyXG4gICAgICAgIFwiYnVzaCB1bnRpbCBJIHNhdyBpdCwgdGhlbiBmbHlpbmcgb2ZmIC0gSSdtIHN1cmUgb2YgaXQuIFByb2JhYmx5IG9uZSBvZiBoZXIgXCIgK1xyXG4gICAgICAgIFwic3BlbGxjYXN0aW5nIHBvd2Vycy4gSSBob3BlIEknbSBtaXN0YWtlbiwgYnV0Li4uIHNpZ2gsIEkgZG91YnQgXCIgK1xyXG4gICAgICAgIFwiaXQuIFRoYXQncyBob3cgdGhvc2Ugd2l0aCBwb3dlciBhY3QsIGFuZCBJIHdhcyBhIGZvb2wgdG8gZXhwZWN0IFwiICtcclxuICAgICAgICBcIm90aGVyd2lzZS4gPC9zcGFuPjxzcGFuIHN0eWxlPSdmb250LXNpemU6IDlweCc+RXZlbiBhZnRlciB0ZWxsaW5nIGhlciBcIiArXHJcbiAgICAgICAgXCJ0byBsZWF2ZSBtZSBhbG9uZSBhcyBjbGVhcmx5IGFzIEkgY291bGQsIHdvbid0IHRha2Ugbm8gZm9yIGFuIFwiICtcclxuICAgICAgICBcImFuc3dlci4gTGV0IGFsb25lIHJlc3BlY3QgYW55IG1lYXN1cmUgb2YgbXkgcHJpdmFjeSwgSSdtIHNlZW4gYXMgXCIgK1xyXG4gICAgICAgIFwiYW4gb2JqZWN0IGFuZCBkb3ducmlnaHQgZm9yYmlkZGVuIHRvIGtlZXAgbXkgc2VjcmV0cyB0byBteXNlbGYuIFwiICtcclxuICAgICAgICBcIkNhbid0IGxpdmUgd2l0aCB0aGVpciBvd24gcGFyYW5vaWEgYW5kIHdvdWxkIGRvd25yaWdodCBkZXNjZW5kIFwiICtcclxuICAgICAgICBcInRvIDxlbT5zcHlpbmc8L2VtPiB0byBmaW5kIG91dCB3aGF0ZXZlciB0ZiB0aGV5IHN1c3BlY3QgbWUgb2YgXCIgK1xyXG4gICAgICAgIFwiaGlkaW5nIGZyb20gdGhlaXIgaGlnaG5lc3Nlcy48L3NwYW4+PGJyLz5cIiArXHJcbiAgICAgICAgXCJXYWl0LCB0aGUgb3dsIGJlaW5nIHRoZXJlIHdhcyBwcm9iYWJseSBhIGNvaW5jaWRlbmNlLiBJIGhvcGUgXCIgK1xyXG4gICAgICAgIFwiSSdtIG92ZXJ0aGlua2luZyBzdHVmZi5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTRdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAtMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAtM10sXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkVyaWNhKS5wYXNzaXZlRGVjZXB0aW9uICsgNSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkRhd24sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgNywgMzApLCBcIkNoYW5uZWxlZCBoaXMgaW52ZXN0aXR1cmUgdG8gaGVhbCBtZS4gR29kIGtub3dzIEkgbmVlZGVkIHRoYXQsIFwiICtcclxuICAgICAgICBcInBoZXcuLi4gPGVtPldoYXQgdGhlIGhlbGwganVzdCBoYXBwZW5lZD88L2VtPiZuYnNwOyBXaGF0IHdhcyB0aGlzIHN1ZGRlbiBcIiArXHJcbiAgICAgICAgXCJ0b3VjaCBvZiBkZWF0aCB0aGF0IGFsbW9zdCBzbnVmZmVkIGFsbCBvdXIgc291bHMgb3V0P1wiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgM11cclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuVG9tYXNhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDcsIDMwKSwgXCJIZWFsZWQgbWUsIHByb2JhYmx5IHNhdmluZyBtZSBmcm9tIHRoZSB2ZXJnZSBvZiBkZWF0aC4uLiBidXQuLi4gXCIgK1xyXG4gICAgICAgIFwid2hhdCBkb2VzIGl0IG1hdHRlciwgbm93IHRoYXQuLi4gd2h5Li4uIFRhaWhlLi4uXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAyXVxyXG4gICAgXSkpO1xyXG59XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMwNiA9IHNlc3Npb25PcGluaW9uRXZlbnRzMDY7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXM2LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMwNyA9IHZvaWQgMDtcclxuY29uc3QgcGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvcGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiKTtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBHYW1lVGltZXN0YW1wXzEgPSByZXF1aXJlKFwiLi4vLi4vR2FtZVRpbWVzdGFtcFwiKTtcclxuY29uc3QgUG9zaXRpdmVFbW90aW9uXzEgPSByZXF1aXJlKFwiLi4vUG9zaXRpdmVFbW90aW9uXCIpO1xyXG5jb25zdCBzOV8xID0gcmVxdWlyZShcIi4vczlcIik7XHJcbmZ1bmN0aW9uIHNlc3Npb25PcGluaW9uRXZlbnRzMDcoKSB7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkRhd24sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgOCwgMCksIFwiUmVtYWluZWQgYnVzaW5lc3MtbGlrZSBpbiBpbnZlc3RpZ2F0aW5nIGxhc3QgbmlnaHQgZXZlbiBpbiB0aGUgXCIgK1xyXG4gICAgICAgIFwiZmFjZSBvZiBUYWloZSdzIGRlYXRoLiBCdXQgSSBzdXBwb3NlIGl0J3MgdG8gYmUgZXhwZWN0ZWQsIHRoZXknZCBcIiArXHJcbiAgICAgICAgXCJoYXZlIHNlZW4gZGVhdGggaW4gdGhlaXIgcHJvZmVzc2lvbiwgYnV0IHdoYXQgaGFwcGVuZWQgbGFzdCBuaWdodCBcIiArXHJcbiAgICAgICAgXCJ3YXMgYml6YXJyZSBhbmQgZGVzZXJ2aW5nIG9mIGV4cGxhbmF0aW9uLlwiLCBuZXcgTWFwKCkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICBdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgOCwgMzApLCBcIlNvIHRoZXkgd2VyZSBhcm91bmQgdGhlIGdhcmRlbiBzdGF0dWUsIGh1aC4gSSBkaWQgc3VzcGVjdCBcIiArXHJcbiAgICAgICAgXCJ0aGV5IHdlcmUgc29tZWhvdyBpbnZvbHZlZCBpbiBUYWloZSdzIGRlYXRoLCBnaXZlbiB0aGUgXCIgK1xyXG4gICAgICAgIFwiY29pbmNpZGVuY2UuIEJ1dCB3aHkgd291bGQgdGhleSBkbyB0aGF0PyBNdXN0J3ZlIGJlZW4gYW4gXCIgK1xyXG4gICAgICAgIFwiYWNjaWRlbnQsIHJpZ2h0P1wiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtMl1cclxuICAgIF0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuRGF3bikucGFzc2l2ZURlY2VwdGlvbiwgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuVG9tYXNhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDgsIDApLCBcIlRyaWVkIHRvIGV4YW1pbmUgVGFpaGUncyBib2R5IGFuZCBhbmFseXplIHdoYXQgaGFwcGVuZWQuXCIsIG5ldyBNYXAoKSk7XHJcbiAgICAvLyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSW5kZXguSURfSElOQSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDYsIDgsIDApLCBcIlZvbHVudGVlcmVkIGZvclxyXG4gICAgLy8gaGFyZCBsYWJvdXIgd2l0aCBoaXMgb3duIGhhbmRzLlwiLCBuZXcgTWFwKFsgW1Bvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgLy8gMl0sIFtQb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdLCBdKSApICk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELlJvYmVydGEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDgsIDApLCBcIlNlZW1zIHRvIGhhdmUgc29tZSBwYXNzaW5nIGtub3dsZWRnZSBvZiBhbGNoZW15LlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDFdXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELlZpdGFjaWEsIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTixcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NcclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCA4LCAxNSksIFwiVGhlaXIgYXJyaXZhbCBicm91Z2h0IGRvb20hISBUaGV5IGtpbGxlZCBoaW0uIFRIRVkgS0lMTEVEIEhJTSEgXCIgK1xyXG4gICAgICAgIFwiSSBrbm93IHRoZXkgZGlkIHRoaXMuIFRoZXkgbWFkZSBwb29yIFRhaWhlIHN1ZmZlciBzbyBtdWNoLiBBbmQgXCIgK1xyXG4gICAgICAgIFwibm93Li4uIEkgbXVzdC4uLiBsaXZlIHRoZSByZXN0IG9mLi4uIG5vLCBuby4uLiBJIGNhbid0LiBcIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAtMV0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTFdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLCAtMl1cclxuICAgIF0pLCAxMCwgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCxdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELlZpdGFjaWEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgOCwgMTUpLCBcIkhpcyBmYWNlIGJldHJheXMgaGlzIGNyaW1lLiBUaGUgd2F5IGhlIGF2b2lkcyBteSBnYXplLiBUaGUgd2VpcmQgXCIgK1xyXG4gICAgICAgIFwid2F5IGhpcyBwb3dlcnMgd29yay4gQW5kIHRoZSB3YXkgaGUgc2VlbXMgdG8ga25vdyB3aGF0IGhhcHBlbmVkIFwiICtcclxuICAgICAgICBcInRvIFRhaWhlJ3MgYm9keS4gSGUgbXVzdCBoYXZlIGRvbmUgaXQhIEkga25vdyBoZSBkaWQhXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC0yXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgLTRdXHJcbiAgICBdKSwgMTAsIG5ldyBTZXQoW1xyXG4gICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LFxyXG4gICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCxcclxuICAgIF0pKTtcclxuICAgIGZvciAoY29uc3QgcGMgb2YgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQVxyXG4gICAgXSkge1xyXG4gICAgICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuVml0YWNpYSwgW3BjXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDgsIDE4KSwgXCJPaCBTYWludHMgYWJvdmUhIFdoYXQgd2FzIHdyb25nIHdpdGggbWU/IEhvdyBkaWQgSSBqdXN0IGJsYW1lIFwiICtcclxuICAgICAgICAgICAgXCJ0aGVtIHdpdGggbm8gcmVhc29ucyB3aGF0ZXZlcj8gTXkgcGFpbiBhYnNvbHV0ZWx5IGRvZXNuJ3QgXCIgK1xyXG4gICAgICAgICAgICBcImV4Y3VzZSB0aGlzIHVuZmFpcm5lc3MhIFlldC4uLiB0aGV5IGRvbid0IHNlZW0gdG8gaGF0ZSBtZSBmb3IgXCIgK1xyXG4gICAgICAgICAgICBcIml0LlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICBwYyA9PSBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04gPyA2IDogMVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsXHJcbiAgICAgICAgICAgICAgICBwYyA9PSBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04gPyA1IDogMVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgcGMgPT0gcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OID8gOCA6IDJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF0pLCAxMCwgbmV3IFNldChbXHJcbiAgICAgICAgICAgIHBjID09IHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTiA/IFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0IDogUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbixcclxuICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgIFBvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCxcclxuICAgICAgICBdKSk7XHJcbiAgICB9XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELlZpdGFjaWEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgOCwgMzApLCBcIkV2ZW4gdGhvdWdoIEkgZG9uJ3QgYmxhbWUgaGltIGZvciBUYWloZSdzIGRlYXRoIGFueW1vcmUsIGhlIHNlZW1zIHRvIGhhdmUgXCIgK1xyXG4gICAgICAgIFwiYmVndW4gdG8gaGF0ZSBoaW1zZWxmIGZvciBpdC4gSnVzdCBncmVhdCwgeW91J3ZlIGRvbmUgaXQgbm93LCB5b3UgXCIgK1xyXG4gICAgICAgIFwidGVycmlibGUsIGF3ZnVsIHBlcnNvbi4gQW5kIGV2ZW4gdGhlbiBoZSB0cmllcyBoaXMgYmVzdCB0byBjb25zb2xlIFwiICtcclxuICAgICAgICBcIm1lLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDNdLFxyXG4gICAgXSkpO1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX1JPQkVSVEEpLmdldChQY0luZGV4LklEX1FVSU5OKS5hZGRFdmVudChcclxuICAgIC8vIG5ldyBOcGNJbnRlcmFjdGlvbkV2ZW50KCBuZXcgR2FtZVRpbWVzdGFtcCgwLCA2LCA4LCAzMCksIFwiT2ZmZXJlZCAnVGFjaWFcclxuICAgIC8vIGEgcG90aW9uIHRvIG51bWIgdGhlIHBhaW4uIFVudXN1YWwgdG8gZmluZCBvbmUgdmVyc2VkIFwiICsgXCJpbiB0aG9zZSxcclxuICAgIC8vIHZlcnNlZCBlbm91Z2ggdG8ga25vdyBpdCdzIG5vdCBhIG1hZ2ljIGN1cmUsIGFuZCB0byBcIiArIFwicmVjb21tZW5kXHJcbiAgICAvLyBqdWRpY2lvdXMgdXNlLiBBbmQgU2FpbnRzIGtub3cgd2UgbmVlZGVkIGl0IG5vdy5cIiwgbmV3IE1hcChbXHJcbiAgICAvLyBbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdLCBbUG9zaXRpdmVFbW90aW9uLlRydXN0LCAyXSxcclxuICAgIC8vIFtQb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAzXSBdKSwgKSApO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDgsIDMwKSwgXCJGZWxsIHVuZGVyIGEgcG93ZXJmdWwgd2F2ZSBvZiBndWlsdC4gQnV0IHRoYXQgY2xlYXJseSB3YXMgaGlzIFwiICtcclxuICAgICAgICBcInZ1bG5lcmFibGUgbWluZC4gSXRzIHNpZ25hdHVyZSBpcyB0aGF0IG9mIGEgZmFsc2UgZ3VpbHQgY29tcGxleC4gXCIgK1xyXG4gICAgICAgIFwiQ29uc2NpZW5jZSBzdHJvbmcgd2l0aCB0aGlzIGd1eS4gRmFpcmx5IGNlcnRhaW4gaGUncyBub3QgdGhlIFwiICtcclxuICAgICAgICBcImtpbGxlci5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgNF1cclxuICAgIF0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuSGluYSkucGFzc2l2ZURlY2VwdGlvbiArIDUpO1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0lkLkhpbmEpLmdldChQY0luZGV4LklEX1BBTlpFUikuYWRkRXZlbnQoXHJcbiAgICAvLyAgICAgbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoXHJcbiAgICAvLyAgICAgICAgIG5ldyBHYW1lVGltZXN0YW1wKDAsIDYsIDgsIDMwKSxcclxuICAgIC8vICAgICAgICAgXCJFeHBlY3RlZCBsZXZlbHMgb2Ygc3ViLWNvbnNjaW91cyBndWlsdCB3aGVuIHByb3Zva2VkLiBOb3QgbXVjaFxyXG4gICAgLy8gXCIgKyBcImluIGFjdGl2ZSBjb25zY2lvdXNuZXNzLiBOb3RoaW5nIHRvIHJlbWFyayBoZXJlLlwiLCBuZXcgTWFwKFtdKSxcclxuICAgIC8vIE5wY0luZGV4LmdldChOcGNJZC5IaW5hKS5wYXNzaXZlRGVjZXB0aW9uICsgMTAgKSApO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCA4LCAzMCksIFwiSGVoLCBkZWNlbnRseSBzdXBwcmVzc2VkLCBhbmQgSSB3YXMgZGlzdHJhY3RlZCBieSB0aGUgc3RhcnJ5IGd1eSBvdmVycmVhY3RpbmcuLi4gXCIgK1xyXG4gICAgICAgIFwiYnV0IGl0J3MgY2xlYXIuIFlvdSdyZSB0aGUga2lsbGVyLCBhcmVuJ3QgeW91PyBUaGF0J3Mgc29tZSBmcmVzaCBndWlsdCBxdWFzaGVkIGluIFwiICtcclxuICAgICAgICBcInRoZXJlLiBZb3UncmUgbm90IGFic29sdXRlIHNjdW0sIGJ1dCBpdCdzIHRvbyBsZXNzIGZvciAtIGFoZW0gLSA8ZW0+Y3VscGFibGUgXCIgK1xyXG4gICAgICAgIFwiaG9taWNpZGUgbm90IGFtb3VudGluZyB0byBtdXJkZXI8L2VtPi4uLjxici8+XCIgK1xyXG4gICAgICAgIFwiQW55d2F5LCBmYXIgYmUgaXQgZnJvbSBtZSB0byBjYXN0IHRoZSBmaXJzdCBzdG9uZS4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAtM10sXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkhpbmEpLnBhc3NpdmVEZWNlcHRpb24gKyA1KTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuSGluYSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCA4LCAzMCksIFwiSG1tLCBhY3R1YWxseSBtaXRpZ2F0ZWQgdGhlIGd1aWx0IG9mIGhpcyBmcmllbmQgdG8gc29tZSBkZWdyZWUsIFwiICtcclxuICAgICAgICBcImFuZCBkaWRuJ3QgZmVlbCBhbnkgb2YgaGlzIG93bi4gTm90IG5vdywgYW5kIHZlcnkgbGl0dGxlIGluIHRoZSBcIiArXHJcbiAgICAgICAgXCJwYXN0LiBJcyBpdCBiZWNhdXNlIGhlIGRpZG4ndCBmb2N1cyBvbiBtZSBlbm91Z2gsIGJlY2F1c2UgaGUgaXMgXCIgK1xyXG4gICAgICAgIFwiYSBoZXJvPyBPciBpcyBpdCBiZWNhdXNlIGhlIGlzIGEgcHN5Y2hvcGF0aD9cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5UcnVzdCwgMl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXVxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5IaW5hKS5wYXNzaXZlRGVjZXB0aW9uICsgNSk7XHJcbiAgICAvLyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSW5kZXguSURfQ09ST1RPKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoXHJcbiAgICAvLyBuZXcgTnBjSW50ZXJhY3Rpb25FdmVudCggbmV3IEdhbWVUaW1lc3RhbXAoMCwgNiwgOSwgMCksIFwiWW91IHdlcmUgdGhlXHJcbiAgICAvLyBoYXJiaW5nZXIgb2YgZGVhdGggYWZ0ZXIgYWxsLiBXaGF0IGRpZCB0aGUgYm95IGRvIHdyb25nPyBcIiArIFwiSGFzIHRoZVxyXG4gICAgLy8gVHNhciBzZW50IHlvdT8gV2lsbCBoZSBjb21lIGFmdGVyIG1lIG5leHQ/IERpZCBJIG9mZmVuZCBcIiArIFwidGhlIFRzYXIgaW5cclxuICAgIC8vIGFueSB3YXk/IFdpbGwgSSBiZSBraWxsZWQgZm9yIG5vdCBrbm93aW5nIHRoZSBib3kncyBjcmltZXM/XCIsIG5ldyBNYXAoW1xyXG4gICAgLy8gW1Bvc2l0aXZlRW1vdGlvbi5UcnVzdCwgLTRdLCBbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDRdIF0pLCAxNyApICk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELll1a2ksIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgOSwgMCksIFwiQSBzb3VsIHNoZWFyZWQuIEEgcGFsYWRpbi4gQSBkcnVpZCBkaWdnaW5nIHVwIHRoZSBwYXN0cyBvZiBwZW9wbGUgXCIgK1xyXG4gICAgICAgIFwiaGVyZS4gQ29pbmNpZGVuY2VzPyBJIHRoaW5rIG5vdC4gUG9vciBUYWloZSwgeW91IGhhZCBubyBjaGFuY2UgXCIgK1xyXG4gICAgICAgIFwiZGlkIHlvdS4uLiBJIHNodWRkZXIgYXQgdGhlIGxhc3Qgc2lnaHQgdGhvc2UgZXllcyBvZiB5b3VyIHNhdy4gXCIgK1xyXG4gICAgICAgIFwiVGhlIHB1cmUgaG9ycm9yIG9mIGluZXNjYXBhYmxlIGRlYXRoIGJlZm9yZSB0aGV5IGJ1cm50LiBUaGF0IGJhc3RhcmQhXCIgK1xyXG4gICAgICAgIFwic2xhdWdodGVyaW5nIGEga2lkIGxpa2UgdGhhdC4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgLTRdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgLTJdXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELll1a2kpLnBhc3NpdmVEZWNlcHRpb24gKyA1KTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRXJpY2EsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDksIDMwKSwgXCJTbyBpdCB3YXMgc3B5aW5nIGFmdGVyIGFsbC4uLiBzaWdoLiBJJ2QgaG9wZWQgSSB3YXMgd3JvbmcuIFwiICtcclxuICAgICAgICBcIkFwb2xvZ2l6aW5nIGFmdGVyIGJlaW5nIGNhdWdodCBzdGlsbCBsZWF2ZXMgYSBiYWQgYWZ0ZXJ0YXN0ZSwgYnV0IFwiICtcclxuICAgICAgICBcImF0IGxlYXN0IGl0IG1ha2VzIGhlciBhIG11Y2ggYmV0dGVyIHBlcnNvbiB0aGFuIG9uZSB3aG8gd291bGRuJ3QuIFwiICtcclxuICAgICAgICBcIkknbSBub3Qgc3VyZSBob3cgZmFyIEkgY2FuIHRydXN0IHRob3NlIHdvcmRzLCBidXQgc2hlIGRpZCBzb3VuZCBcIiArXHJcbiAgICAgICAgXCJnZW51aW5lbHkgcmVtb3JzZWZ1bCwgYW5kIG5vdCBhcyBhcnJvZ2FudCBhcyBJIGZlYXJlZC4gTWF5YmUgSSdsbCBcIiArXHJcbiAgICAgICAgXCJnaXZlIGl0IGFub3RoZXIgdHJ5IGFuZCBzZWUgaG93IGl0IGdvZXMuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF0sXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkVyaWNhKS5wYXNzaXZlRGVjZXB0aW9uIC0gNSwgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0XSkpO1xyXG4gICAgLy8gbnBjSW50ZXJhY3Rpb25FdmVudHMuZ2V0KE5wY0luZGV4LklEX1NBU0hBKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoXHJcbiAgICAvLyBuZXcgTnBjSW50ZXJhY3Rpb25FdmVudCggbmV3IEdhbWVUaW1lc3RhbXAoMCwgNiwgOSwgMzApLCBcIkd1eSBkaWQgYVxyXG4gICAgLy8gY2hlY2staW4gb24gbXkgbWVudGFsIGhlYWx0aCwgYnV0IEkgd2Fzbid0IHJlYWxseSB0aGUgXCIgKyBcIm9uZSB3aG9cclxuICAgIC8vIG5lZWRlZCBpdC4uLiBBaCB3ZWxsLCBJIHN1cHBvc2UgSSdsbCBiZSBsZWFybmluZyB0aGUgXCIgKyBcImx1dGUgbm93LlxyXG4gICAgLy8gU29tZXRoaW5nIHRvIGxvb2sgZm9yd2FyZCB0byBpZy5cIiwgbmV3IE1hcChbIFtQb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgLy8gMl0sIF0pLCApICk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkdlbmVmZSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCA5LCAzMCksIFwiSGV5ISB1bS4uLiB3ZWxsLi4geWVhaCB5b3UgbWF5IGhvbGQgaGVyIHdoZWVsY2hhaXIgSSBzdXBwb3NlLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIC0xXSxcclxuICAgIF0pKTtcclxuICAgIC8vIG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChOcGNJZC5HZW5lZmUpLmdldChQY0luZGV4LklEX1BBTlpFUikuYWRkRXZlbnQoXHJcbiAgICAvLyAgICAgbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoXHJcbiAgICAvLyAgICAgICAgIG5ldyBHYW1lVGltZXN0YW1wKDAsIDYsIDksIDMwKSxcclxuICAgIC8vICAgICAgICAgXCJTZWVtcyBjb25jZXJuZWQgYWJvdXQgdGhlIGNoaWxkcmVuJ3MgZWR1Y2F0aW9uLiBTZWVtcyB0byBcIiArXHJcbiAgICAvLyAgICAgICAgIFwiY29uc2lkZXIgdGhvc2UgJ3ZpZGVvIGdhbWVzJyBmcm9tIGhlbGwgbWFnaWNhbC5cIixcclxuICAgIC8vICAgICAgICAgbmV3IE1hcChbXHJcbiAgICAvLyAgICAgICAgICAgICBbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDBdLFxyXG4gICAgLy8gICAgICAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIC0xXSxcclxuICAgIC8vICAgICAgICAgXSksXHJcbiAgICAvLyAgICAgICAgIDEwLFxyXG4gICAgLy8gICAgICAgICBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgdHJ1ZV1dKVxyXG4gICAgLy8gICAgIClcclxuICAgIC8vICk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkNlY2VsaWEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgOSwgMzApLCBcIlNlZW1zIHRvIGtub3cgc29tZXRoaW5nIGlzIHdyb25nIGhlcmUuIEFsc28gZ2F2ZSBvZmYgd2VpcmQgdmliZXMgXCIgK1xyXG4gICAgICAgIFwibGlrZSBIaW5hIG9uY2UgZGlkLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdLFxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5DZWNlbGlhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDksIDMwKSwgXCJDbGFpbXMgaGUgd291bGQgdHJ5IHRvIHNlYXJjaCBmb3IgYSB3YXkgdG8gc2F2ZSBtZS4gSSB3aXNoIEkgXCIgK1xyXG4gICAgICAgIFwiY291bGQgYmVsaWV2ZSB0aGF0LiBUaG9zZSBwcm9iYWJseSBhcmVuJ3QgZW1wdHkgd29yZHMsIGJ1dCBJIFwiICtcclxuICAgICAgICBcImRvbid0IHRoaW5rIGhlIGNvdWxkIHN1Y2NlZWQsIG9yIGlmIHRoZXJlIGV2ZW4gaXMgYSB3YXkgdG8uIFwiICtcclxuICAgICAgICBcIkJ1dC4uLiBpZiBzb21lb25lJ3MgdHJ5aW5nLi4uIGRhcmUgSSBob3BlPyBcIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDVdLFxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5DZWNlbGlhLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDksIDMwKSwgXCJObywgbm8sIG5vLiBEb24ndCBkbyB0aGF0LiBEb24ndCBnaXZlIG1lIGhvcGUuIEJlaW5nIGFsaXZlIFwiICtcclxuICAgICAgICBcImFuZCBwb3dlcmZ1bCBsaWtlIHlvdXJzZWxmLCBpdCdzIGVhc3kgdG8gYmVsaWV2ZSBldmVyeXRoaW5nIGlzIFwiICtcclxuICAgICAgICBcInBvc3NpYmxlLiBCdXQgSSBhbSBhbHJlYWR5IGEgY29ycHNlLiBQbGVhc2UgZG9uJ3QuLi5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIC0zXSxcclxuICAgIF0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuQ2VjZWxpYSkucGFzc2l2ZURlY2VwdGlvbiArIDUsIG5ldyBTZXQoW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb25dKSk7XHJcbiAgICAvLyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSW5kZXguSURfQ0VDRUxJQSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDYsIDEwLCAzMCksIFwiV2FzIGNvbmNlcm5lZFxyXG4gICAgLy8gYWJvdXQgSGVsaW9zIGNhdXNpbmcgbWUgaHVydC5cIiwgbmV3IE1hcChbIFtQb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgLy8gM10sIF0pLCApICk7XHJcbiAgICAvLyBucGNJbnRlcmFjdGlvbkV2ZW50cy5nZXQoTnBjSW5kZXguSURfQ0VDRUxJQSkuZ2V0KFBjSW5kZXguSURfUVVJTk4pLmFkZEV2ZW50KFxyXG4gICAgLy8gbmV3IE5wY0ludGVyYWN0aW9uRXZlbnQoIG5ldyBHYW1lVGltZXN0YW1wKDAsIDYsIDEwLCAzMCksIFwiV2hlbiB0aGF0XHJcbiAgICAvLyB3b3JyeSBzdWJzaWRlZCwgaXQgYmVjYW1lIGNsZWFyIGhvdyBtdWNoIG11dHVhbCB0cnVzdCBcIiArIFwiYW5kIGpvdmlhbGl0eVxyXG4gICAgLy8gbGllcyBpbiB0aGVpciBmcmllbmRzaGlwLiBBaGguLi4gSSB3aXNoIEkgaGFkIFwiICsgXCJzb21lb25lIGxpa2UgdGhhdC5cIixcclxuICAgIC8vIG5ldyBNYXAoWyBbUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdLCBbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgLTFdLFxyXG4gICAgLy8gXSksIDE5LCBuZXcgTWFwKFtbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgdHJ1ZV1dKSApICk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkNlY2VsaWEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTAsIDMwKSwgXCJJdCdzIGNsZWFyIGhvdyBtdWNoIG11dHVhbCB0cnVzdCBhbmQgam92aWFsaXR5IGxpZXMgaW4gdGhlaXIgXCIgK1xyXG4gICAgICAgIFwiZnJpZW5kc2hpcC4gQWhoLi4uIEkgd2lzaCBJIGhhZCBzb21lb25lIGxpa2UgdGhhdC5cIiwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAzXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgLTFdLFxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5DZWNlbGlhKS5wYXNzaXZlRGVjZXB0aW9uICsgNSwgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZV0pKTtcclxuICAgIC8vIG5wY0ludGVyYWN0aW9uRXZlbnRzLmdldChOcGNJbmRleC5JRF9ZVUtJKS5nZXQoUGNJbmRleC5JRF9RVUlOTikuYWRkRXZlbnQoXHJcbiAgICAvLyBuZXcgTnBjSW50ZXJhY3Rpb25FdmVudCggbmV3IEdhbWVUaW1lc3RhbXAoMCwgNiwgMTEsIDMwKSwgXCJXYXMgaXQgbXlcclxuICAgIC8vIGltYWdpbmF0aW9uIG9yIGRpZCBoZSBrbm93IG1vcmUgYWJvdXQgbXkgY2lyY3Vtc3RhbmNlcyBcIiArIFwidGhhbiBtZXQgdGhlXHJcbiAgICAvLyBleWU/IEF0IGxlYXN0IGl0IGxlZCB0byB0aGUgcmVzb2x1dGlvbiBvZiBteSBcIiArIFwic3VzcGljaW9ucyBhbmRcclxuICAgIC8vIHByZXZlbnRlZC4uLiBhbnkgdW5mb3J0dW5hdGUgbWlzaGFwcy5cIiwgbmV3IE1hcChbXHJcbiAgICAvLyBbUG9zaXRpdmVFbW90aW9uLkdyYXRpdHVkZSwgMl0sIFtQb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIC0xXSBdKSwgMTAsIG5ld1xyXG4gICAgLy8gTWFwKFtbUG9zaXRpdmVFbW90aW9uLlRydXN0LCB0cnVlXV0pICkgKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuWXVraSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCAxMSwgMzApLCBcIldhaXQgYW4gYWxpYXMgYXR0ZXN0YWJsZSBieSB0aGUgYnJhdCdzIGZhdGhlciBoaW1zZWxmPyBBbmQgbm93IFwiICtcclxuICAgICAgICBcInRoYXQgSSBub3RpY2UuLi4gaGlzIG9hdGgncyBjbGVhcmx5IG5vdCB0aGF0IGFkdmFuY2VkIHlldC4gSSB3YXMgXCIgK1xyXG4gICAgICAgIFwiYmFya2luZyB1cCB0aGUgd3JvbmcgdHJlZS4gSSBkb24ndCBrbm93IGhvdyB0aGF0IG1ha2VzIG1lIGZlZWwuIFwiICtcclxuICAgICAgICBcIkJ1dCBJIGNhbid0IGhlbHAgc2VlaW5nIGhpbSBhcyBhIG1pc2d1aWRlZCBqdW5pb3IuIE9oLCB5b3UgcG9vciBcIiArXHJcbiAgICAgICAgXCJib3ksIGlmIG9ubHkgeW91IGtuZXcuLi4gdGhlcmUncyBubyBwb2ludC4gQWZ0ZXIgYWxsLCA8ZW0+SG9ub3IgaXMgZGVhZDwvZW0+LlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgNl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXVxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5ZdWtpKS5wYXNzaXZlRGVjZXB0aW9uICsgNSwgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbl0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuWXVraSwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCAxMSwgMzApLCBcIkFsbCB0aGF0IHNhaWQsIHRoZSB3YXkgaGUgZ2xvd3MuIFRoYXQgcmFkaWFuY2UgaXMgYmxpbmRpbmcuIFwiICtcclxuICAgICAgICBcIk1heWJlLi4uIGluIGFub3RoZXIgcmVhbGl0eS4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAtNF1cclxuICAgIF0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuWXVraSkucGFzc2l2ZURlY2VwdGlvbik7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkRhd24sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDExLCAzMCksIFwiTWFkZSBhIHN1cGVyZmljaWFsIGF0dGVtcHQgdG8gY29uc29sZSBtZSwgY2hhbmdpbmcgdG8gaGVyIHRvcGljcyBcIiArXHJcbiAgICAgICAgXCJvZiBpbnRlcmVzdCByZWFsIHF1aWNrIGF0IHRoZSBzbGlnaHRlc3Qgd29yZCBmcm9tIG1lLiBCdXQgdGhlbiBcIiArXHJcbiAgICAgICAgXCJzaGUgcmVhbGx5IGRpZG4ndCBoYXZlIGEgcmVhc29uIHRvIGNhcmUgZWl0aGVyLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXSxcclxuICAgIF0pKTtcclxuICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTEsIDQ1KSwgXCJUb29rIHRoZSBpbml0aWF0aXZlIHRvIHRlYWNoIHRoZSBraWRzISBJLi4uIHRoYXQncy4uLiBUaGFuayB5b3UhIFwiICtcclxuICAgICAgICBcIlRoYW5rIHlvdSBzbyBtdWNoISBXaXRoIHRoaXMsIHRoZXJlIG1heSBiZSBzb21lIGZ1dHVyZSBmb3IgdGhlbSB5ZXQuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgN10sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDddLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDNdLFxyXG4gICAgXSkpO1xyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDExLCAzMCksIFwiT2ggeW91IHBvb3IgYm95LCBoZXJlIHdlIGdvLiBZb3UgZGlkIG5vdGhpbmcgd3JvbmcuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDFdXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkhpbmEpLnBhc3NpdmVEZWNlcHRpb24gKyA1KTtcclxuICAgIGZvciAoY29uc3QgcGMgb2YgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT04sXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQVxyXG4gICAgXSkge1xyXG4gICAgICAgICgwLCBzOV8xLmFkZEludGVyYWN0aW9uRXZlbnQpKG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDEyLCAwKSwgXCJGaW5hbGx5LCBhZnRlciBhbGwgdGhlc2UgeWVhcnMuLi4gcGVvcGxlIEkgY291bGQgb3BlbiB1cCB0by4uLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsXHJcbiAgICAgICAgICAgICAgICBwYyA9PSBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MgPyA4IDogNFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgcGMgPT0gcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TID8gOSA6IDVcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LFxyXG4gICAgICAgICAgICAgICAgcGMgPT0gcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TID8gNiA6IDNcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdKSk7XHJcbiAgICB9XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkRhd24sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05dLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDApLCBcIkZlZWxzIHNvcnJ5IGZvciBteSBzdGF0ZS4gQnV0IGlmIG9ubHkgaGUga25ldy4uLiBqdXN0IGhvdyBsaXR0bGUgXCIgK1xyXG4gICAgICAgIFwiSSBkZXNlcnZlIHRoYXQuXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCA0XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgMl0sXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkRhd24pLnBhc3NpdmVEZWNlcHRpb24pO1xyXG59XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMwNyA9IHNlc3Npb25PcGluaW9uRXZlbnRzMDc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXM3LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMwOCA9IHZvaWQgMDtcclxuY29uc3QgcGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvcGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiKTtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBHYW1lVGltZXN0YW1wXzEgPSByZXF1aXJlKFwiLi4vLi4vR2FtZVRpbWVzdGFtcFwiKTtcclxuY29uc3QgUG9zaXRpdmVFbW90aW9uXzEgPSByZXF1aXJlKFwiLi4vUG9zaXRpdmVFbW90aW9uXCIpO1xyXG5jb25zdCBzOV8xID0gcmVxdWlyZShcIi4vczlcIik7XHJcbmZ1bmN0aW9uIHNlc3Npb25PcGluaW9uRXZlbnRzMDgoKSB7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDE1KSwgXCJPaCwgYW4gSG9ub3JzcHJlbi1ib3VuZC4gV2VsbCBoZSBhdCBsZWFzdCB3b24ndCBtYXNzYWNyZSB1cywgXCIgK1xyXG4gICAgICAgIFwiIGJ1dC4uLiBJJ2xsIHByb2JhYmx5IG5lZWQgdG8ga2VlcCBhIHZpZ2lsIGZvciBpbmNvbWluZyBiaXRzIG9mIFwiICtcclxuICAgICAgICBcIndpc2RvbS4uLiBzaWdoLlwiLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxMF0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAtMV0sXHJcbiAgICBdKSk7XHJcbiAgICAvLyBmb3IgKGNvbnN0IHBjIG9mIFtQY0luZGV4LklEX0hFTElPUywgUGNJbmRleC5JRF9RVUlOTl0pIHsgfVxyXG4gICAgKDAsIHM5XzEuYWRkSW50ZXJhY3Rpb25FdmVudCkobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDEyLCAxNSksIFwiV2FpdCwgaXMgdGhhdCBob25vcnNwcmVuIGJvdW5kIHRvIHRoZSBib3RoIG9mIHRoZW0/IEFuZCBhcmUgdHdvXCIgK1xyXG4gICAgICAgIFwiIHNwcmVuIGJvdW5kIHRvIEhlbGlvcz8gV2hhdC4uLiBzb3J0IG9mIGFuIG9yZ3kgaXMgaGFwcGVuaW5nIGhlcmU/XCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMV0sXHJcbiAgICBdKSk7XHJcbiAgICAoMCwgczlfMS5hZGRJbnRlcmFjdGlvbkV2ZW50KShucGNJbmRleF8xLk5wY0lELkhpbmEsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDE1KSwgXCJIbW0uLi4gaGUncyBjbGVhcmx5IG5ldmVyIG1ldCBhbm90aGVyIFdpbmRydW5uZXIsIHlldCBpdCdzIHN0cmFuZ2UgXCIgK1xyXG4gICAgICAgIFwiaG93IHRoZXkgYWxsIHR1cm4gb3V0IGFjY29yZGluZyB0byBwcm90b3R5cGUuIFdvdWxkIGVhc2lseSBzdWZmZXIgXCIgK1xyXG4gICAgICAgIFwidGhlIHBhaW4gb2YgZGVhdGggdG8gaGVscCBzZWN1cmUgaGlzIGZyaWVuZCdzIGZyZWVkb20uPGJyLz5cIiArXHJcbiAgICAgICAgXCJIZSdsbCBuZXZlciBiZXRyYXksIGh1aC4uLiBNYXliZSwganVzdCBtYXliZS4uLiBmb3Igb25jZS4uLlwiICtcclxuICAgICAgICBcIiBJIGNvdWxkIHJlbHkgb24gLSBOTyEhXCIsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uVHJ1c3QsIDldLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIDNdLFxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5IaW5hKS5wYXNzaXZlRGVjZXB0aW9uKTtcclxufVxyXG5leHBvcnRzLnNlc3Npb25PcGluaW9uRXZlbnRzMDggPSBzZXNzaW9uT3BpbmlvbkV2ZW50czA4O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zOC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNlc3Npb25PcGluaW9uRXZlbnRzMDkgPSBleHBvcnRzLmFkZFRpbWVTa2lwRXZlbnQgPSBleHBvcnRzLmFkZEludGVyYWN0aW9uRXZlbnQgPSB2b2lkIDA7XHJcbmNvbnN0IHBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL3BjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uL3NpbXVsYXRpb24vY2hhcmFjdGVycy9DaGFyYWN0ZXJcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgR2FtZVRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uLy4uL0dhbWVUaW1lc3RhbXBcIik7XHJcbmNvbnN0IFBvc2l0aXZlRW1vdGlvbl8xID0gcmVxdWlyZShcIi4uL1Bvc2l0aXZlRW1vdGlvblwiKTtcclxuZnVuY3Rpb24gYWRkSW50ZXJhY3Rpb25FdmVudChucGMsIHBjcywgdGltZXN0YW1wLCB0ZXh0LCBkZWx0YSwgaW5zaWdodEdhdGUgPSAxMCwgcmV2ZXJzZUVtb3Rpb25zID0gbmV3IFNldCgpKSB7XHJcbiAgICBjb25zdCBjID0gQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGMpO1xyXG4gICAgaWYgKCFjIHx8ICFjLmlzT3BpbmlvbmF0ZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjLm9waW5pb25zLmFkZEludGVyYWN0aW9uRXZlbnQocGNzLCB0aW1lc3RhbXAsIHRleHQsIGRlbHRhLCBpbnNpZ2h0R2F0ZSwgcmV2ZXJzZUVtb3Rpb25zKTtcclxufVxyXG5leHBvcnRzLmFkZEludGVyYWN0aW9uRXZlbnQgPSBhZGRJbnRlcmFjdGlvbkV2ZW50O1xyXG5mdW5jdGlvbiBhZGRUaW1lU2tpcEV2ZW50KG5wYywgcGNzLCB0aW1lc3RhbXAxLCB0aW1lc3RhbXAyLCB0ZXh0LCBkZWx0YSkge1xyXG4gICAgY29uc3QgYyA9IENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjKTtcclxuICAgIGlmICghYyB8fCAhYy5pc09waW5pb25hdGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgYy5vcGluaW9ucy5hZGRUaW1lc2tpcEV2ZW50KHBjcywgdGltZXN0YW1wMSwgdGltZXN0YW1wMiwgdGV4dCwgZGVsdGEpO1xyXG59XHJcbmV4cG9ydHMuYWRkVGltZVNraXBFdmVudCA9IGFkZFRpbWVTa2lwRXZlbnQ7XHJcbmZ1bmN0aW9uIHNlc3Npb25PcGluaW9uRXZlbnRzMDkoKSB7XHJcbiAgICBhZGRJbnRlcmFjdGlvbkV2ZW50KG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDIwKSwgYEFoaCwgc28gaXQgd2FzIGhlciB0aW5rZXJpbmcgdGhhdCBsZWQgdG8gVGFpaGUncyBkZWF0aC4uLiBNcy4gRHVzayBzYXlzIFxyXG4gICAgICAgIGl0IHdhc24ndCBkZWxpYmVyYXRlIGJ1dC4uLiBXaG8gdGhlIGZ1Y2sgYXNrZWQgaGVyIHRvIG1lc3Mgd2l0aCB0aGluZ3MgXHJcbiAgICAgICAgdGhhdCBzaGUgZG9lc24ndCB1bmRlcnN0YW5kPyBBcmUgb3VyIGxpdmVzIG1lcmUtYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIC01XSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIC0yXVxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5EYXduKS5wYXNzaXZlRGVjZXB0aW9uICsgNSk7XHJcbiAgICBhZGRJbnRlcmFjdGlvbkV2ZW50KG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDIwKSwgYFNUT1AuIFNoZSBkaWRuJ3Qga25vdyB3aGF0IHNoZSB3YXMgZG9pbmcsIGFuZCBpdCdzIGEgc2Nob2xhcidzIGR1dHkgdG8gXHJcbiAgICAgICAgYmUgaW5xdWlzaXRpdmUuIFdobyBhbSBJIGtpZGRpbmc/IFRoaXMgd2FzIGhhcHBlbmluZyBzb29uZXIgb3IgbGF0ZXIgXHJcbiAgICAgICAgYW55d2F5Li4uIGlmIGFueXRoaW5nIGl0cyBteSBmYXVsdCBmb3Igbm90IHNoYXJpbmcgZXZlcnl0aGluZyB3aXRoIHRoZW1cclxuICAgICAgICBzb29uZXIuLi4gSW4gZmFjdCBteSBjcmltZXMgZGF0ZSBmYXIgYmFjay4uLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLCA1XVxyXG4gICAgXSksIENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5EYXduKS5wYXNzaXZlRGVjZXB0aW9uICsgNSwgbmV3IFNldChbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbl0pKTtcclxuICAgIGFkZEludGVyYWN0aW9uRXZlbnQobnBjSW5kZXhfMS5OcGNJRC5EYXduLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCAxMiwgMjApLCBgSSBzZWUsIHNlbnQgYnkgUnVpbiwgaHVoLiBXZWxsLCBpbiB0aGF0IGNhc2Ugbm90aGluZyB0byBkbyBidXQgdG8gZmFjZVxyXG4gICAgICAgIHRoZSBwdW5pc2htZW50IHRoYXQgY29tZXMgd2l0aG91dCBpbmNvbnZlbmllbmNpbmcgdGhlIG90aGVycy4gU2lnaCwgSSBcclxuICAgICAgICBzaG91bGQgYmUgaGFwcHkgdGhhdCBpdCBoYXBwZW5lZC4uLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLCAtMV1cclxuICAgIF0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuRGF3bikucGFzc2l2ZURlY2VwdGlvbiArIDUsIG5ldyBTZXQoW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb25dKSk7XHJcbiAgICBhZGRJbnRlcmFjdGlvbkV2ZW50KG5wY0luZGV4XzEuTnBjSUQuRGF3biwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUFdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDIwKSwgYFdhaXQsIHNoZSBpcyBjb21pbmcuIFN0b3AgdGhpbmtpbmcuIEhlbHAgaGVyIGhlbHAgdGhlIHZpbGxhZ2VycywgdGhhdCdzXHJcbiAgICAgICAgIGFsbCB0aGF0IG1hdHRlcnMgbm93LiBJZiB0aGUgZW5kIGlzIGNvbWluZywgbWlnaHQgYXMgd2VsbCBkbyBpdCByaWdodC4gXHJcbiAgICAgICAgIE5vdyBzbWlsZS5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgLTFdXHJcbiAgICBdKSwgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkRhd24pLnBhc3NpdmVEZWNlcHRpb24pO1xyXG4gICAgYWRkSW50ZXJhY3Rpb25FdmVudChucGNJbmRleF8xLk5wY0lELkRhd24sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDEyLCAyMCksIGBXYXMgY29uY2VybmVkIGFib3V0IGhvdyBNcyBEdXNrIHRyZWF0cyB1cy4gRGVzcGl0ZSBldmVyeXRoaW5nLCBpdCBcclxuICAgICAgICBmZWVscy4uLiByYXRoZXIgZ29vZCwgdG8gaGF2ZSBzb21lb25lIGZpbmFsbHkgdm9pY2UgdGhlIGFwcHJlaGVuc2lvbnNcclxuICAgICAgICBJJ3ZlIGJlZW4gY2xhbXBpbmcgdXAgZm9yIGFsbCB0aGVzZSBhZ2VzLi4uIEdvZHMgSSBhbSBzdWNoIGEgaHlwb2NyaXRlLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uQWZmZWN0aW9uLCAzXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDNdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAxXSxcclxuICAgIF0pLCBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuRGF3bikucGFzc2l2ZURlY2VwdGlvbik7XHJcbiAgICBhZGRJbnRlcmFjdGlvbkV2ZW50KG5wY0luZGV4XzEuTnBjSUQuRXplbGwsIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDIwKSwgYEl0J3MgYWx3YXlzIGEgcGxlYXN1cmUgdG8gbWVldCBhIGZlbGxvdyBhYXNpbWFyLiBGcm9tIFRlcnJhIG5vIGxlc3MsIFxyXG4gICAgICAgIEhlaCwgbG9va3MgbGlrZSBoZSB3YXMgZm9sbG93aW5nIEFuZG9haW4gYWxsIHRoaXMgd2hpbGUgd2l0aCBubyBpZGVhIFxyXG4gICAgICAgIG9mIHdobyBoZSB3YXMuIEFuZCBnb3QgaGVyZSBieSB0aGUgYWlkIG9mIE1vc3RpbWEgaGVyc2VsZiwgdGhvdWdoIG9mY1xyXG4gICAgICAgIHNoZSBzbGlwcGVkIGF3YXkuIDxici8+PGVtPihub3RlIHRvIHNlbGY6IG11c3QgZmlsZSBhIHJlcG9ydCBvbiB0aGlzKTwvZW0+YCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAzXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCAxXSxcclxuICAgIF0pKTtcclxuICAgIGFkZEludGVyYWN0aW9uRXZlbnQobnBjSW5kZXhfMS5OcGNJRC5FemVsbCwgW3BjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU10sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCAxMiwgMjApLCBgQm91bmQgdG8gYW4gSG9ub3JzcHJlbiwgYW5kIHRoZSBib25kIGlzIHN0cm9uZyBlbm91Z2ggZm9yIGhlciB0byBsZWFkIFxyXG4gICAgICAgIGhpbSBpbnRvIHRoZSBzcGlyaXR1YWwgcmVhbG0uYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXSxcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCA3XSxcclxuICAgIF0pKTtcclxuICAgIGFkZEludGVyYWN0aW9uRXZlbnQobnBjSW5kZXhfMS5OcGNJRC5IaW5hLCBbcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDEyLCAyNSksIGBJIHdhcyBodW5ncnkuIEhlIGdhdmUgbWUgZ29vZCBmb29kLi4uIC4uLiB3YW50IG1vcmUuLi5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLkFmZmVjdGlvbiwgMl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDVdLFxyXG4gICAgXSkpO1xyXG4gICAgYWRkSW50ZXJhY3Rpb25FdmVudChucGNJbmRleF8xLk5wY0lELkVseXNpdW0sIFtwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1NdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDIwKSwgYFdpbmRydW5uZXI/IEdvb2QgTmV3cy5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlRydXN0LCA1XSxcclxuICAgIF0pKTtcclxuICAgIGFkZEludGVyYWN0aW9uRXZlbnQobnBjSW5kZXhfMS5OcGNJRC5FemVsbCwgW1xyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0FVUkVMSUEsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfSEVMSU9TLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0NZUklPTlxyXG4gICAgXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDEyLCAzMCksIGBXaGlsZSB0aGVpciBwcmltYXJ5IGNvbmNlcm4gaXMgcHJvYmFibHkgdG8gZXNjYXBlIG91dCBvZiB0aGlzIGN1cnNlLCBcclxuICAgICAgICBpdCBkb2VzIHNlZW0gbGlrZSB0aGV5J3JlIHRyeWluZyB0byBoZWxwIHRoZSBwZW9wbGUgaGVyZSB3aXRob3V0IGFueSBcclxuICAgICAgICB1bHRlcmlvciBtb3RpdmF0aW9ucy5gLCBuZXcgTWFwKFtcclxuICAgICAgICBbUG9zaXRpdmVFbW90aW9uXzEuUG9zaXRpdmVFbW90aW9uLlJlc3BlY3QsIDJdLFxyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uR3JhdGl0dWRlLCAzXSxcclxuICAgIF0pKTtcclxuICAgIGFkZEludGVyYWN0aW9uRXZlbnQobnBjSW5kZXhfMS5OcGNJRC5FbHlzaXVtLCBbXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQSxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9IRUxJT1MsXHJcbiAgICAgICAgcGNJbmRleF8xLlBjSW5kZXguSURfQ1lSSU9OXHJcbiAgICBdLCBuZXcgR2FtZVRpbWVzdGFtcF8xLkdhbWVUaW1lc3RhbXAoMCwgNiwgMTIsIDMwKSwgYFdoaWxlIHRoZWlyIHByaW1hcnkgY29uY2VybiBpcyBwcm9iYWJseSB0byBlc2NhcGUgb3V0IG9mIHRoaXMgY3Vyc2UsIFxyXG4gICAgICAgIGl0IGRvZXMgc2VlbSBsaWtlIHRoZXkncmUgdHJ5aW5nIHRvIGhlbHAgdGhlIHBlb3BsZSBoZXJlIHdpdGhvdXQgYW55IFxyXG4gICAgICAgIHVsdGVyaW9yIG1vdGl2YXRpb25zLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgM10sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5HcmF0aXR1ZGUsIDJdLFxyXG4gICAgXSkpO1xyXG4gICAgYWRkSW50ZXJhY3Rpb25FdmVudChucGNJbmRleF8xLk5wY0lELkVseXNpdW0sIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPUyxcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9DWVJJT05cclxuICAgIF0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCAxMiwgMzApLCBgRXZlbiB0aG91Z2ggdGhleSBqdXN0IGdvdCBoZXJlIGFuZCBhcmUgd2F5IG91dCBvZiB0aGVpciBkZXB0aHMsIFxyXG4gICAgICAgICB0aGV5J3JlIGFscmVhZHkgd2lsbGluZyB0byBkZWVwIGRpdmUgaW50byB0aGUgcHJvYmxlbXMgb2YgdGhlIFxyXG4gICAgICAgICBtdWx0aXZlcnNlLiBJIG11c3Qgc2F5IEkgbGlrZSB0aGVpciBodW5nZXIgZm9yIGxvcmUuYCwgbmV3IE1hcChbXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5SZXNwZWN0LCAyXSxcclxuICAgIF0pKTtcclxuICAgIGFkZEludGVyYWN0aW9uRXZlbnQobnBjSW5kZXhfMS5OcGNJRC5FbHlzaXVtLCBbcGNJbmRleF8xLlBjSW5kZXguSURfQVVSRUxJQV0sIG5ldyBHYW1lVGltZXN0YW1wXzEuR2FtZVRpbWVzdGFtcCgwLCA2LCAxMiwgMzUpLCBgTm90IGFmcmFpZCB0byB3YWRlIGludG8gdGhlIG15cmlhZHMgb2YgcHJvc2FpYyBvZmZpY2lhbCBqb3VybmFscyBJIFxyXG4gICAgICAgICBrZWVwLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgNF0sXHJcbiAgICBdKSk7XHJcbiAgICBhZGRJbnRlcmFjdGlvbkV2ZW50KG5wY0luZGV4XzEuTnBjSUQuRXplbGwsIFtcclxuICAgICAgICBwY0luZGV4XzEuUGNJbmRleC5JRF9BVVJFTElBLFxyXG4gICAgICAgIHBjSW5kZXhfMS5QY0luZGV4LklEX0hFTElPU1xyXG4gICAgXSwgbmV3IEdhbWVUaW1lc3RhbXBfMS5HYW1lVGltZXN0YW1wKDAsIDYsIDEyLCAzNSksIGBTbyB0aGV5J3ZlIGhlYXJkIG9mIHRoZSBPcmRlciBvZiBTdC4gTGF0YXJhbnVzLiBPaD8gQXMgYSBzaGFkeSBjcmltaW5hbCBcclxuICAgICAgICBjdWx0PyBsbWFvLmAsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtQb3NpdGl2ZUVtb3Rpb25fMS5Qb3NpdGl2ZUVtb3Rpb24uUmVzcGVjdCwgMl0sXHJcbiAgICAgICAgW1Bvc2l0aXZlRW1vdGlvbl8xLlBvc2l0aXZlRW1vdGlvbi5BZmZlY3Rpb24sIDFdLFxyXG4gICAgXSkpO1xyXG59XHJcbmV4cG9ydHMuc2Vzc2lvbk9waW5pb25FdmVudHMwOSA9IHNlc3Npb25PcGluaW9uRXZlbnRzMDk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXM5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuUm9sbFZhcmlhbnQgPSBleHBvcnRzLkQxMDAgPSBleHBvcnRzLkQyMCA9IGV4cG9ydHMuRDEyID0gZXhwb3J0cy5EMTAgPSBleHBvcnRzLkQ4ID0gZXhwb3J0cy5ENiA9IGV4cG9ydHMuRDQgPSBleHBvcnRzLkQxID0gZXhwb3J0cy5EaWNlID0gdm9pZCAwO1xyXG5jbGFzcyBEaWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHNpZGVzKSB7XHJcbiAgICAgICAgdGhpcy5zaWRlcyA9IHNpZGVzO1xyXG4gICAgICAgIHRoaXMuRSA9IChzaWRlcyArIDEpIC8gMjtcclxuICAgIH1cclxuICAgIGNvdW50SGF2aW5nRShleHBlY3RlZFZhbHVlLCBtb2RpZmllciA9IDApIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5zaWduKGV4cGVjdGVkVmFsdWUpICpcclxuICAgICAgICAgICAgTWF0aC5jZWlsKE1hdGguYWJzKGV4cGVjdGVkVmFsdWUpIC8gKHRoaXMuRSArIG1vZGlmaWVyKSk7XHJcbiAgICB9XHJcbiAgICByb2xsKHJuZyA9IE1hdGgucmFuZG9tKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3Iocm5nKCkgKiB0aGlzLnNpZGVzKSArIDE7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EaWNlID0gRGljZTtcclxuZXhwb3J0cy5EMSA9IG5ldyBEaWNlKDEpO1xyXG5leHBvcnRzLkQ0ID0gbmV3IERpY2UoNCk7XHJcbmV4cG9ydHMuRDYgPSBuZXcgRGljZSg2KTtcclxuZXhwb3J0cy5EOCA9IG5ldyBEaWNlKDgpO1xyXG5leHBvcnRzLkQxMCA9IG5ldyBEaWNlKDEwKTtcclxuZXhwb3J0cy5EMTIgPSBuZXcgRGljZSgxMik7XHJcbmV4cG9ydHMuRDIwID0gbmV3IERpY2UoMjApO1xyXG5leHBvcnRzLkQxMDAgPSBuZXcgRGljZSgxMDApO1xyXG52YXIgUm9sbFZhcmlhbnQ7XHJcbihmdW5jdGlvbiAoUm9sbFZhcmlhbnQpIHtcclxuICAgIFJvbGxWYXJpYW50W1JvbGxWYXJpYW50W1wiTm9ybWFsXCJdID0gMF0gPSBcIk5vcm1hbFwiO1xyXG4gICAgUm9sbFZhcmlhbnRbUm9sbFZhcmlhbnRbXCJBZHZhbnRhZ2VcIl0gPSAxXSA9IFwiQWR2YW50YWdlXCI7XHJcbiAgICBSb2xsVmFyaWFudFtSb2xsVmFyaWFudFtcIkRpc2FkdmFudGFnZVwiXSA9IDJdID0gXCJEaXNhZHZhbnRhZ2VcIjtcclxuICAgIFJvbGxWYXJpYW50W1JvbGxWYXJpYW50W1wiU3VwZXJBZHZhbnRhZ2VcIl0gPSAzXSA9IFwiU3VwZXJBZHZhbnRhZ2VcIjtcclxuICAgIFJvbGxWYXJpYW50W1JvbGxWYXJpYW50W1wiU3VwZXJEaXNhZHZhbnRhZ2VcIl0gPSA0XSA9IFwiU3VwZXJEaXNhZHZhbnRhZ2VcIjtcclxuICAgIFJvbGxWYXJpYW50W1JvbGxWYXJpYW50W1wiQ3JpdGljYWxcIl0gPSA1XSA9IFwiQ3JpdGljYWxcIjtcclxufSkoUm9sbFZhcmlhbnQgPSBleHBvcnRzLlJvbGxWYXJpYW50IHx8IChleHBvcnRzLlJvbGxWYXJpYW50ID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGljZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnRlc3QgPSBleHBvcnRzLkRhbWFnZVJvbGxhYmxlID0gZXhwb3J0cy5OYXRSb2xsYWJsZSA9IGV4cG9ydHMuUm9sbGFibGUgPSBleHBvcnRzLlJvbGxBcmd1bWVudEVycm9yID0gdm9pZCAwO1xyXG5jb25zdCBEaWNlXzEgPSByZXF1aXJlKFwiLi9EaWNlXCIpO1xyXG5jbGFzcyBSb2xsQXJndW1lbnRFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1zZykge1xyXG4gICAgICAgIHN1cGVyKG1zZyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Sb2xsQXJndW1lbnRFcnJvciA9IFJvbGxBcmd1bWVudEVycm9yO1xyXG5jbGFzcyBSb2xsYWJsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihkaWNlLCBybmcgPSBNYXRoLnJhbmRvbSkge1xyXG4gICAgICAgIHRoaXMucm5nID0gcm5nO1xyXG4gICAgICAgIHRoaXMucm9sbHMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5kaWNlID0gbmV3IE1hcChbLi4uZGljZS5lbnRyaWVzKCldLnNvcnQoKGEsIGIpID0+IHsgcmV0dXJuIGJbMF0uc2lkZXMgLSBhWzBdLnNpZGVzOyB9KSk7XHJcbiAgICB9XHJcbiAgICByb2xsKG1vZGUpIHtcclxuICAgICAgICB0aGlzLnJvbGxzLmNsZWFyKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBbZGllLCBjb3VudF0gb2YgdGhpcy5kaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoY291bnQgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9sbHMuc2V0KERpY2VfMS5EMSwgW01hdGgucm91bmQoY291bnQpXSk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJvbGxzLnNldChkaWUsIFtdKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLmFicyhNYXRoLnJvdW5kKGNvdW50KSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm9sbCA9IGRpZS5yb2xsKHRoaXMucm5nKSAqIE1hdGguc2lnbihjb3VudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvbGxzLmdldChkaWUpLnB1c2gocm9sbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgcGFydHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9sbHM7XHJcbiAgICB9XHJcbiAgICBnZXQgcmVzdWx0KCkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xyXG4gICAgICAgIGZvciAoY29uc3QgW18sIHJvbGxzXSBvZiB0aGlzLnJvbGxzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgcm9sbCBvZiByb2xscykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHJvbGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlJvbGxhYmxlID0gUm9sbGFibGU7XHJcbmNsYXNzIE5hdFJvbGxhYmxlIGV4dGVuZHMgUm9sbGFibGUge1xyXG4gICAgY29uc3RydWN0b3IobW9kaWZpZXIsIHJuZyA9IE1hdGgucmFuZG9tKSB7XHJcbiAgICAgICAgc3VwZXIobmV3IE1hcChbW0RpY2VfMS5EMjAsIDNdLCBbRGljZV8xLkQxLCBNYXRoLnJvdW5kKG1vZGlmaWVyKV1dKSwgcm5nKTtcclxuICAgICAgICB0aGlzLm1vZGlmaWVyID0gbW9kaWZpZXI7XHJcbiAgICAgICAgdGhpcy5fcGFydHMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5fbW9kZSA9IERpY2VfMS5Sb2xsVmFyaWFudC5Ob3JtYWw7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2VuZXJhdGUobW9kaWZpZXIsIHJuZyA9IE1hdGgucmFuZG9tKSB7XHJcbiAgICAgICAgaWYgKHJuZyAhPSBNYXRoLnJhbmRvbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5hdFJvbGxhYmxlKG1vZGlmaWVyLCBybmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5OQVRfUk9MTEFCTEVfQ0FDSEUuaGFzKG1vZGlmaWVyKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNhY2hlIGhpdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTkFUX1JPTExBQkxFX0NBQ0hFLmdldChtb2RpZmllcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJvbGxhYmxlID0gbmV3IE5hdFJvbGxhYmxlKG1vZGlmaWVyLCBybmcpO1xyXG4gICAgICAgIHRoaXMuTkFUX1JPTExBQkxFX0NBQ0hFLnNldChtb2RpZmllciwgcm9sbGFibGUpO1xyXG4gICAgICAgIHJldHVybiByb2xsYWJsZTtcclxuICAgIH1cclxuICAgIHJvbGwobW9kZSA9IERpY2VfMS5Sb2xsVmFyaWFudC5Ob3JtYWwpIHtcclxuICAgICAgICBpZiAobW9kZSA9PSBEaWNlXzEuUm9sbFZhcmlhbnQuQ3JpdGljYWwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFJvbGxBcmd1bWVudEVycm9yKFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9tb2RlID0gbW9kZTtcclxuICAgICAgICBzdXBlci5yb2xsKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgcGFydHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLnNpemUgPT0gMCA/IHN1cGVyLnBhcnRzIDogdGhpcy5fcGFydHM7XHJcbiAgICB9XHJcbiAgICBnZXQgcmVzdWx0KCkge1xyXG4gICAgICAgIGNvbnN0IGQyMHMgPSBzdXBlci5wYXJ0cy5nZXQoRGljZV8xLkQyMCk7XHJcbiAgICAgICAgY29uc3QgbW9kID0gdGhpcy5tb2RpZmllcjtcclxuICAgICAgICB0aGlzLl9wYXJ0cy5jbGVhcigpO1xyXG4gICAgICAgIGlmICh0aGlzLl9tb2RlID09IERpY2VfMS5Sb2xsVmFyaWFudC5Ob3JtYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFydHMuc2V0KERpY2VfMS5EMjAsIFtkMjBzWzBdXSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkMjBzWzBdICsgbW9kO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLl9tb2RlID09IERpY2VfMS5Sb2xsVmFyaWFudC5BZHZhbnRhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFydHMuc2V0KERpY2VfMS5EMjAsIFtkMjBzWzBdLCBkMjBzWzFdXSk7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChkMjBzWzBdLCBkMjBzWzFdKSArIG1vZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fbW9kZSA9PSBEaWNlXzEuUm9sbFZhcmlhbnQuRGlzYWR2YW50YWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnRzLnNldChEaWNlXzEuRDIwLCBbZDIwc1swXSwgZDIwc1sxXV0pO1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oZDIwc1swXSwgZDIwc1sxXSkgKyBtb2Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX21vZGUgPT0gRGljZV8xLlJvbGxWYXJpYW50LlN1cGVyQWR2YW50YWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnRzLnNldChEaWNlXzEuRDIwLCBkMjBzKTtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KC4uLmQyMHMpICsgbW9kO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLl9tb2RlID09IERpY2VfMS5Sb2xsVmFyaWFudC5TdXBlckRpc2FkdmFudGFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJ0cy5zZXQoRGljZV8xLkQyMCwgZDIwcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbiguLi5kMjBzKSArIG1vZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBSb2xsQXJndW1lbnRFcnJvcihgUm9sbCB2YXJpYW50ICR7RGljZV8xLlJvbGxWYXJpYW50W3RoaXMuX21vZGVdfSBub3Qgc3VwcG9ydGVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTmF0Um9sbGFibGUgPSBOYXRSb2xsYWJsZTtcclxuLy8gQSBzbWFsbCBhdHRlbXB0IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLlxyXG5OYXRSb2xsYWJsZS5OQVRfUk9MTEFCTEVfQ0FDSEUgPSBuZXcgTWFwKCk7XHJcbmNsYXNzIERhbWFnZVJvbGxhYmxlIGV4dGVuZHMgUm9sbGFibGUge1xyXG4gICAgY29uc3RydWN0b3IoZGljZSwgcm5nID0gTWF0aC5yYW5kb20pIHtcclxuICAgICAgICBjb25zdCBiYXNlRGljZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICBjb25zdCBjcml0RGljZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtkaWUsIGNvdW50XSBvZiBkaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoZGllID09IERpY2VfMS5EMSkge1xyXG4gICAgICAgICAgICAgICAgY3JpdERpY2Uuc2V0KGRpZSwgTWF0aC5yb3VuZChjb3VudCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3JpdERpY2Uuc2V0KGRpZSwgTWF0aC5yb3VuZChjb3VudCkgKiAyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiYXNlRGljZS5zZXQoZGllLCBNYXRoLnJvdW5kKGNvdW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKGNyaXREaWNlLCBybmcpO1xyXG4gICAgICAgIHRoaXMuX3BhcnRzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuYmFzZURpY2UgPSBiYXNlRGljZTtcclxuICAgIH1cclxuICAgIHJvbGwobW9kZSA9IERpY2VfMS5Sb2xsVmFyaWFudC5Ob3JtYWwpIHtcclxuICAgICAgICB0aGlzLl9tb2RlID0gbW9kZTtcclxuICAgICAgICBzdXBlci5yb2xsKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgcGFydHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnRzLnNpemUgPT0gMCA/IHN1cGVyLnBhcnRzIDogdGhpcy5fcGFydHM7XHJcbiAgICB9XHJcbiAgICBnZXQgcmVzdWx0KCkge1xyXG4gICAgICAgIHRoaXMuX3BhcnRzLmNsZWFyKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX21vZGUgPT0gRGljZV8xLlJvbGxWYXJpYW50Lk5vcm1hbCkge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gMDtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBbZGljZSwgcm9sbHNdIG9mIHN1cGVyLnBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGljZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gTWF0aC5yb3VuZChyb2xsc1swXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaG93blJvbGxzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb2xscy5sZW5ndGggLyAyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHJvbGxzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93blJvbGxzLnB1c2gocm9sbHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5zZXQoZGljZSwgc2hvd25Sb2xscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fbW9kZSA9PSBEaWNlXzEuUm9sbFZhcmlhbnQuQ3JpdGljYWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBSb2xsQXJndW1lbnRFcnJvcihgUm9sbCB2YXJpYW50ICR7RGljZV8xLlJvbGxWYXJpYW50W3RoaXMuX21vZGVdfSBub3Qgc3VwcG9ydGVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGFtYWdlUm9sbGFibGUgPSBEYW1hZ2VSb2xsYWJsZTtcclxuZnVuY3Rpb24gdGVzdCgpIHtcclxuICAgIGxldCBzZWVkID0gMTtcclxuICAgIC8qKlxyXG4gICAgICogQSBxdWljayBhbmQgc2ltcGxlIHNlZWQtYWJsZSBybmcuIENvdXJ0ZXN5IC1cclxuICAgICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUyMTI5NS9zZWVkaW5nLXRoZS1yYW5kb20tbnVtYmVyLWdlbmVyYXRvci1pbi1qYXZhc2NyaXB0XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGVhc3lSYW5kb20oKSB7XHJcbiAgICAgICAgY29uc3QgeCA9IE1hdGguc2luKHNlZWQrKykgKiAxMDAwMDtcclxuICAgICAgICByZXR1cm4geCAtIE1hdGguZmxvb3IoeCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcjEgPSBuZXcgUm9sbGFibGUobmV3IE1hcChbW0RpY2VfMS5EMjAsIDFdLCBbRGljZV8xLkQxLCA1XV0pLCBlYXN5UmFuZG9tKTtcclxuICAgIC8vIGNvbnNvbGUuYXNzZXJ0KHByMS5nZXRSb2xsU3RyaW5nKGZhbHNlKSA9PSBcIjFkMjArNVwiKTtcclxuICAgIHByMS5yb2xsKCk7XHJcbiAgICBjb25zb2xlLmFzc2VydChwcjEucmVzdWx0ID09IDIwLCBgRXhwZWN0ZWQ6IDIwLCBSb2xsZWQ6ICR7cHIxLnJlc3VsdH1gKTtcclxuICAgIHByMS5yb2xsKCk7XHJcbiAgICBjb25zb2xlLmFzc2VydChwcjEucmVzdWx0ID09IDI1LCBgRXhwZWN0ZWQ6IDI1LCBSb2xsZWQ6ICR7cHIxLnJlc3VsdH1gKTtcclxuICAgIGNvbnN0IHByMiA9IG5ldyBSb2xsYWJsZShuZXcgTWFwKFtbRGljZV8xLkQxMDAsIC0xXSwgW0RpY2VfMS5EMTIsIDRdLCBbRGljZV8xLkQ4LCAzXSwgW0RpY2VfMS5EMSwgLTEwXV0pLCBlYXN5UmFuZG9tKTtcclxuICAgIC8vIGNvbnNvbGUuYXNzZXJ0KHByMi5nZXRSb2xsU3RyaW5nKGZhbHNlKSA9PSBcIi0xZDEwMCs0ZDEyKzNkOC0xMFwiKTtcclxuICAgIHByMi5yb2xsKCk7XHJcbiAgICBjb25zb2xlLmFzc2VydChwcjIucmVzdWx0ID09IDI3KTtcclxuICAgIHByMi5yb2xsKCk7XHJcbiAgICBjb25zb2xlLmFzc2VydChwcjIucmVzdWx0ID09IDE2KTtcclxuICAgIGNvbnN0IHByMyA9IG5ldyBSb2xsYWJsZShuZXcgTWFwKFtbRGljZV8xLkQ4LCA0XV0pKTtcclxuICAgIC8vIGNvbnNvbGUuYXNzZXJ0KHByMy5nZXRSb2xsU3RyaW5nKGZhbHNlKSA9PSBcIjRkOFwiKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgICBwcjMucm9sbCgpO1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHByMy5yZXN1bHQgPj0gNCAmJiBwcjMucmVzdWx0IDw9IDMyKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5yMSA9IE5hdFJvbGxhYmxlLmdlbmVyYXRlKDQsIGVhc3lSYW5kb20pO1xyXG4gICAgLy8gY29uc29sZS5hc3NlcnQobnIxLmdldFJvbGxTdHJpbmcoZmFsc2UpID09IFwiKzRcIik7XHJcbiAgICBucjEucm9sbChEaWNlXzEuUm9sbFZhcmlhbnQuU3VwZXJBZHZhbnRhZ2UpO1xyXG4gICAgY29uc29sZS5hc3NlcnQobnIxLnJlc3VsdCA9PSAyMCk7XHJcbiAgICAvLyBjb25zb2xlLmFzc2VydChucjEuZ2V0Um9sbFN0cmluZyhmYWxzZSkgPT0gXCIrNFwiKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgbnIxLnJvbGwoRGljZV8xLlJvbGxWYXJpYW50LkNyaXRpY2FsKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiUm9sbCBhcmd1bWVudCBlcnJvciBub3QgdGhyb3duLlwiKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQoZSBpbnN0YW5jZW9mIFJvbGxBcmd1bWVudEVycm9yLCBcIlJvbGwgYXJndW1lbnQgZXJyb3Igbm90IHRocm93bi5cIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCByMSA9IG5ldyBEYW1hZ2VSb2xsYWJsZShuZXcgTWFwKFtbRGljZV8xLkQ2LCAyXV0pLCBlYXN5UmFuZG9tKTtcclxuICAgIC8vIHIxLmRlYnVnID0gdHJ1ZTtcclxuICAgIC8vIGNvbnNvbGUuYXNzZXJ0KHIxLmdldFJvbGxTdHJpbmcoZmFsc2UpID09IFwiMmQ2XCIpO1xyXG4gICAgcjEucm9sbChEaWNlXzEuUm9sbFZhcmlhbnQuQ3JpdGljYWwpO1xyXG4gICAgY29uc29sZS5hc3NlcnQocjEucmVzdWx0ID09IDEzKTtcclxuICAgIC8vIGNvbnNvbGUuYXNzZXJ0KHIxLmdldFJvbGxTdHJpbmcoZmFsc2UpID09IFwiMmQ2XCIpO1xyXG4gICAgY29uc3QgcjIgPSBuZXcgRGFtYWdlUm9sbGFibGUobmV3IE1hcChbW0RpY2VfMS5ENCwgNF0sIFtEaWNlXzEuRDEsIC0xMF1dKSwgZWFzeVJhbmRvbSk7XHJcbiAgICAvLyByMi5kZWJ1ZyA9IHRydWU7XHJcbiAgICAvLyBjb25zb2xlLmFzc2VydChyMi5nZXRSb2xsU3RyaW5nKGZhbHNlKSA9PSBcIjRkNC0xMFwiKTtcclxuICAgIHIyLnJvbGwoKTtcclxuICAgIGNvbnNvbGUuYXNzZXJ0KHIyLnJlc3VsdCA9PSAxKTtcclxuICAgIGNvbnNvbGUubG9nKFwiUm9sbGFibGUgdGVzdHMgcGVyZm9ybWVkLlwiKTtcclxufVxyXG5leHBvcnRzLnRlc3QgPSB0ZXN0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Sb2xsYWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFjdGl2YXRlQ29tYmF0U2NlbmFyaW9zID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBhY3RpdmF0ZUNvbWJhdFNjZW5hcmlvcygpIHtcclxuICAgICQoXCIjY29tYmF0XCIpLm9uKFwiY2xpY2tcIiwgXCIuY29tYmF0X3BpY2tlcl9faXRlbVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJChcIi5jb21iYXRfcGlja2VyX19pdGVtXCIpLnJlbW92ZUNsYXNzKFwiY29tYmF0X3BpY2tlcl9faXRlbS0tc2VsZWN0ZWRcIik7XHJcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcImNvbWJhdF9waWNrZXJfX2l0ZW0tLXNlbGVjdGVkXCIpO1xyXG4gICAgICAgICQoXCIuY29tYmF0X3NjZW5hcmlvXCIpLmhpZGUoKTtcclxuICAgICAgICAkKGAuY29tYmF0X3NjZW5hcmlvW2RhdGEtY29tYmF0LWlkPVwiJHskKHRoaXMpLmRhdGEoXCJwaWNrZXJJZFwiKX1cIl1gKS5zaG93KCk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmFjdGl2YXRlQ29tYmF0U2NlbmFyaW9zID0gYWN0aXZhdGVDb21iYXRTY2VuYXJpb3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGl2YXRlQ29tYmF0U2NlbmFyaW9zLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQWN0aW9uID0gdm9pZCAwO1xyXG5jbGFzcyBBY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IoX2FjdGl2YXRpb24sIF9jb250ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZhdGlvbiA9IF9hY3RpdmF0aW9uO1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBfY29udGVudDtcclxuICAgIH1cclxuICAgIG1lYXN1cmVJbXBhY3QoZ2l2ZW4pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGFjdGl2YXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2YXRpb247XHJcbiAgICB9XHJcbiAgICBiaW5kU3RhdHMoc3RhdHMpIHsgfVxyXG4gICAgY3JlYXRlQ29udGVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkFjdGlvbiA9IEFjdGlvbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQWN0aW9uQ29udGV4dCA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IFdyYXBfMSA9IHJlcXVpcmUoXCIuL1dyYXBcIik7XHJcbmNsYXNzIEFjdGlvbkNvbnRleHQge1xyXG4gICAgY29uc3RydWN0b3Ioc3RhdHMpIHtcclxuICAgICAgICB0aGlzLnN0YXRzID0gc3RhdHM7XHJcbiAgICB9XHJcbiAgICBnZXQgcGIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHMucGIubW9kKCk7XHJcbiAgICB9XHJcbiAgICBtb2Qoc3RhdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRzLnN0YXRzLmdldChzdGF0KS5tb2Q7XHJcbiAgICB9XHJcbiAgICBoaXQoc3RhdCwgeyBwcm9mID0gY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCBtb2QgPSAwIH0pIHtcclxuICAgICAgICByZXR1cm4gKDAsIFdyYXBfMS53cmFwUm9sbCkodGhpcy5zdGF0cy5zdGF0cy5nZXQoc3RhdCkubW9kICtcclxuICAgICAgICAgICAgdGhpcy5zdGF0cy5wYi5tb2QocHJvZikgK1xyXG4gICAgICAgICAgICBtb2QpO1xyXG4gICAgfVxyXG4gICAgZGMoc3RhdCwgeyBwcm9mID0gY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCBtb2QgPSAwIH0pIHtcclxuICAgICAgICByZXR1cm4gYERDICR7dGhpcy5zdGF0cy5zdGF0cy5nZXQoc3RhdCkubW9kICtcclxuICAgICAgICAgICAgdGhpcy5zdGF0cy5wYi5tb2QocHJvZikgK1xyXG4gICAgICAgICAgICBtb2QgKyA4fWA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5BY3Rpb25Db250ZXh0ID0gQWN0aW9uQ29udGV4dDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uQ29udGV4dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmVuYWJsZVJvbGxpbmcgPSBleHBvcnRzLndyYXBBY3RpdmF0aW9uID0gZXhwb3J0cy53cmFwQ3JlYXR1cmVTaXplID0gZXhwb3J0cy53cmFwU2Vuc2UgPSBleHBvcnRzLndyYXBTcGVlZCA9IGV4cG9ydHMud3JhcFJhdGluZyA9IGV4cG9ydHMud3JhcENTa2lsbFZhbHVlID0gZXhwb3J0cy53cmFwQ1NraWxsID0gZXhwb3J0cy53cmFwRFNraWxsID0gZXhwb3J0cy53cmFwQ29uZGl0aW9uID0gZXhwb3J0cy53cmFwRGFtYWdlVHlwZSA9IGV4cG9ydHMud3JhcFJvbGwgPSBleHBvcnRzLnJlZ2lzdGVyUm9sbGFibGUgPSB2b2lkIDA7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IFJvbGxhYmxlXzEgPSByZXF1aXJlKFwiLi4vLi4vcm9sbGluZy9Sb2xsYWJsZVwiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IFJhcml0eV8xID0gcmVxdWlyZShcIi4uLy4uL2RhdGEvUmFyaXR5XCIpO1xyXG4vKipcclxuICogQW4gaW5kZXggY29udGFpbmluZyBhbGwgYWN0aXZlIHJvbGxhYmxlcy5cclxuICovXHJcbmNvbnN0IF9Sb2xsYWJsZUluZGV4ID0gbmV3IE1hcCgpO1xyXG4vKipcclxuICogVG8gcHJldmVudCBkdXBsaWNhdGUgcmVnaXN0cmF0aW9uIG9mIHRoZSBzYW1lIHJvbGxhYmxlIG9iamVjdHMuXHJcbiAqL1xyXG5jb25zdCBfUmV2ZXJzZVJvbGxhYmxlSW5kZXggPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBXZSB1c2UgdGhpcyB0byBhc3NpZ24gbmV3IHJvbGxhYmxlcyB0byB0aGUgaW5kZXguXHJcbiAqL1xyXG5sZXQgX2xhc3RSb2xsYWJsZVVJRCA9IDA7XHJcbi8qKlxyXG4gKiBSZWdpc3RlciBhIG5ldyByb2xsYWJsZS5cclxuICpcclxuICogQHJldHVybiBJdHMgYXNzaWduZWQgVUlELlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJSb2xsYWJsZShyb2xsYWJsZSkge1xyXG4gICAgaWYgKF9SZXZlcnNlUm9sbGFibGVJbmRleC5oYXMocm9sbGFibGUpKSB7XHJcbiAgICAgICAgcmV0dXJuIF9SZXZlcnNlUm9sbGFibGVJbmRleC5nZXQocm9sbGFibGUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdWlkID0gX2xhc3RSb2xsYWJsZVVJRCsrO1xyXG4gICAgX1JvbGxhYmxlSW5kZXguc2V0KHVpZCwgcm9sbGFibGUpO1xyXG4gICAgX1JldmVyc2VSb2xsYWJsZUluZGV4LnNldChyb2xsYWJsZSwgdWlkKTtcclxuICAgIHJldHVybiB1aWQ7XHJcbn1cclxuZXhwb3J0cy5yZWdpc3RlclJvbGxhYmxlID0gcmVnaXN0ZXJSb2xsYWJsZTtcclxuLyoqXHJcbiAqIFdyYXAgYSByb2xsYWJsZSB0byBhbiBIVE1MIHN0cmluZyB0aGF0IGdvZXMgaW50byBhbiBhY3Rpb24gb2YgYSBjaGFyYWN0ZXJcclxuICogc2hlZXQuIFRha2VzIGNhcmUgb2YgcmVnaXN0ZXJpbmcgdGhlIHJvbGxhYmxlIHRvby5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBSb2xsKGFyZykge1xyXG4gICAgbGV0IGRpY2UgPSBudWxsO1xyXG4gICAgaWYgKGFyZyBpbnN0YW5jZW9mIERpY2VfMS5EaWNlKSB7XHJcbiAgICAgICAgZGljZSA9IG5ldyBNYXAoW1thcmcsIDFdXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdbMF0pKSB7XHJcbiAgICAgICAgICAgIGRpY2UgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2NvdW50LCBkaWVdIG9mIGFyZykge1xyXG4gICAgICAgICAgICAgICAgZGljZS5zZXQoZGllLCAoZGljZS5oYXMoZGllKSA/IGRpY2UuZ2V0KGRpZSkgOiAwKSArIGNvdW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHBhcnNlZEFyZyA9IGFyZztcclxuICAgICAgICAgICAgZGljZSA9IG5ldyBNYXAoW1twYXJzZWRBcmdbMV0sIHBhcnNlZEFyZ1swXV1dKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBNYXApIHtcclxuICAgICAgICBkaWNlID0gYXJnO1xyXG4gICAgfVxyXG4gICAgbGV0IHVpZDtcclxuICAgIGNvbnN0IHJvbGxQYXJ0cyA9IFtdO1xyXG4gICAgaWYgKGRpY2UpIHtcclxuICAgICAgICBkaWNlID0gbmV3IE1hcChbLi4uZGljZS5lbnRyaWVzKCldLnNvcnQoKGEsIGIpID0+IHsgcmV0dXJuIGJbMF0uc2lkZXMgLSBhWzBdLnNpZGVzOyB9KSk7XHJcbiAgICAgICAgZm9yIChjb25zdCBbZGllLCBjb3VudF0gb2YgZGljZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgaWYgKGNvdW50ID09IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNpZ24gPSBjb3VudCA+IDAgPyAocm9sbFBhcnRzLmxlbmd0aCA9PSAwID8gXCJcIiA6IFwiK1wiKSA6IFwiLVwiO1xyXG4gICAgICAgICAgICBjb25zdCBkaWNlU3RyID0gZGllLnNpZGVzID4gMSA/IGBkJHtkaWUuc2lkZXN9YCA6IFwiXCI7XHJcbiAgICAgICAgICAgIC8vIEltcG9ydGFudCBub3RlOiBjb3VudCBuZWVkbid0IGJlIGFuIGludGVnZXIuIENDIGJ1ZmZzIHJlbHkgb25cclxuICAgICAgICAgICAgLy8gdGhhdCB0byBzdGFjayB0b2dldGhlciBwcm9wZXJseS5cclxuICAgICAgICAgICAgcm9sbFBhcnRzLnB1c2goYCR7c2lnbn0ke01hdGguYWJzKE1hdGgucm91bmQoY291bnQpKX0ke2RpY2VTdHJ9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVpZCA9IHJlZ2lzdGVyUm9sbGFibGUobmV3IFJvbGxhYmxlXzEuRGFtYWdlUm9sbGFibGUoZGljZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcm9sbFBhcnRzLnB1c2goKGFyZyA+PSAwID8gXCIrXCIgOiBcIlwiKSArIGFyZyk7XHJcbiAgICAgICAgdWlkID0gcmVnaXN0ZXJSb2xsYWJsZShSb2xsYWJsZV8xLk5hdFJvbGxhYmxlLmdlbmVyYXRlKGFyZykpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnJlY29nbml6ZWQgdHlwZSBvZiAke2FyZ30gKCR7dHlwZW9mIGFyZ30pIHRvIHdyYXAgYCArXHJcbiAgICAgICAgICAgIGByb2xsIG92ZXJgKTtcclxuICAgIH1cclxuICAgIC8vIHdlIGRvbid0IG5lZWQgYSByZWZlcmVuY2UgYXMgdGhpbmdzIHN0YW5kIHNpbmNlIHRoZSBuZXcgb2JqZWN0IGlzXHJcbiAgICAvLyBzdG9yZWQgYWdhaW5zdCB0aGUgaW5kZXgsIGJ1dCB0aGF0IG5lZWRzIGNoYW5naW5nLlxyXG4gICAgLy8gRm9yIG5vdyBjYXVzZSBvZiB0aGUgZHVwbGljYXRlIGNoZWNrLCB3ZSBzaG91bGQgZ2V0IHRoZSBvcmlnaW5hbCB1aWRcclxuICAgIC8vIGhlcmUuXHJcbiAgICBjb25zdCByb2xsU3RyaW5nQ29udGVudCA9IHJvbGxQYXJ0cy5qb2luKFwiXCIpO1xyXG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cInJvbGxhYmxlXCIgZGF0YS1yb2xsYWJsZS11aWQ9XCIke3VpZH1cIj4ke3JvbGxTdHJpbmdDb250ZW50fTwvc3Bhbj5gO1xyXG59XHJcbmV4cG9ydHMud3JhcFJvbGwgPSB3cmFwUm9sbDtcclxuLyoqXHJcbiAqIFdyYXAgYSB7QGxpbmsgRGFtYWdlVHlwZX0gaW50byBhbiBIVE1MIHN0cmluZy5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBEYW1hZ2VUeXBlKGR0KSB7XHJcbiAgICBpZiAoZHQgPiBjb25zdGFudHNfMS5EYW1hZ2VUeXBlLl9Ob25TdGFuZGFyZCkge1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJkYW1hZ2VfdHlwZV9fbm9uc3RkXCI+JHtjb25zdGFudHNfMS5EYW1hZ2VUeXBlW2R0XX08L3NwYW4+YDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJkYW1hZ2VfdHlwZVwiPiR7Y29uc3RhbnRzXzEuRGFtYWdlVHlwZVtkdF19PC9zcGFuPmA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy53cmFwRGFtYWdlVHlwZSA9IHdyYXBEYW1hZ2VUeXBlO1xyXG4vKipcclxuICogV3JhcCBhIHtAbGluayBDb25kaXRpb259IGludG8gYW4gSFRNTCBzdHJpbmcuXHJcbiAqL1xyXG5mdW5jdGlvbiB3cmFwQ29uZGl0aW9uKGMpIHtcclxuICAgIGlmIChjID4gY29uc3RhbnRzXzEuQ29uZGl0aW9uLl9Ob25TdGFuZGFyZCkge1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJjb25kaXRpb25fX25vbnN0ZFwiPiR7Y29uc3RhbnRzXzEuQ29uZGl0aW9uW2NdfTwvc3Bhbj5gO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImNvbmRpdGlvblwiPiR7Y29uc3RhbnRzXzEuQ29uZGl0aW9uW2NdfTwvc3Bhbj5gO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMud3JhcENvbmRpdGlvbiA9IHdyYXBDb25kaXRpb247XHJcbi8qKlxyXG4gKiBXcmFwIGEge0BsaW5rIERTa2lsbH0gaW50byBhbiBIVE1MIHN0cmluZy5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBEU2tpbGwocykge1xyXG4gICAgaWYgKHMgPiBjb25zdGFudHNfMS5EU2tpbGwuX05vblN0YW5kYXJkKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImRfc2tpbGxfX25vbnN0ZFwiPiR7Y29uc3RhbnRzXzEuRFNraWxsW3NdfTwvc3Bhbj5gO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImRfc2tpbGxcIj4ke2NvbnN0YW50c18xLkRTa2lsbFtzXX08L3NwYW4+YDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLndyYXBEU2tpbGwgPSB3cmFwRFNraWxsO1xyXG4vKipcclxuICogV3JhcCBhIHtAbGluayBDU2tpbGx9IGludG8gYW4gSFRNTCBzdHJpbmcuXHJcbiAqL1xyXG5mdW5jdGlvbiB3cmFwQ1NraWxsKHMpIHtcclxuICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJjX3NraWxsXCI+JHtjb25zdGFudHNfMS5DU2tpbGxbc119PC9zcGFuPmA7XHJcbn1cclxuZXhwb3J0cy53cmFwQ1NraWxsID0gd3JhcENTa2lsbDtcclxuLyoqXHJcbiAqIFdyYXAgYSB7QGxpbmsgQ1NraWxsfSdzIHZhbHVlIGludG8gYW4gSFRNTCBzdHJpbmcuXHJcbiAqL1xyXG5mdW5jdGlvbiB3cmFwQ1NraWxsVmFsdWUocykge1xyXG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImNfc2tpbGxfdmFsdWVcIj4ke3N9PC9zcGFuPmA7XHJcbn1cclxuZXhwb3J0cy53cmFwQ1NraWxsVmFsdWUgPSB3cmFwQ1NraWxsVmFsdWU7XHJcbi8qKlxyXG4gKiBXcmFwIGEge0BsaW5rIFJhdGluZ30gaW50byBhbiBIVE1MIHN0cmluZy5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBSYXRpbmcocikge1xyXG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cInJhdGluZ1wiPiR7UmFyaXR5XzEuUmF0aW5nW3JdfTwvc3Bhbj5gO1xyXG59XHJcbmV4cG9ydHMud3JhcFJhdGluZyA9IHdyYXBSYXRpbmc7XHJcbi8qKlxyXG4gKiBXcmFwIGEge0BsaW5rIFNwZWVkfSBpbnRvIGFuIEhUTUwgc3RyaW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gd3JhcFNwZWVkKHMpIHtcclxuICAgIGlmIChzID4gY29uc3RhbnRzXzEuU3BlZWQuX05vblN0YW5kYXJkKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cInNwZWVkX19ub25zdGRcIj4ke2NvbnN0YW50c18xLlNwZWVkW3NdfTwvc3Bhbj5gO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cInNwZWVkXCI+JHtjb25zdGFudHNfMS5TcGVlZFtzXX08L3NwYW4+YDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLndyYXBTcGVlZCA9IHdyYXBTcGVlZDtcclxuLyoqXHJcbiAqIFdyYXAgYSB7QGxpbmsgU2Vuc2V9IGludG8gYW4gSFRNTCBzdHJpbmcuXHJcbiAqL1xyXG5mdW5jdGlvbiB3cmFwU2Vuc2Uocykge1xyXG4gICAgaWYgKHMgPiBjb25zdGFudHNfMS5TZW5zZS5fTm9uU3RhbmRhcmQpIHtcclxuICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwic2Vuc2VfX25vbnN0ZFwiPiR7Y29uc3RhbnRzXzEuc2Vuc2VTdHIuZ2V0KHMpfTwvc3Bhbj5gO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cInNlbnNlXCI+JHtjb25zdGFudHNfMS5zZW5zZVN0ci5nZXQocyl9PC9zcGFuPmA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy53cmFwU2Vuc2UgPSB3cmFwU2Vuc2U7XHJcbi8qKlxyXG4gKiBXcmFwIGEge0BsaW5rIENyZWF0dXJlU2l6ZX0gaW50byBhbiBIVE1MIHN0cmluZy5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBDcmVhdHVyZVNpemUocykge1xyXG4gICAgaWYgKHMgPiBjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuX05vblN0YW5kYXJkKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImNyZWF0dXJlU2l6ZV9fbm9uc3RkXCI+JHtjb25zdGFudHNfMS5DcmVhdHVyZVNpemVbc119PC9zcGFuPmA7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiY3JlYXR1cmVTaXplXCI+JHtjb25zdGFudHNfMS5DcmVhdHVyZVNpemVbc119PC9zcGFuPmA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy53cmFwQ3JlYXR1cmVTaXplID0gd3JhcENyZWF0dXJlU2l6ZTtcclxuLyoqXHJcbiAqIFdyYXAgYSB7QGxpbmsgQWN0aXZhdGlvbn0gaW50byBhbiBIVE1MIHN0cmluZy5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBBY3RpdmF0aW9uKHMsIHBsdXJhbCA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBwbHVyYWxTdWZmaXggPSBwbHVyYWwgPyBcInNcIiA6IFwiXCI7XHJcbiAgICBpZiAocyA+IGNvbnN0YW50c18xLkFjdGl2YXRpb24uX05vblN0YW5kYXJkKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImFjdGl2YXRpb25fX25vbnN0ZFwiPiR7Y29uc3RhbnRzXzEuQWN0aXZhdGlvbltzXX0ke3BsdXJhbFN1ZmZpeH08L3NwYW4+YDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJhY3RpdmF0aW9uXCI+JHtjb25zdGFudHNfMS5BY3RpdmF0aW9uW3NdfSR7cGx1cmFsU3VmZml4fTwvc3Bhbj5gO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMud3JhcEFjdGl2YXRpb24gPSB3cmFwQWN0aXZhdGlvbjtcclxuLyoqXHJcbiAqIElmIHRoaXMgaXNuJ3QgY2FsbGVkIHRoZW4gYWxsIHJvbGxhYmxlcyBhcmUgc2ltcGx5IGZhbmN5IEhUTUwuXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmFibGVSb2xsaW5nKCkge1xyXG4gICAgY29uc3QgJHRvYXN0Wm9uZSA9ICQoXCIjdG9hc3QtY29udGFpbmVyXCIpO1xyXG4gICAgJChcIiNiZWFzdGlhcnlcIikub24oXCJjbGlja1wiLCBcIi5yb2xsYWJsZVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGNvbnN0IHVpZCA9ICQodGhpcykuZGF0YShcInJvbGxhYmxlVWlkXCIpO1xyXG4gICAgICAgIGNvbnN0IHJvbGxhYmxlID0gX1JvbGxhYmxlSW5kZXguZ2V0KHVpZCk7XHJcbiAgICAgICAgbGV0IHJvbGxWYXJpYW50ID0gRGljZV8xLlJvbGxWYXJpYW50Lk5vcm1hbDtcclxuICAgICAgICBpZiAocm9sbGFibGUgaW5zdGFuY2VvZiBSb2xsYWJsZV8xLk5hdFJvbGxhYmxlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICByb2xsVmFyaWFudCA9IGUuYWx0S2V5ID8gRGljZV8xLlJvbGxWYXJpYW50LlN1cGVyQWR2YW50YWdlIDogRGljZV8xLlJvbGxWYXJpYW50LkFkdmFudGFnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChlLmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgIHJvbGxWYXJpYW50ID0gZS5hbHRLZXkgPyBEaWNlXzEuUm9sbFZhcmlhbnQuU3VwZXJEaXNhZHZhbnRhZ2UgOiBEaWNlXzEuUm9sbFZhcmlhbnQuRGlzYWR2YW50YWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJvbGxhYmxlIGluc3RhbmNlb2YgUm9sbGFibGVfMS5EYW1hZ2VSb2xsYWJsZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5hbHRLZXkpIHtcclxuICAgICAgICAgICAgICAgIHJvbGxWYXJpYW50ID0gRGljZV8xLlJvbGxWYXJpYW50LkNyaXRpY2FsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJvbGxhYmxlLnJvbGwocm9sbFZhcmlhbnQpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJvbGxhYmxlLnJlc3VsdCk7XHJcbiAgICAgICAgY29uc3QgYnVpbGR1cFBhcnRzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBbZGljZSwgcm9sbHNdIG9mIHJvbGxhYmxlLnBhcnRzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoZGljZSA9PSBEaWNlXzEuRDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgcm9sbCBvZiByb2xscykge1xyXG4gICAgICAgICAgICAgICAgYnVpbGR1cFBhcnRzLnB1c2gocm9sbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coYnVpbGR1cFBhcnRzKTtcclxuICAgICAgICBjb25zdCAkdG9hc3QgPSAkKGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvYXN0XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm9sbF9yZXN1bHRcIj4ke3JvbGxhYmxlLnJlc3VsdH08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb2xsX2J1aWxkdXBcIj4ke2J1aWxkdXBQYXJ0cy5qb2luKFwiLCBcIil9PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PmApO1xyXG4gICAgICAgICR0b2FzdC5oaWRlKCk7XHJcbiAgICAgICAgJHRvYXN0LmFwcGVuZFRvKCR0b2FzdFpvbmUpO1xyXG4gICAgICAgICR0b2FzdC5mYWRlSW4oNDAwKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgJHRvYXN0LmZhZGVPdXQoNDAwLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkdG9hc3QucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIDMwMDApO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5lbmFibGVSb2xsaW5nID0gZW5hYmxlUm9sbGluZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9V3JhcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdlbmVyYXRlQWNoaWV2ZW1lbnRzUGFuZWwgPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBBIGJhc2ljLCBzaW5nbGUgaXNvbGF0ZWQgdGFzayBhY2hpZXZlbWVudC5cclxuICovXHJcbmNsYXNzIFN0ZEFjaGlldmVtZW50IHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGl0bGUsIGRlc2MsIG1heEV4cCwgY29tcGxldGUpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5kZXNjID0gZGVzYztcclxuICAgICAgICB0aGlzLm1heEV4cCA9IG1heEV4cDtcclxuICAgICAgICB0aGlzLmNvbXBsZXRlID0gY29tcGxldGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlRE9NU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50ICR7dGhpcy5jb21wbGV0ZSA/IFwiYWNoaWV2ZW1lbnQtLWNvbXBsZXRlXCIgOiBcIlwifVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWNoaWV2ZW1lbnRfX3RpdGxlXCI+JHt0aGlzLnRpdGxlfTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWNoaWV2ZW1lbnRfX3hwXCI+JHt0aGlzLm1heEV4cH0geHA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50X19kZXNjXCI+JHt0aGlzLmRlc2N9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhY2hpZXZlbWVudF9fc3RhdHVzXCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1jaXJjbGUtY2hlY2tcIj48L2k+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IGN1ckV4cCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZSA/IHRoaXMubWF4RXhwIDogMDtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQSBhY2hpZXZlbWVudCB3aXRoIHZhcmlvdXMgcm91dGVzIHRvIGdldCB0byBpdCwgZWFjaCByb3V0ZSB0YWtlbiBncmFudHNcclxuICogYm9udXMgeHAuXHJcbiAqL1xyXG5jbGFzcyBOZXN0ZWRBY2hpZXZlbWVudCB7XHJcbiAgICAvKipcclxuICAgICAqIENUT1IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRpdGxlLCBkZXNjLCBiYXNlRXhwLCBkb25lKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuZGVzYyA9IGRlc2M7XHJcbiAgICAgICAgdGhpcy5iYXNlRXhwID0gYmFzZUV4cDtcclxuICAgICAgICB0aGlzLmRvbmUgPSBkb25lO1xyXG4gICAgICAgIHRoaXMuX2N1ckV4cCA9IHRoaXMuZG9uZSA/IHRoaXMuYmFzZUV4cCA6IDA7XHJcbiAgICAgICAgdGhpcy5yb3V0ZURPTXMgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgcm91dGUuXHJcbiAgICAgKi9cclxuICAgIGFkZFJvdXRlKHRpdGxlLCBkZXNjLCB4cCwgdGFrZW4pIHtcclxuICAgICAgICBpZiAodGFrZW4pIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRvbmUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2N1ckV4cCArPSB4cDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yb3V0ZURPTXMucHVzaChgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50LS1pbm5lciAke3Rha2VuID8gXCJhY2hpZXZlbWVudC0tY29tcGxldGVcIiA6IFwiXCJ9XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWNoaWV2ZW1lbnRfX3RpdGxlXCI+JHt0aXRsZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhY2hpZXZlbWVudF9feHBcIj4ke3hwfSB4cDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50X19kZXNjXCI+JHtkZXNjfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50X19zdGF0dXNcIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNpcmNsZS1jaGVja1wiPjwvaT48L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+YCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCBjdXJFeHAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1ckV4cDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVET01TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWNoaWV2ZW1lbnQgJHt0aGlzLmRvbmUgPyBcImFjaGlldmVtZW50LS1jb21wbGV0ZVwiIDogXCJcIn1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50X190aXRsZVwiPiR7dGhpcy50aXRsZX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50X194cFwiPiR7dGhpcy5iYXNlRXhwfSB4cDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWNoaWV2ZW1lbnRfX2Rlc2NcIj4ke3RoaXMuZGVzY308L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50X19zdGF0dXNcIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNpcmNsZS1jaGVja1wiPjwvaT48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWNoaWV2ZW1lbnRfcGFydHNcIj4ke3RoaXMucm91dGVET01zLmpvaW4oXCJcIil9PC9kaXY+YDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IG1heEV4cCgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQ6IE5lc3RlZCBhY2hpZXZlbWVudHMgYXJlIG5vIGxvbmdlciB4b3JcIik7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgQWNoaWV2ZW1lbnRzID0gbmV3IE1hcChbXHJcbiAgICBbXCJUaGUgQ2FuZGxlc1wiLCBbXHJcbiAgICAgICAgICAgIG5ldyBTdGRBY2hpZXZlbWVudChcIlRoYXQncyBhIGZhbWlsaWFyIHNjZW50P1wiLCBcIlVuZGVyc3RhbmQgdGhlIG5hdHVyZSBvZiB0aGUgdW51c3VhbCBjYW5kbGVzIGFuZCB0cmFjZSB0aGVpciBwYXN0LlwiLCA1MDAsIGZhbHNlKSxcclxuICAgICAgICAgICAgbmV3IE5lc3RlZEFjaGlldmVtZW50KFwiQSBicmVhdGggb2Ygd2luZFwiLCBcIkRlZmVhdCB0aGUgUmVpbWFnaW5lZCBhZnRlciBpdCBlbnRlcnMgaXRzIFBvbHRlcmdlaXN0IHN0YXRlLlwiLCAxMDAwLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFJvdXRlKFwiTWVsb2R5IG9mIERlYXRoXCIsIFwiSWduaXRlIDggY2FuZGxlcyB0byB0aGUgcmh5dGhtIG9mIFJ1aW4gdG8gZGVzdHJveSB0aGUgcG9sdGVyZ2Vpc3QuXCIsIDQwMCwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAuYWRkUm91dGUoXCJCZWF0cyBvZiBQYXNzaW9uXCIsIFwiSWduaXRlIDkgY2FuZGxlcyB0byB0aGUgcmh5dGhtIG9mIE9kaXVtIHRvIGRvbWluYXRlIHRoZSBwb2x0ZXJnZWlzdC5cIiwgNDUwLCBmYWxzZSlcclxuICAgICAgICAgICAgICAgIC5hZGRSb3V0ZShcIk92ZXJ0b25lcyBvZiBBYnNvbHV0ZSBDb21tYW5kXCIsIFwiSWduaXRlIDEwIGNhbmRsZXMgdG8gdGhlIHJoeXRobSBvZiBIb25vciB0byBkZW55IHRoZSBwb2x0ZXJnZWlzdC5cIiwgNjAwLCBmYWxzZSksXHJcbiAgICAgICAgICAgIG5ldyBTdGRBY2hpZXZlbWVudChcIkRhbmdlcm91cyBFeHBlcmltZW50c1wiLCBcIkludmVzdGlnYXRlIGhvdyB0aGUgUmVpbWFnaW5lZCBjYW1lIHRvIGJlLlwiLCA2MDAsIGZhbHNlKSxcclxuICAgICAgICBdXSxcclxuICAgIFtcIlRoZSBTaGFyZGJlYXJlclwiLCBbXHJcbiAgICAgICAgICAgIG5ldyBTdGRBY2hpZXZlbWVudChcIktuZWVsIVwiLCBcIkNhcHR1cmUgdGhlIHNoYXJkYmVhcmVyIGFsaXZlLlwiLCAxMjAwLCBmYWxzZSksXHJcbiAgICAgICAgICAgIG5ldyBOZXN0ZWRBY2hpZXZlbWVudChcIkhlIHdobyBsaXZlcyBieSB0aGUgYmxhZGUuLi5cIiwgXCJLaWxsIHRoZSBTaGFyZGJlYXJlci5cIiwgODAwLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFJvdXRlKFwiU3VyZ2ljYWwgUHJlY2lzaW9uXCIsIFwiV2hpbGUgZGVhbGluZyA8IDIwMCBwb2ludHMgb2YgZGFtYWdlLlwiLCA1MDAsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFJvdXRlKFwiV2h5IHVzZSBhIHNjYWxwZWwgd2hlbiB5b3UgaGF2ZSBhIHNsZWRnZWhhbW1lcj9cIiwgXCJXaGlsZSBkZWFsaW5nID4gODAwIHBvaW50cyBvZiBkYW1hZ2UuXCIsIDgwMCwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAuYWRkUm91dGUoXCJVbmNvbnZlbnRpb25hbCBtZXRob2RzXCIsIFwiV2l0aG91dCB1c2luZyBhIHdlYXBvbiBmb3IgdGhlIGtpbGxpbmcgYmxvdyAoYWNpZC9sYXZhL3F1aWNrc2FuZCBldGMuKS5cIiwgMTAwMCwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAuYWRkUm91dGUoXCJFc3NlIHZlbnR1c1wiLCBcIldpdGhvdXQgYW55IHBhcnR5IG1lbWJlciBzdWZmZXJpbmcgYSBtYWpvciBibG93LlwiLCAxMDAwLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFJvdXRlKFwiQWJzb2x1dGUgRG9taW5hbmNlXCIsIFwiV2l0aG91dCBhbnkgcGFydHkgbWVtYmVyIHN1ZmZlcmluZyBhIG1ham9yIGJsb3cgYW5kIFwiICtcclxuICAgICAgICAgICAgICAgIFwid2l0aG91dCBIaW5hIGR5aW5nIGV2ZW4gb25jZS5cIiwgMTYwMCwgZmFsc2UpXHJcbiAgICAgICAgXV0sXHJcbiAgICBbXCJUaGUgY2xvY2tcIiwgW1xyXG4gICAgICAgICAgICBuZXcgU3RkQWNoaWV2ZW1lbnQoXCJNZWV0aW5nIHRoZSBkZWFkbGluZVwiLCBcIlJldHVybiBmcm9tIHRoZSBleHBlZGl0aW9uIGJlZm9yZSBEdXNrJ3MgbWFnaWMgZmFkZXMgYXdheS5cIiwgMTAwMCwgZmFsc2UpLFxyXG4gICAgICAgICAgICBuZXcgU3RkQWNoaWV2ZW1lbnQoXCJlelwiLCBcIlJldHVybiBmcm9tIHRoZSBleHBlZGl0aW9uIHdpdGhpbiAxIGRheSBpbiBkZXZvdGlvbidzIHRpbWUuXCIsIDE1MDAsIGZhbHNlKSxcclxuICAgICAgICAgICAgbmV3IFN0ZEFjaGlldmVtZW50KFwiTm8gbmVlZCBmb3Igc3VzcGVuc2VcIiwgXCJSZXR1cm4gZnJvbSB0aGUgZXhwZWRpdGlvbiB3aXRoaW4gMSBob3VyIGluIGRldm90aW9uJ3MgdGltZS5cIiwgMjUwMCwgZmFsc2UpLFxyXG4gICAgICAgICAgICBuZXcgU3RkQWNoaWV2ZW1lbnQoXCJZb3UncmUgbm90IGRlYWQgeWV0XCIsIFwiPz8/XCIsIFxyXG4gICAgICAgICAgICAvLyBcIlJldHVybiBmcm9tIHRoZSBleHBlZGl0aW9uIGluIHRoZSBsYXN0IGhvdXIgdG8gbWlkbmlnaHQgb24gdGhlIGxhc3QgZGF5LlwiLFxyXG4gICAgICAgICAgICAyNTAwLCBmYWxzZSksXHJcbiAgICAgICAgXV0sXHJcbiAgICBbXCJUaGUgc2FuZCBzb2xkaWVyXCIsIFtcclxuICAgICAgICAgICAgbmV3IE5lc3RlZEFjaGlldmVtZW50KFwiUHJ1ZGVuY2UuLi5cIiwgXCJDaG9vc2Ugbm90IHRvIHN0YW5kIGFnYWluc3QgdGhlIHNhbmQgc29sZGllci5cIiwgNTAwLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFJvdXRlKFwiTWFzdGVyIG9mIHRoZSBibGFjayBtYXJrZXRcIiwgXCJVbmNvdmVyIHRoZSBuYW1lIGFuZCBpZGVudGl0eSBvZiB0aGUgc2FuZCBzb2xkaWVyLlwiLCAxNDAwLCBmYWxzZSlcclxuICAgICAgICAgICAgICAgIC5hZGRSb3V0ZShcIkEgcGFzc2VuZ2VyIG9uYm9hcmRcIiwgXCJIYXZlIHRoZSBTYW5kIFNvbGRpZXIgam9pbiB5b3VyIGNhdXNlLlwiLCA4MDAsIGZhbHNlKSxcclxuICAgICAgICAgICAgbmV3IE5lc3RlZEFjaGlldmVtZW50KFwiLi4uIGlzIGZvciB0aGUgd2Vha1wiLCBcIlByZXZlbnQgdGhlIHNhbmQgc29sZGllciBmcm9tIGxlYXZpbmcgd2l0aCB0aGUgYmxhZGUuXCIsIDEwMDAsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgLmFkZFJvdXRlKFwiSSBjYW4gZG8gdGhpcyBhbGwgZGF5XCIsIFwiS2lsbCB0aGUgc2FuZCBzb2xkaWVyIGFmdGVyIHRoZSBzaGFyZGJlYXJlciBmaWdodCBidXQgYmVmb3JlIHRha2luZyB0aGUgc3Vic2VxdWVudCByZXN0LlwiLCAzMDAwLCBmYWxzZSksXHJcbiAgICAgICAgICAgIG5ldyBTdGRBY2hpZXZlbWVudChcIkluIGEgbW9tZW50J3MgZHJlYW1cIiwgXCJSZWNydWl0IHRoZSBzYW5kIHNvbGRpZXIncyBzaXN0ZXIuXCIsIDEyMDAsIGZhbHNlKVxyXG4gICAgICAgIF1dLFxyXG4gICAgW1wiVGhlIGhlaXN0XCIsIFtcclxuICAgICAgICAgICAgbmV3IE5lc3RlZEFjaGlldmVtZW50KFwiSGVoLCBub29ic1wiLCBcIkRvIG5vdCBmYWxsIGZvciB0aGUgaWxsdXNpb25hcnkgYnJpZGdlIHRyYXAuXCIsIDUwMCwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgIC5hZGRSb3V0ZShcIk5vdyB3aHkgYXJlIHRoZXkgbG9va2luZyB0aGF0IHdheT9cIiwgXCJDcm9zcyB0aGUgbGF2YSBzdHJlYW0gZm9yIHRoZSBmaXJzdCB0aW1lIHVzaW5nIHRoZSBpbnZpc2libGUgYnJpZGdlLlwiLCA4MDAsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAuYWRkUm91dGUoXCJXaG8gbmVlZHMgYSBicmlkZ2UgYW55d2F5XCIsIFwiSGF2ZSB0aGUgd2hvbGUgcGFydHkgY3Jvc3MgdGhlIGxhdmEgc3RyZWFtIGZvciB0aGUgZmlyc3QgdGltZSB3aXRob3V0IHVzaW5nIHRoZSBpbnZpc2libGUgYnJpZGdlLlwiLCA4MDAsIGZhbHNlKSxcclxuICAgICAgICAgICAgbmV3IE5lc3RlZEFjaGlldmVtZW50KFwiT2ggbm8hIERpZCBzb21ldGhpbmcgaGFwcGVuP1wiLCBcIlJlYWNoIHRoZSBncm91bmQgbGV2ZWwgd2l0aG91dCBiZWluZyByZWNvZ25pemVkIGFzIHRoZSB0aGlldmVzIG9mIHRoZSBzYWZlLlwiLCA2MDAsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAuYWRkUm91dGUoXCJNdXN0IGJlIHJhdHNcIiwgXCJBdHRyYWN0IGF0dGVudGlvbiBhdCBsZWFzdCAzIHRpbWVzIGJ1dCBuZXZlciBoYXZlIHRoZSBhbGFybSByYWlzZWQuXCIsIDEwMDAsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAuYWRkUm91dGUoXCJbQm9udXNdIE91dCBvZiBzaWdodCwgb3V0IG9mIG1pbmRcIiwgXCJUcmFwcGVkIDQgZ3VhcmRzIGluIHRoZSBiaW8gcmVzZWFyY2ggcm9vbSB3aXRob3V0IGdldHRpbmcgZGV0ZWN0ZWQuXCIsIDE2MDAsIHRydWUpLFxyXG4gICAgICAgICAgICBuZXcgU3RkQWNoaWV2ZW1lbnQoXCJQYWNpZmlzdCdzIGNyZWVkXCIsIFwiRG8gbm90IGtpbGwgYSBzaW5nbGUgcmVzaWRlbnQgb2YgdGhlIHNoZWx0ZXIuXCIsIDEyMDAsIHRydWUpLFxyXG4gICAgICAgICAgICBuZXcgU3RkQWNoaWV2ZW1lbnQoXCJJdCB3YXMgbHV4dXJpZXMgbGlrZSBhaXIgY29uZGl0aW9uaW5nXCIsIFwiV2hpbGUgb24gdGhlIHdheSBvdXQsIGVudGVyIHRoZSBiaW8gcmVzZWFyY2ggcm9vbVwiLCA4MDAsIHRydWUpLFxyXG4gICAgICAgICAgICBuZXcgTmVzdGVkQWNoaWV2ZW1lbnQoXCJVbmJyZWFrYWJsZSBmcm9tIHRoZSBvdXRzaWRlXCIsIFwiRXh0cmFjdCB0aGUgQW1ldGh5c3QgZnJvbSB0aGUgd2FsbCBvZiBmb3JjZSBlbmNsb3NpbmcgaXQuXCIsIDcwMCwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgIC5hZGRSb3V0ZShcIldpdG5lc3MgdG8gdHJ1ZSBwZXJmZWN0aW9uXCIsIFwiRm9ybSBhIGJvbmQgd2l0aCB0aGUgYW5jaWVudCBpbmtzcHJlbiB0cmFwcGVkIGluIHRoZSBBbWV0aHlzdCBiZWZvcmUgcmV0dXJuaW5nIHRvIERldm90aW9uLlwiLCAzMDAwLCBmYWxzZSlcclxuICAgICAgICBdXSxcclxuICAgIFtcIlRoZSBleGlsZVwiLCBbXHJcbiAgICAgICAgICAgIG5ldyBTdGRBY2hpZXZlbWVudChcIkJlcnNlcmtcIiwgXCJMZWFybiBvZiBIaW5hJ3MgY3liZXJwdW5rIG5hdHVyZS5cIiwgNzAwLCB0cnVlKSxcclxuICAgICAgICAgICAgbmV3IFN0ZEFjaGlldmVtZW50KFwiVW51c3VhbCBhdHRpcmUgZm9yIGEgdHJpYmVzbWFuXCIsIFwiRmlndXJlIG91dCBob3cgUnV6YWtpIGVuZGVkIHVwIGhlcmUuXCIsIDEzMDAsIGZhbHNlKSxcclxuICAgICAgICAgICAgbmV3IFN0ZEFjaGlldmVtZW50KFwiWW91J3ZlIGJlZW4gdGFsa2luZyB0byB0aGVtIHRvbz9cIiwgXCJXaXRuZXNzIEhpbmEncyBhdWRpZW5jZSB3aXRoIHRoZSBTaGFyZHNcIiwgMTQwMCwgdHJ1ZSksXHJcbiAgICAgICAgICAgIG5ldyBTdGRBY2hpZXZlbWVudChcIlllYWgsIHNjaWVuY2UhXCIsIFwiRW50ZXIgaW50byBhbmQgdW5kZXJzdGFuZCBob3cgUnV6YWtpJ3Mgc3VscGh1cmljIGFjaWQgbWFudWZhY3R1cmluZyB3b3Jrcy5cIiwgNjAwLCB0cnVlKSxcclxuICAgICAgICAgICAgbmV3IFN0ZEFjaGlldmVtZW50KFwiRmlyZSB3aXRoIGZpcmVcIiwgXCJMZWFybiB3aGF0IHRoZSBzaGFyZHMgd2FudGVkIGZyb20gSGluYS5cIiwgMTAwMCwgZmFsc2UpLFxyXG4gICAgICAgICAgICBuZXcgU3RkQWNoaWV2ZW1lbnQoXCJOb3cgSSBhbSBiZWNvbWUgZGVhdGhcIiwgXCJJbnZlc3RpZ2F0ZSBSdXpha2kncyByZXNlYXJjaCBub3Rlcy5cIiwgMTAwMCwgZmFsc2UpLFxyXG4gICAgICAgICAgICBuZXcgU3RkQWNoaWV2ZW1lbnQoXCJGcmVlIGFzIGEgYmlyZFwiLCBcIlNpZ24tdXAgSGluYSBhcyB0aGUgdmlsbGFnZSBsYWJvdXJlci5cIiwgNTAwLCB0cnVlKSxcclxuICAgICAgICAgICAgbmV3IFN0ZEFjaGlldmVtZW50KFwiRGVhbCB3aXRoIHRoZSBkZXZpbFwiLCBcIlJlY3J1aXQgUnV6YWtpIGludG8gdGhlIHZpbGxhZ2UuXCIsIDE1MDAsIGZhbHNlKSxcclxuICAgICAgICAgICAgbmV3IFN0ZEFjaGlldmVtZW50KFwiSSdtIHNvbWV3aGF0IG9mIGEgc2NpZW50aXN0IG15c2VsZlwiLCBcIlJlY3J1aXQgVGVpYWkgaW50byB0aGUgdmlsbGFnZS5cIiwgNTAwLCBmYWxzZSksXHJcbiAgICAgICAgXV1cclxuXSk7XHJcbmZ1bmN0aW9uIGdlbmVyYXRlQWNoaWV2ZW1lbnRzUGFuZWwoKSB7XHJcbiAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xyXG4gICAgbGV0IGNYUCA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IFt0aXRsZSwgYWNoaWV2ZW1lbnRzXSBvZiBBY2hpZXZlbWVudHMuZW50cmllcygpKSB7XHJcbiAgICAgICAgZWxlbWVudHMucHVzaChgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50X2NhdGVnb3J5XCI+JHt0aXRsZX08L2Rpdj5gKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGFjaGlldmVtZW50IG9mIGFjaGlldmVtZW50cykge1xyXG4gICAgICAgICAgICBlbGVtZW50cy5wdXNoKGFjaGlldmVtZW50LmdlbmVyYXRlRE9NU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBjWFAgKz0gYWNoaWV2ZW1lbnQuY3VyRXhwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImFjaGlldmVtZW50c1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWNoaWV2ZW1lbnRzX19oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXJtaW5hbF90aXRsZVwiPkN1cnJlbnQgUXVlc3QgQWNoaWV2ZW1lbnRzPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwieHBfc3VtbWFyeVwiPjxzcGFuIGNsYXNzPVwiZ2FpbmVkXCI+JHtjWFB9PC9zcGFuPiB4cCBvYnRhaW5lZCBzbyBmYXI8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWNoaWV2ZW1lbnRzX19saXN0XCI+XHJcbiAgICAgICAgICAgICAgICAke2VsZW1lbnRzLmpvaW4oXCJcIil9ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYDtcclxufVxyXG5leHBvcnRzLmdlbmVyYXRlQWNoaWV2ZW1lbnRzUGFuZWwgPSBnZW5lcmF0ZUFjaGlldmVtZW50c1BhbmVsO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY2hpZXZlbWVudHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEJhc2VMb2dpYyA9IGV4cG9ydHMuZ2VuZXJhdGVCYXNlRE9NID0gdm9pZCAwO1xyXG5jb25zdCBBY2hpZXZlbWVudHNfMSA9IHJlcXVpcmUoXCIuL0FjaGlldmVtZW50c1wiKTtcclxuY29uc3QgYnVpbGRpbmdJbnN0YW5jZXNfMSA9IHJlcXVpcmUoXCIuL2J1aWxkaW5nSW5zdGFuY2VzXCIpO1xyXG5jb25zdCBPcGVyYXRvcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JcIik7XHJcbmZ1bmN0aW9uIGdlbmVyYXRlQmFzZURPTSgpIHtcclxuICAgIHJldHVybiBgXHJcbjxkaXYgY2xhc3M9XCJiYXNlX21hbmFnZW1lbnRcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJiYXNlX21hbmFnZW1lbnRfX2xvZ3NcIj5cclxuICAgICAgICAkeygwLCBBY2hpZXZlbWVudHNfMS5nZW5lcmF0ZUFjaGlldmVtZW50c1BhbmVsKSgpfVxyXG4gICAgPC9kaXY+IFxyXG4gICAgPGRpdiBjbGFzcz1cImJhc2VfbWFuYWdlbWVudF9fcmF0aW5nXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRlcm1pbmFsX3RpdGxlXCI+RmFjdGlvbiBSYXRpbmdzPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInJhdGluZ3NfZGljdGlvbmFyeVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5SZWNvZ25pdGlvbjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj5Vbmtub3duIG5vYm9kaWVzPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5Ib25vcjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj41PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5Ob3RvcmlldHk8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+MDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+SW50ZWxsaWdlbmNlIExldmVsPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPjIwPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5JbnRlcm5hbCBTZWN1cml0eTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4wPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5PZmZlbnNpdmUgY2FwYmlsaXRpZXM8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+ODwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+RGVmZW5zZXM8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+MDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+U2hhcmRpYyBJbnZlc3RpdHVyZTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4zMzwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+RWxkcml0Y2ggSW52ZXN0aXR1cmU8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+MTc8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPlRlY2hub2xvZ3k8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+MTU8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPkN1bHR1cmU8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+NzwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+RWNvbm9teTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4yPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X19rZXlcIj5BbWVudGl0aWVzPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPjY8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPkdlbmVyYWwgTW9yYWxlPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPi0yNTwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PiBcclxuICAgIDxkaXYgY2xhc3M9XCJiYXNlX21hbmFnZW1lbnRfX2J1aWxkaW5nc1wiPlxyXG4gICAgICAgICR7KDAsIGJ1aWxkaW5nSW5zdGFuY2VzXzEuZ2VuZXJhdGVCdWlsZGluZ3NQYW5lbCkoKX1cclxuICAgIDwvZGl2PiBcclxuICAgIDxkaXYgY2xhc3M9XCJiYXNlX21hbmFnZW1lbnRfX3ZpbGxhZ2Vyc1wiPlxyXG4gICAgICAgICR7KDAsIE9wZXJhdG9yXzEuZ2VuZXJhdGVPcGVyYXRvclByb2ZpbGVTZWxlY3Rpb24pKCl9ICAgIFxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYmFzZV9tYW5hZ2VtZW50X19uYXZpZ2F0aW9uXCI+IFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2dfcmVzZXEgZ3J1bmdlX25hdl9idXR0b25cIj5Db2duaXRpdmUgUmVTZXF1ZW5jaW5nPC9kaXY+ICAgIFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJoaWRlX2Jhc2UgZ3J1bmdlX25hdl9idXR0b25cIj5CYWNrIHRvIG1hcDwvZGl2PiAgICBcclxuICAgIDwvZGl2PlxyXG48L2Rpdj5gO1xyXG59XHJcbmV4cG9ydHMuZ2VuZXJhdGVCYXNlRE9NID0gZ2VuZXJhdGVCYXNlRE9NO1xyXG5mdW5jdGlvbiBzZXR1cEJhc2VMb2dpYygpIHtcclxuICAgICgwLCBPcGVyYXRvcl8xLnNldHVwQmFzZU9wZXJhdG9yTG9naWMpKCk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEJhc2VMb2dpYyA9IHNldHVwQmFzZUxvZ2ljO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBCYXNlT3BlcmF0b3JMb2dpYyA9IGV4cG9ydHMuZ2VuZXJhdGVPcGVyYXRvclByb2ZpbGUgPSBleHBvcnRzLmdlbmVyYXRlT3BlcmF0b3JQcm9maWxlU2VsZWN0aW9uID0gZXhwb3J0cy5PcGVyYXRvclByb2ZpbGVzID0gdm9pZCAwO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi9jaGFyYWN0ZXJzL0NoYXJhY3RlclwiKTtcclxuZXhwb3J0cy5PcGVyYXRvclByb2ZpbGVzID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBnZW5lcmF0ZU9wZXJhdG9yUHJvZmlsZVNlbGVjdGlvbigpIHtcclxuICAgIGNvbnN0IG9wZXJhdG9yUHJvZmlsZUJ1dHRvbnMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgaWQgb2YgZXhwb3J0cy5PcGVyYXRvclByb2ZpbGVzLmtleXMoKSkge1xyXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlciA9IENoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQoaWQpO1xyXG4gICAgICAgIG9wZXJhdG9yUHJvZmlsZUJ1dHRvbnMucHVzaChgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcGVyYXRvcl9wcm9maWxlXCIgZGF0YS1vcGVyYXRvci1pZD1cIiR7aWR9XCI+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7Y2hhcmFjdGVyLmltZ1BhdGh9XCIgYWx0PVwiXCI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGBcclxuICAgIDxkaXYgY2xhc3M9XCJvcGVyYXRvcl9wcm9maWxlc1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJvcGVyYXRvcl9wcm9maWxlc19faGVhZGVyXCI+VmlsbGFnZXIgUHJvZmlsZXM8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwib3BlcmF0b3JfcHJvZmlsZXNfX2xpc3RcIj5cclxuICAgICAgICAgICAgJHtvcGVyYXRvclByb2ZpbGVCdXR0b25zLmpvaW4oXCJcIil9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5gO1xyXG59XHJcbmV4cG9ydHMuZ2VuZXJhdGVPcGVyYXRvclByb2ZpbGVTZWxlY3Rpb24gPSBnZW5lcmF0ZU9wZXJhdG9yUHJvZmlsZVNlbGVjdGlvbjtcclxuZnVuY3Rpb24gZ2VuZXJhdGVPcGVyYXRvclByb2ZpbGUobnBjSUQpIHtcclxuICAgIGlmIChleHBvcnRzLk9wZXJhdG9yUHJvZmlsZXMuaGFzKG5wY0lEKSkge1xyXG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZXJhdG9yUHJvZmlsZXMuZ2V0KG5wY0lEKTtcclxuICAgIH1cclxuICAgIHJldHVybiBcIlwiO1xyXG59XHJcbmV4cG9ydHMuZ2VuZXJhdGVPcGVyYXRvclByb2ZpbGUgPSBnZW5lcmF0ZU9wZXJhdG9yUHJvZmlsZTtcclxuZnVuY3Rpb24gc2V0dXBCYXNlT3BlcmF0b3JMb2dpYygpIHtcclxuICAgIGNvbnN0ICRzaWRlQmFubmVyID0gJChcIiNzaWRlX2Jhbm5lclwiKTtcclxuICAgICRzaWRlQmFubmVyLm9uKFwiY2xpY2tcIiwgXCIub3BlcmF0b3JfcHJvZmlsZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgJG9wZXJhdG9yU2VjdGlvbiA9ICQoXCIuYmFzZV9tYW5hZ2VtZW50X192aWxsYWdlcnNcIik7XHJcbiAgICAgICAgY29uc3QgaWQgPSAkKHRoaXMpLmRhdGEoXCJvcGVyYXRvcklkXCIpO1xyXG4gICAgICAgICRvcGVyYXRvclNlY3Rpb24uZW1wdHkoKTtcclxuICAgICAgICAkb3BlcmF0b3JTZWN0aW9uLmFwcGVuZChnZW5lcmF0ZU9wZXJhdG9yUHJvZmlsZShpZCkpO1xyXG4gICAgfSk7XHJcbiAgICAkc2lkZUJhbm5lci5vbihcImNsaWNrXCIsIFwiLm9wZXJhdG9yX3NjcmVlbl9fYmFja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgJG9wZXJhdG9yU2VjdGlvbiA9ICQoXCIuYmFzZV9tYW5hZ2VtZW50X192aWxsYWdlcnNcIik7XHJcbiAgICAgICAgJG9wZXJhdG9yU2VjdGlvbi5lbXB0eSgpO1xyXG4gICAgICAgICRvcGVyYXRvclNlY3Rpb24uYXBwZW5kKGdlbmVyYXRlT3BlcmF0b3JQcm9maWxlU2VsZWN0aW9uKCkpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEJhc2VPcGVyYXRvckxvZ2ljID0gc2V0dXBCYXNlT3BlcmF0b3JMb2dpYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZW5lcmF0ZUJ1aWxkaW5nc1BhbmVsID0gdm9pZCAwO1xyXG5jb25zdCBidWlsZGluZ0luc3RhbmNlcyA9IFtcclxuLy8gbmV3IEJ1aWxkaW5nKFxyXG4vLyAgICAgXCJJbm5cIixcclxuLy8gICAgIFwiYnVpbGRpbmdzL1RhdmVybi5qcGdcIixcclxuLy8gICAgIGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWJvd2wtc3Bvb25cIj48L2k+YCxcclxuLy8gICAgIFJhcml0eS5Db21tb24sXHJcbi8vICAgICAxNyxcclxuLy8gICAgIChjKSA9PlxyXG4vLyAgICAgICAgIFtOcGNJRC5EYXduXS5pbmNsdWRlcyhjKSA/XHJcbi8vICAgICAgICAgICAgIENoYXJhY3Rlci5nZXQoYykuZ2V0U2tpbGxWYWwoQ1NraWxsLkNvb2tpbmcpWzBdIDogODUsXHJcbi8vICAgICBbTnBjSUQuRGF3biwgTnBjSUQuVG9tYXNhXVxyXG4vLyApXHJcbi8vICAgICAuYWRkQXR0cmlidXRlKFwiR3Vlc3QgQ2FwYWNpdHlcIiwgICBcIjRcIilcclxuLy8gICAgIC5hZGRBdHRyaWJ1dGUoXCJEaW5pbmcgQ2FwYWNpdHlcIiwgIFwiMjBcIilcclxuLy8gICAgIC5hZGRBdHRyaWJ1dGUoXCJDb25zdHJ1Y3Rpb25cIiwgICAgIFwiV29vZCA4MCUsIFN0b25lIChJZ24pIDIwJVwiKVxyXG4vLyAgICAgLmFkZEF0dHJpYnV0ZShcIlRvdGFsIEhpdCBQb2ludHNcIiwgXCI0MDBcIilcclxuLy8gICAgIC5hZGRBdHRyaWJ1dGUoXCJEZWZlbnNlIFJhdGluZ1wiLCAgIFwiQ1wiKVxyXG4vLyAgICAgLmFkZEF0dHJpYnV0ZShcIkFlc3RoZXRpYyBSYXRpbmdcIiwgXCJBLVwiKVxyXG4vLyAgICAgLmFkZEF0dHJpYnV0ZShcIkNvbWZvcnQgUmF0aW5nXCIsICAgXCJDXCIpXHJcbi8vICAgICAuYWRkQXR0cmlidXRlKFwiRXF1aXBtZW50IFJhdGluZ1wiLCBcIkMtXCIpLFxyXG4vL1xyXG4vLyBuZXcgQnVpbGRpbmcoXHJcbi8vICAgICBcIkJha2VyeVwiLFxyXG4vLyAgICAgXCJidWlsZGluZ3MvQmFrZXJzLmpwZ1wiLFxyXG4vLyAgICAgYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtcGllXCI+PC9pPmAsXHJcbi8vICAgICBSYXJpdHkuQ29tbW9uLFxyXG4vLyAgICAgMTEsXHJcbi8vICAgICAoYykgPT4ge1xyXG4vLyAgICAgICAgIGlmIChjID09IE5wY0lELkpheWUpIHtcclxuLy8gICAgICAgICAgICAgY29uc3QgY29va2luZyA9IENoYXJhY3Rlci5nZXQoYykuZ2V0U2tpbGxWYWwoQ1NraWxsLkNvb2tpbmcpWzBdO1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihcclxuLy8gICAgICAgICAgICAgICAgICgxIC0gKDEgLSBjb29raW5nIC8gMTAwKSAqICgxIC0gY29va2luZyAvIDEwMCkpICogMTAwXHJcbi8vICAgICAgICAgICAgICk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGlmIChjID09IE5wY0lELkpvcmRpKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiA1NTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hhcmFjdGVyIG5vdCBzdXBwb3NlZCB0byB3b3JrIGluIHRoZSBiYWtlcnkuXCIpO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIFtOcGNJRC5KYXllLCBOcGNJRC5Kb3JkaV1cclxuLy8gKVxyXG4vLyAgICAgLmFkZEF0dHJpYnV0ZShcIlRocm91Z2hwdXRcIiwgICAgICAgXCI1IG1lYWxzIC8gZGF5XCIpXHJcbi8vICAgICAuYWRkQXR0cmlidXRlKFwiQ29uc3RydWN0aW9uXCIsICAgICBcIlJvdHRlbiB3b29kIDEwMCVcIilcclxuLy8gICAgIC5hZGRBdHRyaWJ1dGUoXCJUb3RhbCBIaXQgUG9pbnRzXCIsIFwiODBcIilcclxuLy8gICAgIC5hZGRBdHRyaWJ1dGUoXCJEZWZlbnNlIFJhdGluZ1wiLCAgIFwiRFwiKVxyXG4vLyAgICAgLmFkZEF0dHJpYnV0ZShcIkFlc3RoZXRpYyBSYXRpbmdcIiwgXCJEXCIpXHJcbi8vICAgICAuYWRkQXR0cmlidXRlKFwiQ29tZm9ydCBSYXRpbmdcIiwgICBcIkRcIilcclxuLy8gICAgIC5hZGRBdHRyaWJ1dGUoXCJFcXVpcG1lbnQgUmF0aW5nXCIsIFwiQ1wiKSxcclxuLy9cclxuXTtcclxuZnVuY3Rpb24gZ2VuZXJhdGVCdWlsZGluZ3NQYW5lbCgpIHtcclxuICAgIGNvbnN0IGJ1aWxkaW5nRE9NcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBidWlsZGluZ0luc3RhbmNlIG9mIGJ1aWxkaW5nSW5zdGFuY2VzKSB7XHJcbiAgICAgICAgYnVpbGRpbmdET01zLnB1c2goYnVpbGRpbmdJbnN0YW5jZS5nZW5lcmF0ZURPTVN0cmluZygpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRlcm1pbmFsX3RpdGxlXCI+SW5mcmFzdHJ1Y3R1cmU8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5mcmFzdHJ1Y3R1cmVcIj5cclxuICAgICAgICAgICAgJHtidWlsZGluZ0RPTXMuam9pbihcIlwiKX1cclxuICAgICAgICA8L2Rpdj5gO1xyXG59XHJcbmV4cG9ydHMuZ2VuZXJhdGVCdWlsZGluZ3NQYW5lbCA9IGdlbmVyYXRlQnVpbGRpbmdzUGFuZWw7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1aWxkaW5nSW5zdGFuY2VzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQ2hhcmFjdGVyID0gdm9pZCAwO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhL2NvbnN0YW50c1wiKTtcclxuY29uc3QgQXNwZWN0Tm90U2V0dXBFeGNlcHRpb25fMSA9IHJlcXVpcmUoXCIuL2FzcGVjdHMvQXNwZWN0Tm90U2V0dXBFeGNlcHRpb25cIik7XHJcbmNvbnN0IENhcmRBc3BlY3RfMSA9IHJlcXVpcmUoXCIuL2FzcGVjdHMvQ2FyZEFzcGVjdFwiKTtcclxuY29uc3QgQ29tYmF0QXNwZWN0XzEgPSByZXF1aXJlKFwiLi9hc3BlY3RzL0NvbWJhdEFzcGVjdFwiKTtcclxuY29uc3QgQ29yZUFzcGVjdF8xID0gcmVxdWlyZShcIi4vYXNwZWN0cy9Db3JlQXNwZWN0XCIpO1xyXG5jb25zdCBDU2tpbGxzQXNwZWN0XzEgPSByZXF1aXJlKFwiLi9hc3BlY3RzL0NTa2lsbHNBc3BlY3RcIik7XHJcbmNvbnN0IERTa2lsbHNBc3BlY3RfMSA9IHJlcXVpcmUoXCIuL2FzcGVjdHMvRFNraWxsc0FzcGVjdFwiKTtcclxuY29uc3QgRFN0YXRzQXNwZWN0XzEgPSByZXF1aXJlKFwiLi9hc3BlY3RzL0RTdGF0c0FzcGVjdFwiKTtcclxuY29uc3QgT3BlcmF0b3JBc3BlY3RfMSA9IHJlcXVpcmUoXCIuL2FzcGVjdHMvT3BlcmF0b3JBc3BlY3RcIik7XHJcbmNvbnN0IE9waW5pb25Bc3BlY3RfMSA9IHJlcXVpcmUoXCIuL2FzcGVjdHMvT3BpbmlvbkFzcGVjdFwiKTtcclxuY29uc3QgU2hlZXRBc3BlY3RfMSA9IHJlcXVpcmUoXCIuL2FzcGVjdHMvU2hlZXRBc3BlY3RcIik7XHJcbi8qKlxyXG4gKiAgMS4gQ3JlYXRlIHRoZSBzdGF0IGJsb2NrLlxyXG4gKiAgMi4gQmUgdXNlZCBmb3IgZ2V0dGluZyBzdHVmZiBsaWtlIHBhc3NpdmUgZGVjZXB0aW9uIGluIHNlc3Npb24gc3VtbWFyaWVzLlxyXG4gKiAgMy4gQmUgdXNlZCBmb3IgcGFydHkgc2ltdWxhdGlvbi5cclxuICogIDQuIEJlIHVzZWQgZm9yIGNoYXJhY3RlciBjYXJkIGNyZWF0aW9uLlxyXG4gKi9cclxuY2xhc3MgQ2hhcmFjdGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgQ2hhcmFjdGVyLl9JbmRleC5zZXQoaWQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2NvcmVBc3BlY3QgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2RTdGF0c0FzcGVjdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fZFNraWxsc0FzcGVjdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY2FyZEFzcGVjdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fb3BpbmlvbkFzcGVjdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY29tYmF0QXNwZWN0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9zaGVldEFzcGVjdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY1NraWxsc0FzcGVjdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fb3BlcmF0b3JBc3BlY3QgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCB0aGUge0BsaW5rIENoYXJhY3Rlcn0gZm9yIHRoZSBnaXZlbiBpZC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldChucGNJZCkge1xyXG4gICAgICAgIHJldHVybiBDaGFyYWN0ZXIuX0luZGV4LmdldChucGNJZCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldFNraWxsTW9kKHNraWxsLCBwcm9mT3ZlcnJpZGUgPSBudWxsLCB0ZW50YXRpdmUgPSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRTa2lsbHNBc3BlY3QuZ2V0U2tpbGxNb2Qoc2tpbGwsIHByb2ZPdmVycmlkZSwgdGVudGF0aXZlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0Q2FyZEluZGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRBc3BlY3QuZ2V0Q2FyZEluZGV4KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlUHJpbWFyeVRva2VuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRBc3BlY3QuZ2VuZXJhdGVQcmltYXJ5VG9rZW4oKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgY3JlYXRlTGluayhkaXNwbGF5VGV4dCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRBc3BlY3QuY3JlYXRlTGluayhkaXNwbGF5VGV4dCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlQ2FyZChmbG9hdGluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhcmRBc3BlY3QuZ2VuZXJhdGVDYXJkKGZsb2F0aW5nKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgbW9kKHN0YXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kU3RhdHNBc3BlY3QubW9kKHN0YXQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBkYyhzdGF0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbWJhdEFzcGVjdC5kYyhzdGF0KTtcclxuICAgIH1cclxuICAgIGdldFNraWxsVmFsKHNraWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY1NraWxsc0FzcGVjdC5nZXRTa2lsbFZhbChza2lsbCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIHZpc2liaWxpdHkoc3RhdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRTdGF0c0FzcGVjdC52aXNpYmlsaXR5KHN0YXQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBGaW5hbGl6ZSh7QGxpbmsgQmFzZUFzcGVjdC5maW5hbGl6ZX0pIGFsbCB0aGUgY29tcGxldGVkIGFzcGVjdHMuXHJcbiAgICAgKi9cclxuICAgIGZpbmFsaXplKCkge1xyXG4gICAgICAgIC8vIFRoaXMgZmluYWxpemF0aW9uIHNob3VsZCd2ZSBub3RoaW5nIHRvIGRvIHdpdGggdGhlIHNldHVwLCBzbyB0aGVcclxuICAgICAgICAvLyBvcmRlciBvZiBmaW5hbGl6YXRpb24gc2hvdWxkbid0IG1hdHRlci5cclxuICAgICAgICBsZXQgYXNwZWN0O1xyXG4gICAgICAgIGZvciAoYXNwZWN0IG9mIFtcclxuICAgICAgICAgICAgdGhpcy5fY29yZUFzcGVjdCxcclxuICAgICAgICAgICAgdGhpcy5fZFN0YXRzQXNwZWN0LFxyXG4gICAgICAgICAgICB0aGlzLl9kU2tpbGxzQXNwZWN0LFxyXG4gICAgICAgICAgICB0aGlzLl9vcGluaW9uQXNwZWN0LFxyXG4gICAgICAgICAgICB0aGlzLl9jYXJkQXNwZWN0LFxyXG4gICAgICAgICAgICB0aGlzLl9jb21iYXRBc3BlY3QsXHJcbiAgICAgICAgICAgIHRoaXMuX3NoZWV0QXNwZWN0LFxyXG4gICAgICAgICAgICB0aGlzLl9jU2tpbGxzQXNwZWN0LFxyXG4gICAgICAgICAgICB0aGlzLl9vcGVyYXRvckFzcGVjdCxcclxuICAgICAgICBdKSB7XHJcbiAgICAgICAgICAgIGlmIChhc3BlY3QgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXNwZWN0LmZpbmFsaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBET00gc3RyaW5nIGdlbmVyYXRlZCBieSB0aGUgb3BlcmF0b3IgYXNwZWN0LlxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZU9wZXJhdG9yRE9NKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdG9yQXNwZWN0LmdlbmVyYXRlRE9NU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIERPTSBzdHJpbmcgZ2VuZXJhdGVkIGJ5IHRoZSBvcGluaW9uIGFzcGVjdC5cclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVPcGluaW9uRE9NKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9waW5pb25Bc3BlY3QuZ2VuZXJhdGVET01TdHJpbmcoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgdGltZWxpbmUgRE9NIHN0cmluZyBnZW5lcmF0ZWQgYnkgdGhlIG9waW5pb24gYXNwZWN0IGZvciBhXHJcbiAgICAgKiBwYXJ0aWN1bGFyIFBDLlxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZU9waW5pb25UaW1lbGluZURPTShwYykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9waW5pb25Bc3BlY3QuZ2VuZXJhdGVUaW1lbGluZURPTVN0cmluZyhwYyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCB1cGdyYWRlZFNraWxscygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kU2tpbGxzQXNwZWN0LnVwZ3JhZGVkU2tpbGxzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBnZXQgYWMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbWJhdEFzcGVjdC5hYztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IHN0YXRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRTdGF0c0FzcGVjdC5zdGF0cztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IHBiKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRTdGF0c0FzcGVjdC5wYjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IGhwRGljZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21iYXRBc3BlY3QuaHBEaWNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBnZXQgaHAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tYmF0QXNwZWN0LmhwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBnZXQgc3BlZWRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJhdEFzcGVjdC5zcGVlZHM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCBzZW5zZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tYmF0QXNwZWN0LnNlbnNlcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IHNhdmVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJhdEFzcGVjdC5zYXZlcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IHBhc3NpdmVQZXJjZXB0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJhdEFzcGVjdC5wYXNzaXZlUGVyY2VwdGlvbjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IGRhbWFnZVJlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21iYXRBc3BlY3QuZGFtYWdlUmVzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBnZXQgY29uZGl0aW9uSW1tdW5pdGllcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21iYXRBc3BlY3QuY29uZGl0aW9uSW1tdW5pdGllcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IGFjdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tYmF0QXNwZWN0LmFjdGlvbnM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCBhY3Rpb25Db250ZW50QVBJKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRTdGF0c0FzcGVjdC5hY3Rpb25Db250ZW50QVBJO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzT3BpbmlvbmF0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3BpbmlvbkFzcGVjdC5pc09waW5pb25hdGVkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBnZXQgcGFzc2l2ZURlY2VwdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcGluaW9uQXNwZWN0LnBhc3NpdmVEZWNlcHRpb247XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCBuYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvcmVBc3BlY3QubmFtZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IGltZ1BhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29yZUFzcGVjdC5pbWdQYXRoO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNTa2lsbFJhdGluZ3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY1NraWxsc0FzcGVjdC5jU2tpbGxSYXRpbmdzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY2Nlc3NvciB0byBmYWN0b3J5IG1ldGhvZHMgZm9yIHNldHRpbmcgdXAgY29yZSBkYXRhLlxyXG4gICAgICovXHJcbiAgICBnZXQgY29yZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29yZUFzcGVjdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvcmVBc3BlY3QgPSBuZXcgQ29yZUFzcGVjdF8xLkNvcmVBc3BlY3QodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb3JlQXNwZWN0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY2Nlc3NvciB0byBmYWN0b3J5IG1ldGhvZHMgZm9yIHNldHRpbmcgdXAgdGhlIHN0YXRzLlxyXG4gICAgICovXHJcbiAgICBnZXQgZFN0YXRzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kU3RhdHNBc3BlY3QgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kU3RhdHNBc3BlY3QgPSBuZXcgRFN0YXRzQXNwZWN0XzEuRFN0YXRzQXNwZWN0KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZFN0YXRzQXNwZWN0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY2Nlc3NvciB0byBmYWN0b3J5IG1ldGhvZHMgZm9yIHNldHRpbmcgdXAgdGhlIHNraWxscy5cclxuICAgICAqL1xyXG4gICAgZ2V0IGRTS2lsbHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RTa2lsbHNBc3BlY3QgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBbRGVzaWduQ2hvaWNlXVxyXG4gICAgICAgICAgICAvLyBDaG9pY2UgYmV0d2VlbiB0aGlzICYgdGhpcy5kU3RhdHNBc3BlY3QgLSBmb3JtZXIgYWxsb3dzIGxhenlcclxuICAgICAgICAgICAgLy8gc2V0dXAuIExhdHRlciByZXF1aXJlcyBzdGF0cyB0byBiZSBhdCBsZWFzdCBzZXR1cCBiZWZvcmUgc2tpbGxzLlxyXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSdyZSBhbHJlYWR5IHByb3ZpZGluZyBhIGNoYXJhY3RlciByZWZlcmVuY2UgSSB3ZW50IHdpdGhcclxuICAgICAgICAgICAgLy8gdGhhdCAoYW5kIHN0YXRpbmcgdGhhdCB0aGUgYXNwZWN0cyB3b24ndCBoYXZlIHJlZmVyZW5jZXMgdG8gZWFjaFxyXG4gICAgICAgICAgICAvLyBvdGhlcikgYnV0IHllYSB0aGlzIGNvdWxkIGJlIHdvcnRoIGEgdGhvdWdodCBzb21lZGF5P1xyXG4gICAgICAgICAgICB0aGlzLl9kU2tpbGxzQXNwZWN0ID0gbmV3IERTa2lsbHNBc3BlY3RfMS5EU2tpbGxzQXNwZWN0KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZFNraWxsc0FzcGVjdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWNjZXNzb3IgdG8gZmFjdG9yeSBtZXRob2RzIGZvciBzZXR0aW5nIHVwIG9waW5pb24gc3R1ZmYuXHJcbiAgICAgKi9cclxuICAgIGdldCBvcGluaW9ucygpIHtcclxuICAgICAgICBpZiAodGhpcy5fb3BpbmlvbkFzcGVjdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29waW5pb25Bc3BlY3QgPSBuZXcgT3BpbmlvbkFzcGVjdF8xLk9waW5pb25Bc3BlY3QodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcGluaW9uQXNwZWN0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY2Nlc3NvciB0byBmYWN0b3J5IG1ldGhvZHMgZm9yIHNldHRpbmcgdXAgdGhlIGNhcmQgcmVsYXRlZCBpbmZvcm1hdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IGNhcmQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NhcmRBc3BlY3QgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jYXJkQXNwZWN0ID0gbmV3IENhcmRBc3BlY3RfMS5DYXJkQXNwZWN0KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY2FyZEFzcGVjdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWNjZXNzb3IgdG8gZmFjdG9yeSBtZXRob2RzIGZvciBzZXR0aW5nIHVwIGNvbWJhdCBpbmZvcm1hdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IGNvbWJhdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29tYmF0QXNwZWN0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29tYmF0QXNwZWN0ID0gbmV3IENvbWJhdEFzcGVjdF8xLkNvbWJhdEFzcGVjdCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbWJhdEFzcGVjdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWNjZXNzb3IgdG8gZmFjdG9yeSBtZXRob2RzIGZvciBzZXR0aW5nIHVwIHNoZWV0IGluZm9ybWF0aW9uLlxyXG4gICAgICovXHJcbiAgICBnZXQgc2hlZXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NoZWV0QXNwZWN0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2hlZXRBc3BlY3QgPSBuZXcgU2hlZXRBc3BlY3RfMS5TaGVldEFzcGVjdCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoZWV0QXNwZWN0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY2Nlc3NvciB0byBmYWN0b3J5IG1ldGhvZHMgZm9yIHNldHRpbmcgdXAgY29jIHNraWxscyBpbmZvcm1hdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IGNTa2lsbHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NTa2lsbHNBc3BlY3QgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jU2tpbGxzQXNwZWN0ID0gbmV3IENTa2lsbHNBc3BlY3RfMS5DU2tpbGxzQXNwZWN0KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY1NraWxsc0FzcGVjdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWNjZXNzb3IgdG8gZmFjdG9yeSBtZXRob2RzIGZvciBzZXR0aW5nIHVwIHRoZSBvcGVyYXRvciBpbmZvcm1hdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0IG9wZXJhdG9yKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9vcGVyYXRvckFzcGVjdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wZXJhdG9yQXNwZWN0ID0gbmV3IE9wZXJhdG9yQXNwZWN0XzEuT3BlcmF0b3JBc3BlY3QodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcGVyYXRvckFzcGVjdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZ2V0dGVyIGZvciBTVFIuXHJcbiAgICAgKi9cclxuICAgIGdldCBTVFIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kKGNvbnN0YW50c18xLkRTdGF0LlN0cik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGdldHRlciBmb3IgREVYLlxyXG4gICAgICovXHJcbiAgICBnZXQgREVYKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1vZChjb25zdGFudHNfMS5EU3RhdC5EZXgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBnZXR0ZXIgZm9yIENPTi5cclxuICAgICAqL1xyXG4gICAgZ2V0IENPTigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tb2QoY29uc3RhbnRzXzEuRFN0YXQuQ29uKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZ2V0dGVyIGZvciBJTlQuXHJcbiAgICAgKi9cclxuICAgIGdldCBJTlQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kKGNvbnN0YW50c18xLkRTdGF0LkludCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGdldHRlciBmb3IgV0lTLlxyXG4gICAgICovXHJcbiAgICBnZXQgV0lTKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1vZChjb25zdGFudHNfMS5EU3RhdC5XaXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBnZXR0ZXIgZm9yIENIQS5cclxuICAgICAqL1xyXG4gICAgZ2V0IENIQSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tb2QoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZ2V0dGVyIGZvciBzZW1pLXByb2ZpY2llbmN5IG1vZGlmaWVyLlxyXG4gICAgICovXHJcbiAgICBnZXQgU2VtaVByb2YoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGIubW9kKGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuSGFsZik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGdldHRlciBmb3IgcHJvZmljaWVuY3kgbW9kaWZpZXIuXHJcbiAgICAgKi9cclxuICAgIGdldCBQcm9mKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBiLm1vZChjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBnZXR0ZXIgZm9yIGV4cGVydGlzZSBtb2RpZmllci5cclxuICAgICAqL1xyXG4gICAgZ2V0IEV4cGVydGlzZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYi5tb2QoY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGZhdGlndWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3JBc3BlY3QuZmF0aWd1ZTtcclxuICAgIH1cclxuICAgIGdldCBtb3JhbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3JBc3BlY3QubW9yYWxlO1xyXG4gICAgfVxyXG4gICAgZ2V0IG5vdGFibGVDU2tpbGxzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdG9yQXNwZWN0Lm5vdGFibGVDU2tpbGxzO1xyXG4gICAgfVxyXG4gICAgZ2V0IG5vdGFibGVEU2tpbGxzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdG9yQXNwZWN0Lm5vdGFibGVEU2tpbGxzO1xyXG4gICAgfVxyXG4gICAgZ2V0IG5vdGFibGVTdHVmZigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRvckFzcGVjdC5ub3RhYmxlU3R1ZmY7XHJcbiAgICB9XHJcbiAgICBnZXQgcmF0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRvckFzcGVjdC5yYXRpbmdzO1xyXG4gICAgfVxyXG4gICAgZ2V0IGVyYSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRvci5lcmE7XHJcbiAgICB9XHJcbiAgICBnZXQgcHJvZmVzc2lvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3IucHJvZmVzc2lvbnM7XHJcbiAgICB9XHJcbiAgICBnZXQgZFNraWxsUmF0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kU2tpbGxzQXNwZWN0LmRTa2lsbFJhdGluZ3M7XHJcbiAgICB9XHJcbiAgICBnZXQgY2FyZEFzcGVjdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2FyZEFzcGVjdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3BlY3ROb3RTZXR1cEV4Y2VwdGlvbl8xLkFzcGVjdE5vdFNldHVwRXhjZXB0aW9uKFwiY2FyZEFzcGVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcmRBc3BlY3Q7XHJcbiAgICB9XHJcbiAgICBnZXQgb3BpbmlvbkFzcGVjdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fb3BpbmlvbkFzcGVjdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3BlY3ROb3RTZXR1cEV4Y2VwdGlvbl8xLkFzcGVjdE5vdFNldHVwRXhjZXB0aW9uKFwib3BpbmlvbkFzcGVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29waW5pb25Bc3BlY3Q7XHJcbiAgICB9XHJcbiAgICBnZXQgZFNraWxsc0FzcGVjdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZFNraWxsc0FzcGVjdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3BlY3ROb3RTZXR1cEV4Y2VwdGlvbl8xLkFzcGVjdE5vdFNldHVwRXhjZXB0aW9uKFwiZFNraWxsc0FzcGVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RTa2lsbHNBc3BlY3Q7XHJcbiAgICB9XHJcbiAgICBnZXQgZFN0YXRzQXNwZWN0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kU3RhdHNBc3BlY3QgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNwZWN0Tm90U2V0dXBFeGNlcHRpb25fMS5Bc3BlY3ROb3RTZXR1cEV4Y2VwdGlvbihcImRTdGF0c0FzcGVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RTdGF0c0FzcGVjdDtcclxuICAgIH1cclxuICAgIGdldCBjb3JlQXNwZWN0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jb3JlQXNwZWN0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzcGVjdE5vdFNldHVwRXhjZXB0aW9uXzEuQXNwZWN0Tm90U2V0dXBFeGNlcHRpb24oXCJjb3JlQXNwZWN0XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29yZUFzcGVjdDtcclxuICAgIH1cclxuICAgIGdldCBjb21iYXRBc3BlY3QoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbWJhdEFzcGVjdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3BlY3ROb3RTZXR1cEV4Y2VwdGlvbl8xLkFzcGVjdE5vdFNldHVwRXhjZXB0aW9uKFwiY29tYmF0QXNwZWN0XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29tYmF0QXNwZWN0O1xyXG4gICAgfVxyXG4gICAgZ2V0IHNoZWV0QXNwZWN0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zaGVldEFzcGVjdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3BlY3ROb3RTZXR1cEV4Y2VwdGlvbl8xLkFzcGVjdE5vdFNldHVwRXhjZXB0aW9uKFwic2hlZXRBc3BlY3RcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaGVldEFzcGVjdDtcclxuICAgIH1cclxuICAgIGdldCBjU2tpbGxzQXNwZWN0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jU2tpbGxzQXNwZWN0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzcGVjdE5vdFNldHVwRXhjZXB0aW9uXzEuQXNwZWN0Tm90U2V0dXBFeGNlcHRpb24oXCJzaGVldEFzcGVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NTa2lsbHNBc3BlY3Q7XHJcbiAgICB9XHJcbiAgICBnZXQgb3BlcmF0b3JBc3BlY3QoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX29wZXJhdG9yQXNwZWN0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzcGVjdE5vdFNldHVwRXhjZXB0aW9uXzEuQXNwZWN0Tm90U2V0dXBFeGNlcHRpb24oXCJzaGVldEFzcGVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZXJhdG9yQXNwZWN0O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ2hhcmFjdGVyID0gQ2hhcmFjdGVyO1xyXG4vKipcclxuICogQW4gaW5kZXggdG8gbWFrZSBzdXJlIHdlIGRvbid0IGV2ZXIgZ2V0IHR3byBvYmplY3RzIGZvciBvbmUgY2hhcmFjdGVyLlxyXG4gKi9cclxuQ2hhcmFjdGVyLl9JbmRleCA9IG5ldyBNYXAoKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhcmFjdGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTW9yYWxlRmxhdm9yVGV4dCA9IGV4cG9ydHMuTW9yYWxlRWZmZWN0cyA9IGV4cG9ydHMuTW9yYWxlID0gZXhwb3J0cy5OcGNNb3JhbGVFZmZlY3RzID0gdm9pZCAwO1xyXG52YXIgTnBjTW9yYWxlRWZmZWN0cztcclxuKGZ1bmN0aW9uIChOcGNNb3JhbGVFZmZlY3RzKSB7XHJcbiAgICBOcGNNb3JhbGVFZmZlY3RzW05wY01vcmFsZUVmZmVjdHNbXCJMYXRlbnRFeGhhdXN0aW9uXCJdID0gMF0gPSBcIkxhdGVudEV4aGF1c3Rpb25cIjtcclxuICAgIE5wY01vcmFsZUVmZmVjdHNbTnBjTW9yYWxlRWZmZWN0c1tcIlByb2ZpY2llbmN5Qm9udXNNb2RpZmllclwiXSA9IDFdID0gXCJQcm9maWNpZW5jeUJvbnVzTW9kaWZpZXJcIjtcclxuICAgIE5wY01vcmFsZUVmZmVjdHNbTnBjTW9yYWxlRWZmZWN0c1tcIkluaXRpYXRpdmVNb2RpZmllck5BVFwiXSA9IDJdID0gXCJJbml0aWF0aXZlTW9kaWZpZXJOQVRcIjtcclxuICAgIE5wY01vcmFsZUVmZmVjdHNbTnBjTW9yYWxlRWZmZWN0c1tcIlhQR2FpblJhdGlvXCJdID0gM10gPSBcIlhQR2FpblJhdGlvXCI7XHJcbiAgICBOcGNNb3JhbGVFZmZlY3RzW05wY01vcmFsZUVmZmVjdHNbXCJTa2lsbE1vZGlmaWVyXCJdID0gNF0gPSBcIlNraWxsTW9kaWZpZXJcIjtcclxuICAgIE5wY01vcmFsZUVmZmVjdHNbTnBjTW9yYWxlRWZmZWN0c1tcIkNvbWJhdFJvbGxNb2RcIl0gPSA1XSA9IFwiQ29tYmF0Um9sbE1vZFwiO1xyXG59KShOcGNNb3JhbGVFZmZlY3RzID0gZXhwb3J0cy5OcGNNb3JhbGVFZmZlY3RzIHx8IChleHBvcnRzLk5wY01vcmFsZUVmZmVjdHMgPSB7fSkpO1xyXG52YXIgTW9yYWxlO1xyXG4oZnVuY3Rpb24gKE1vcmFsZSkge1xyXG4gICAgTW9yYWxlW01vcmFsZVtcIkFieXNtYWxcIl0gPSAwXSA9IFwiQWJ5c21hbFwiO1xyXG4gICAgTW9yYWxlW01vcmFsZVtcIkRlcHJlc3NlZFwiXSA9IDFdID0gXCJEZXByZXNzZWRcIjtcclxuICAgIE1vcmFsZVtNb3JhbGVbXCJEaXNtYWxcIl0gPSAyXSA9IFwiRGlzbWFsXCI7XHJcbiAgICBNb3JhbGVbTW9yYWxlW1wiTG93XCJdID0gM10gPSBcIkxvd1wiO1xyXG4gICAgTW9yYWxlW01vcmFsZVtcIkF2ZXJhZ2VcIl0gPSA0XSA9IFwiQXZlcmFnZVwiO1xyXG4gICAgTW9yYWxlW01vcmFsZVtcIkNvbWZvcnRhYmxlXCJdID0gNV0gPSBcIkNvbWZvcnRhYmxlXCI7XHJcbiAgICBNb3JhbGVbTW9yYWxlW1wiT3B0aW1pc3RpY1wiXSA9IDZdID0gXCJPcHRpbWlzdGljXCI7XHJcbiAgICBNb3JhbGVbTW9yYWxlW1wiU2FuZ3VpbmVcIl0gPSA3XSA9IFwiU2FuZ3VpbmVcIjtcclxuICAgIE1vcmFsZVtNb3JhbGVbXCJFY3N0YXRpY1wiXSA9IDhdID0gXCJFY3N0YXRpY1wiO1xyXG59KShNb3JhbGUgPSBleHBvcnRzLk1vcmFsZSB8fCAoZXhwb3J0cy5Nb3JhbGUgPSB7fSkpO1xyXG5leHBvcnRzLk1vcmFsZUVmZmVjdHMgPSBuZXcgTWFwKFtcclxuICAgIFtNb3JhbGUuQWJ5c21hbCwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgIFtOcGNNb3JhbGVFZmZlY3RzLlhQR2FpblJhdGlvLCAwLjMwXSxcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuTGF0ZW50RXhoYXVzdGlvbiwgMl0sXHJcbiAgICAgICAgICAgIFtOcGNNb3JhbGVFZmZlY3RzLlByb2ZpY2llbmN5Qm9udXNNb2RpZmllciwgLTJdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5Jbml0aWF0aXZlTW9kaWZpZXJOQVQsIC0yMF0sXHJcbiAgICAgICAgICAgIFtOcGNNb3JhbGVFZmZlY3RzLlNraWxsTW9kaWZpZXIsIC0zXSxcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuQ29tYmF0Um9sbE1vZCwgLTJdLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtNb3JhbGUuRGVwcmVzc2VkLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuWFBHYWluUmF0aW8sIDAuNjBdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5MYXRlbnRFeGhhdXN0aW9uLCAxXSxcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuUHJvZmljaWVuY3lCb251c01vZGlmaWVyLCAtMV0sXHJcbiAgICAgICAgICAgIFtOcGNNb3JhbGVFZmZlY3RzLkluaXRpYXRpdmVNb2RpZmllck5BVCwgLTEwXSxcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuU2tpbGxNb2RpZmllciwgLTJdLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtNb3JhbGUuRGlzbWFsLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuWFBHYWluUmF0aW8sIDAuODBdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5Qcm9maWNpZW5jeUJvbnVzTW9kaWZpZXIsIC0xXSxcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuU2tpbGxNb2RpZmllciwgLTFdLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtNb3JhbGUuTG93LCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuWFBHYWluUmF0aW8sIDAuOTBdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5Ta2lsbE1vZGlmaWVyLCAtMV0sXHJcbiAgICAgICAgXSldLFxyXG4gICAgW01vcmFsZS5BdmVyYWdlLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuWFBHYWluUmF0aW8sIDEuMDBdLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtNb3JhbGUuQ29tZm9ydGFibGUsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5YUEdhaW5SYXRpbywgMS4wNV0sXHJcbiAgICAgICAgXSldLFxyXG4gICAgW01vcmFsZS5PcHRpbWlzdGljLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuWFBHYWluUmF0aW8sIDEuMTBdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5Ta2lsbE1vZGlmaWVyLCAxXSxcclxuICAgICAgICBdKV0sXHJcbiAgICBbTW9yYWxlLlNhbmd1aW5lLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuWFBHYWluUmF0aW8sIDEuMTVdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5Ta2lsbE1vZGlmaWVyLCAxXSxcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuUHJvZmljaWVuY3lCb251c01vZGlmaWVyLCAxXSxcclxuICAgICAgICAgICAgW05wY01vcmFsZUVmZmVjdHMuTGF0ZW50RXhoYXVzdGlvbiwgLTFdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5Jbml0aWF0aXZlTW9kaWZpZXJOQVQsIDJdLFxyXG4gICAgICAgIF0pXSxcclxuICAgIFtNb3JhbGUuRWNzdGF0aWMsIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5YUEdhaW5SYXRpbywgMS4yMF0sXHJcbiAgICAgICAgICAgIFtOcGNNb3JhbGVFZmZlY3RzLlNraWxsTW9kaWZpZXIsIDJdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5Qcm9maWNpZW5jeUJvbnVzTW9kaWZpZXIsIDFdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5MYXRlbnRFeGhhdXN0aW9uLCAtMl0sXHJcbiAgICAgICAgICAgIFtOcGNNb3JhbGVFZmZlY3RzLkNvbWJhdFJvbGxNb2QsIDJdLFxyXG4gICAgICAgICAgICBbTnBjTW9yYWxlRWZmZWN0cy5Jbml0aWF0aXZlTW9kaWZpZXJOQVQsIDVdLFxyXG4gICAgICAgIF0pXSxcclxuXSk7XHJcbmV4cG9ydHMuTW9yYWxlRmxhdm9yVGV4dCA9IG5ldyBNYXAoW1xyXG4gICAgW01vcmFsZS5BYnlzbWFsLCBcIjxpPlRoaW5raW5nIGh1cnRzLiBFeGlzdGVuY2UgaHVydHMuPC9pPiBZb3UganVzdC4uLiBjYW4ndC4uLiBicmluZyB5b3Vyc2VsZiB0byBtb3ZlLlwiXSxcclxuICAgIFtNb3JhbGUuRGVwcmVzc2VkLCBcIlRoZSB3b3JsZCBpcyBibGFjay4gSnVzdCBsZXQgd2hhdGV2ZXIgYmUsIGJlLiBZb3UgZG9uJ3QgY2FyZSBhbnltb3JlLlwiXSxcclxuICAgIFtNb3JhbGUuRGlzbWFsLCBcIlNvIDxpPnRpcmVkPC9pPi4gQWxsIG9mIGl0IGZlZWxzIGp1c3QuLi4gc28uLi4gcG9pbnRsZXNzLlwiXSxcclxuICAgIFtNb3JhbGUuTG93LCBcIllvdSdyZSBqdXN0IG5vdCBmZWVsaW5nIGxpa2UgaXQgdG9kYXkuLi5cIl0sXHJcbiAgICBbTW9yYWxlLkF2ZXJhZ2UsIFwiSnVzdCBhbm90aGVyIHVzdWFsIGRheS5cIl0sXHJcbiAgICBbTW9yYWxlLkNvbWZvcnRhYmxlLCBcIlRoZXJlIGlzIHBlYWNlIGFuZCB0cmFucXVpbGl0eSwgbGlmZSBpcyBnb29kLlwiXSxcclxuICAgIFtNb3JhbGUuT3B0aW1pc3RpYywgXCJUaGUgZGFya25lc3MgaGFzIG1lbHRlZCBhd2F5LiBUaGUgZnV0dXJlIGxvb2tzIGhvcGVmdWwgYW5kIGl0IGlzIGVhc2llciB0byBmb2N1cy5cIl0sXHJcbiAgICBbTW9yYWxlLlNhbmd1aW5lLCBcIllvdXIgcG9zaXRpdml0eSBsZW5kcyBhIHN1cmdlIG9mIGVuZXJneS4gRXZlcnl0aGluZyBzZWVtcyBwb3NzaWJsZSBub3cuXCJdLFxyXG4gICAgW01vcmFsZS5FY3N0YXRpYywgXCJVbnN0b3BwYWJsZS4gVW5icmVha2FibGUuIFlvdSdyZSBjb21wbGV0ZWx5IDxpPmluIHRoZSB6b25lPC9pPi5cIl0sXHJcbl0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Nb3JhbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Bc3BlY3RGYWN0b3J5RmxhZyA9IHZvaWQgMDtcclxudmFyIEFzcGVjdEZhY3RvcnlGbGFnO1xyXG4oZnVuY3Rpb24gKEFzcGVjdEZhY3RvcnlGbGFnKSB7XHJcbiAgICBBc3BlY3RGYWN0b3J5RmxhZ1tBc3BlY3RGYWN0b3J5RmxhZ1tcIkNvcmVOYW1lU2V0dXBcIl0gPSAwXSA9IFwiQ29yZU5hbWVTZXR1cFwiO1xyXG4gICAgQXNwZWN0RmFjdG9yeUZsYWdbQXNwZWN0RmFjdG9yeUZsYWdbXCJDb3JlSW1nUGF0aFNldHVwXCJdID0gMV0gPSBcIkNvcmVJbWdQYXRoU2V0dXBcIjtcclxuICAgIEFzcGVjdEZhY3RvcnlGbGFnW0FzcGVjdEZhY3RvcnlGbGFnW1wiRFN0YXRzU3RhdHNTZXR1cFwiXSA9IDJdID0gXCJEU3RhdHNTdGF0c1NldHVwXCI7XHJcbiAgICBBc3BlY3RGYWN0b3J5RmxhZ1tBc3BlY3RGYWN0b3J5RmxhZ1tcIkRTdGF0c1Byb2ZpY2llbmN5RGVjbGFyZWRcIl0gPSAzXSA9IFwiRFN0YXRzUHJvZmljaWVuY3lEZWNsYXJlZFwiO1xyXG4gICAgQXNwZWN0RmFjdG9yeUZsYWdbQXNwZWN0RmFjdG9yeUZsYWdbXCJEU3RhdHNQcm9maWNpZW5jeUZpbmFsaXplZFwiXSA9IDRdID0gXCJEU3RhdHNQcm9maWNpZW5jeUZpbmFsaXplZFwiO1xyXG4gICAgQXNwZWN0RmFjdG9yeUZsYWdbQXNwZWN0RmFjdG9yeUZsYWdbXCJEU2tpbGxzU2tpbGxzRGVjbGFyZWRcIl0gPSA1XSA9IFwiRFNraWxsc1NraWxsc0RlY2xhcmVkXCI7XHJcbiAgICBBc3BlY3RGYWN0b3J5RmxhZ1tBc3BlY3RGYWN0b3J5RmxhZ1tcIkRTa2lsbHNTa2lsbHNGaW5hbGl6ZWRcIl0gPSA2XSA9IFwiRFNraWxsc1NraWxsc0ZpbmFsaXplZFwiO1xyXG4gICAgQXNwZWN0RmFjdG9yeUZsYWdbQXNwZWN0RmFjdG9yeUZsYWdbXCJDU2tpbGxzU2tpbGxzRGVjbGFyZWRcIl0gPSA3XSA9IFwiQ1NraWxsc1NraWxsc0RlY2xhcmVkXCI7XHJcbiAgICBBc3BlY3RGYWN0b3J5RmxhZ1tBc3BlY3RGYWN0b3J5RmxhZ1tcIkNTa2lsbHNTa2lsbHNGaW5hbGl6ZWRcIl0gPSA4XSA9IFwiQ1NraWxsc1NraWxsc0ZpbmFsaXplZFwiO1xyXG4gICAgQXNwZWN0RmFjdG9yeUZsYWdbQXNwZWN0RmFjdG9yeUZsYWdbXCJDYXJkQ2FtcGFpZ25TZXRcIl0gPSA5XSA9IFwiQ2FyZENhbXBhaWduU2V0XCI7XHJcbn0pKEFzcGVjdEZhY3RvcnlGbGFnID0gZXhwb3J0cy5Bc3BlY3RGYWN0b3J5RmxhZyB8fCAoZXhwb3J0cy5Bc3BlY3RGYWN0b3J5RmxhZyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzcGVjdEZhY3RvcnlGbGFnLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQXNwZWN0Tm90U2V0dXBFeGNlcHRpb24gPSB2b2lkIDA7XHJcbmNsYXNzIEFzcGVjdE5vdFNldHVwRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xyXG59XHJcbmV4cG9ydHMuQXNwZWN0Tm90U2V0dXBFeGNlcHRpb24gPSBBc3BlY3ROb3RTZXR1cEV4Y2VwdGlvbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNwZWN0Tm90U2V0dXBFeGNlcHRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5CYXNlQXNwZWN0ID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IEFzcGVjdEZhY3RvcnlGbGFnXzEgPSByZXF1aXJlKFwiLi9Bc3BlY3RGYWN0b3J5RmxhZ1wiKTtcclxuY29uc3QgQXNwZWN0Tm90U2V0dXBFeGNlcHRpb25fMSA9IHJlcXVpcmUoXCIuL0FzcGVjdE5vdFNldHVwRXhjZXB0aW9uXCIpO1xyXG5jb25zdCBEdXBsaWNhdGVTZXR1cEV4Y2VwdGlvbl8xID0gcmVxdWlyZShcIi4vRHVwbGljYXRlU2V0dXBFeGNlcHRpb25cIik7XHJcbi8qKlxyXG4gKiBUaGUgYmFzZSBhc3BlY3QgY2xhc3MgYWxsIGFzcGVjdHMgZXh0ZW5kLiBUaGlzIHByb3ZpZGVzIHRoZSBmdW5jdGlvbmFsaXR5IHRvXHJcbiAqIGVuc3VyZSBmYWN0b3J5IG1ldGhvZHMgYXJlIGNhbGxlZCBhcyBuZWVkZWQgLSBvbmx5IG9uY2UsIGF0IGxlYXN0IG9uY2UsIG5vdFxyXG4gKiBhZnRlciBiZWluZyBtYXJrZWQgYXMgZmluYWwgZXRjLlxyXG4gKi9cclxuY2xhc3MgQmFzZUFzcGVjdCB7XHJcbiAgICAvKipcclxuICAgICAqIENUT1IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNoYXJhY3Rlcikge1xyXG4gICAgICAgIHRoaXMuY2hhcmFjdGVyID0gY2hhcmFjdGVyO1xyXG4gICAgICAgIHRoaXMuZmxhZ3MgPSBuZXcgU2V0KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEEgc2VudGluZWwgbWV0aG9kIHRvIGVuc3VyZSBhIHNldHVwIG1ldGhvZCBpcyBjYWxsZWQgb25seSBvbmNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmbGFnIFRoZSBmbGFnIHdob3NlIHByZXNlbmNlIHdlIGNoZWNrIHRvIHNlZSBpZiB0aGUgbWV0aG9kIHdhc1xyXG4gICAgICogICAgICAgICAgICAgY2FsbGVkIHByZXZpb3VzbHkuXHJcbiAgICAgKi9cclxuICAgIHNldHVwU2VudGluZWwoZmxhZykge1xyXG4gICAgICAgIGlmICh0aGlzLmZsYWdzLmhhcyhmbGFnKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRHVwbGljYXRlU2V0dXBFeGNlcHRpb25fMS5EdXBsaWNhdGVTZXR1cEV4Y2VwdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZsYWdzLmFkZChmbGFnKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQSBzZW50aW5lbCBtZXRob2QgdG8gZW5zdXJlIGEgYnVpbGQgbWV0aG9kIGlzbid0IGNhbGxlZCBhZnRlciBhIHBhcnQgb2ZcclxuICAgICAqIGFuIGFzcGVjdCBoYXMgYmVlbiBkZWNsYXJlZCBhcyBmaW5hbC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYnVpbGRGbGFnIFRoZSBmbGFnIHdlIHNldCB3aGVuIGFuIGFzcGVjdCBpcyBidWlsdCB1cG9uLlxyXG4gICAgICogQHBhcmFtIGZpbmFsRmxhZyBUaGUgZmxhZyB3ZSBzZXQgdG8gbWFyayBhIHN0ZXAtYnktc3RlcCBidWlsdCBwYXJ0IG9mIGFuXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgIGFzcGVjdCBhcyBjb21wbGV0ZS5cclxuICAgICAqL1xyXG4gICAgYnVpbGRTZW50aW5lbChidWlsZEZsYWcsIGZpbmFsRmxhZykge1xyXG4gICAgICAgIGlmICh0aGlzLmZsYWdzLmhhcyhmaW5hbEZsYWcpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBEdXBsaWNhdGVTZXR1cEV4Y2VwdGlvbl8xLkR1cGxpY2F0ZVNldHVwRXhjZXB0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmxhZ3MuYWRkKGJ1aWxkRmxhZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEVuc3VyZSB0aGF0IGEgc2V0dXAgbWV0aG9kIGhhcyBiZWVuIGludm9rZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGZsYWcgIFRoZSBmbGFnIHRvIGNoZWNrIHdoZXRoZXIgYSBzZXR1cC9idWlsZCBvcGVyYXRpb24gaGFzIGJlZW5cclxuICAgICAqICAgICAgICAgICAgICBkb25lIGVhcmxpZXIsIG5vdyB0aGF0IGl0IGlzIGJlaW5nIHVzZWQuXHJcbiAgICAgKiBAcGFyYW0gY3Jhc2ggSWYgd2Ugc2hvdWxkIGNyYXNoIG9uIGZhaWx1cmUsIG9yIGp1c3QgZ2l2ZSBhIHdhcm5pbmcuIFdlXHJcbiAgICAgKiAgICAgICAgICAgICAgbWF5IHdhbnQgdG8gZG8gdGhlIGxhdHRlciBmb3Igc3RlcC1ieS1zdGVwIGFzcGVjdCBwYXJ0c1xyXG4gICAgICogICAgICAgICAgICAgIHdoZXJlIHdlJ3ZlIGFkZGVkIHdoYXQgaXMgbmVlZGVkIGhlcmUsIGJ1dCB3YW50IHRvIHJlbWluZFxyXG4gICAgICogICAgICAgICAgICAgIG91cnNlbHZlcyB0aGF0IHRoaXMgbmVlZHMgdG8gYmUgY29tcGxldGVkLlxyXG4gICAgICovXHJcbiAgICBlbnN1cmUoZmxhZywgY3Jhc2ggPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmxhZ3MuaGFzKGZsYWcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNyYXNoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3BlY3ROb3RTZXR1cEV4Y2VwdGlvbl8xLkFzcGVjdE5vdFNldHVwRXhjZXB0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEFzcGVjdCBGYWN0b3J5IHNldHVwIG5vdCBjb21wbGV0ZWQgd3J0ICR7QXNwZWN0RmFjdG9yeUZsYWdfMS5Bc3BlY3RGYWN0b3J5RmxhZ1tmbGFnXX0gYCArXHJcbiAgICAgICAgICAgICAgICBgb24gY2hhcmFjdGVyICR7bnBjSW5kZXhfMS5OcGNJRFt0aGlzLmNoYXJhY3Rlci5pZF19LmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRG8gc29tZXRoaW5nIGlmIHRoZSBlbnRpcmUgYXNwZWN0IGlzIGNvbXBsZXRlLiBGb3IgbW9zdCwgbm90aGluZyBzaG91bGRcclxuICAgICAqIGJlIG5lZWRlZCwgYWx0aG91Z2ggdGhlIHVzZXIgZmFjaW5nIG9uZXMgbWlnaHQgd2FudCB0byBkbyBzb21ldGhpbmcgd2hpY2hcclxuICAgICAqIGFkZHMgc29tZSBIVE1MIHRvIHRoZSBwYWdlIG9yIGludGVyYWN0cyB3aXRoIHNvbWUgb3RoZXIgY2xhc3Nlcy5cclxuICAgICAqL1xyXG4gICAgZmluYWxpemUoKSB7IH1cclxuICAgIC8qKlxyXG4gICAgICogSXQncyBvayBmb3IgYWxsIGFzcGVjdHMgdG8ga25vdyB0aGUgaWQuXHJcbiAgICAgKi9cclxuICAgIGdldCBpZCgpIHtcclxuICAgICAgICAvLyBPciBpcyBpdD8gV2hhdCBpZiB0aGV5IHF1ZXJ5IHRoZSBlbnRpcmUgY2hhcmFjdGVyIGl0c2VsZiB1c2luZyB0aGF0P1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJhY3Rlci5pZDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJhc2VBc3BlY3QgPSBCYXNlQXNwZWN0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlQXNwZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQ1NraWxsc0FzcGVjdCA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IFJhcml0eV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvUmFyaXR5XCIpO1xyXG5jb25zdCBBc3BlY3RGYWN0b3J5RmxhZ18xID0gcmVxdWlyZShcIi4vQXNwZWN0RmFjdG9yeUZsYWdcIik7XHJcbmNvbnN0IEJhc2VBc3BlY3RfMSA9IHJlcXVpcmUoXCIuL0Jhc2VBc3BlY3RcIik7XHJcbi8qKlxyXG4gKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGEgRCZEIHNraWxscyBhc3BlY3QuIFJlbGllcyBvbiB0aGUgU3RhdHMgYW5kXHJcbiAqIFByb2ZpY2llbmN5IGFzcGVjdHMgdG8gd29yay5cclxuICovXHJcbmNsYXNzIENTa2lsbHNBc3BlY3QgZXh0ZW5kcyBCYXNlQXNwZWN0XzEuQmFzZUFzcGVjdCB7XHJcbiAgICAvKipcclxuICAgICAqIENUT1IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGMpIHtcclxuICAgICAgICBzdXBlcihjKTtcclxuICAgICAgICB0aGlzLmMgPSBjO1xyXG4gICAgICAgIHRoaXMuc2tpbGxzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgZmluYWxpemVTa2lsbHMoKSB7XHJcbiAgICAgICAgdGhpcy5zZXR1cFNlbnRpbmVsKEFzcGVjdEZhY3RvcnlGbGFnXzEuQXNwZWN0RmFjdG9yeUZsYWcuQ1NraWxsc1NraWxsc0ZpbmFsaXplZCk7XHJcbiAgICB9XHJcbiAgICBnZXRTa2lsbFZhbChza2lsbCkge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlKEFzcGVjdEZhY3RvcnlGbGFnXzEuQXNwZWN0RmFjdG9yeUZsYWcuQ1NraWxsc1NraWxsc0ZpbmFsaXplZCwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2tpbGxzLmdldChza2lsbCk7XHJcbiAgICB9XHJcbiAgICBzZXRTa2lsbFZhbHVlKHNraWxsLCB2YWx1ZSwgdmlzaWJpbGl0eSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBDU2tpbGxzQXNwZWN0LkJBU0VfVkFMVUVTLmdldChza2lsbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJ1aWxkU2VudGluZWwoQXNwZWN0RmFjdG9yeUZsYWdfMS5Bc3BlY3RGYWN0b3J5RmxhZy5DU2tpbGxzU2tpbGxzRGVjbGFyZWQsIEFzcGVjdEZhY3RvcnlGbGFnXzEuQXNwZWN0RmFjdG9yeUZsYWcuQ1NraWxsc1NraWxsc0ZpbmFsaXplZCk7XHJcbiAgICAgICAgdGhpcy5za2lsbHMuc2V0KHNraWxsLCBbdmFsdWUsIHZpc2liaWxpdHldKTtcclxuICAgIH1cclxuICAgIGdldCBjU2tpbGxSYXRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlKEFzcGVjdEZhY3RvcnlGbGFnXzEuQXNwZWN0RmFjdG9yeUZsYWcuQ1NraWxsc1NraWxsc0ZpbmFsaXplZCwgdHJ1ZSk7XHJcbiAgICAgICAgY29uc3QgcmF0aW5ncyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtza2lsbCwgW3ZhbHVlLCBfXV0gb2YgdGhpcy5za2lsbHMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHJhdGluZ3Muc2V0KHNraWxsLCBDU2tpbGxzQXNwZWN0LmdldFJhdGluZ0ZvclNraWxsTW9kaWZpZXIodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJhdGluZ3M7XHJcbiAgICB9XHJcbiAgICBzZXRTa2lsbFZhbHVlcyhkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5maW5hbGl6ZVNraWxscygpO1xyXG4gICAgICAgIGZvciAoY29uc3QgZGF0dW0gb2YgZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0dW1bMV0gPT0gQ1NraWxsc0FzcGVjdC5CQVNFX1ZBTFVFUy5nZXQoZGF0dW1bMF0pKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNraWxscy5zZXQoZGF0dW1bMF0sIFtkYXR1bVsxXSwgZGF0dW1bMl1dKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0UmF0aW5nRm9yU2tpbGxNb2RpZmllcih2KSB7XHJcbiAgICAgICAgaWYgKHYgPCA1KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSYXJpdHlfMS5SYXRpbmcuRjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYgPCAyMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmFyaXR5XzEuUmF0aW5nLkU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2IDwgNTApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJhcml0eV8xLlJhdGluZy5EO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodiA8IDc1KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSYXJpdHlfMS5SYXRpbmcuQztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYgPCA5MCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmFyaXR5XzEuUmF0aW5nLkI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2IDwgMTAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSYXJpdHlfMS5SYXRpbmcuQTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYgPCAxNTApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJhcml0eV8xLlJhdGluZy5TO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodiA8IDIwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmFyaXR5XzEuUmF0aW5nLlNTO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUmFyaXR5XzEuUmF0aW5nLlNTUztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNTa2lsbHNBc3BlY3QgPSBDU2tpbGxzQXNwZWN0O1xyXG5DU2tpbGxzQXNwZWN0LkJBU0VfVkFMVUVTID0gbmV3IE1hcChbXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFjY291bnRpbmcsIDVdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5BbnRocm9wb2xvZ3ksIDBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5BcHByYWlzZSwgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFyY2hhZW9sb2d5LCAwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXJ0aWxsZXJ5LCAwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2hhcm0sIDE1XSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ29tcHV0ZXJVc2UsIDVdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5EZW1vbGl0aW9ucywgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRpc2d1aXNlLCA1XSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGl2aW5nLCAwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRHJpdmVBdXRvLCAyMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkVsZWN0cmljYWxSZXBhaXIsIDEwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRWxlY3Ryb25pY3MsIDBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5GaXJzdEFpZCwgMzBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5IeXBub3NpcywgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkxhdywgNV0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkxpYnJhcnlVc2UsIDIwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTG9ja3NtaXRoLCAwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTWVjaGFuaWNhbFJlcGFpciwgMTBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5Nb2Rlcm5NZWRpY2luZSwgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdHVyYWxXb3JsZCwgMTBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5OYXZpZ2F0ZSwgMTBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5PY2N1bHQsIDVdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5PcGVyYXRlSGVhdnlNYWNoaW5lcnksIDBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5Qc3ljaG9hbmFseXNpcywgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlJlYWRMaXBzLCAwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUmlkZSwgMTVdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5UaHJvdywgMjBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5BY3RpbmcsIDVdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5DYWxsaWdyYXBoeSwgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNhcnBlbnRyeSwgMTBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5Db29raW5nLCAyMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRhbmNpbmcsIDVdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5GaW5lQXJ0LCA1XSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRm9yZ2VyeSwgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLldyaXRpbmcsIDVdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5TaW5naW5nLCA1XSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUGFpbnRpbmcsIDVdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5QaG90b2dyYXBoeSwgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlNjdWxwdGluZywgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNoYWluc2F3LCAxMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkhlYXZ5V2VhcG9ucywgMTBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5GbGFtZXRocm93ZXIsIDEwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTWFjaGluZUd1biwgMTBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5TdWJtYWNoaW5lR3VuLCAxMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFpcmNyYWZ0LCAwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQm9hdCwgNV0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFzdHJvbm9teSwgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkJpb2xvZ3ksIDBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb3RhbnksIDBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGVtaXN0cnksIDBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5DcnlwdG9ncmFwaHksIDBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbmdpbmVlcmluZywgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZvcmVuc2ljcywgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkdlb2xvZ3ksIDBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5NYXRoZW1hdGljcywgMTBdLFxyXG4gICAgW2NvbnN0YW50c18xLkNTa2lsbC5NZXRlb3JvbG9neSwgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBoYXJtYWN5LCAwXSxcclxuICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUGh5c2ljcywgMF0sXHJcbiAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlpvb2xvZ3ksIDBdLFxyXG5dKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q1NraWxsc0FzcGVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkNhcmRBc3BlY3QgPSB2b2lkIDA7XHJcbmNvbnN0IGNhcmRfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jYXJkXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IEFzcGVjdEZhY3RvcnlGbGFnXzEgPSByZXF1aXJlKFwiLi9Bc3BlY3RGYWN0b3J5RmxhZ1wiKTtcclxuY29uc3QgQmFzZUFzcGVjdF8xID0gcmVxdWlyZShcIi4vQmFzZUFzcGVjdFwiKTtcclxuLyoqXHJcbiAqIEFuIGFzcGVjdCB0aGF0IHByb3ZpZGVzIGEgQ2hhcmFjdGVyIHdpdGggdGhlIGZ1bmN0aW9uYWxpdHkgdG8gY3JlYXRlIGEgY2FyZFxyXG4gKiB0byByZW5kZXIgaXRzIGJhc2ljIGluZm9ybWF0aW9uIG9uIHRoZSBzaXRlLlxyXG4gKlxyXG4gKiBUbyBiZSByZW5kZXJlZCBjb3JyZWN0bHksIHRoZSBmb2xsb3dpbmcgYXNwZWN0cyBiZWluZyBzdXBwb3J0ZWQgYXJlXHJcbiAqIG1hbmRhdG9yeSAtXHJcbiAqICAxLiB7QGxpbmsgSUNvcmV9XHJcbiAqXHJcbiAqIEFuZCB0aGUgZm9sbG93aW5nIGFyZSBvcHRpb25hbCAtXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBDYXJkQXNwZWN0IGV4dGVuZHMgQmFzZUFzcGVjdF8xLkJhc2VBc3BlY3Qge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihjKSB7XHJcbiAgICAgICAgc3VwZXIoYyk7XHJcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJDb3JlID0gYztcclxuICAgICAgICB0aGlzLnRhZ3MgPSBbXTtcclxuICAgICAgICB0aGlzLl9zdW1tYXJ5ID0gKCkgPT4gXCI/Pz9cIjtcclxuICAgICAgICB0aGlzLl9zdG9yeSA9ICgpID0+IFwiXCI7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5wcmltYXJ5SW1hZ2VOYW1lID0gQ2FyZEFzcGVjdC5kZWZhdWx0UHJpbWFyeUltYWdlTmFtZTtcclxuICAgICAgICB0aGlzLmltYWdlcy5zZXQodGhpcy5wcmltYXJ5SW1hZ2VOYW1lLCB0aGlzLmNoYXJhY3RlckNvcmUuaW1nUGF0aCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldENhcmRJbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gYFtjaGFyYWN0ZXJ8JHt0aGlzLmlkfV1gO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZUNhcmQoZmxvYXRpbmcpIHtcclxuICAgICAgICBsZXQgdG9rZW5zSFRNTDtcclxuICAgICAgICBpZiAoIWZsb2F0aW5nICYmXHJcbiAgICAgICAgICAgICh0aGlzLmltYWdlcy5zaXplID4gMSB8fFxyXG4gICAgICAgICAgICAgICAgIXRoaXMuaW1hZ2VzLmhhcyhDYXJkQXNwZWN0LmRlZmF1bHRQcmltYXJ5SW1hZ2VOYW1lKSkpIHtcclxuICAgICAgICAgICAgY29uc3QgdG9rZW5JbWFnZXNIVE1MID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IHRva2VuVGFnc0hUTUwgPSBbXTtcclxuICAgICAgICAgICAgbGV0IGZpcnN0SW1hZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFt0YWcsIGltZ1BhdGhdIG9mIHRoaXMuaW1hZ2VzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgdG9rZW5JbWFnZXNIVE1MLnB1c2goYDxpbWcgc3JjPVwiJHtpbWdQYXRofVwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIltOVUxMXVwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidG9rZW5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9rZW49XCIke3RhZ31cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0ke2ZpcnN0SW1hZ2UgPyAnXCJcIicgOiAnXCJkaXNwbGF5OiBub25lO1wiJ30+YCk7XHJcbiAgICAgICAgICAgICAgICB0b2tlblRhZ3NIVE1MLnB1c2goYDxzcGFuIGNsYXNzPVwidG9rZW5fc2VsZWN0b3IgdGFnICR7Zmlyc3RJbWFnZSA/IFwidGFnLS1zZWxlY3RlZFwiIDogXCJcIn1cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2tlbj1cIiR7dGFnfVwiPiR7dGFnfTwvc3Bhbj5gKTtcclxuICAgICAgICAgICAgICAgIGZpcnN0SW1hZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b2tlbnNIVE1MID0gYDxkaXYgY2xhc3M9J3Rva2Vucyc+JHt0b2tlbkltYWdlc0hUTUwuam9pbihcIlwiKX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiR7dG9rZW5UYWdzSFRNTC5qb2luKFwiXCIpfTwvZGl2PmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0b2tlbnNIVE1MID0gYDxpbWcgc3JjPVwiJHt0aGlzLmltYWdlcy5nZXQodGhpcy5wcmltYXJ5SW1hZ2VOYW1lKX1cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidG9rZW5cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIltOVUxMXVwiPmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRvZG86IHBlcnNvbmFsaXR5IHRhZ3MuXHJcbiAgICAgICAgY29uc3QgbWV0YVRhZ3NIVE1MID0gdGhpcy50YWdzXHJcbiAgICAgICAgICAgIC5tYXAoeCA9PiBgPHNwYW4gY2xhc3M9XCJ0YWdcIj4ke3h9PC9zcGFuPmApXHJcbiAgICAgICAgICAgIC5qb2luKFwiXCIpO1xyXG4gICAgICAgIC8vIFtGdXR1cmVTY29wZV0gVXBkYXRlIHRoZSBjbGFzc2VzIHVzZWQgaGVyZSB0byBtb3JlIG9yZ2FuaXplZCB2YXJpYW50cy5cclxuICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJjaGFyYWN0ZXJfY2FyZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgIGRhdGEtaW5kZXgta2V5PVwiJHt0aGlzLmdldENhcmRJbmRleCgpfVwiXHJcbiAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9rZW5fc3BhY2VcIj4ke3Rva2Vuc0hUTUx9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGg1ICBjbGFzcz1cIm5hbWVcIj4ke3RoaXMuY2hhcmFjdGVyQ29yZS5uYW1lfTwvaDU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWdzXCI+JHttZXRhVGFnc0hUTUx9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxzXCI+JHt0aGlzLl9zdG9yeSgpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VtbWFyeVwiPiR7dGhpcy5fc3VtbWFyeSgpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgc2V0IHN1bW1hcnkocykge1xyXG4gICAgICAgIHRoaXMuX3N1bW1hcnkgPSBzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBzZXQgc3Rvcnkocykge1xyXG4gICAgICAgIHRoaXMuX3N0b3J5ID0gcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgc2V0IHByaW1hcnlJbWFnZVRpdGxlKHMpIHtcclxuICAgICAgICAvLyBXaG8ga25vd3MsIHdlIG1heSBzb21lZGF5IGFkZCBzdXBwb3J0IHRvIGNoYW5nZSB0aGUgcHJpbWFyeSBpbWFnZS5cclxuICAgICAgICB0aGlzLmltYWdlcy5zZXQocywgdGhpcy5pbWFnZXMuZ2V0KENhcmRBc3BlY3QuZGVmYXVsdFByaW1hcnlJbWFnZU5hbWUpKTtcclxuICAgICAgICB0aGlzLnByaW1hcnlJbWFnZU5hbWUgPSBzO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzLmRlbGV0ZShDYXJkQXNwZWN0LmRlZmF1bHRQcmltYXJ5SW1hZ2VOYW1lKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgYWRkQWx0ZXJuYXRlSW1hZ2UodGl0bGUsIGltZ1BhdGgpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXMuaGFzKHRpdGxlKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEltYWdlIG92ZXJyaWRlIGZvciAke3RpdGxlfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmltYWdlcy5zZXQodGl0bGUsIGAuL2Fzc2V0cy9pbWFnZXMvJHtpbWdQYXRofWApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBhZGRDYXJkVGFnKHRhZykge1xyXG4gICAgICAgIHRoaXMudGFncy5wdXNoKHRhZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUxpbmsoZGlzcGxheVRleHQpIHtcclxuICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiY2FyZF9saW5rXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLWluZGV4LWtleT1cIiR7dGhpcy5nZXRDYXJkSW5kZXgoKX1cIj4ke2Rpc3BsYXlUZXh0ID8gZGlzcGxheVRleHQgOiB0aGlzLmNoYXJhY3RlckNvcmUubmFtZX08L3NwYW4+YDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVQcmltYXJ5VG9rZW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8aW1nIHNyYz1cIiR7dGhpcy5jaGFyYWN0ZXJDb3JlLmltZ1BhdGh9XCIgXHJcbiAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidG9rZW5cIiBcclxuICAgICAgICAgICAgICAgICAgICAgYWx0PVwiW05VTExdXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgIGRhdGEtaW5kZXgta2V5PVwiJHt0aGlzLmdldENhcmRJbmRleCgpfVwiPmA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGZpbmFsaXplKCkge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlKEFzcGVjdEZhY3RvcnlGbGFnXzEuQXNwZWN0RmFjdG9yeUZsYWcuQ2FyZENhbXBhaWduU2V0KTtcclxuICAgICAgICBzdXBlci5maW5hbGl6ZSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVnaXN0ZXJpbmcgY2FyZCBmb3JcIiwgbnBjSW5kZXhfMS5OcGNJRFt0aGlzLmlkXSk7XHJcbiAgICAgICAgJChgI3Rva2VucyAudG9rZW5fc3BhY2VbZGF0YS1jYW1wYWlnbj0nJHt0aGlzLmNhbXBhaWdufSddW2RhdGEtYXJjPScke3RoaXMuYXJjfSddYCkuYXBwZW5kKCQodGhpcy5nZW5lcmF0ZVByaW1hcnlUb2tlbigpKSk7XHJcbiAgICAgICAgY2FyZF8xLkNhcmQucmVnaXN0ZXIodGhpcyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIHNldENhbXBhaWduQXJjKGMsIGEpIHtcclxuICAgICAgICB0aGlzLnNldHVwU2VudGluZWwoQXNwZWN0RmFjdG9yeUZsYWdfMS5Bc3BlY3RGYWN0b3J5RmxhZy5DYXJkQ2FtcGFpZ25TZXQpO1xyXG4gICAgICAgIHRoaXMuY2FtcGFpZ24gPSBjO1xyXG4gICAgICAgIHRoaXMuYXJjID0gYTtcclxuICAgICAgICB0aGlzLnRhZ3MucHVzaChgQ2FtcGFpZ24gJHtjfSA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+QXJjICR7YX08L3NwYW4+YCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldHVwIHJ1bnRpbWUgaGFuZGxpbmcgY29tbW9uIHRvIGFsbCBjYXJkcy5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHNldHVwQ2FyZExvZ2ljKCkge1xyXG4gICAgICAgICQoXCIuY2VudHJhbF92aWV3XCIpLm9uKFwiY2xpY2tcIiwgXCIudGFnXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5zaWJsaW5ncyhcIi50YWdcIikucmVtb3ZlQ2xhc3MoXCJ0YWctLXNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwidGFnLS1zZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSAkKHRoaXMpLmRhdGEoXCJ0b2tlblwiKTtcclxuICAgICAgICAgICAgY29uc3QgJHRva2VucyA9ICQodGhpcykucGFyZW50KCkuc2libGluZ3MoXCIudG9rZW5zXCIpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygkdG9rZW5zLmZpbmQoYC50b2tlbltkYXRhLXRva2VuPVwiJHt0b2tlbn1cIl1gKSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRva2VuKTtcclxuICAgICAgICAgICAgJHRva2Vucy5maW5kKFwiLnRva2VuXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgJHRva2Vucy5maW5kKGAudG9rZW5bZGF0YS10b2tlbj1cIiR7dG9rZW59XCJdYCkuc2hvdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ2FyZEFzcGVjdCA9IENhcmRBc3BlY3Q7XHJcbkNhcmRBc3BlY3QuZGVmYXVsdFByaW1hcnlJbWFnZU5hbWUgPSBcImRlZmF1bHRcIjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FyZEFzcGVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkNvbWJhdEFzcGVjdCA9IHZvaWQgMDtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vY29tbW9uL2NvbW1vblwiKTtcclxuY29uc3QgRGljZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL3JvbGxpbmcvRGljZVwiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQmFzZUFzcGVjdF8xID0gcmVxdWlyZShcIi4vQmFzZUFzcGVjdFwiKTtcclxuLyoqXHJcbiAqIEFzcGVjdCBoYW5kbGluZyB0aGUge0BsaW5rIElDb21iYXR9IHNlY3Rpb24gb2YgYSBjaGFyYWN0ZXIuXHJcbiAqXHJcbiAqIHRvZG86IGZsYWdzIHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cclxuICovXHJcbmNsYXNzIENvbWJhdEFzcGVjdCBleHRlbmRzIEJhc2VBc3BlY3RfMS5CYXNlQXNwZWN0IHtcclxuICAgIGNvbnN0cnVjdG9yKGMpIHtcclxuICAgICAgICBzdXBlcihjKTtcclxuICAgICAgICB0aGlzLnN0YXRzQXNwZWN0ID0gYztcclxuICAgICAgICB0aGlzLnNraWxsc0FzcGVjdCA9IGM7XHJcbiAgICAgICAgdGhpcy5iYXNlQUNTb3VyY2VzID0gW107XHJcbiAgICAgICAgdGhpcy5hY0JvbnVzZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmNsYXNzZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5faHBEaWNlID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuX2JvbnVzSFAgPSAwO1xyXG4gICAgICAgIHRoaXMuX3NwZWVkcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLl9zZW5zZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5fcmVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuX3NhdmVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuX2NvbmRpdGlvbkltbXVuaXRpZXMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgdGhpcy5fYWN0aW9ucyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYmlvSHBEaWNlID0gW107XHJcbiAgICB9XHJcbiAgICBhZGRCaW9IcERpY2UoY291bnQsIGRpY2UpIHtcclxuICAgICAgICB0aGlzLmJpb0hwRGljZS5wdXNoKFtjb3VudCwgZGljZV0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBkYyhzdGF0KSB7XHJcbiAgICAgICAgcmV0dXJuIDggKyB0aGlzLnN0YXRzQXNwZWN0Lm1vZChzdGF0KSArIHRoaXMuc3RhdHNBc3BlY3QucGIubW9kKCk7XHJcbiAgICB9XHJcbiAgICBzZXRNYWdpY2FsQXJtb3IoYXJtb3JBQykge1xyXG4gICAgICAgIHRoaXMuYmFzZUFDU291cmNlcy5wdXNoKGFybW9yQUMgKyB0aGlzLnN0YXRzQXNwZWN0Lm1vZChjb25zdGFudHNfMS5EU3RhdC5EZXgpKTtcclxuICAgIH1cclxuICAgIHNldExpZ2h0QXJtb3IoYXJtb3JBQykge1xyXG4gICAgICAgIHRoaXMuYmFzZUFDU291cmNlcy5wdXNoKGFybW9yQUMgKyB0aGlzLnN0YXRzQXNwZWN0Lm1vZChjb25zdGFudHNfMS5EU3RhdC5EZXgpKTtcclxuICAgIH1cclxuICAgIHNldE1lZGl1bUFybW9yKGFybW9yQUMpIHtcclxuICAgICAgICB0aGlzLmJhc2VBQ1NvdXJjZXMucHVzaChhcm1vckFDICsgTWF0aC5taW4oMiwgdGhpcy5zdGF0c0FzcGVjdC5tb2QoY29uc3RhbnRzXzEuRFN0YXQuRGV4KSkpO1xyXG4gICAgfVxyXG4gICAgc2V0SGVhdnlBcm1vcihhcm1vckFDKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlQUNTb3VyY2VzLnB1c2goYXJtb3JBQyk7XHJcbiAgICB9XHJcbiAgICBhZGRBY0JvbnVzKGJvbnVzKSB7XHJcbiAgICAgICAgdGhpcy5hY0JvbnVzZXMucHVzaChib251cyk7XHJcbiAgICB9XHJcbiAgICBzZXQgYmxhZGVTaW5nZXIodmFsKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNsYXNzZXMuaGFzKGNvbnN0YW50c18xLkFkdmVudHVyZXJDbGFzcy5XaXphcmQpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkJsYWRlU2luZ2VyIG9uIG5vbiB3aXphcmQ6XCIsIG5wY0luZGV4XzEuTnBjSURbdGhpcy5pZF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJhc2VBQ1NvdXJjZXMucHVzaCh0aGlzLnN0YXRzQXNwZWN0Lm1vZChjb25zdGFudHNfMS5EU3RhdC5EZXgpICtcclxuICAgICAgICAgICAgdGhpcy5zdGF0c0FzcGVjdC5tb2QoY29uc3RhbnRzXzEuRFN0YXQuSW50KSArIDEwKTtcclxuICAgIH1cclxuICAgIGFkZENsYXNzTGV2ZWxzKGtsYXNzLCBsZXZlbHMpIHtcclxuICAgICAgICBpZiAoa2xhc3MgPT0gY29uc3RhbnRzXzEuQWR2ZW50dXJlckNsYXNzLk1vbmspIHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlQUNTb3VyY2VzLnB1c2godGhpcy5zdGF0c0FzcGVjdC5tb2QoY29uc3RhbnRzXzEuRFN0YXQuRGV4KSArXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRzQXNwZWN0Lm1vZChjb25zdGFudHNfMS5EU3RhdC5XaXMpICsgMTApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrbGFzcyA9PSBjb25zdGFudHNfMS5BZHZlbnR1cmVyQ2xhc3MuQmFyYmFyaWFuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZUFDU291cmNlcy5wdXNoKHRoaXMuc3RhdHNBc3BlY3QubW9kKGNvbnN0YW50c18xLkRTdGF0LkRleCkgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c0FzcGVjdC5tb2QoY29uc3RhbnRzXzEuRFN0YXQuQ29uKSArIDEwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGFzc2VzLnNldChrbGFzcywgKHRoaXMuY2xhc3Nlcy5oYXMoa2xhc3MpID8gdGhpcy5jbGFzc2VzLmdldChrbGFzcykgOiAwKSArIGxldmVscyk7XHJcbiAgICB9XHJcbiAgICBnZXQgYm9udXNIUCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYm9udXNIUDtcclxuICAgIH1cclxuICAgIHNldCBib251c0hQKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2JvbnVzSFAgPSB2YWw7XHJcbiAgICB9XHJcbiAgICBjb21wdXRlSFAoKSB7XHJcbiAgICAgICAgdGhpcy5faHBEaWNlLmNsZWFyKCk7XHJcbiAgICAgICAgY29uc3QgY29uc3RQZXJEaWNlID0gdGhpcy5zdGF0c0FzcGVjdC5tb2QoY29uc3RhbnRzXzEuRFN0YXQuQ29uKTtcclxuICAgICAgICAvLyBBZGQgYWxsIG5vbi1EMSBIUCBkaWNlIGZpcnN0LlxyXG4gICAgICAgIGZvciAoY29uc3QgW2tsYXNzLCBsZXZlbHNdIG9mIHRoaXMuY2xhc3Nlcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgaWYgKGxldmVscyA8IDEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFBQUFBQUFSUlJSUlJSUlJSR0hcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2hwRGljZS5zaXplID09IDApIHtcclxuICAgICAgICAgICAgICAgICgwLCBjb21tb25fMS51cGRhdGVNYXApKHRoaXMuX2hwRGljZSwgRGljZV8xLkQxLCBjb25zdGFudHNfMS5DbGFzc0hpdERpY2UuZ2V0KGtsYXNzKS5zaWRlcyArIGNvbnN0UGVyRGljZSk7XHJcbiAgICAgICAgICAgICAgICAoMCwgY29tbW9uXzEudXBkYXRlTWFwKSh0aGlzLl9ocERpY2UsIGNvbnN0YW50c18xLkNsYXNzSGl0RGljZS5nZXQoa2xhc3MpLCBsZXZlbHMgLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICgwLCBjb21tb25fMS51cGRhdGVNYXApKHRoaXMuX2hwRGljZSwgY29uc3RhbnRzXzEuQ2xhc3NIaXREaWNlLmdldChrbGFzcyksIGxldmVscyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBbY291bnQsIGRpY2VdIG9mIHRoaXMuYmlvSHBEaWNlKSB7XHJcbiAgICAgICAgICAgICgwLCBjb21tb25fMS51cGRhdGVNYXApKHRoaXMuX2hwRGljZSwgZGljZSwgY291bnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBOb3cgYWRkIGNvbnN0IGZvciBhbGwgdGhlIGRpY2UuXHJcbiAgICAgICAgbGV0IHRvdGFsRGljZSA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBbZGllLCBjb3VudF0gb2YgdGhpcy5faHBEaWNlLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoZGllLnNpZGVzID09IDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvdGFsRGljZSArPSBjb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgKDAsIGNvbW1vbl8xLnVwZGF0ZU1hcCkodGhpcy5faHBEaWNlLCBEaWNlXzEuRDEsIHRvdGFsRGljZSAqIGNvbnN0UGVyRGljZSArIHRoaXMuX2JvbnVzSFApO1xyXG4gICAgICAgIC8vIE5vdyBjb21wdXRlIGV4cGVjdGVkIEhQLlxyXG4gICAgICAgIHRoaXMuX2hwID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IFtkaWUsIGNvdW50XSBvZiB0aGlzLl9ocERpY2UuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hwICs9IGNvdW50ICogZGllLkU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2hwID0gTWF0aC5yb3VuZCh0aGlzLl9ocCk7XHJcbiAgICB9XHJcbiAgICBzZXRTYXZlKHNhdmUsIHByb2ZpY2llbmN5ID0gY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCBtb2QgPSAwKSB7XHJcbiAgICAgICAgdGhpcy5fc2F2ZXMuc2V0KHNhdmUsIFtwcm9maWNpZW5jeSwgbW9kXSk7XHJcbiAgICB9XHJcbiAgICBzZXRTcGVlZChzcGVlZFR5cGUsIHZhbCkge1xyXG4gICAgICAgIHRoaXMuX3NwZWVkcy5zZXQoc3BlZWRUeXBlLCB2YWwpO1xyXG4gICAgfVxyXG4gICAgc2V0U2Vuc2Uoc2Vuc2VUeXBlLCB2YWwpIHtcclxuICAgICAgICB0aGlzLl9zZW5zZXMuc2V0KHNlbnNlVHlwZSwgdmFsKTtcclxuICAgIH1cclxuICAgIHNldFJlcyhkYW1hZ2VUeXBlLCB2YWwpIHtcclxuICAgICAgICB0aGlzLl9yZXMuc2V0KGRhbWFnZVR5cGUsIHZhbCk7XHJcbiAgICB9XHJcbiAgICBhZGRDb25kaXRpb25JbW11bml0eShjKSB7XHJcbiAgICAgICAgdGhpcy5fY29uZGl0aW9uSW1tdW5pdGllcy5hZGQoYyk7XHJcbiAgICB9XHJcbiAgICBhZGRBY3Rpb24oYSkge1xyXG4gICAgICAgIHRoaXMuX2FjdGlvbnMucHVzaChhKTtcclxuICAgIH1cclxuICAgIGdldCBhYygpIHtcclxuICAgICAgICAvLyBTb21lZGF5IHdoZW4gSSBkaXNwbGF5IGFybW9yIG5hbWVzIChjb21wdXRlZCksIEkgbWF5IG1ha2UgYXJtb3JzIG1vcmVcclxuICAgICAgICAvLyB0aGFuIGp1c3QgbnVtYmVycy4gQWxzbywgbWlnaHQgYmUgcHJlZmVyYWJsZSB0byBnbyBmb3IgYSBsb3dlciBBQyBmb3JcclxuICAgICAgICAvLyBvdGhlciBidWZmcyBsYXRlci5cclxuICAgICAgICBsZXQgYmVzdEJhc2VBQyA9IDEwICsgdGhpcy5zdGF0c0FzcGVjdC5tb2QoY29uc3RhbnRzXzEuRFN0YXQuRGV4KTtcclxuICAgICAgICBmb3IgKGNvbnN0IGFjIG9mIHRoaXMuYmFzZUFDU291cmNlcykge1xyXG4gICAgICAgICAgICBpZiAoYWMgPCBiZXN0QmFzZUFDKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmVzdEJhc2VBQyA9IGFjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdG90YWxBQyA9IGJlc3RCYXNlQUM7XHJcbiAgICAgICAgZm9yIChjb25zdCBhY0JvbnVzIG9mIHRoaXMuYWNCb251c2VzKSB7XHJcbiAgICAgICAgICAgIHRvdGFsQUMgKz0gYWNCb251cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvdGFsQUM7XHJcbiAgICB9XHJcbiAgICBnZXQgc3RhdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHNBc3BlY3Quc3RhdHM7XHJcbiAgICB9XHJcbiAgICBnZXQgcGIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHNBc3BlY3QucGI7XHJcbiAgICB9XHJcbiAgICBnZXQgaHBEaWNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ocERpY2U7XHJcbiAgICB9XHJcbiAgICBnZXQgaHAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hwO1xyXG4gICAgfVxyXG4gICAgZ2V0IHNwZWVkcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWRzO1xyXG4gICAgfVxyXG4gICAgZ2V0IHNlbnNlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2Vuc2VzO1xyXG4gICAgfVxyXG4gICAgZ2V0IHNhdmVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zYXZlcztcclxuICAgIH1cclxuICAgIGdldCBwYXNzaXZlUGVyY2VwdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5za2lsbHNBc3BlY3QuZ2V0U2tpbGxNb2QoY29uc3RhbnRzXzEuRFNraWxsLlBlcmNlcHRpb24pWzBdICsgMTA7XHJcbiAgICB9XHJcbiAgICBnZXQgZGFtYWdlUmVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXM7XHJcbiAgICB9XHJcbiAgICBnZXQgY29uZGl0aW9uSW1tdW5pdGllcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZGl0aW9uSW1tdW5pdGllcztcclxuICAgIH1cclxuICAgIGdldCBhY3Rpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25zO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ29tYmF0QXNwZWN0ID0gQ29tYmF0QXNwZWN0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db21iYXRBc3BlY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Db3JlQXNwZWN0ID0gdm9pZCAwO1xyXG5jb25zdCBBc3BlY3RGYWN0b3J5RmxhZ18xID0gcmVxdWlyZShcIi4vQXNwZWN0RmFjdG9yeUZsYWdcIik7XHJcbmNvbnN0IEJhc2VBc3BlY3RfMSA9IHJlcXVpcmUoXCIuL0Jhc2VBc3BlY3RcIik7XHJcbi8qKlxyXG4gKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIGFzcGVjdCBwcm92aWRpbmcgdGhlIGNvcmUgZnVuY3Rpb25hbGl0aWVzLlxyXG4gKi9cclxuY2xhc3MgQ29yZUFzcGVjdCBleHRlbmRzIEJhc2VBc3BlY3RfMS5CYXNlQXNwZWN0IHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYykge1xyXG4gICAgICAgIHN1cGVyKGMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBzZXQgbmFtZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuc2V0dXBTZW50aW5lbChBc3BlY3RGYWN0b3J5RmxhZ18xLkFzcGVjdEZhY3RvcnlGbGFnLkNvcmVOYW1lU2V0dXApO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IG5hbWUoKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmUoQXNwZWN0RmFjdG9yeUZsYWdfMS5Bc3BlY3RGYWN0b3J5RmxhZy5Db3JlTmFtZVNldHVwKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgc2V0IGltZ1BhdGgodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnNldHVwU2VudGluZWwoQXNwZWN0RmFjdG9yeUZsYWdfMS5Bc3BlY3RGYWN0b3J5RmxhZy5Db3JlSW1nUGF0aFNldHVwKTtcclxuICAgICAgICB0aGlzLl9pbWdQYXRoID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCBpbWdQYXRoKCkge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlKEFzcGVjdEZhY3RvcnlGbGFnXzEuQXNwZWN0RmFjdG9yeUZsYWcuQ29yZUltZ1BhdGhTZXR1cCk7XHJcbiAgICAgICAgcmV0dXJuIGAuL2Fzc2V0cy9pbWFnZXMvJHt0aGlzLl9pbWdQYXRofWA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Db3JlQXNwZWN0ID0gQ29yZUFzcGVjdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29yZUFzcGVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkRTa2lsbHNBc3BlY3QgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBSYXJpdHlfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9kYXRhL1Jhcml0eVwiKTtcclxuY29uc3QgQXNwZWN0RmFjdG9yeUZsYWdfMSA9IHJlcXVpcmUoXCIuL0FzcGVjdEZhY3RvcnlGbGFnXCIpO1xyXG5jb25zdCBCYXNlQXNwZWN0XzEgPSByZXF1aXJlKFwiLi9CYXNlQXNwZWN0XCIpO1xyXG4vKipcclxuICogRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBhIEQmRCBza2lsbHMgYXNwZWN0LiBSZWxpZXMgb24gdGhlIFN0YXRzIGFuZFxyXG4gKiBQcm9maWNpZW5jeSBhc3BlY3RzIHRvIHdvcmsuXHJcbiAqL1xyXG5jbGFzcyBEU2tpbGxzQXNwZWN0IGV4dGVuZHMgQmFzZUFzcGVjdF8xLkJhc2VBc3BlY3Qge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDVE9SLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihjKSB7XHJcbiAgICAgICAgc3VwZXIoYyk7XHJcbiAgICAgICAgdGhpcy5jID0gYztcclxuICAgICAgICB0aGlzLmRTdGF0cyA9IGM7XHJcbiAgICAgICAgdGhpcy5za2lsbHMgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIHNldFNraWxsUHJvZmljaWVuY3koc2tpbGwsIHZpc2liaWxpdHksIHByb2ZpY2llbmN5ID0gY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCBtb2QgPSAwKSB7XHJcbiAgICAgICAgdGhpcy5idWlsZFNlbnRpbmVsKEFzcGVjdEZhY3RvcnlGbGFnXzEuQXNwZWN0RmFjdG9yeUZsYWcuRFNraWxsc1NraWxsc0RlY2xhcmVkLCBBc3BlY3RGYWN0b3J5RmxhZ18xLkFzcGVjdEZhY3RvcnlGbGFnLkRTa2lsbHNTa2lsbHNGaW5hbGl6ZWQpO1xyXG4gICAgICAgIHRoaXMuc2tpbGxzLnNldChza2lsbCwgW3Byb2ZpY2llbmN5LCBtb2QsIHZpc2liaWxpdHldKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0U2tpbGxNb2Qoc2tpbGwsIHByb2ZPdmVycmlkZSA9IG51bGwsIHRlbnRhdGl2ZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKCF0ZW50YXRpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbnN1cmUoQXNwZWN0RmFjdG9yeUZsYWdfMS5Bc3BlY3RGYWN0b3J5RmxhZy5EU2tpbGxzU2tpbGxzRmluYWxpemVkLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRmlyc3QgZ2V0IHRoZSBjb250cmlidXRpb24gZnJvbSB0aGUgc3RhdC5cclxuICAgICAgICBsZXQgc3RhdE1vZCA9IHRoaXMuZFN0YXRzLm1vZChjb25zdGFudHNfMS5TdGF0Rm9yU2tpbGwuZ2V0KHNraWxsKSk7XHJcbiAgICAgICAgLy8gTm93IGZpbmQgdGhlIHByb2ZpY2llbmN5IGxldmVsIHRvIGFwcGx5LlxyXG4gICAgICAgIGxldCBwcm9mO1xyXG4gICAgICAgIGxldCBtb2Q7XHJcbiAgICAgICAgbGV0IHZpcztcclxuICAgICAgICBpZiAodGhpcy5za2lsbHMuaGFzKHNraWxsKSkge1xyXG4gICAgICAgICAgICBbcHJvZiwgbW9kLCB2aXNdID0gdGhpcy5za2lsbHMuZ2V0KHNraWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5za2lsbHMuaGFzKGNvbnN0YW50c18xLkRTa2lsbC5fQUxMKSkge1xyXG4gICAgICAgICAgICBbcHJvZiwgbW9kLCB2aXNdID0gdGhpcy5za2lsbHMuZ2V0KGNvbnN0YW50c18xLkRTa2lsbC5fQUxMKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIFtwcm9mLCBtb2QsIHZpc10gPSBbY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Ob25lLCAwLCBjb25zdGFudHNfMS5TaG93bl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9mT3ZlcnJpZGUpIHtcclxuICAgICAgICAgICAgcHJvZiA9IHByb2ZPdmVycmlkZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtzdGF0TW9kICsgdGhpcy5kU3RhdHMucGIubW9kKHByb2YpICsgbW9kLCB2aXNdO1xyXG4gICAgICAgIC8vIGlmICghdGhpcy5za2lsbHMuaGFzKHNraWxsKSkge1xyXG4gICAgICAgIC8vICAgICBwcm9mID0gUHJvZmljaWVuY3lMZXZlbC5Ob25lO1xyXG4gICAgICAgIC8vICAgICBtb2QgPSAwO1xyXG4gICAgICAgIC8vICAgICB2aXMgPSBTaG93bjtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIFtwcm9mLCBtb2QsIHZpc10gPSB0aGlzLnNraWxscy5nZXQoc2tpbGwpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBpZiAocHJvZk92ZXJyaWRlKSB7XHJcbiAgICAgICAgLy8gICAgIHByb2YgPSBwcm9mT3ZlcnJpZGU7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGlmICh0aGlzLnNraWxscy5oYXMoRFNraWxsLl9BTEwpKSB7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IFttaW5Qcm9mLCBtaW5Nb2QsIF9dID0gdGhpcy5za2lsbHMuZ2V0KERTa2lsbC5fQUxMKTtcclxuICAgICAgICAvLyAgICAgaWYgKHByb2YgPCBtaW5Qcm9mKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBwcm9mID0gbWluUHJvZjtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICBpZiAobW9kIDwgbWluTW9kKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBtb2QgPSBtaW5Nb2Q7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyByZXR1cm4gW3RoaXMuZFN0YXRzLm1vZChTdGF0Rm9yU2tpbGwuZ2V0KHNraWxsKSkgK1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5kU3RhdHMucGIubW9kKHByb2YpICtcclxuICAgICAgICAvLyAgICAgICAgIG1vZCxcclxuICAgICAgICAvLyAgICAgICAgIHZpc1xyXG4gICAgICAgIC8vIF07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGZpbmFsaXplU2tpbGxzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dXBTZW50aW5lbChBc3BlY3RGYWN0b3J5RmxhZ18xLkFzcGVjdEZhY3RvcnlGbGFnLkRTa2lsbHNTa2lsbHNGaW5hbGl6ZWQpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHVwZ3JhZGVkU2tpbGxzKCkge1xyXG4gICAgICAgIGNvbnN0IHVwZ3JhZGVkU2tpbGxzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnNraWxscy5oYXMoY29uc3RhbnRzXzEuRFNraWxsLl9BTEwpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFttaW5Qcm9mLCBtaW5Nb2QsIGFsbFZpc10gPSB0aGlzLnNraWxscy5nZXQoY29uc3RhbnRzXzEuRFNraWxsLl9BTEwpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNraWxsIG9mIFtjb25zdGFudHNfMS5EU2tpbGwuQWNyb2JhdGljcyxcclxuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLkRTa2lsbC5BbmltYWxIYW5kbGluZyxcclxuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLkRTa2lsbC5BcmNhbmEsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU2tpbGwuQXRobGV0aWNzLFxyXG4gICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuRFNraWxsLkRlY2VwdGlvbixcclxuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLkRTa2lsbC5IaXN0b3J5LFxyXG4gICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuRFNraWxsLkluc2lnaHQsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU2tpbGwuSW50aW1pZGF0aW9uLFxyXG4gICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuRFNraWxsLkludmVzdGlnYXRpb24sXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU2tpbGwuTWVkaWNpbmUsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU2tpbGwuTmF0dXJlLFxyXG4gICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuRFNraWxsLlBlcmNlcHRpb24sXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU2tpbGwuUGVyZm9ybWFuY2UsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU2tpbGwuUGVyc3Vhc2lvbixcclxuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLkRTa2lsbC5SZWxpZ2lvbixcclxuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLkRTa2lsbC5TbGlnaHRPZkhhbmQsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU2tpbGwuU3RlYWx0aCxcclxuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLkRTa2lsbC5TdXJ2aXZhbF0pIHtcclxuICAgICAgICAgICAgICAgIHVwZ3JhZGVkU2tpbGxzLnNldChza2lsbCwgW3RoaXMuZFN0YXRzLm1vZChjb25zdGFudHNfMS5TdGF0Rm9yU2tpbGwuZ2V0KHNraWxsKSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRTdGF0cy5wYi5tb2QobWluUHJvZikgKyBtaW5Nb2QsXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsVmlzXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBbc2tpbGwsIFtwYiwgbW9kLCB2aXNdXSBvZiB0aGlzLnNraWxscy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgaWYgKHNraWxsID09IGNvbnN0YW50c18xLkRTa2lsbC5fQUxMKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1cGdyYWRlZFNraWxscy5zZXQoc2tpbGwsIFt0aGlzLmRTdGF0cy5tb2QoY29uc3RhbnRzXzEuU3RhdEZvclNraWxsLmdldChza2lsbCkpICtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRTdGF0cy5wYi5tb2QocGIpICsgbW9kLCB2aXNdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVwZ3JhZGVkU2tpbGxzO1xyXG4gICAgfVxyXG4gICAgZ2V0IGRTa2lsbFJhdGluZ3MoKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmUoQXNwZWN0RmFjdG9yeUZsYWdfMS5Bc3BlY3RGYWN0b3J5RmxhZy5EU2tpbGxzU2tpbGxzRmluYWxpemVkLCB0cnVlKTtcclxuICAgICAgICBjb25zdCByYXRpbmdzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAoY29uc3QgW3NraWxsLCBbdmFsdWUsIF9dXSBvZiB0aGlzLnVwZ3JhZGVkU2tpbGxzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICByYXRpbmdzLnNldChza2lsbCwgRFNraWxsc0FzcGVjdC5nZXRSYXRpbmdGb3JTa2lsbE1vZGlmaWVyKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByYXRpbmdzO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldFJhdGluZ0ZvclNraWxsTW9kaWZpZXIobW9kKSB7XHJcbiAgICAgICAgaWYgKG1vZCA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJhcml0eV8xLlJhdGluZy5GO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9kIDw9IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJhcml0eV8xLlJhdGluZy5FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9kIDw9IDQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJhcml0eV8xLlJhdGluZy5EO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9kIDw9IDcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJhcml0eV8xLlJhdGluZy5DO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9kIDw9IDEwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSYXJpdHlfMS5SYXRpbmcuQjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vZCA8PSAxNSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmFyaXR5XzEuUmF0aW5nLkE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtb2QgPD0gMjApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJhcml0eV8xLlJhdGluZy5TO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9kIDw9IDI2KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSYXJpdHlfMS5SYXRpbmcuU1M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBSYXJpdHlfMS5SYXRpbmcuU1NTO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRFNraWxsc0FzcGVjdCA9IERTa2lsbHNBc3BlY3Q7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURTa2lsbHNBc3BlY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5EU3RhdHNBc3BlY3QgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBBY3Rpb25Db250ZXh0XzEgPSByZXF1aXJlKFwiLi4vLi4vYWN0aW9uL0FjdGlvbkNvbnRleHRcIik7XHJcbmNvbnN0IEFzcGVjdEZhY3RvcnlGbGFnXzEgPSByZXF1aXJlKFwiLi9Bc3BlY3RGYWN0b3J5RmxhZ1wiKTtcclxuY29uc3QgQmFzZUFzcGVjdF8xID0gcmVxdWlyZShcIi4vQmFzZUFzcGVjdFwiKTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBJRFN0YXRzfS5cclxuICovXHJcbmNsYXNzIERTdGF0c0FzcGVjdCBleHRlbmRzIEJhc2VBc3BlY3RfMS5CYXNlQXNwZWN0IHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYykge1xyXG4gICAgICAgIHN1cGVyKGMpO1xyXG4gICAgICAgIHRoaXMuX3N0YXRzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuX3N0YXRWaXNpYmlsaXRpZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5fcGIgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBpbml0aWFsaXplU3RhdHMoc3RyLCBkZXgsIGNvbiwgaW50LCB3aXMsIGNoYSkge1xyXG4gICAgICAgIHRoaXMuc2V0dXBTZW50aW5lbChBc3BlY3RGYWN0b3J5RmxhZ18xLkFzcGVjdEZhY3RvcnlGbGFnLkRTdGF0c1N0YXRzU2V0dXApO1xyXG4gICAgICAgIHRoaXMuX3N0YXRzLnNldChjb25zdGFudHNfMS5EU3RhdC5TdHIsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoc3RyKSk7XHJcbiAgICAgICAgdGhpcy5fc3RhdHMuc2V0KGNvbnN0YW50c18xLkRTdGF0LkRleCwgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZShkZXgpKTtcclxuICAgICAgICB0aGlzLl9zdGF0cy5zZXQoY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKGNvbikpO1xyXG4gICAgICAgIHRoaXMuX3N0YXRzLnNldChjb25zdGFudHNfMS5EU3RhdC5JbnQsIG5ldyBjb25zdGFudHNfMS5TdGF0VmFsdWUoaW50KSk7XHJcbiAgICAgICAgdGhpcy5fc3RhdHMuc2V0KGNvbnN0YW50c18xLkRTdGF0LldpcywgbmV3IGNvbnN0YW50c18xLlN0YXRWYWx1ZSh3aXMpKTtcclxuICAgICAgICB0aGlzLl9zdGF0cy5zZXQoY29uc3RhbnRzXzEuRFN0YXQuQ2hhLCBuZXcgY29uc3RhbnRzXzEuU3RhdFZhbHVlKGNoYSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBzZXRWaXNpYmlsaXR5TGV2ZWwodmlzLCBzdGF0ID0gbnVsbCkge1xyXG4gICAgICAgIGlmIChzdGF0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzdGF0IG9mIFtjb25zdGFudHNfMS5EU3RhdC5TdHIsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5EZXgsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5Db24sXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5JbnQsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5XaXMsXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5DaGEsXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdFZpc2liaWxpdGllcy5zZXQoc3RhdCwgdmlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdFZpc2liaWxpdGllcy5zZXQoc3RhdCwgdmlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCBzdGF0cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCBwYigpIHtcclxuICAgICAgICB0aGlzLmVuc3VyZShBc3BlY3RGYWN0b3J5RmxhZ18xLkFzcGVjdEZhY3RvcnlGbGFnLkRTdGF0c1Byb2ZpY2llbmN5RGVjbGFyZWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgc2V0IHBiKHZhbCkge1xyXG4gICAgICAgIHRoaXMuYnVpbGRTZW50aW5lbChBc3BlY3RGYWN0b3J5RmxhZ18xLkFzcGVjdEZhY3RvcnlGbGFnLkRTdGF0c1Byb2ZpY2llbmN5RGVjbGFyZWQsIEFzcGVjdEZhY3RvcnlGbGFnXzEuQXNwZWN0RmFjdG9yeUZsYWcuRFN0YXRzUHJvZmljaWVuY3lGaW5hbGl6ZWQpO1xyXG4gICAgICAgIHRoaXMuX3BiID0gdmFsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBnZXQgYWN0aW9uQ29udGVudEFQSSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFjdGlvbkNvbnRleHRfMS5BY3Rpb25Db250ZXh0KHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBtb2Qoc3RhdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0cy5nZXQoc3RhdCkubW9kO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICB2aXNpYmlsaXR5KHN0YXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdFZpc2liaWxpdGllcy5oYXMoc3RhdCkgPyB0aGlzLl9zdGF0VmlzaWJpbGl0aWVzLmdldChzdGF0KVxyXG4gICAgICAgICAgICA6IGNvbnN0YW50c18xLlZpc2liaWxpdHlMZXZlbC5IaW50ZWQ7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EU3RhdHNBc3BlY3QgPSBEU3RhdHNBc3BlY3Q7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURTdGF0c0FzcGVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkR1cGxpY2F0ZVNldHVwRXhjZXB0aW9uID0gdm9pZCAwO1xyXG5jbGFzcyBEdXBsaWNhdGVTZXR1cEV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcclxufVxyXG5leHBvcnRzLkR1cGxpY2F0ZVNldHVwRXhjZXB0aW9uID0gRHVwbGljYXRlU2V0dXBFeGNlcHRpb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUR1cGxpY2F0ZVNldHVwRXhjZXB0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuT3BlcmF0b3JBc3BlY3QgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBSYXJpdHlfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9kYXRhL1Jhcml0eVwiKTtcclxuY29uc3QgV3JhcF8xID0gcmVxdWlyZShcIi4uLy4uL2FjdGlvbi9XcmFwXCIpO1xyXG5jb25zdCBPcGVyYXRvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Jhc2UvT3BlcmF0b3JcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uL0NoYXJhY3RlclwiKTtcclxuY29uc3QgTW9yYWxlXzEgPSByZXF1aXJlKFwiLi4vTW9yYWxlXCIpO1xyXG5jb25zdCBCYXNlQXNwZWN0XzEgPSByZXF1aXJlKFwiLi9CYXNlQXNwZWN0XCIpO1xyXG5jbGFzcyBPcGVyYXRvckFzcGVjdCBleHRlbmRzIEJhc2VBc3BlY3RfMS5CYXNlQXNwZWN0IHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYykge1xyXG4gICAgICAgIHN1cGVyKGMpO1xyXG4gICAgICAgIHRoaXMuY29yZSA9IGM7XHJcbiAgICAgICAgdGhpcy5kU3RhdHMgPSBjO1xyXG4gICAgICAgIHRoaXMuZFNraWxscyA9IGM7XHJcbiAgICAgICAgdGhpcy5jU2tpbGxzID0gYztcclxuICAgICAgICB0aGlzLm5vdGFibGVTdHVmZiA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2FmZmxpY3Rpb25zID0gW107XHJcbiAgICAgICAgdGhpcy5faXRlbXMgPSBbXTtcclxuICAgICAgICB0aGlzLl9jaGVtaXN0cnkgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlRE9NU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IHRhYmxlRW50cmllcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMubm90YWJsZVN0dWZmKSB7XHJcbiAgICAgICAgICAgIHRhYmxlRW50cmllcy5wdXNoKGBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+JHtrZXl9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7dmFsdWV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdGF0dXNlcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgYWZmbGljdGlvbiBvZiB0aGlzLl9hZmZsaWN0aW9ucykge1xyXG4gICAgICAgICAgICBzdGF0dXNlcy5wdXNoKGA8c3BhbiBjbGFzcz1cIm9wZXJhdG9yX3NjcmVlbl9fc3RhdHVzX19pdGVtXCI+JHthZmZsaWN0aW9ufTwvc3Bhbj5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2hlbWlzdHJ5ID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBbbnBjLCBbdmFsdWUsIGRlc2NdXSBvZiB0aGlzLl9jaGVtaXN0cnkuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2NTdHIgPSBkZXNjID09IG51bGwgfHwgZGVzYyA9PSBcIlwiID9cclxuICAgICAgICAgICAgICAgIFwiXCIgOlxyXG4gICAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwibnBjX2NoZW1pc3RyeV9fZGVzY1wiPiR7ZGVzY308L3NwYW4+YDtcclxuICAgICAgICAgICAgY2hlbWlzdHJ5LnB1c2goYFxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJucGNfY2hlbWlzdHJ5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5wY19jaGVtaXN0cnlfX25wY1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGMpLmltZ1BhdGh9XCIgYWx0PVwiXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJucGNfY2hlbWlzdHJ5X192YWx1ZVwiPiR7dmFsdWV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5wY19jaGVtaXN0cnlfX2Rlc2NcIj4ke2Rlc2NTdHJ9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkU2tpbGxzQnlSYXRpbmcgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgY29uc3QgY1NraWxsc0J5UmF0aW5nID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAoY29uc3QgW3NraWxsLCByYXRpbmddIG9mIHRoaXMuZFNraWxscy5kU2tpbGxSYXRpbmdzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoIWRTa2lsbHNCeVJhdGluZy5oYXMocmF0aW5nKSkge1xyXG4gICAgICAgICAgICAgICAgZFNraWxsc0J5UmF0aW5nLnNldChyYXRpbmcsIFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkU2tpbGxzQnlSYXRpbmcuZ2V0KHJhdGluZykucHVzaChza2lsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgW3NraWxsLCByYXRpbmddIG9mIHRoaXMuY1NraWxscy5jU2tpbGxSYXRpbmdzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoIWNTa2lsbHNCeVJhdGluZy5oYXMocmF0aW5nKSkge1xyXG4gICAgICAgICAgICAgICAgY1NraWxsc0J5UmF0aW5nLnNldChyYXRpbmcsIFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjU2tpbGxzQnlSYXRpbmcuZ2V0KHJhdGluZykucHVzaChza2lsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJhdGluZ1RvU3RyaW5ncyA9IG5ldyBNYXAoW1xyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmF0aW5nLkYsIFwiVXNlbGVzc1wiXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhdGluZy5FLCBcIk5vdmljZVwiXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhdGluZy5ELCBcIkhvYmJ5aXN0XCJdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmF0aW5nLkMsIFwiUHJvZmVzc2lvbmFsXCJdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmF0aW5nLkIsIFwiRXhwZXJ0aXNlXCJdLFxyXG4gICAgICAgICAgICBbUmFyaXR5XzEuUmF0aW5nLkEsIFwiTWFzdGVyeVwiXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhdGluZy5TLCBcIkxlZ2VuZGFyeVwiXSxcclxuICAgICAgICAgICAgW1Jhcml0eV8xLlJhdGluZy5TUywgXCJNeXRoaWNcIl0sXHJcbiAgICAgICAgICAgIFtSYXJpdHlfMS5SYXRpbmcuU1NTLCBcIlRpdGFuaWNcIl0sXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY29uc3Qgc2tpbGxCbG9ja0RPTXMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHJhdGluZyBvZiBbUmFyaXR5XzEuUmF0aW5nLkQsXHJcbiAgICAgICAgICAgIFJhcml0eV8xLlJhdGluZy5DLFxyXG4gICAgICAgICAgICBSYXJpdHlfMS5SYXRpbmcuQixcclxuICAgICAgICAgICAgUmFyaXR5XzEuUmF0aW5nLkEsXHJcbiAgICAgICAgICAgIFJhcml0eV8xLlJhdGluZy5TLFxyXG4gICAgICAgICAgICBSYXJpdHlfMS5SYXRpbmcuU1MsXHJcbiAgICAgICAgICAgIFJhcml0eV8xLlJhdGluZy5TU1NdKSB7XHJcbiAgICAgICAgICAgIGlmICgoZFNraWxsc0J5UmF0aW5nLmhhcyhyYXRpbmcpICYmIGRTa2lsbHNCeVJhdGluZy5nZXQocmF0aW5nKS5sZW5ndGggPiAwKSB8fFxyXG4gICAgICAgICAgICAgICAgKGNTa2lsbHNCeVJhdGluZy5oYXMocmF0aW5nKSAmJiBjU2tpbGxzQnlSYXRpbmcuZ2V0KHJhdGluZykubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgICAgIHNraWxsQmxvY2tET01zLnB1c2goYFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNraWxsX2Jsb2NrIGRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX2tleVwiPiR7cmF0aW5nVG9TdHJpbmdzLmdldChyYXRpbmcpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWN0aW9uYXJ5X19yb3dfX3ZhbHVlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR7ZFNraWxsc0J5UmF0aW5nLmhhcyhyYXRpbmcpID9cclxuICAgICAgICAgICAgICAgICAgICBkU2tpbGxzQnlSYXRpbmcuZ2V0KHJhdGluZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCh4ID0+ICgwLCBXcmFwXzEud3JhcERTa2lsbCkoeCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiXCIpIDogXCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtjU2tpbGxzQnlSYXRpbmcuaGFzKHJhdGluZykgP1xyXG4gICAgICAgICAgICAgICAgICAgIGNTa2lsbHNCeVJhdGluZy5nZXQocmF0aW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKHggPT4gKDAsIFdyYXBfMS53cmFwQ1NraWxsKSh4KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCJcIikgOiBcIlwifSAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgW2l0ZW0sIHJhcml0eV0gb2YgdGhpcy5faXRlbXMpIHtcclxuICAgICAgICAgICAgaXRlbXMucHVzaChgPHNwYW4gY2xhc3M9XCJpbnZlbnRvcnlfaXRlbSBpbnZlbnRvcnlfaXRlbS0tJHtSYXJpdHlfMS5SYXJpdHlbcmFyaXR5XX1cIj4ke2l0ZW19PC9zcGFuPmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3BlcmF0b3Jfc2NyZWVuXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3BlcmF0b3Jfc2NyZWVuX190aXRsZVwiPlZpbGxhZ2VyIFByb2ZpbGU6ICR7dGhpcy5jb3JlLm5hbWV9IFxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwib3BlcmF0b3Jfc2NyZWVuX19iYWNrXCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1hcnJvdy1sZWZ0XCI+PC9pPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9wZXJhdG9yX3NjcmVlbl9faWNvblwiPjxpbWcgc3JjPVwiJHt0aGlzLmNvcmUuaW1nUGF0aH1cIiBhbHQ9XCJcIi8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3BlcmF0b3Jfc2NyZWVuX19yYXRpbmdzIGljb25fdGFibGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbl90YWJsZV9fc2xvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbl90YWJsZV9fc2xvdF9faWNvblwiPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtc3dvcmRzXCI+PC9pPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbl90YWJsZV9fc2xvdF9fdmFsdWVcIj4ke3RoaXMucmF0aW5ncy5kYW1hZ2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uX3RhYmxlX19zbG90X19sYWJlbFwiPkRhbWFnZSBSYXRpbmc8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbl90YWJsZV9fc2xvdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbl90YWJsZV9fc2xvdF9faWNvblwiPjxpIGNsYXNzPVwiZmEtc2hhcnAgZmEtc29saWQgZmEtZ2VhcnNcIj48L2k+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uX3RhYmxlX19zbG90X192YWx1ZVwiPiR7dGhpcy5yYXRpbmdzLmNvbnRyb2x9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uX3RhYmxlX19zbG90X19sYWJlbFwiPkNvbnRyb2wgUmF0aW5nPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25fdGFibGVfX3Nsb3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25fdGFibGVfX3Nsb3RfX2ljb25cIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLXNoaWVsZC1jcm9zc1wiPjwvaT48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25fdGFibGVfX3Nsb3RfX3ZhbHVlXCI+JHt0aGlzLnJhdGluZ3Muc3Vydml2YWx9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uX3RhYmxlX19zbG90X19sYWJlbFwiPlN1cnZpdmFsIFJhdGluZzwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uX3RhYmxlX19zbG90XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uX3RhYmxlX19zbG90X19pY29uXCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS11c2VyLXRpZVwiPjwvaT48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25fdGFibGVfX3Nsb3RfX3ZhbHVlXCI+JHt0aGlzLnJhdGluZ3MucHJvfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbl90YWJsZV9fc2xvdF9fbGFiZWxcIj5Qcm9mZXNzaW9uYWwgU2tpbGxzPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcGVyYXRvcl9zY3JlZW5fX3N1YnRpdGxlXCI+Tm90YWJsZSBJbmZvcm1hdGlvbjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9wZXJhdG9yX3NjcmVlbl9fZGV0YWlscyBkaWN0aW9uYXJ5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+RnJvbSBFcmE8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7Y29uc3RhbnRzXzEuRXJhW3RoaXMuZXJhXX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+T2xkIFByb2Zlc3Npb248L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGljdGlvbmFyeV9fcm93X192YWx1ZVwiPiR7dGhpcy5wcm9mZXNzaW9uc1swXX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+Q3VycmVudCBQcm9mZXNzaW9uPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke3RoaXMucHJvZmVzc2lvbnNbMV19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICR7dGFibGVFbnRyaWVzLmpvaW4oXCJcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fa2V5XCI+TW9yYWxlPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRpY3Rpb25hcnlfX3Jvd19fdmFsdWVcIj4ke01vcmFsZV8xLk1vcmFsZVt0aGlzLm1vcmFsZV19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwib3BlcmF0b3Jfc2NyZWVuX19zdWJ0aXRsZVwiPlNwZWNpYWxpemluZyBza2lsbHM8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcGVyYXRvcl9zY3JlZW5fX3NraWxsc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICR7c2tpbGxCbG9ja0RPTXMuam9pbihcIlwiKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm9wZXJhdG9yX3NjcmVlbl9fc3VidGl0bGVcIj5DaGVtaXN0cnkgd2l0aCBvdGhlciB2aWxsYWdlcnM8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvcGVyYXRvcl9zY3JlZW5fX2NoZW1pc3RyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICR7Y2hlbWlzdHJ5LmpvaW4oXCJcIil9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgYWRkTm90YWJsZVN0dWZmKGssIHYpIHtcclxuICAgICAgICB0aGlzLm5vdGFibGVTdHVmZi5wdXNoKFtrLCB2XSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGFkZEFmZmxpY3Rpb24oYSkge1xyXG4gICAgICAgIHRoaXMuX2FmZmxpY3Rpb25zLnB1c2goYSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIHNldENoZW1pc3RyeVdpdGgobnBjLCB2LCBzKSB7XHJcbiAgICAgICAgdGhpcy5fY2hlbWlzdHJ5LnNldChucGMsIFt2LCBzXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGFkZEludmVudG9yeUl0ZW0oaXRlbSwgcmFyaXR5KSB7XHJcbiAgICAgICAgdGhpcy5faXRlbXMucHVzaChbaXRlbSwgcmFyaXR5XSk7XHJcbiAgICB9XHJcbiAgICBmaW5hbGl6ZSgpIHtcclxuICAgICAgICBPcGVyYXRvcl8xLk9wZXJhdG9yUHJvZmlsZXMuc2V0KHRoaXMuaWQsIHRoaXMuZ2VuZXJhdGVET01TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGdldCBtb3JhbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vcmFsZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgc2V0IG1vcmFsZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX21vcmFsZSA9IHZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGVmZmVjdHMgPSBNb3JhbGVfMS5Nb3JhbGVFZmZlY3RzLmdldCh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGVmZmVjdHMuaGFzKE1vcmFsZV8xLk5wY01vcmFsZUVmZmVjdHMuUHJvZmljaWVuY3lCb251c01vZGlmaWVyKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5kU3RhdHMucGIgPVxyXG4gICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuUHJvZi5nZXQodGhpcy5kU3RhdHMucGIubW9kKCkgKyBlZmZlY3RzLmdldChNb3JhbGVfMS5OcGNNb3JhbGVFZmZlY3RzLlByb2ZpY2llbmN5Qm9udXNNb2RpZmllcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWZmZWN0cy5oYXMoTW9yYWxlXzEuTnBjTW9yYWxlRWZmZWN0cy5Ta2lsbE1vZGlmaWVyKSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBbc2tpbGwsIFtudW0sIHZpc11dIG9mIHRoaXMuZFNraWxscy51cGdyYWRlZFNraWxscykge1xyXG4gICAgICAgICAgICAgICAgbnVtIC09IHRoaXMuZFN0YXRzLm1vZChjb25zdGFudHNfMS5TdGF0Rm9yU2tpbGwuZ2V0KHNraWxsKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJhY3Rlci5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koc2tpbGwsIHZpcywgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Ob25lLCBudW0gKyBlZmZlY3RzLmdldChNb3JhbGVfMS5OcGNNb3JhbGVFZmZlY3RzLlNraWxsTW9kaWZpZXIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IG5vdGFibGVDU2tpbGxzKCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IG5vdGFibGVEU2tpbGxzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRTa2lsbHMudXBncmFkZWRTa2lsbHM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5PcGVyYXRvckFzcGVjdCA9IE9wZXJhdG9yQXNwZWN0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvckFzcGVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLk9waW5pb25Bc3BlY3QgPSB2b2lkIDA7XHJcbmNvbnN0IE5wY0ludGVyYWN0aW9uRXZlbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9OcGNJbnRlcmFjdGlvbkV2ZW50XCIpO1xyXG5jb25zdCBOcGNPcGluaW9uc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL29waW5pb25zL05wY09waW5pb25zXCIpO1xyXG5jb25zdCBhcmNfMjFfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9hcmNfMjFcIik7XHJcbmNvbnN0IGFyY18yMl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL29waW5pb25zL3Nlc3Npb25zL2FyY18yMlwiKTtcclxuY29uc3QgVGltZXNraXBFdmVudF8xID0gcmVxdWlyZShcIi4uLy4uLy4uL29waW5pb25zL1RpbWVza2lwRXZlbnRcIik7XHJcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NvbW1vbi9jb21tb25cIik7XHJcbmNvbnN0IHBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9kYXRhL3BjSW5kZXhcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uL0NoYXJhY3RlclwiKTtcclxuY29uc3QgQmFzZUFzcGVjdF8xID0gcmVxdWlyZShcIi4vQmFzZUFzcGVjdFwiKTtcclxuY29uc3QgczJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zMlwiKTtcclxuY29uc3QgczNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zM1wiKTtcclxuY29uc3QgczRfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zNFwiKTtcclxuY29uc3QgczVfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zNVwiKTtcclxuY29uc3QgczZfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zNlwiKTtcclxuY29uc3QgczdfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zN1wiKTtcclxuY29uc3QgczhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zOFwiKTtcclxuY29uc3QgczlfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zOVwiKTtcclxuY29uc3QgczEwXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vb3BpbmlvbnMvc2Vzc2lvbnMvczEwXCIpO1xyXG5jb25zdCBzMTFfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9vcGluaW9ucy9zZXNzaW9ucy9zMTFcIik7XHJcbi8qKlxyXG4gKiBBbiBhc3BlY3QgdGhhdCBhbGxvd3MgdGhlIGNoYXJhY3RlciB0byBoYXZlIG9waW5pb25zLlxyXG4gKi9cclxuY2xhc3MgT3BpbmlvbkFzcGVjdCBleHRlbmRzIEJhc2VBc3BlY3RfMS5CYXNlQXNwZWN0IHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYykge1xyXG4gICAgICAgIHN1cGVyKGMpO1xyXG4gICAgICAgIHRoaXMuY29yZSA9IGM7XHJcbiAgICAgICAgdGhpcy5kU2tpbGxzID0gYztcclxuICAgICAgICB0aGlzLm9waW5pb25zID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAoY29uc3QgcGMgb2YgKDAsIGNvbW1vbl8xLmdldEVudW1JdGVyYXRvcikocGNJbmRleF8xLlBjSW5kZXgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BpbmlvbnMuc2V0KHBjLCBuZXcgTnBjT3BpbmlvbnNfMS5OcGNPcGluaW9uKHRoaXMuaWQsIHBjKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR1cHMgdXAgdGhlIG9waW5pb24gdGFibGUgZWxlbWVudCBhZnRlciBhZGRpbmcgdGhlIHZhcmlvdXMgcGMtbnBjXHJcbiAgICAgKiBldmVudHMgaW4gYSBzZXNzaW9uIGJ5IHNlc3Npb24gbWFubmVyLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2V0dXBPcGluaW9uVGFibGUoKSB7XHJcbiAgICAgICAgKDAsIHMyXzEuc2Vzc2lvbk9waW5pb25FdmVudHMwMikoKTtcclxuICAgICAgICAoMCwgczNfMS5zZXNzaW9uT3BpbmlvbkV2ZW50czAzKSgpO1xyXG4gICAgICAgICgwLCBzNF8xLnNlc3Npb25PcGluaW9uRXZlbnRzMDQpKCk7XHJcbiAgICAgICAgKDAsIHM1XzEuc2Vzc2lvbk9waW5pb25FdmVudHMwNSkoKTtcclxuICAgICAgICAoMCwgczZfMS5zZXNzaW9uT3BpbmlvbkV2ZW50czA2KSgpO1xyXG4gICAgICAgICgwLCBzN18xLnNlc3Npb25PcGluaW9uRXZlbnRzMDcpKCk7XHJcbiAgICAgICAgKDAsIHM4XzEuc2Vzc2lvbk9waW5pb25FdmVudHMwOCkoKTtcclxuICAgICAgICAoMCwgczlfMS5zZXNzaW9uT3BpbmlvbkV2ZW50czA5KSgpO1xyXG4gICAgICAgICgwLCBzMTBfMS5zZXNzaW9uT3BpbmlvbkV2ZW50czEwKSgpO1xyXG4gICAgICAgICgwLCBzMTFfMS5zZXNzaW9uT3BpbmlvbkV2ZW50czExKSgpO1xyXG4gICAgICAgICgwLCBhcmNfMjFfMS5hcmMyMU9waW5pb25FdmVudHMpKCk7XHJcbiAgICAgICAgKDAsIGFyY18yMl8xLmFyYzIyT3BpbmlvbkV2ZW50cykoKTtcclxuICAgICAgICBjb25zdCAkaW5kaXZpZHVhbEFzdCA9ICQoXCIjaW5kaXZpZHVhbF9hc3RcIik7XHJcbiAgICAgICAgY29uc3QgJHRhYmxlX2FyZWEgPSAkKFwiI2F0dGl0dWRlX3N1bW1hcnlfdGFibGVfYXJlYVwiKTtcclxuICAgICAgICBjb25zdCBwY0NlbGxzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBwYyBvZiAoMCwgY29tbW9uXzEuZ2V0RW51bUl0ZXJhdG9yKShwY0luZGV4XzEuUGNJbmRleCkpIHtcclxuICAgICAgICAgICAgcGNDZWxscy5wdXNoKGA8ZGl2IGNsYXNzPVwic2ltcGxlX3RhYmxlX19yb3dfX2NlbGwgY2hhcmFjdGVyX3Rva2VuXCI+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL2ltYWdlcy9jaGFyYWN0ZXJfdG9rZW5zL0MyL3Bjcy8ke3BjSW5kZXhfMS5QY1Rva2VuTmFtZXMuZ2V0KHBjKX0ucG5nXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgIGFsdD1cIltOVUxMXVwiPlxyXG4gICAgICAgICAgICA8L2Rpdj5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbnBjUm93cyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgbnBjSW5kZXggb2YgKDAsIGNvbW1vbl8xLmdldEVudW1JdGVyYXRvcikobnBjSW5kZXhfMS5OcGNJRCkpIHtcclxuICAgICAgICAgICAgY29uc3QgbnBjID0gQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleCk7XHJcbiAgICAgICAgICAgIGlmICghbnBjIHx8ICFucGMuaXNPcGluaW9uYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbnBjUm93cy5wdXNoKG5wYy5nZW5lcmF0ZU9waW5pb25ET00oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICR0YWJsZV9hcmVhLmFwcGVuZChgXHJcbiAgICAgICAgPGRpdiBjbGFzcz0nb3Bpbmlvbl9zdW1tYXJ5X3RhYmxlJz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nc2ltcGxlX3RhYmxlX19yb3cgc2ltcGxlX3RhYmxlX19yb3ctLWhlYWRlcic+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdzaW1wbGVfdGFibGVfX3Jvd19fY2VsbCc+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAke3BjQ2VsbHMuam9pbihcIlwiKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3NpbXBsZV90YWJsZV9fYm9keSc+XHJcbiAgICAgICAgICAgICAgICAke25wY1Jvd3Muam9pbihcIlwiKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+ICAgIFxyXG4gICAgYCk7XHJcbiAgICAgICAgJHRhYmxlX2FyZWEub24oXCJjbGlja1wiLCBcIi5ucGNfb3Bpbmlvbl9jaXJjbGVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBucGNJZCA9ICQodGhpcykuZGF0YShcIm5wY0lkXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBwY0lkID0gJCh0aGlzKS5kYXRhKFwicGNJZFwiKTtcclxuICAgICAgICAgICAgJGluZGl2aWR1YWxBc3QuaHRtbChDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0lkKS5nZW5lcmF0ZU9waW5pb25UaW1lbGluZURPTShwY0lkKSk7XHJcbiAgICAgICAgICAgICRpbmRpdmlkdWFsQXN0LnNob3coKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqXHJcbiAgICAgKiBIZXJlIHdlIHJldHVybiBhIHRhYmxlIHJvdyBjb250YWluaW5nIHNlbGYgdG9rZW4gYXMgdGhlIGZpcnN0IGNvbHVtbiBjZWxsXHJcbiAgICAgKiBhbmQgdGhlIG9waW5pb25zIGZvciBhbGwgUENzIGFzIHRoZSBvdGhlciBjZWxscy5cclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVET01TdHJpbmcoKSB7XHJcbiAgICAgICAgY29uc3Qgb3BpbmlvblN0cmluZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBjIG9mICgwLCBjb21tb25fMS5nZXRFbnVtSXRlcmF0b3IpKHBjSW5kZXhfMS5QY0luZGV4KSkge1xyXG4gICAgICAgICAgICBjb25zdCBucGNPcGluaW9uID0gdGhpcy5vcGluaW9ucy5nZXQocGMpO1xyXG4gICAgICAgICAgICBvcGluaW9uU3RyaW5ncy5wdXNoKG5wY09waW5pb24uZ2VuZXJhdGVET01TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3NpbXBsZV90YWJsZV9fcm93Jz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3NpbXBsZV90YWJsZV9fcm93X19jZWxsIGNoYXJhY3Rlcl90b2tlbic+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke3RoaXMuY29yZS5pbWdQYXRofVwiIGFsdD1cIltOVUxMXVwiPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAke29waW5pb25TdHJpbmdzLmpvaW4oXCJcIil9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGFkZEludGVyYWN0aW9uRXZlbnQocGNzLCB0aW1lc3RhbXAsIHRleHQsIGRlbHRhLCBpbnNpZ2h0R2F0ZSA9IDEwLCByZXZlcnNlRW1vdGlvbnMgPSBuZXcgU2V0KCkpIHtcclxuICAgICAgICBsZXQgcmVNYXAgPSBudWxsO1xyXG4gICAgICAgIGlmIChyZXZlcnNlRW1vdGlvbnMpIHtcclxuICAgICAgICAgICAgcmVNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiByZXZlcnNlRW1vdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHJlTWFwLnNldChlLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IHBjIG9mIHBjcykge1xyXG4gICAgICAgICAgICB0aGlzLm9waW5pb25zLmdldChwYykuYWRkRXZlbnQobmV3IE5wY0ludGVyYWN0aW9uRXZlbnRfMS5OcGNJbnRlcmFjdGlvbkV2ZW50KHRpbWVzdGFtcCwgdGV4dCwgZGVsdGEsIGluc2lnaHRHYXRlLCByZU1hcCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgYWRkVGltZXNraXBFdmVudChwY3MsIHRpbWVzdGFtcDEsIHRpbWVzdGFtcDIsIHRleHQsIGRlbHRhKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwYyBvZiBwY3MpIHtcclxuICAgICAgICAgICAgdGhpcy5vcGluaW9ucy5nZXQocGMpLmFkZEV2ZW50KG5ldyBUaW1lc2tpcEV2ZW50XzEuVGltZXNraXBFdmVudCh0aW1lc3RhbXAxLCB0aW1lc3RhbXAyLCBkZWx0YSwgdGV4dCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgRE9NIHN0cmluZyBmb3IgdGhlIHRpbWVsaW5lIGxpc3QuXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlVGltZWxpbmVET01TdHJpbmcocGMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcGluaW9ucy5nZXQocGMpLmdlbmVyYXRlVGltZWxpbmVET01TdHJpbmcoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IGlzT3BpbmlvbmF0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29waW5pb25hdGVkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBzZXQgaXNPcGluaW9uYXRlZCh2YWwpIHtcclxuICAgICAgICB0aGlzLl9vcGluaW9uYXRlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgZ2V0IHBhc3NpdmVEZWNlcHRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIDEwICsgdGhpcy5kU2tpbGxzLmdldFNraWxsTW9kKGNvbnN0YW50c18xLkRTa2lsbC5EZWNlcHRpb24pWzBdO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuT3BpbmlvbkFzcGVjdCA9IE9waW5pb25Bc3BlY3Q7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9waW5pb25Bc3BlY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5TaGVldEFzcGVjdCA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IGluc3RhbmNlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL21vbnN0ZXJzL2luc3RhbmNlc1wiKTtcclxuY29uc3QgV3JhcF8xID0gcmVxdWlyZShcIi4uLy4uL2FjdGlvbi9XcmFwXCIpO1xyXG5jb25zdCBCYXNlQXNwZWN0XzEgPSByZXF1aXJlKFwiLi9CYXNlQXNwZWN0XCIpO1xyXG4vKipcclxuICogQW4gYXNwZWN0IHRoYXQgc3VwcG9ydHMgdGhlIGNyZWF0aW9uIGFuZCByZW5kZXJpbmcgb2YgYSAoRCZENWUgY29tYmF0KSBzdGF0XHJcbiAqIHNoZWV0IGZvciBhbiBOUEMuXHJcbiAqL1xyXG5jbGFzcyBTaGVldEFzcGVjdCBleHRlbmRzIEJhc2VBc3BlY3RfMS5CYXNlQXNwZWN0IHtcclxuICAgIC8qKlxyXG4gICAgICogQ1RPUi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYykge1xyXG4gICAgICAgIHN1cGVyKGMpO1xyXG4gICAgICAgIHRoaXMuY29tYmF0QXNwZWN0ID0gYztcclxuICAgICAgICB0aGlzLmNvcmVBc3BlY3QgPSBjO1xyXG4gICAgICAgIHRoaXMuc2tpbGxBc3BlY3QgPSBjO1xyXG4gICAgICAgIHRoaXMuc3RhdHNBc3BlY3QgPSBjO1xyXG4gICAgICAgIHRoaXMuX3N1YnRpdGxlID0gXCJcIjtcclxuICAgICAgICB0aGlzLl9hY0Rlc2MgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuX2NyID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHNwZWVkTGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgW3NwZWVkLCB2YWx1ZV0gb2YgdGhpcy5jb21iYXRBc3BlY3Quc3BlZWRzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBzcGVlZExpc3QucHVzaChgJHsoMCwgV3JhcF8xLndyYXBTcGVlZCkoc3BlZWQpfSAke3ZhbHVlfSBmdC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2Vuc2VMaXN0ID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBbc2Vuc2UsIHZhbHVlXSBvZiB0aGlzLmNvbWJhdEFzcGVjdC5zZW5zZXMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHNlbnNlTGlzdC5wdXNoKGAkeygwLCBXcmFwXzEud3JhcFNlbnNlKShzZW5zZSl9ICR7dmFsdWV9IGZ0LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdGF0TGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3Qgc3RhdCBvZiBbY29uc3RhbnRzXzEuRFN0YXQuU3RyLFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5EZXgsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRTdGF0LkNvbixcclxuICAgICAgICAgICAgY29uc3RhbnRzXzEuRFN0YXQuSW50LFxyXG4gICAgICAgICAgICBjb25zdGFudHNfMS5EU3RhdC5XaXMsXHJcbiAgICAgICAgICAgIGNvbnN0YW50c18xLkRTdGF0LkNoYV0pIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdFZhbCA9IHRoaXMuY29tYmF0QXNwZWN0LnN0YXRzLmdldChzdGF0KTtcclxuICAgICAgICAgICAgc3RhdExpc3QucHVzaChgPHRkPiR7c3RhdFZhbC5zdGF0fSAkeygwLCBXcmFwXzEud3JhcFJvbGwpKHN0YXRWYWwubW9kKX08L3RkPmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzYXZlTGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgW3N0YXQsIFtwcm9mLCBtb2RdXSBvZiB0aGlzLmNvbWJhdEFzcGVjdC5zYXZlcy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2F2ZSA9IHRoaXMuc3RhdHNBc3BlY3QubW9kKHN0YXQpICsgdGhpcy5jb21iYXRBc3BlY3QucGIubW9kKHByb2YpICsgbW9kO1xyXG4gICAgICAgICAgICBzYXZlTGlzdC5wdXNoKGAke2NvbnN0YW50c18xLkRTdGF0W3N0YXRdfSAkeygwLCBXcmFwXzEud3JhcFJvbGwpKHNhdmUpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBza2lsbExpc3QgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtza2lsbCwgW21vZCwgX11dIG9mIHRoaXMuc2tpbGxBc3BlY3QudXBncmFkZWRTa2lsbHMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHNraWxsTGlzdC5wdXNoKGA8c3BhbiBzdHlsZT1cImRpc3BsYXk6IGlubGluZS1ibG9jaztcIj4keygwLCBXcmFwXzEud3JhcERTa2lsbCkoc2tpbGwpfSAkeygwLCBXcmFwXzEud3JhcFJvbGwpKG1vZCl9PC9zcGFuPmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2dWwgPSBbXTtcclxuICAgICAgICBjb25zdCByZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBpbW0gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtkdCwgcl0gb2YgdGhpcy5jb21iYXRBc3BlY3QuZGFtYWdlUmVzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAociA8IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRldGFpbHMgPSByID09IC0xMDAgPyBcIlwiIDogYCgkezEwMCAtIHJ9JSBkYW1hZ2UpYDtcclxuICAgICAgICAgICAgICAgIHZ1bC5wdXNoKGAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGR0KX0gJHtkZXRhaWxzfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHIgPT0gMCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHIgPCAxMDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRldGFpbHMgPSByID09IDUwID8gXCJcIiA6IGAoJHsxMDAgLSByfSUgZGFtYWdlKWA7XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShkdCl9ICR7ZGV0YWlsc31gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRldGFpbHMgPSByID09IDEwMCA/IFwiXCIgOiBgKEhlYWxzIGZvciAke3IgLSAxMDB9JSBkYW1hZ2UpYDtcclxuICAgICAgICAgICAgICAgIGltbS5wdXNoKGAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGR0KX0gJHtkZXRhaWxzfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHZ1bFN0ciA9IHZ1bC5sZW5ndGggPT0gMCA/XHJcbiAgICAgICAgICAgIFwiXCIgOlxyXG4gICAgICAgICAgICBgPHRyPjx0ZD5EYW1hZ2UgVnVsbmVyYWJpbGl0aWVzPC90ZD48dGQ+JHt2dWwuam9pbihcIiwgXCIpfTwvdGQ+PC90cj5gO1xyXG4gICAgICAgIGNvbnN0IHJlc1N0ciA9IHJlcy5sZW5ndGggPT0gMCA/XHJcbiAgICAgICAgICAgIFwiXCIgOlxyXG4gICAgICAgICAgICBgPHRyPjx0ZD5EYW1hZ2UgUmVzaXN0YW5jZXM8L3RkPjx0ZD4ke3Jlcy5qb2luKFwiLCBcIil9PC90ZD48L3RyPmA7XHJcbiAgICAgICAgY29uc3QgaW1tU3RyID0gaW1tLmxlbmd0aCA9PSAwID9cclxuICAgICAgICAgICAgXCJcIiA6XHJcbiAgICAgICAgICAgIGA8dHI+PHRkPkRhbWFnZSBJbW11bml0aWVzPC90ZD48dGQ+JHtpbW0uam9pbihcIiwgXCIpfTwvdGQ+PC90cj5gO1xyXG4gICAgICAgIGNvbnN0IGNpID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIHRoaXMuY29tYmF0QXNwZWN0LmNvbmRpdGlvbkltbXVuaXRpZXMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgY2kucHVzaChjb25zdGFudHNfMS5Db25kaXRpb25bdl0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjaVN0ciA9IGNpLmxlbmd0aCA9PSAwID9cclxuICAgICAgICAgICAgXCJcIiA6XHJcbiAgICAgICAgICAgIGA8dHI+PHRkPkNvbmRpdGlvbiBJbW11bml0aWVzPC90ZD48dGQ+JHtjaS5qb2luKFwiLCBcIil9PC90ZD48L3RyPmA7XHJcbiAgICAgICAgY29uc3QgY29udGVudExpc3QgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBhY3Rpb24gb2YgdGhpcy5jb21iYXRBc3BlY3QuYWN0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmF0aW9uID0gYWN0aW9uLmFjdGl2YXRpb247XHJcbiAgICAgICAgICAgIGlmICghY29udGVudExpc3QuaGFzKGFjdGl2YXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50TGlzdC5zZXQoYWN0aXZhdGlvbiwgW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbi5iaW5kU3RhdHModGhpcy5zdGF0c0FzcGVjdCk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRMaXN0LmdldChhY3RpdmF0aW9uKS5wdXNoKGFjdGlvbi5jcmVhdGVDb250ZW50KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb250ZW50cyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgW2FjdGl2YXRpb24sIGFjdGlvblN0cmluZ3NdIG9mIGNvbnRlbnRMaXN0LmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZhdGlvbiAhPSBjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRzLnB1c2goYDxoNCBjbGFzcz1cInNoZWV0X3NlY3Rpb25faGVhZGVyXCI+JHsoMCwgV3JhcF8xLndyYXBBY3RpdmF0aW9uKShhY3RpdmF0aW9uLCB0cnVlKX08L2g0PmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWN0aW9uU3RyIG9mIGFjdGlvblN0cmluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRzLnB1c2goYDxkaXYgY2xhc3M9XCJzaGVldF9jb250ZW50XCI+JHthY3Rpb25TdHJ9PC9kaXY+YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdF9zaGVldFwiIGlkPVwic3RhdF9zaGVldF8ke3RoaXMuY2F0ZWdvcnl9XyR7dGhpcy5pZH1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNoZWV0X2hlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlcl96b25lXCI+XHJcbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJzaGVldF90aXRsZVwiPiR7dGhpcy5jb3JlQXNwZWN0Lm5hbWV9PC9oMz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzaGVldF9zdWJ0aXRsZVwiPiR7KDAsIFdyYXBfMS53cmFwQ3JlYXR1cmVTaXplKSh0aGlzLl9zaXplKX0gJHt0aGlzLl9zdWJ0aXRsZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlcl96b25lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPkFybW9yIENsYXNzPC90ZD48dGQ+JHt0aGlzLmNvbWJhdEFzcGVjdC5hY30gJHt0aGlzLl9hY0Rlc2N9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPkhpdCBQb2ludHM8L3RkPjx0ZD4ke3RoaXMuY29tYmF0QXNwZWN0LmhwfSAkeygwLCBXcmFwXzEud3JhcFJvbGwpKHRoaXMuY29tYmF0QXNwZWN0LmhwRGljZSl9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPlNwZWVkPC90ZD48dGQ+JHtzcGVlZExpc3QubGVuZ3RoID09IDAgPyBcIk5vbmVcIiA6IHNwZWVkTGlzdC5qb2luKFwiLCBcIil9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJfem9uZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInN0YXRzX3RhYmxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGg+U1RSPC90aD48dGg+REVYPC90aD48dGg+Q09OPC90aD48dGg+SU5UPC90aD48dGg+V0lTPC90aD48dGg+Q0hBPC90aD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+JHtzdGF0TGlzdC5qb2luKFwiXCIpfTwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlcl96b25lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRhYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAke3NlbnNlTGlzdC5sZW5ndGggPiAwID8gYDx0cj48dGQ+U2Vuc2VzPC90ZD48dGQ+JHtzZW5zZUxpc3Quam9pbihcIiBcIil9PC90ZD48L3RyPmAgOiBcIlwifSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtzYXZlTGlzdC5sZW5ndGggPiAwID8gYDx0cj48dGQ+U2F2aW5nIFRocm93czwvdGQ+PHRkPiR7c2F2ZUxpc3Quam9pbihcIiBcIil9PC90ZD48L3RyPmAgOiBcIlwifSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtza2lsbExpc3QubGVuZ3RoID4gMCA/IGA8dHI+PHRkPlNraWxsczwvdGQ+PHRkPiR7c2tpbGxMaXN0LmpvaW4oXCIgXCIpfTwvdGQ+PC90cj5gIDogXCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5DaGFsbGVuZ2UgUmF0aW5nPC90ZD48dGQ+JHt0aGlzLl9jci5jcn08L3RkPjwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48dGQ+UHJvZmljaWVuY3kgQm9udXM8L3RkPjx0ZD4ke3RoaXMuY29tYmF0QXNwZWN0LnBiLm1vZCgpfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHt2dWxTdHJ9JHtyZXNTdHJ9JHtpbW1TdHJ9JHtjaVN0cn1cclxuICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAke2NvbnRlbnRzLmpvaW4oXCJcIil9XHJcbiAgICAgICAgPC9kaXY+YDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgc2V0IHN1YnRpdGxlKHMpIHtcclxuICAgICAgICB0aGlzLl9zdWJ0aXRsZSA9IHM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIHNldCBhY0Rlc2Mocykge1xyXG4gICAgICAgIHRoaXMuX2FjRGVzYyA9IHM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIHNldCBjcih2KSB7XHJcbiAgICAgICAgdGhpcy5fY3IgPSB2O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBzZXQgc2l6ZShzKSB7XHJcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIGZpbmFsaXplKCkge1xyXG4gICAgICAgIHN1cGVyLmZpbmFsaXplKCk7XHJcbiAgICAgICAgKDAsIGluc3RhbmNlc18xLnNldHVwU3RhdFNoZWV0KSh0aGlzLmNhdGVnb3J5LCBgJHt0aGlzLmNhdGVnb3J5fV8ke3RoaXMuaWR9YCwgdGhpcy5jb3JlQXNwZWN0Lm5hbWUsIHRoaXMuY29yZUFzcGVjdC5pbWdQYXRoLCAoKSA9PiB0aGlzLCB0cnVlKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlNoZWV0QXNwZWN0ID0gU2hlZXRBc3BlY3Q7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNoZWV0QXNwZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBDaGFyYWN0ZXJzID0gdm9pZCAwO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jb21tb24vY29tbW9uXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IE9waW5pb25Bc3BlY3RfMSA9IHJlcXVpcmUoXCIuLi9hc3BlY3RzL09waW5pb25Bc3BlY3RcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uL0NoYXJhY3RlclwiKTtcclxuY29uc3QgX2luaXRfMSA9IHJlcXVpcmUoXCIuL2MxL2FyYzEvX2luaXRcIik7XHJcbmNvbnN0IF9pbml0XzIgPSByZXF1aXJlKFwiLi9jMS9hcmMyL19pbml0XCIpO1xyXG5jb25zdCBfaW5pdF8zID0gcmVxdWlyZShcIi4vYzIvYXJjMS9faW5pdFwiKTtcclxuY29uc3QgX2luaXRfNCA9IHJlcXVpcmUoXCIuL2MyL2FyYzIvX2luaXRcIik7XHJcbmZ1bmN0aW9uIHNldHVwQ2hhcmFjdGVycygpIHtcclxuICAgICgwLCBfaW5pdF8xLnNldHVwQzFBMSkoKTtcclxuICAgICgwLCBfaW5pdF8yLnNldHVwQzFBMikoKTtcclxuICAgICgwLCBfaW5pdF8zLnNldHVwQzJBMSkoKTtcclxuICAgICgwLCBfaW5pdF80LnNldHVwQzJBMikoKTtcclxuICAgIGZvciAoY29uc3QgbnBjSUQgb2YgKDAsIGNvbW1vbl8xLmdldEVudW1JdGVyYXRvcikobnBjSW5kZXhfMS5OcGNJRCkpIHtcclxuICAgICAgICBjb25zdCBjID0gQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJRCk7XHJcbiAgICAgICAgaWYgKCFjKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjLmZpbmFsaXplKCk7XHJcbiAgICB9XHJcbiAgICBPcGluaW9uQXNwZWN0XzEuT3BpbmlvbkFzcGVjdC5zZXR1cE9waW5pb25UYWJsZSgpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBDaGFyYWN0ZXJzID0gc2V0dXBDaGFyYWN0ZXJzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1faW5pdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwQzFBMSA9IHZvaWQgMDtcclxuY29uc3QgY2FlbHlubl8xID0gcmVxdWlyZShcIi4vY2FlbHlublwiKTtcclxuY29uc3QgZGF2ZV8xID0gcmVxdWlyZShcIi4vZGF2ZVwiKTtcclxuY29uc3QgZWJlbmV6YXJfMSA9IHJlcXVpcmUoXCIuL2ViZW5lemFyXCIpO1xyXG5jb25zdCBpcmVuZV8xID0gcmVxdWlyZShcIi4vaXJlbmVcIik7XHJcbmNvbnN0IGxlc2xleV8xID0gcmVxdWlyZShcIi4vbGVzbGV5XCIpO1xyXG5jb25zdCBsaWFfMSA9IHJlcXVpcmUoXCIuL2xpYVwiKTtcclxuY29uc3QgbGluZ18xID0gcmVxdWlyZShcIi4vbGluZ1wiKTtcclxuY29uc3QgbHVjaWFuXzEgPSByZXF1aXJlKFwiLi9sdWNpYW5cIik7XHJcbmNvbnN0IG1hc3Rlcl8xID0gcmVxdWlyZShcIi4vbWFzdGVyXCIpO1xyXG5jb25zdCB1bHJpY2hfMSA9IHJlcXVpcmUoXCIuL3VscmljaFwiKTtcclxuY29uc3QgdmFoYXJldGhfMSA9IHJlcXVpcmUoXCIuL3ZhaGFyZXRoXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEMxQTEoKSB7XHJcbiAgICAoMCwgbHVjaWFuXzEuc2V0dXBMdWNpYW4pKCk7XHJcbiAgICAoMCwgZWJlbmV6YXJfMS5zZXR1cEViZW5lemFyKSgpO1xyXG4gICAgKDAsIGNhZWx5bm5fMS5zZXR1cENhZWx5bm4pKCk7XHJcbiAgICAoMCwgbGVzbGV5XzEuc2V0dXBMZXNsZXkpKCk7XHJcbiAgICAoMCwgaXJlbmVfMS5zZXR1cElyZW5lKSgpO1xyXG4gICAgKDAsIGxpbmdfMS5zZXR1cExpbmcpKCk7XHJcbiAgICAoMCwgZGF2ZV8xLnNldHVwRGF2ZSkoKTtcclxuICAgICgwLCB1bHJpY2hfMS5zZXR1cFVscmljaCkoKTtcclxuICAgICgwLCBsaWFfMS5zZXR1cExpYSkoKTtcclxuICAgICgwLCB2YWhhcmV0aF8xLnNldHVwVmFoYXJldGgpKCk7XHJcbiAgICAoMCwgbWFzdGVyXzEuc2V0dXBNYXN0ZXIpKCk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEMxQTEgPSBzZXR1cEMxQTE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9pbml0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBDYWVseW5uID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBDYWVseW5uKCkge1xyXG4gICAgY29uc3QgY2FlID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkNhZWx5bm4pO1xyXG4gICAgY2FlLmNvcmUubmFtZSA9IFwiQ2FlbHlubiBOYWlsb1wiO1xyXG4gICAgY2FlLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMxL2NhZWx5bm4ucG5nXCI7XHJcbiAgICBjYWUuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAxKTtcclxuICAgIGNhZS5jYXJkLmFkZENhcmRUYWcoXCJGNDU2MFwiKTtcclxuICAgIGNhZS5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDI1XCIpO1xyXG4gICAgY2FlLmNhcmQuYWRkQ2FyZFRhZyhcIkZyb20gfCBNYXRlcmlhIC8gUHJlc2VydmF0aW9uXCIpO1xyXG4gICAgY2FlLmNhcmQuYWRkQ2FyZFRhZyhcIkFsbGVnaWFuY2UgfCBQcmVzZXJ2YXRpb25cIik7XHJcbiAgICBjYWUuY2FyZC5hZGRDYXJkVGFnKFwiUmFjZSB8IEhhbGYtRWxmXCIpO1xyXG4gICAgY2FlLmNhcmQuYWRkQ2FyZFRhZyhcIjxzcGFuIGNsYXNzPSd2ZXJib3NlJz5DaXJjbGUgb2YgRHJlYW1zPC9zcGFuPiBEcnVpZFwiKTtcclxuICAgIGNhZS5jYXJkLmFkZENhcmRUYWcoXCJHdWFyZGlhbiBvZiBMaWZlXCIpO1xyXG4gICAgY2FlLmNhcmQuYWRkQ2FyZFRhZyhcIkF0aXVtIFNhdmFudFwiKTtcclxuICAgIGNhZS5jYXJkLmFkZENhcmRUYWcoXCJGYWN0aW9uOiBXYXRjaGVyc1wiKTtcclxuICAgIGNhZS5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgQm9ybiBpbiB0aGUgbGFzdCB5ZWFycyBvZiB0aGUgaGVyb2ljIGFnZSwgZmxlZCBpbnRvIFRoZSBHYXJkZW5zIGR1ZSB0byBhbiBhY2NpZGVudGFsIGVuY291bnRlciB3aXRoIHRoZSBGaWZ0aFxyXG4gICAgICBOaWdodG1hcmUuIEJlaW5nIGV4dHJlbWVseSBnaWZ0ZWQsIHNoZSByZWNlaXZlZCBndWlkYW5jZSBmcm9tIHZhcmlvdXMgb3JkZXJzIC0gb2Z0ZW4gZnJvbSBHdWFyZGlhbnMgdGhlbXNlbHZlcy5cclxuICAgICAgV2FzIG9uY2UgY2xvc2UgdG8gJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuVHJhaXRvck90aGVsbG8pLmNyZWF0ZUxpbmsoXCJUaGUgVHJhaXRvclwiKX0uIEN1cnJlbnRseSBsZWFkcyB0aGUgcGVvcGxlIG9mIHRoZSBHYXJkZW5cclxuICAgICAgYXMgdGhlIEd1YXJkaWFuIG9mIExpZmUuIE5vdyBhbiBBdGl1bSBzYXZhbnQuYDtcclxuICAgIGNhZS5jYXJkLnN0b3J5ID0gKCkgPT4gYFxyXG48aDU+RWFybHkgbGlmZTwvaDU+XHJcbkNhZWx5bm4gTmFpbG8gd2FzIGJvcm4gaW4gPyBkdXJpbmcgdGhlIHllYXJzIHRoYXQgbWFya2VkIHRoZSBlbmQgb2YgdGhlIEhlcm9pYyBBZ2UsIGFuZCB0aGUgb25zZXQgb2YgdGhlIFNpbGVudCBBZ2UuIFxyXG5Cb3JuIGluIGEgdW5pdmVyc2l0eSB0byBhIGZhbWlseSBvZiBhY2NvbXBsaXNoZWQgYW5kIHdlbGwgcmVub3duZWQgc2Nob2xhcnMsIHlvdW5nIENhZWx5bm4gaGFkIGxlZCBhIHByb3RlY3RlZCAtIFxyXG5hbG1vc3QgcGFtcGVyZWQgLSBsaWZlLiBBIGxpZmUgdGhhdCwgYWxvbmcgd2l0aCBoZXIgbmF0dXJhbCBnaWZ0cywgaGFkIGFsbG93ZWQgaGVyIHRvIGRyZWFtLCB0byByZWFjaCBmb3IgdGhlIHN0YXJzLFxyXG50byBzZXQgb3V0IG5lYXIgaW1wb3NzaWJsZSBnb2FscyBhbmQgYWNoaWV2ZSB0aGVtLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIHNlbGYtY29uZmlkZW5jZSBhbmQgYW1iaXRpb24gd2VyZSBkb3JtYW50IFxyXG5zZWVkcyBvZiB0cmFnZWR5IHRoYXQgZmluYWxseSBib3JlIGZydWl0IGluIHRoZSB5ZWFycyB0aGF0IGhlcmFsZGVkIHRoZSBTaWxlbnQgQWdlLjxici8+XHJcbkFuZCBzbyBpdCB3YXMsIHRoYXQgb25lIGRheSBzaGUgZm91bmQgZXZlcnlvbmUgc2hlIGtuZXcgLSBoZXIgZmFtaWx5LCBoZXIgZnJpZW5kcywgaGVyIHByb2Zlc3NvcnMgLSBhbGwgbWFzc2FjcmVkLiBcclxuQXMgc2hlIHN0YXJlZCBpbnRvIHRoZSBlc3NlbmNlIG9mIFRoZSBmaWZ0aCwgYSBob3Jyb3Igc2hlIGNvdWxkIG5vdCB5ZXQgZnVsbHkgXHJcbmNvbXByZWhlbmQsIHNoZSA8aT5rbmV3PC9pPiBpdCB3b3VsZCBiZSBoZXIgbmV4dCAtIGFuZCB3ZWxjb21lZCBpdCwgZm9yIGV2ZW4gaW4gaGVyIGJyb2tlbiBtaW5kIHNoZSBrbmV3IHNoZSBoYWRcclxuY2F1c2VkIGFsbCB0aGVpciBkZWF0aHMuIEJ1dCB0aGUgcG93ZXJzIHRoYXQgYmUgaGFkIGRlY2lkZWQgaXQgd2FzIG5vdCB0aW1lIGZvciBoZXIgdG8gZGllIHlldC48YnIvPlxyXG5JbiB0aGlzIGNhc2UgJ3RoZSBwb3dlcnMnIHRvb2sgdGhlIGZvcm0gb2YgYSBzaW5nbGUgbWFuIHdobyBoYWQgZXNjYXBlZCB0aGUgc2xhdWdodGVyIGFuZCBmb3VnaHQgYmFjayB0aGUgaG9ycm9yIHRvXHJcbnByb3RlY3QgaGVyLiBBIG1hbiBzaGUga25ldyBhcyB0aGUgSG9EIG9mIGJvdGFueSwgc29tZW9uZSBzaGUnZCBuZXZlciByZWFsbHkgZmVsdCBib2xkIGVub3VnaCB0byBpbnRlcmFjdCB3aXRoLiBBIFxyXG5tYW4gd2hvLCBhcyBzaGUgd291bGQgbGVhcm4gc29vbiwgY291bGRuJ3QgZHJlYW0uIEFub3RoZXIgdGhpbmcgc2hlIHdvdWxkIGxlYXJuIHNvb24gd2FzIHRoYXQgaGUgY2FtZSBmcm9tIGEgXHJcbmRpZmZlcmVudCB1bml2ZXJzZSAtIGEgZ2FyZGVuIC0gYW5kIHdlbnQgYnkgdGhlIHRpdGxlIG9mICdHdWFyZGlhbiBvZiBMaWZlJyB0aGVyZS4uLlxyXG48aDU+SW4gdGhlIEdhcmRlbjwvaDU+XHJcbldoZW4gc2hlIGVudGVyZWQgdGhlIGdhcmRlbiwgc2hlIHdhcyBhIGRpZmZlcmVudCBwZXJzb24uIEZhdGUgaGFkIGJyb2tlbiBoZXIsIGJ1dCBzaGUgaGFkIHN0b29kIHVwIGFnYWluIGFuZCBmaWxsZWQgXHJcbnRoZSBjcmFja3Mgd2l0aCBzb21ldGhpbmcgc3Ryb25nZXIuIEdvbmUgd2FzIHRoZSBjaGlsZGlzaCBvcHRpbWlzbSwgdGhlIHZhbml0eS4gSXQgd2FzIHJlcGxhY2VkIGJ5IHNpbmd1bGFyIHB1cnBvc2UgLVxyXG50byBlbnN1cmUgdGhhdCBub25lIHdvdWxkIHN1ZmZlciBhdCB0aGUgaGFuZHMgb2YgdGhvc2UgZnJvbSB3aXRob3V0IGFzIHNoZSBkaWQuIFRvIGVuc3VyZSB0aGF0IHNoZSBjb3VsZCwgd291bGQgXHJcbnByb3RlY3QgYXMgc2hlIGhhZCBiZWVuIHByb3RlY3RlZCBieSAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5WYWhhcmV0aCkuY3JlYXRlTGluayhcIlZhaGFyZXRoXCIpfS4gQmVmb3JlIGxvbmcsIHNoZSB3YXMgXHJcbnJlZ2FyZGVkIGFzIGEgcHJvZGlneSB0aGVyZSB0b28gLSB3aXRoIHRoZSBkaWZmZXJlbnQgb3JkZXJzIG9mIFdhdGNoZXJzLCBJbnF1aXNpdG9ycyBhbmQgU2Nob2xhcnMgdHJhaW5pbmcgaGVyIGFuZCBcclxudnlpbmcgZm9yIGhlciB0byBqb2luIHRoZW0uIFlldCB0aGVyZSB3YXMgbGl0dGxlIHN1cnByaXNlIHdoZW4gc2hlIGNob3NlIHRvIGpvaW4gdGhlIFdhdGNoZXJzIC0gYWZ0ZXIgYWxsIHNoZSB3YXNcclxudmlydHVhbGx5IFZhaGFyZXRoJ3MgZGF1Z2h0ZXIgLSBsaXZlZCBpbiBoaXMgYnVua2VyLCB0cmFpbmVkIHVuZGVyIGhpbSBwZXJzb25hbGx5LCBhbmQgaGFkIHRoZSBzYW1lIGNvbGQgc3RlZWwgZ2F6ZVxyXG50aGF0IGNvdWxkIHVubmVydmUgdGhlIG1vc3QgY29uZmlkZW50IG9mIG1lbi48YnIvPlxyXG5CZWluZyBzbyBjbG9zZSB0byBwb3dlciBhbmQgYmVpbmcgdGhlIGNlbnRlciBvZiBhdHRlbnRpb24gb2Ygc28gbWFueSBvcmRlcnMgbWVhbnQgdGhhdCBzaGUgbWV0IGEgZmFpciBzaGFyZSBvZiBcclxuaW1wb3J0YW50IHBlb3BsZSBmcm9tIGRpZmZlcmVudCBvcmRlcnMuIE9uZSBhbW9uZyB0aGVtIHdhcyB0aGUgYXBwcmVudGljZSBvZiB0aGUgR3VhcmRpYW4gb2YgRGVmZW5zZSwgXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlRyYWl0b3JPdGhlbGxvKS5jcmVhdGVMaW5rKFwiT3RoZWxsbyBUaXRhbmJvcm5cIil9LiBUaGUgZ2FyZGVucywgYmVjYXVzZSBvZiB0aGVpciBleHRyZW1lbHkgbG93IGJ1dCA8aT52ZXJ5PC9pPlxyXG5oaWdobHkgc2tpbGxlZCBwb3B1bGF0aW9uLCB3b3VsZCB0eXBpY2FsbHkgc2VuZCBvdXQgc3F1YWRzIG9mIHR3byBwZW9wbGUgZm9yIG1vc3Qgb3BlcmF0aW9ucyAtIGFuZCBDYWVseW5uIGFuZCBcclxuT3RoZWxsbyB3ZXJlIG9mdGVuIHRvZ2V0aGVyIGJlY2F1c2Ugb2YgdGhlaXIgY29tcGxlbWVudGFyeSBza2lsbHMgYnV0IGFsaWduaW5nIHBlcnNvbmFsaXRpZXMuIFRoZSB0d28gYmVnYW4gY291cnRpbmdcclxuYW5kIHdlcmUgYSBoYXBweSBjb3VwbGUgZm9yIHF1aXRlIGEgZmV3IGRlY2FkZXMuIEhvd2V2ZXIsIHRoYXQgd2FzIG5vdCB0byBsYXN0LCBhbmQgdGhlIGZvcmNlcyB0aGF0IGhhZCBicm9rZW4gXHJcbkNhZWx5bm4gYmVmb3JlIHdvdWxkIHNvb24gYnJlYWsgaGVyIGFnYWluLi4uXHJcbjxoNT5UaGUgQmV0cmF5YWwgYW5kIEJ1bmtlciMzNzE8L2g1PiAgXHJcbk9uZSBkYXksIFByZXZlc2VydmF0aW9uIHdhcyBhYmxhemUgd2l0aCB0aGUgbmV3cyB0aGF0IGV2ZXJ5b25lIGluIEJ1bmtlciMxNyBoYWQgZGllZC4gV2hlbiBpdCByZWFjaGVkIGhlciBlYXJzLCBzaGUgXHJcbndhcyB0ZXJyaWZpZWQsIGZvciB0aGF0IHdhcyB3aGVyZSBPdGhlbGxvIGxpdmVkLiBVcG9uIHJlYWNoaW5nIHRoZXJlLCBob3dldmVyLCBzaGUgcmVjaWV2ZWQgZXZlbiB3b3JzZSBuZXdzIGZyb20gdGhlXHJcbkd1YXJkaWFucyBvZiBPcmRlciBhbmQgTGlmZSB3aG8gd2VyZSBpbnNwZWN0aW5nIHRoZSBzaXRlLiBIZSB3YXMgbm90IGRlYWQsIGhlIHdhcyB0aGUgb25lIHdobyBoYWQga2lsbGVkIHRoZW0gYWxsLCBcclxud2l0aCB0aGUgYXNzaXN0YW5jZSBvZiBhIG15c3RlcmlvdXMgZ3JvdXAgb2YgYXNzYXNzaW5zIGZyb20gdGhlIENhc3RsZSBvZiBSdWluIGtub3duIGFzICdUaGUgVHJvdXBlJyBhbmQgZXNjYXBlZCB0aGVyZVxyXG53aXRoIHRoZW0gZm9sbG93aW5nIHRoZSBzbGF1Z2h0ZXIuIEhpcyBtb3RpdmVzIHdlcmUgdW5rbm93biwgYnV0IHRoZSBldmlkZW5jZSB3YXMgaXJyZWZ1dGFibGUuIFRoaXMgZXZpZGVuY2UgaW5jbHVkZWRcclxuYSBwcmlzb25lciwgd2hvbSBDYWVseW5uLCB1bmRlciB0aGUgc3VwZXJpdmlzaW9uIGFuZCBjb21tYW5kIG9mIHRoZSBHdWFyZGlhbiBvZiBPcmRlciwgdG9ydHVyZWQgYW5kICdwcmFjdGljZWQnIFxyXG5oZW1hbHVyZ3kgdXBvbi48YnIvPlxyXG5UaGUgc2hvY2sgb2YgYmV0cmF5YWwsIG92ZXJ3aGVsbWluZyBzZW5zZSBvZiBhYmFuZG9ubWVudCBhbmQgdHJhdW1hIG9mIGhlbWFsdXJneSBzZW50IENhZWx5bm4gaW50byBhIGRvd253YXJkIHNwaXJhbC5cclxuU2hlIHdvdWxkIGRvIGFsbCBmdXR1cmUgb3BlcmF0aW9ucyBhbG9uZSwgd2l0aCBNYWNoaWF2ZWxsaWFuIG1hbmV1dmVycyBleGVjdXRlZCB3aXRoIHV0dGVyIHJ1dGhsZXNzbmVzcy4gQW5kIHNvIHNoZVxyXG5zcGVudCBhbG1vc3QgdHdvIG1pbGxlbmlhIGluIHRoZSBzZXJ2aWNlIG9mIFByZXNlcnZhdGlvbi4gVW50aWwgZHVyaW5nIG9uZSBvZiBoZXIgbGFzdCBvcGVyYXRpb25zLCBzaGUgY2FtZSBmYWNlLXRvLWZhY2UgXHJcbmFnYWluc3QgYSBoaWdoZXIgdmFtcGlyZSBpbiB0aGUgc3RyZWV0cyBvZiBPcnR1cywgYSBtYWpvciBjYXBpdGFsIG9mIGEgcGxhbmV0IGluIE1hdGVyaWEuIFdoaWxlIHRoZXkgd2VyZSBhbnRhZ29uaXN0aWNcclxuYXQgZmlyc3QsIGluIGhlciBleWVzIENhZWx5bm4gc2F3IHRoZSBzYW1lIGxvb2sgYXMgaGVyc2VsZiAtIHRvIGJlIG1vcmUgcHJlY2lzZSwgdGhlIHNhbWUgbG9vayBmb2xsb3dpbmcgYm90aCB0aGUgXHJcbnRpbWVzIGxpZmUgaGFkIGJyb2tlbiBoZXIuIFRoaXMgZ2lybCwgc2hlIGtuZXcsIGhhZCBzZWVuIGFiYW5kb25tZW50LCBsb3NzIGFuZCByZWdyZXQsIGFuZCBsaXR0bGUgZWxzZSwgYXMgc2hlIHRvbyBcclxuc2xpZCBkb3dud2FyZHMgaW4gYSBzcGlyYWwgb2YgaGVyIG93biBkZW1vbnMuIERlc3BpdGUgaGVyc2VsZiwgQ2FlbHlubiBkaWQga2VlcCBhIGNsb3NlIGV5ZSBvbiBoZXIgYW55d2F5LCBhbmQgc28gd2FzIHRoZXJlIHRvIHNlZSBcclxud2hlbiBmaW5hbGx5IHRoZSB2YW1waXJlIHJlc2lzdGVkIGFnYWluc3QgdGhlIHNwaXJhbCwgcmVzaXN0ZWQgYWdhaW5zdCBpbnN0aW5jdHMgQ2FlbHlubiBrbmV3IHdlcmUgbW9yZSBwb3dlcmZ1bCwgXHJcbm1vcmUgcHJpbWFsIHRoYW4gc2hlIGhhZCBldmVyIGZhY2VkLjxici8+XHJcblRoYXQgbW9tZW50IGhhZCBtb3ZlZCBoZXIgdG8gYSBkZWdyZWUgbXVjaCBtb3JlIHRoYW4gc2hlIGNvdWxkIGFudGljaXBhdGUuIEJ1cmllZCByZWdyZXRzIGRlZXAgaW5zaWRlIGNhbWUgb3V0IGF0IFxyXG5sYXN0LCBhbmQgc28gc2hlLCBmb3IgdGhlIGZpcnN0IHRpbWUgYWZ0ZXIgT3RoZWxsbywgcmVhY2hlZCBvdXQgdG8gc29tZW9uZS4gQW5kIHNvIHNoZSByZXR1cm5lZCB0byB0aGUgR2FyZGVucyB3aXRoXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkxlc2xleSkuY3JlYXRlTGluayhcIkxlc2xleVwiKX0gaW4gdG93LiBUaGUgdHdvIHNvb24gZ3JldyB2ZXJ5IGNsb3NlLCBhbHNvIHN0YXJ0aW5nIHRvIHdvcmsgdG9nZXRoZXIgb25cclxub3BlcmF0aW9ucy4gQSBmZXcgZGVjYWRlcyBsYXRlciwgYXMgaGVyIGRhdGUgb2YgZ3JhZHVhdGlvbiBmcm9tIGZpZWxkIHNlcnZpY2UgYXJyaXZlZCwgaGVyIGNvbGxlZ3VlcyBnaWZ0ZWQgaGVyIGFuXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkRhdmVSdWhsKS5jcmVhdGVMaW5rKFwiYXV0b21hdG9uXCIpfSB0byBoZWxwIGRlZmVuZCBoZXIgaW4gY2xvc2UgcmFuZ2UuIEFuZCBzbyB0aGUgdGhyZWUgb2YgdGhlbSBzdGFydGVkIFxyXG5CdW5rZXIjMzcxLCBhbmQgcmVtYWluZWQgaXRzIHNvbGUgbWVtYmVycyBmb3Igb25lIGFuZCBhIGhhbGYgbWlsbGVuaWEuIFVudGlsIGZpbmFsbHkgQ2FlbHlubiB3YXMgdGhlcmUgZm9yIHNvbWVvbmVcclxudGhlIHdheSBWYWhhcmV0aCBoYWQgYmVlbiBmb3IgaGVyIC0gYW4gZWx2ZW4gZ2lybCwgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuTGlhKS5jcmVhdGVMaW5rKFwiTGlhIE1pc3RjbG9ha1wiKX0sIHdob1xyXG53YXMgJ3Rha2VuJyBieSB0aGUgc2Vjb25kLiBBIGZldyBjZW50dXJpZXMgYWZ0ZXIsIExpYSB3YXMgdG8gZ2V0IG1hcnJpZWQgYW5kXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlVscmljaCkuY3JlYXRlTGluayhcImhlciBodXNiYW5kXCIpfSB0b28gbW92ZWQgaW4uIEFnYWluIGFmdGVyIGEgZmV3IGNlbnRydXJpZXMgTGVzbGV5IGRlY2lkZWRcclxudG8gJ2Fkb3B0JyAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5FYmVuZXphcikuY3JlYXRlTGluayhcImEgaHVtYW4gYm95XCIpfSB3aG9zZSBzb3VsIHNlZW1lZCBidXJkZW5lZCBpbiB0aGUgc2FtZSB3YXkgdGhhdCBoZXJzIGFuZCBcclxuQ2FlbHlubidzIG9uY2UgaGFkLiBBcyBDYWVseW5uIGFwcHJvdmVkLCBpdCBmaW5hbGx5IHN0cnVjayBoZXIgdGhhdCBoZXIgbG9uZSB3b2xmIGRheXMgd2VyZSBhIHRoaW5nIG9mIHRoZSBsb25nIFxyXG5wYXN0IC0gYW5kIG9uY2UgYWdhaW4gc2hlIGZlbHQgd2FybXRoIGluIHRoZSBjb21wYW55IG9mIG90aGVycy4gSXQgd2FzIHdoZW4gdGhpcyBoYXBwZW5lZCB0aGF0IFZhaGFyZXRoIGZpbmFsbHkgXHJcbmRlY2lkZWQgdG8gbmFtZSBoZXIgaGlzIGFwcHJlbnRpY2UgZm9ybWFsbHksIG1lYW50IHRvIHN1Y2NlZWQgaGltIGFzIGd1YXJkaWFuLiBTaW5jZSB0aGVuIHRoZXJlIHdlcmUgYSBmZXcgdXBzIGFuZCBcclxuZG93bnMgLSBsaWtlIENvbmxleSBqb2luaW5nIGFuZCBFYmVuZXphciBhYmFuZG9uaW5nIExlc2xleSAtIGFuIGFjdCBvZiByZW1hcmthYmxlXHJcbnBhcmFsbGVsIHdpdGggdGhlIHdheSBPdGhlbGxvIG9uY2UgaGFkIGhlciwgYnV0IHdpdGggZWFjaCBvdGhlciBmb3Igc3VwcG9ydCwgdGhleSB3ZWF0aGVyZWQgYWxsIHRoYXQgY2FtZS5cclxuPGg1PlRoZSBob3VyIG9mIExvc3M8L2g1PlxyXG5BIGZldyBkYXlzIGJlZm9yZSB0aGUgaG91ciBvZiBsb3NzLCBDYWVseW5uIGdvdCBub3RpZmllZCBvZiBhIHRocmVhdCB0aGF0IHJlcXVpcmVkIGF0IGxlYXN0IHRoZSBhdHRlbnRpb24gb2YgYSBcclxuR3VhcmRpYW4gYXBwcmVudGljZS4gT24gYXJyaXZpbmcgdGhlIHNjZW5lLCBzaGUgZm91bmQgYSBncm91cCBvZiBhZHZlbnR1cmVycywgb2Ygd2hvbSBcclxuJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuTHVjaWFuKS5jcmVhdGVMaW5rKFwiYWxsIGJ1dCBvbmVcIil9IHdlcmUgcGVhY2VmdWxseSBzbHVtYmVyaW5nIGFyb3VuZCBhIG1pc3RmbGFtZS4gVGhlIG9uZSBub3QgXHJcbnNsdW1iZXJpbmcgc2VlbWVkIHRvIGJlIHJhdmluZywgYW5kIG9uIGhpcyBuZWNrLCBzaGUgY291bGQgc2VlIGEgTmlnaHRibG9vZCBpbmhpYml0b3IuIFNoZSBrbmV3IHdoYXQgdGhhdCBtZWFudCAtXHJcbmFuZCB0aGUgcGVvcGxlIHdobyBjb3VsZCB2ZW50dXJlIG91dHNpZGUgdGhlIGNhc3RsZSB3ZXJlIHR5cGljYWxseSB2ZXJ5IGRhbmdlcm91cyAtIHRoZSBcclxub25seSBvbmVzIHNoZSdkIGhlYXJkIG9mIHdlcmUgbWVtYmVycyBvZiB0aGUgdHJvdXBlLCBzdGVlbCBpbnF1aXNpdG9ycyBvciB0aGUgZGVtb24gbG9yZHMuIFRoZSBtaXN0IGNsdW5nIHRvIGhpbSwgc28gXHJcbmhlIHdhc24ndCBoZW1hbHVyZ2ljYWxseSBlbmhhbmNlZC4gQSBkZW1vbiBsb3JkIHdvdWxkbid0IGV2ZXIgd2VhciBhbiBpbmhpYml0b3IsIHNvIHRoYXQgbGVmdC4uLjxici8+XHJcblNoZSB3YXMgYWJvdXQgdG8gcmFpc2UgdGhlIGFsYXJtLCB3aGVuIHRoZSBpbmhpYml0b3Igc3VkZGVubHkgYnJva2UgLSBhbmQgdGhlIHBlcnNvbiBzdGFydGluZyBsYXVnaGluZyBpbiBhIFxyXG5wYXJ0aWN1bGFybHkgaW5zYW5lIHdheS4gSGUgdGhlbiBzdW1tb25lZCBzb21lLi4uIGFiZXJyYXRpb25zKD8pLCBnYXZlIHRoZW0gc29tZSBkaXJlY3Rpb25zLCBtYWRlIHNvbWUgcHJlcGVyYXRpb25zIFxyXG5mb3IgdGhlIG90aGVycywgdGhlbi4uLiBzbGl0IHRoZSB0aHJvYXRzIG9mIHRoZSBhYmVycmF0aW9ucyB1bnRpbCB0aGUgbWlzdHMgdG9yZSBhcGFydCBmcm9tIGhpbSwgYW5kIHRoZW4gaGUgc2xpcHBlZFxyXG50aHJvdWdoIHRoZSByZWFsbXMsIGdpdmluZyBoZXIgLSB3aG8gd2FzIHdpbGRzaGFwZWQgaW50byBhIHNwYXJyb3cgLSBhIGtub3dpbmcgZ3JpbiBhcyBoZSBmYWRlZC4gVGhlcmUgd291bGQgYmUgXHJcbmxpdHRsZSBwb2ludCBpbiBjaGFzaW5nIGhpbSwgYW5kIHdoaWxlIHNoZSB3YW50ZWQgdG8gZ2V0IGEgaG9sZCBvZiB0aGUga25pZmUgd2l0aCB3aGljaCBoZSBjb3VsZCAna2lsbCcgZXZlbiBpbiBoZXJlLFxyXG5zb21ldGhpbmcgYWJvdXQgaGlzIGdyaW4gdW5uZXJ2ZWQgaGVyLCBhbmQgc2hlIHdhbnRlZCB0byBsZWFybiB0aGUgbW90aXZpYXRpb25zIG9mIHRoZSBvdGhlcnMgc3RpbGwgYXNsZWVwLjxici8+XHJcbldoaWNoIHR1cm5lZCBvdXQgdG8gYmUgYSBnb29kIGlkZWEsIHNpbmNlIHRoZWlyIG1vdGl2YXRpb25zIHdlcmUgYXMgbm9ibGUgYXMgdGhleSBjb21lLiBBcyB0aGV5IHdpbGxpbmdseSBnYXZlIGhlciBcclxudGhlIGRhZ2dlciwgc2hlIGFsbG93ZWQgdGhlbSB0byBzdGF5IGFzIGd1ZXN0cyBpbiB0aGUgYnVua2VyLiBUaGV5IGNlcnRhaW5seSBkaWQgbWFrZSB0aGVpciBwcmVzZW5jZSBmZWx0IG91dCB0aGVyZS4gXHJcblRoZXkgaGVscGVkIHRoZW0gaW4gYW4gb2RkIHZhcmlldHkgb2YgdGFza3MsIGJ1dCB3aGF0IGxlZnQgaGVyIHRoZSBtb3N0IGdyYXRlZnVsIGZvciBoYXZpbmcgdGhlbSB3YXMgdGhhdCB0aGV5XHJcbmhlbHBlZCBMZXNsZXkgc2hlZCBzb21lIG9mIGhlciBkZW1vbnMuIFlldCBzb21ldGhpbmcgdW5uZXJ2ZWQgaGVyLCBldmVudHMgd2VyZSBtb3ZpbmcgdG9vIGZhc3QgZm9yIFxyXG50aGlzIHJlYWxtLiBDaXJjdW1zdGFuY2VzIHdoaWNoIHdvdWxkIGhhdmUgY29tZSBpbiB5ZWFycyBjYW1lIGluIGRheXMsIGFuZCB0aGV5IHdvdWxkIGFic29sdXRlbHkgbm90IGNvbnNpZGVyIHRoZSBcclxuaWRlYSBvZiBub3QgZ29pbmcgdG8gdGhlIGNhc3RsZSwgZGVzcGl0ZSBhbGwgaGVyIHdhcm5pbmdzLjxici8+XHJcblNvIHdoZW4gdGhlIGhvdXIgb2YgbG9zcyBmaW5hbGx5IGNhbWUsIHNoZSBmb3VuZCBoZXJzZWxmIGFudGljaXBhdGluZyBpdC4gUHJlc2VydmF0aW9uIHdhcyBnZXR0aW5nIHdlYWtlciBzaW5jZSBlb25zLFxyXG5hbmQgb2YgY291cnNlIDxpPnRoZXk8L2k+IHdvdWxkIHRha2UgYWR2YW50YWdlIG9mIHRoZSBpbWJhbGFuY2UgYmV0d2VlbiBzaGFyZGljIHBvd2Vycy4gQWZ0ZXIgaGVscGluZyBoZXIgbmV3IGd1ZXN0c1xyXG5tYWtlIGl0IGludG8gdGhlIGNhc3RsZSwgc2hlIGZvY3VzZWQgb24gcm9vdGluZyBvdXQgdGhlIGNvcnJ1cHRpb24gdGhhdCBzcHJlYWQsIHlldCB0aGlzIGluY3Vyc2lvbiB3YXMgd2F5IG1vcmUgdGhhblxyXG5oYWQgZXZlciBiZWVuIGJlZm9yZS4gVGhleSBkaWQga2VlcCBpdCBhdCBiYXkgdGhvdWdoLCBhbmQgd2hpbGUgbm8gbW9yZSB0aGFuIGhhbGYgYSBkb3plbiBkaWVkIGluIHRoZSBHYXJkZW4sIHRoZSBcclxuR2FyZGVucyB0aGVtc2VsdmVzIHdlcmUgY29tcGxldGVseSByYXZhZ2VkLiBWYWhhcmV0aCB0b28gZGVjaWRlZCB0byAncmV0aXJlJyB0byBzZWVrIG91dCB0aGUgY2F1c2Ugb2YgdGhpcywgbGVhdmluZyBcclxuaGVyIGFzIHRoZSBHdWFyZGlhbiBvZiBMaWZlLiBTb29uIGFmdGVyIHNoZSB0b29rIHBvd2VyLCBoZXIgZ3Vlc3RzIGVzdGFibGlzaGVkIGNvbnRhY3QgZnJvbSB3aXRoaW4gdGhlIGNhc3RsZSwgYSBcclxuZmVhdCB0aGF0IHJlcXVpcmVkIGEgZ3JlYXQgZGVhbCBvZiBtYWdpY2FsIHBvd2VyIGFuZCBza2lsbC4gV2hpbGUgc2hlIGRpZCB3b25kZXIgYWJvdXQgaXQsIGFzIHNoZSBkaWQgd29ycnkgYWJvdXQgXHJcbnRoZW0sIHRoaXMgd2FzIG5vdCB0aGUgdGltZS4gVGhlIGludGVsIHRoZXkgcHJvdmlkZWQgc3Ryb25nbHkgc3VnZ2VzdGVkIHRoYXQgdGhlIGNhdXNlIG9mIHRoZSByaWZ0IHdhcyBzb21ld2hlcmUgXHJcbndpdGhpbiBSdWluJ3MgZG9tYWluLiBBbmQgc28gYWxsIHRoZSBHdWFyZGlhbnMgc2V0IG91dCB0byBkZWFsIHdpdGggaXQuPGJyLz4gICAgICAgICAgXHJcblVuZm9ydHVuYXRlbHksIHRoZXkgd2VyZSB0b28gbGF0ZSAtIGJ5IHRoZSB0aW1lIHRoZXkgaGFkIHRha2VuIGNvbnRyb2wsIGFuZCBjcm9zc2VkIHRoZSBtaWRuaWdodCBib3VuZGFyeSB0byBmaW5kIFxyXG50aGVtc2VsdmVzIGZhY2UgdG8gZmFjZSB3aXRoICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkxvZ29zUGxheXdyaWdodCkuY3JlYXRlTGluayhcIlRoZSBQbGF5d3JpZ2h0XCIpfSBhbmQgXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlNhbmd1aW5hcmNoKS5jcmVhdGVMaW5rKFwiVGhlIFNhbmd1aW5lQXJjaFwiKX0sIHRoZSBwcmltb3JpZGFsIG5pZ2h0bWFyZXMgd2VyZSBhbHJlYWR5IGZyZWUuIFxyXG5UaGFua2Z1bGx5LCBhbGwgb2YgdGhlbSBiZWluZyBpbiBvbmUgcGxhY2UgbWVhbnQgdGhhdCBhIGdyZWF0ZXIgZGlzYXN0ZXIgd2FzIHByZXZlbnRlZC4gRXZlbiB3aXRoIGFsbCBoaXMgaW5xdWlzaXRvcnMsXHJcblJ1aW4gY291bGQgbm90IHRha2Ugb24gdGhlIGZpdmUgb2YgdGhlbSB0b2dldGhlci4gVGhhdCBtZWFudCBoZSBjb3VsZG4ndCBnZXQgdGhlIEF0aXVtLCBjb3VsZG4ndCBjb21wbGV0ZSBoaW1zZWxmIGFuZFxyXG53YXMgZXZlbmx5IG1hdGNoZWQgYWdhaW5zdCB0aGUgbmV3IFByZXNlcnZhdGlvbiwgJ1RoZSBTdXJ2aXZvcicuIEJ1dCBsZWF2aW5nIHRoZSBBdGl1bSBzdGFzaCBpbnRhY3Qgd2FzIHRvbyBtdWNoIG9mIGFcclxucmlzaywgc28gdGhleSBvZmZlcmVkIHRoZSBhZHZlbnR1cmVycyB0byBidXJuIGl0IGFsbCBpZiB0aGV5IHdvdWxkIGxpa2UgdG8sIGFuIGhvbm91ciBmb3IgaGVscGluZyBwcm90ZWN0IHRoZSBlbnRpcmUgXHJcbm11bHRpdmVyc2UgZnJvbSB1dHRlciBhbmQgaW1taW5lbnQgZGVzdHJ1Y3Rpb24uIEhvd2V2ZXIsIHRoZSBhZHZlbnR1cmVzIHJlZnVzZWQgYXMgdGhleSBmZWx0IHRoZSBHdWFyZGlhbnMgd2VyZSBcclxuYmV0dGVyIHN1aXRlZCBmb3IgdGhlIHBvd2VyLiBUaGV5IGp1c3Qgd2FudGVkIHRvIGhhdmUgcGVhY2UgYW5kIHF1aWV0IGFuZCBsZWF2ZSB0aGUgY2FzdGxlIGJlaGluZCBmaW5hbGx5Ljxici8+XHJcbkhvd2V2ZXIsIHRoYXQgd2FzIG5vdCB0byBiZS4gRm9yIG9uZSBvZiB0aGVtIGhhZCBiZWVuIG1hcmtlZCBieSBUaGUgc2Vjb25kLCBhbmQgdGhlXHJcblBsYXl3cmlnaHQncyBwb3dlcnMgaGFkIGJvdW5kIHRoZWlyIHNvdWxzIGluIHRoZWlyIHNraXJtaXNoLiBBbmQgc28sIHNoZSBvbmNlIGFnYWluIGxvc3QgYSBncm91cCBvZiBnb29kIHBlb3BsZSwgXHJcbnBlb3BsZSBpbXBvcnRhbnQgdG8gaGVyLCBwZW9wbGUgd2hvJ2QgZ2l2ZW4gaGVyIGhvcGUuIFRoZXJlIHdlcmUgYWxyZWFkeSBwbGFucyBvZiB3YXIgaW4gbW90aW9uLiBPZiB2ZW5nZW5jZSwgb2Zcclxuc3Vydml2YWwuIFVudGlsIG5vdywgdGhleSBoYWQgdHJpZWQgdG8gcGxheSBuaWNlLCBpdCBoYWQgcmVzdWx0ZWQgaW4gdGhlIGRlYXRoIG9mIGZyaWVuZHMsIGluIHRoZSBkZWF0aCBvZiBHb2QuIFxyXG5ObyBtb3JlLi4uYDtcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5JbmR1c3RyaW91cywgNF0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQ29uZmlkZW50LCAzXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5PdXRkb29yc21hbiwgM10sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuS2luZCwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuT3B0aW1pc3QsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkFzY2V0aWMsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlN0ZXJuLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5BYnJhc2l2ZSwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQmlzZXh1YWwsIDFdLFxyXG4gICAgY2FlLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxufVxyXG5leHBvcnRzLnNldHVwQ2FlbHlubiA9IHNldHVwQ2FlbHlubjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FlbHlubi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwRGF2ZSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwRGF2ZSgpIHtcclxuICAgIGNvbnN0IGRhdmUgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuRGF2ZVJ1aGwpO1xyXG4gICAgZGF2ZS5jb3JlLm5hbWUgPSBcIkRhdmUgUnVobFwiO1xyXG4gICAgZGF2ZS5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMS9kYXZlLnBuZ1wiO1xyXG4gICAgZGF2ZS5jYXJkLmFkZENhcmRUYWcoXCJQaHlzaWNhbGx5IERlY2Vhc2VkXCIpO1xyXG4gICAgZGF2ZS5jYXJkLnNldENhbXBhaWduQXJjKDEsIDEpO1xyXG4gICAgZGF2ZS5jYXJkLmFkZENhcmRUYWcoXCJNMjUwMFwiKTtcclxuICAgIGRhdmUuY2FyZC5hZGRDYXJkVGFnKFwiQ1IgfCAxM1wiKTtcclxuICAgIGRhdmUuY2FyZC5hZGRDYXJkVGFnKFwiRnJvbSB8IElubm92YXRpb24gLyBQcmVzZXJ2YXRpb25cIik7XHJcbiAgICBkYXZlLmNhcmQuYWRkQ2FyZFRhZyhcIlJhY2UgfCBXYXJmb3JnZWRcIik7XHJcbiAgICBkYXZlLmNhcmQuYWRkQ2FyZFRhZyhcIjxzcGFuIGNsYXNzPSd2ZXJib3NlJz5TYW11cmFpPC9zcGFuPiBGaWdodGVyXCIpO1xyXG4gICAgZGF2ZS5jYXJkLmFkZENhcmRUYWcoXCJGYWN0aW9uOiBEZWZlbmRlcnNcIik7XHJcbiAgICBkYXZlLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBBIHdhcmZvcmdlZCBhdXRvbWF0b24gdGhhdCB3YXMgcHVyY2hhc2VkIGJ5ICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkNhZWx5bm4pLmNyZWF0ZUxpbmsoXCJDYWVseW5uXCIpfSdzIFxyXG4gICAgICBiYXRjaC1tYXRlcyBhdCBhIGhlYXZ5IHByaWNlIHVwb24gaGVyIGdyYWR1YXRpb24sIHRvIHNlcnZlIGFuZCBwcm90ZWN0IGhlci4gSGlzIG1vZHVsZXMgd2VyZSBoZWF2aWx5IG9wZXJhdGVkIFxyXG4gICAgICB1cG9uIGJ5IExlc2xleSB3aG8gcHJhY3RpY2VkIGhlciBjb2Rpbmcgc2tpbGxzIG9uIGhpbS4gRmFpbGVkIHRvIGRlZmVuZCBDYWVseW5uIGF0IG9uZSBwb2ludCBsb25nIGFnbywgYW5kIFxyXG4gICAgICBnYXZlIGhpcyBsaWZlIGhvbGRpbmcgb3V0IGFnYWluc3QgYSBkZWVwLXNlYSBhYmVycmF0aW9uIHRvIGF0b25lIGZvciBpdC5gO1xyXG4gICAgZGF2ZS5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cERhdmUgPSBzZXR1cERhdmU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEViZW5lemFyID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBFYmVuZXphcigpIHtcclxuICAgIGNvbnN0IGJlbiA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5FYmVuZXphcik7XHJcbiAgICBiZW4uY29yZS5uYW1lID0gXCJFYmVuZXphclwiO1xyXG4gICAgYmVuLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMxL2ViZW5lemFyLnBuZ1wiO1xyXG4gICAgYmVuLmNhcmQuYWRkQ2FyZFRhZyhcIkRlY2Vhc2VkXCIpO1xyXG4gICAgYmVuLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMSk7XHJcbiAgICBiZW4uY2FyZC5hZGRDYXJkVGFnKFwiTTc1MFwiKTtcclxuICAgIGJlbi5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDIyXCIpO1xyXG4gICAgYmVuLmNhcmQuYWRkQ2FyZFRhZyhcIkZyb20gfCBNYXRlcmlhIC8gUHJlc2VydmF0aW9uIC8gUnVpblwiKTtcclxuICAgIGJlbi5jYXJkLmFkZENhcmRUYWcoXCJSYWNlIHwgSHVtYW5cIik7XHJcbiAgICBiZW4uY2FyZC5hZGRDYXJkVGFnKFwiPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPkRpdmluYXRpb248L3NwYW4+IFdpemFyZFwiKTtcclxuICAgIGJlbi5jYXJkLmFkZENhcmRUYWcoXCJMaWNoXCIpO1xyXG4gICAgYmVuLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBcclxuICAgICBBIGh1bWFuIGtpZCBib3JuIGluIHRoZSB0aGUgY2xhc3NpY2FsIGVyYS4gQWNjaWRlbnRhbGx5IGVudGVyZWQgYSBwZXJwZW5kaWN1bGFyaXR5IGluc2lkZSBhIFxyXG4gICAgIHN1YnRlcnJhbmVhbiBsYWtlIGludG8gdGhlIEdhcmRlbnMuIExpdmVkIHRoZXJlIGZvciBhIGZldyBjZW50dXJpZXMgYW5kIHRyYWluZWQgZmFuYXRpY2FsbHkgYXMgYSBtYWdlIHVuZGVyIGhpc1xyXG4gICAgIHRoZW4tZ2lybGZyaWVuZCAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5MZXNsZXkpLmNyZWF0ZUxpbmsoKX0ncyB0dXRlbGFnZSBhbmQgc29vbiBzdXJwYXNzZWQgaGVyLiBCZWNhbWUgYSBMaWNoXHJcbiAgICAgYW5kIHdvdWxkIG9mdGVuIHJvYW0gaW4gc2hhZHkgYWxsZXlzIG9mIE1hdGVyaWEsIGFwcGVhcmluZyBoZWxwbGVzcyAtIHRoZW4gZmVlZGluZyBvbiB0aGUgc291bHMgb2YgYW55IHdobyBcclxuICAgICBhc3NhdWx0ZWQgaGltLiBTdGFiaWxpemVkIHRoZSBwZXJwZW5kaWN1bGFyaXR5IGJldHdlZW4gdGhlIGxha2UgaGUgb25jZSBkcm93bmVkIGluIC0gbWFraW5nIGl0IGhpcyAnbGFpcicgLSBhbmQgXHJcbiAgICAgdGhlIE1pc3RmbGFtZSBpbiB0aGUgR2FyZGVucyBuZWFyIEJ1bmtlciMzNzEuIFdlbnQgdG8gdGhlIGNhc3RsZSB0byAnZmlnaHQgZGVhdGgnLCBidXQgZmFpbGVkIGFuZCBkaWVkLCBoaXMgXHJcbiAgICAgbGFzdCBkYXlzIGFuZCB3aGVyZWFib3V0cyByZW1haW4gdW5rbm93bi5cclxuICAgIGA7XHJcbiAgICBiZW4ub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBFYmVuZXphciA9IHNldHVwRWJlbmV6YXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWViZW5lemFyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBJcmVuZSA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgRGljZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL3JvbGxpbmcvRGljZVwiKTtcclxuY29uc3QgQWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vYWN0aW9uL0FjdGlvblwiKTtcclxuY29uc3QgV3JhcF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9XcmFwXCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmNvbnN0IE1vcmFsZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL01vcmFsZVwiKTtcclxuZnVuY3Rpb24gc2V0dXBJcmVuZSgpIHtcclxuICAgIGNvbnN0IGlyZW5lID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELklyZW5lKTtcclxuICAgIGlyZW5lLmNvcmUubmFtZSA9IFwiSXJlbmVcIjtcclxuICAgIGlyZW5lLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMxL2lyZW5lLnBuZ1wiO1xyXG4gICAgaXJlbmUuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAxKTtcclxuICAgIGlyZW5lLmNhcmQuYWRkQ2FyZFRhZyhcIkYxMzkwXCIpO1xyXG4gICAgaXJlbmUuY2FyZC5hZGRDYXJkVGFnKFwiQ1IgfCAxNlwiKTtcclxuICAgIGlyZW5lLmNhcmQuYWRkQ2FyZFRhZyhcIkZyb20gfCBBaXIgLyBXYXRlciAvIFByZXNlcnZhdGlvblwiKTtcclxuICAgIGlyZW5lLmNhcmQuYWRkQ2FyZFRhZyhcIkFsbGVnaWFuY2UgfCBQcmVzZXJ2YXRpb25cIik7XHJcbiAgICBpcmVuZS5jYXJkLmFkZENhcmRUYWcoXCJSYWNlIHwgQWlyIEdlbmFzaVwiKTtcclxuICAgIGlyZW5lLmNhcmQuYWRkQ2FyZFRhZyhcIjxzcGFuIGNsYXNzPSd2ZXJib3NlJz5HdW5zbGluZ2VyPC9zcGFuPiBGaWdodGVyIC8gPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPlRlbXBlc3Q8L3NwYW4+IENsZXJpYyAvIDxzcGFuIGNsYXNzPSd2ZXJib3NlJz5TdG9ybTwvc3Bhbj4gU29yY2VyZXJcIik7XHJcbiAgICBpcmVuZS5jYXJkLmFkZENhcmRUYWcoXCJGYWN0aW9uOiBJbnF1aXNpdG9yXCIpO1xyXG4gICAgaXJlbmUuY2FyZC5hZGRDYXJkVGFnKFwiSW5xdWlzaXRvciBvZiA/Pz9cIik7XHJcbiAgICBpcmVuZS5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJlZmZlY3RfdGFnXCI+SW5jb21wbGV0ZTwvZGl2Pjxici8+XHJcbiAgICBBbiBhaXIgZ2VuYXNpIHdobyB3YXMgYSBqdW5pb3IgbWVtYmVyIG9mIHRoZSBpbnF1aXNpdGlvbiBvZiB0aGUgZ2FyZGVucy4gQWxsIGhlciBidW5rZXItbWF0ZXMgd2VyZSBraWxsZWQgaW4gXHJcbiAgICBhbiBhdHRhY2sgYnkgVGhlIFRyb3VwZSBhcm91bmQgMzAwIHllYXJzIGFnbywgYnV0IHRoZSAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5LamVycmEpLmNyZWF0ZUxpbmsoXCJHdWFyZGlhbiBvZiBNYWdpY1wiKX1cclxuICAgIHRvb2sgcGl0eSBvbiBoZXIgYW5kIHJlcGxhY2VkIHRoZW0gYWxsIHdpdGggcGh5c2ljYWxseSBpbnRyYWN0YWJsZSBhbmQgc2VudGllbnQgaWxsdXNpb25zLiBEZXNwaXRlIHRoZW0gYmVpbmcgXHJcbiAgICBuZWFyLXBlcmZlY3QgcmVwbGljYXMsIElyZW5lIGV2ZW50dWFsbHkgZmlndXJlZCBvdXQgdGhlaXIgdHJ1ZSBuYXR1cmUsIGJ1dCBiZWluZyBncmF0ZWZ1bCBmb3IgdGhlIGNvbmNlcm4sIHNoZSBcclxuICAgIGtlcHQgdGhlIHByZXRlbnNlIG9mIGJlbGlldmluZyBpbiB0aGVtLiBFdmVuIHNvLCAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5MZXNsZXkpLmNyZWF0ZUxpbmsoXCJMZXNsZXlcIil9IHRvb2sgYSBwZXJzb25hbCBcclxuICAgIGludGVyZXN0IGluIGhlciBhbmQgbWFkZSBzdXJlIHRvIGludml0ZSBoZXIgZXZlcnkgbm93IGFuZCB0aGVuIHRvIG1ha2Ugc3VyZSBzaGUgZ290IHRvIGludGVyYWN0IHdpdGggcmVhbCBwZW9wbGUuXHJcbiAgICBEdXJpbmcgdGhlIEhvdXIgb2YgTG9zcywgc2hlIGRpc3BsYXllZCB1bmV4cGVjdGVkIHNraWxsIChsZWFkaW5nIG90aGVycyB0byBzdXNwZWN0IHNoZSBoYWQgc3BlY2lmaWNhbGx5IGJlZW4gXHJcbiAgICB0cmFpbmVkIGZvciBzdWNoIHNpdHVhdGlvbnMpLCByZXNvbHZlLCBhbmQgZmFuYXRpY2lzbSBpbiBmaWdodGluZyBhIGRlZXAtb2NlYW4gYWJlcnJhdGlvbiBidXQgd2VudCBtaXNzaW5nIGluXHJcbiAgICB0aGUgZmlnaHQuYDtcclxuICAgIGlyZW5lLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSB0cnVlO1xyXG4gICAgaXJlbmUuZFN0YXRzLmluaXRpYWxpemVTdGF0cyg4LCAyMCwgMTAsIDgsIDE0LCAyMCk7XHJcbiAgICBpcmVuZS5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg3KTtcclxuICAgIGlyZW5lLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuQWNyb2JhdGljcywgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGlyZW5lLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuSW5zaWdodCwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICBpcmVuZS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkludGltaWRhdGlvbiwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICBpcmVuZS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlJlbGlnaW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgaXJlbmUuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TdGVhbHRoLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIGlyZW5lLm9wZXJhdG9yLm1vcmFsZSA9IE1vcmFsZV8xLk1vcmFsZS5BdmVyYWdlO1xyXG4gICAgaXJlbmUuZFNLaWxscy5maW5hbGl6ZVNraWxscygpO1xyXG4gICAgaXJlbmUuY1NraWxscy5zZXRTa2lsbFZhbHVlcyhbXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BY2NvdW50aW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BbnRocm9wb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFwcHJhaXNlLCA3MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXJjaGFlb2xvZ3ksIDQwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BcnRpbGxlcnksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNoYXJtLCAxNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ29tcHV0ZXJVc2UsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRlbW9saXRpb25zLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5EaXNndWlzZSwgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGl2aW5nLCAxNTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRyaXZlQXV0bywgMjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkVsZWN0cmljYWxSZXBhaXIsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbGVjdHJvbmljcywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRmlyc3RBaWQsIDkwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5IeXBub3NpcywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTGF3LCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5MaWJyYXJ5VXNlLCAyMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTG9ja3NtaXRoLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5NZWNoYW5pY2FsUmVwYWlyLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTW9kZXJuTWVkaWNpbmUsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdHVyYWxXb3JsZCwgNjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdmlnYXRlLCA5MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuT2NjdWx0LCA1MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuT3BlcmF0ZUhlYXZ5TWFjaGluZXJ5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Qc3ljaG9hbmFseXNpcywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUmVhZExpcHMsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlJpZGUsIDE1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5UaHJvdywgMjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFjdGluZywgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2FsbGlncmFwaHksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNhcnBlbnRyeSwgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNvb2tpbmcsIDIwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5EYW5jaW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5GaW5lQXJ0LCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Gb3JnZXJ5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Xcml0aW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5TaW5naW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5QYWludGluZywgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUGhvdG9ncmFwaHksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlNjdWxwdGluZywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2hhaW5zYXcsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5IZWF2eVdlYXBvbnMsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5GbGFtZXRocm93ZXIsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5NYWNoaW5lR3VuLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuU3VibWFjaGluZUd1biwgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFpcmNyYWZ0LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb2F0LCA2NSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXN0cm9ub215LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5CaW9sb2d5LCAzNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQm90YW55LCA1MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2hlbWlzdHJ5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DcnlwdG9ncmFwaHksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkVuZ2luZWVyaW5nLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Gb3JlbnNpY3MsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkdlb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1hdGhlbWF0aWNzLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTWV0ZW9yb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBoYXJtYWN5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5QaHlzaWNzLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5ab29sb2d5LCA1MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgXSk7XHJcbiAgICBpcmVuZS5vcGVyYXRvci5mYXRpZ3VlID0gMDtcclxuICAgIGlyZW5lLm9wZXJhdG9yLnJhdGluZ3MgPSB7XHJcbiAgICAgICAgZGFtYWdlOiBcIlNcIixcclxuICAgICAgICBjb250cm9sOiBcIkErXCIsXHJcbiAgICAgICAgc3Vydml2YWw6IFwiQlwiLFxyXG4gICAgICAgIHBybzogXCJTXCIsXHJcbiAgICB9O1xyXG4gICAgaXJlbmUub3BlcmF0b3IuYWRkTm90YWJsZVN0dWZmKFwiTWFqb3IgRGFtYWdlIFR5cGVcIiwgXCJNYWdpY2FsIFBpZXJjaW5nLCBMaWdodG5pbmcsIEZvcmNlXCIpO1xyXG4gICAgaXJlbmUub3BlcmF0b3IuYWRkTm90YWJsZVN0dWZmKFwiSW5zYW5lbHkgU3Ryb25nIGFnYWluc3RcIiwgXCJTZWFib3JuXCIpO1xyXG4gICAgaXJlbmUub3BlcmF0b3IuYWRkTm90YWJsZVN0dWZmKFwiU3Ryb25nIGFnYWluc3RcIiwgXCJNZWxlZSBPcHBvbmVudHMsIFVuZGVhZFwiKTtcclxuICAgIGlyZW5lLm9wZXJhdG9yLmFkZE5vdGFibGVTdHVmZihcIldlYWsgYWdhaW5zdFwiLCBcIkZseWluZyBlbmVtaWVzXCIpO1xyXG4gICAgaXJlbmUub3BlcmF0b3IuYWRkTm90YWJsZVN0dWZmKFwiQ29tYmF0IEV4cGVyaWVuY2VcIiwgXCJTU1MgR3JhZGUgKD4xMDAwIHllYXJzKVwiKTtcclxuICAgIGlyZW5lLm9wZXJhdG9yLnNldENoZW1pc3RyeVdpdGgobnBjSW5kZXhfMS5OcGNJRC5Kb3JkaSwgMTEsIFwiVGhpbmtzIGhlJ3MgYSBuaWNlIHBlcnNvbiwgYXBwcmVjaWF0ZXMgYmVpbmcgYWJsZSB0byBzcGVuZCB0aW1lIHdpdGggaGltIGluIGNvbWZvcnRhYmxlIHNpbGVuY2UuXCIpO1xyXG4gICAgaXJlbmUub3BlcmF0b3IucHJvZmVzc2lvbnMgPSBbXCJJbnF1aXNpdG9yXCIsIFwiVW5lbXBsb3llZCAoQW1uZXNpYWMpXCJdO1xyXG4gICAgaXJlbmUub3BlcmF0b3IuZXJhID0gY29uc3RhbnRzXzEuRXJhLlRpbWVsZXNzO1xyXG4gICAgaXJlbmUuc2hlZXQuY3IgPSBuZXcgY29uc3RhbnRzXzEuQ1JWYWx1ZSgxNik7XHJcbiAgICBpcmVuZS5vcGVyYXRvci5hZGROb3RhYmxlU3R1ZmYoXCJDaGFsbGVuZ2UgUmF0aW5nXCIsIFwiMTZcIik7XHJcbiAgICBpcmVuZS5jb21iYXQuc2V0U3BlZWQoY29uc3RhbnRzXzEuU3BlZWQuV2Fsa2luZywgNDApO1xyXG4gICAgaXJlbmUuY29tYmF0LnNldFNwZWVkKGNvbnN0YW50c18xLlNwZWVkLlN3aW1taW5nLCA3MCk7XHJcbiAgICBpcmVuZS5jb21iYXQuc2V0U3BlZWQoY29uc3RhbnRzXzEuU3BlZWQuRmx5aW5nLCAzMCk7XHJcbiAgICBpcmVuZS5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5EZXgpO1xyXG4gICAgaXJlbmUuY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICBpcmVuZS5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5XaXMpO1xyXG4gICAgaXJlbmUuY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRDbGFzc0xldmVscyhjb25zdGFudHNfMS5BZHZlbnR1cmVyQ2xhc3MuU29yY2VyZXIsIDUpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZENsYXNzTGV2ZWxzKGNvbnN0YW50c18xLkFkdmVudHVyZXJDbGFzcy5DbGVyaWMsIDIpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZENsYXNzTGV2ZWxzKGNvbnN0YW50c18xLkFkdmVudHVyZXJDbGFzcy5GaWdodGVyLCA3KTtcclxuICAgIGlyZW5lLmNvbWJhdC5ib251c0hQID0gMzI7XHJcbiAgICBpcmVuZS5jb21iYXQuY29tcHV0ZUhQKCk7XHJcbiAgICBpcmVuZS5jb21iYXQuc2V0U2Vuc2UoY29uc3RhbnRzXzEuU2Vuc2UuRGFya3Zpc2lvbiwgMTIwKTtcclxuICAgIGlyZW5lLmNvbWJhdC5zZXRTZW5zZShjb25zdGFudHNfMS5TZW5zZS5UcmVtb3JTZW5zZSwgMTIwKTtcclxuICAgIGlyZW5lLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Db2xkLCAxMDApO1xyXG4gICAgaXJlbmUuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBvaXNvbiwgMTAwKTtcclxuICAgIGlyZW5lLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5BY2lkLCAxMDApO1xyXG4gICAgaXJlbmUuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZywgMTAwKTtcclxuICAgIGlyZW5lLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qc3ljaGljLCA1MCk7XHJcbiAgICBpcmVuZS5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTmVjcm90aWMsIDUwKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRDb25kaXRpb25JbW11bml0eShjb25zdGFudHNfMS5Db25kaXRpb24uRnJpZ2h0ZW5lZCk7XHJcbiAgICBpcmVuZS5jb21iYXQuYWRkQ29uZGl0aW9uSW1tdW5pdHkoY29uc3RhbnRzXzEuQ29uZGl0aW9uLkJsaW5kZWQpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZENvbmRpdGlvbkltbXVuaXR5KGNvbnN0YW50c18xLkNvbmRpdGlvbi5Qb2lzb25lZCk7XHJcbiAgICBpcmVuZS5jb21iYXQuYWRkQ29uZGl0aW9uSW1tdW5pdHkoY29uc3RhbnRzXzEuQ29uZGl0aW9uLlN0dW5uZWQpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZENvbmRpdGlvbkltbXVuaXR5KGNvbnN0YW50c18xLkNvbmRpdGlvbi5QYXJhbHl6ZWQpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYDxwPjxzdHJvbmc+PGVtPlNjb3VyZ2Ugb2YgdGhlIERlZXAgT2NlYW5zLjwvZW0+PC9zdHJvbmc+IEhlciBuYXR1cmFsIFxyXG4gICAgICAgIGJpb2xvZ3kgYW5kIGV4dGVuc2l2ZSB0cmFpbmluZyBhcyBhbiBpbnF1aXNpdG9yIFxyXG4gICAgICAgIGhhcyBtYWRlIElyZW5lIGRlYWRseSBpbiB0aGUgb2NlYW5zLiBTaGUgY2FuIGhvbGQgaGVyIGJyZWF0aCBpbmRlZmluaXRlbHksXHJcbiAgICAgICAgbmV2ZXIgdGFrZXMgZGFtYWdlIGZyb20gd2F0ZXIgcHJlc3N1cmUgYW5kIGNhbiBtYWtlIGhlciBib2R5IGFzIGJ1b3lhbnQgXHJcbiAgICAgICAgYXMgdGhlIHdpbmQgaXRzZWxmLiBBZGRpdGlvbmFsbHksIHNoZSB0YWtlcyBvbmx5IDIwJSBkYW1hZ2UgZnJvbSBzZWFib3JuIFxyXG4gICAgICAgIGNyZWF0dXJlcyBhbmQgaGVyIHRvLWhpdCByb2xscyBhbmQgc2F2ZXMgYWdhaW5zdCB0aGVtIGhhdmUgYWR2YW50YWdlLCBhc1xyXG4gICAgICAgIHRoZXkgaGF2ZSBkaXNhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIGFuZCBzYXZpbmcgdGhyb3dzIGFnYWluc3QgaGVyLjwvcD5gKSk7XHJcbiAgICBpcmVuZS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PHN0cm9uZz48ZW0+QmxhZGUgb2YgdGhlIHdpbmRzLjwvZW0+PC9zdHJvbmc+IENyZWF0dXJlcyBsZXZpdGF0ZWQgYnkgSXJlbmUgXHJcbiAgICAgICAgd2l0aG91dCBhIGZseWluZyBzcGVlZCBhcmUgY29uc2lkZXJlZCByZXN0cmFpbmVkLiBTaGUgZ2FpbnMgYW4gYWRkaXRpb25hbFxyXG4gICAgICAgICs1IHRvIGF0dGFjayByb2xscyBhZ2FpbnN0IHN1Y2ggY3JlYXR1cmVzIGFuZCBkZWFscyBkb3VibGUgZGFtYWdlIG9uIGFsbCBcclxuICAgICAgICBoZXIgYXR0YWNrcyBhZ2FpbnN0IHRob3NlIGNyZWF0dXJlcy5cclxuICAgICAgICBJZiB0aGUgbGV2aXRhdGluZyBjcmVhdHVyZXMgYXJlIHNlYWJvcm4sIHNoZSBhZGRpdGlvbmFsbHkgcm9sbHMgd2l0aCBzdXBlci1hZHZhbnRhZ2UuPC9wPmApKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsIGA8cD48c3Ryb25nPjxlbT5BY3Rpb24gU3VyZ2UuPC9lbT4gKDEvU1IpPC9zdHJvbmc+IElyZW5lIG1heSBjaG9vc2UgdG8gXHJcbiAgICAgICAgdGFrZSBhbiBhZGRpdGlvbmFsIGFjdGlvbiBpbiBvbmUgb2YgaGVyIHR1cm5zLjwvcD5gKSk7XHJcbiAgICBpcmVuZS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PHN0cm9uZz48ZW0+U3BlbGxjYXN0aW5nLjwvZW0+PC9zdHJvbmc+IElyZW5lIGlzIGEgN3RoIGxldmVsIHNwZWxsY2FzdGVyIFxyXG4gICAgICAgIGFuZCBoYXMgdGhlIGZvbGxvd2luZyBzcGVsbHMgcHJlcGFyZWQgKFRvIGhpdCAkeygwLCBXcmFwXzEud3JhcFJvbGwpKGlyZW5lLkNIQSArIGlyZW5lLlByb2YgKyAzKX0gU2F2ZSBEQyAkeyhpcmVuZS5kYyhjb25zdGFudHNfMS5EU3RhdC5DaGEpKSArIDN9KTwvcD5cclxuICAgICAgICA8dWwgc3R5bGU9XCJmb250LXNpemU6IDEycHg7XCI+XHJcbiAgICAgICAgICAgIDxsaT48Yj5DYW50cmlwLjwvYj4gR3VpZGFuY2UsIFNob2NraW5nIEdyYXNwICgzZDggJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZyl9IGRhbWFnZSk8L2xpPlxyXG4gICAgICAgICAgICA8bGk+PGI+MTxzdXA+c3Q8L3N1cD4gTGV2ZWwuICg0IHNsb3RzKTwvYj4gSGVhbGluZyB3b3JkLCBDdXJlIFdvdW5kcywgRGV0ZWN0IEV2aWwgYW5kIEdvb2QsIFByb3RlY3Rpb24gRnJvbSBFdmlsIGFuZCBHb29kLCBGb2cgY2xvdWQsIFNoaWVsZDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT48Yj4yPHN1cD5uZDwvc3VwPiBMZXZlbC4gKDMgc2xvdHMpPC9iPiBMZXZpdGF0ZTwvbGk+XHJcbiAgICAgICAgICAgIDxsaT48Yj4zPHN1cD5yZDwvc3VwPiBMZXZlbC4gKDMgc2xvdHMpPC9iPiBMaWdodG5pbmcgQm9sdDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT48Yj40PHN1cD50aDwvc3VwPiBMZXZlbC4gKDEgc2xvdCk8L2I+PC9saT5cclxuICAgICAgICA8L3VsPlxyXG4gICAgICAgIDxwPkR1ZSB0byBoZXIgZXh0ZW5zaXZlIHRyYWluaW5nLCBzaGUgY2FuIGNhc3QgdGhlc2Ugc3BlbGxzIHdpdGhvdXQgVmVyYmFsIG9yIFxyXG4gICAgICAgIFNvbWF0aWMgY29tcG9uZW50cy48L3A+YCkpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+TXVsdGlhdHRhY2suPC9lbT48L3N0cm9uZz4gQXMgYW4gYWN0aW9uIGlyZW5lIG1ha2VzIHR3byBcclxuICAgICAgICBhdHRhY2tzIHdpdGggaGVyIHJhcGllciBhbmQgb25lIHdpdGggaGVyIHJldm9sdmVyLiBJZiB0aGVyZSBhcmUgc2VhYm9ybiBcclxuICAgICAgICBpbiB0aGUgYmF0dGxlZmllbGQsIHNoZSBpbnN0ZWFkIG1ha2VzIDMgcmFwaWVyIGFuZCAyIHJldm9sdmVyIGF0dGFja3MuPC9wPmApKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkFjdGlvbiwgYDxwPjxzdHJvbmc+PGVtPlJhcGllci48L2VtPjwvc3Ryb25nPiBNZWxlZSBXZWFwb24gQXR0YWNrOiAkeygwLCBXcmFwXzEud3JhcFJvbGwpKGlyZW5lLkRFWCArIGlyZW5lLlByb2YgKyAyKX1cclxuICAgICAgICByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAkeygwLCBXcmFwXzEud3JhcFJvbGwpKFtbMSwgRGljZV8xLkQ4XSwgW2lyZW5lLkRFWCArIDIsIERpY2VfMS5EMV1dKX0gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBpZXJjaW5nKX0gZGFtYWdlIChtYWdpY2FsKSBwbHVzICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoRGljZV8xLkQ4KX0gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZyl9IGRhbWFnZS48L3A+YCkpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+UmV2b2x2ZXIuPC9lbT48L3N0cm9uZz4gUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoaXJlbmUuREVYICsgaXJlbmUuUHJvZiArIDIpfSBcclxuICAgICAgICByZWFjaCA0MC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6ICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoW1szLCBEaWNlXzEuRDhdLCBbaXJlbmUuREVYICsgMiwgRGljZV8xLkQxXV0pfSBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmcpfSBkYW1hZ2UgKG1hZ2ljYWwpLiBUaGlzIHNob3QgY2FuIHBpZXJjZSB0aHJvdWdoIGVuZW1laWVzLCBcclxuICAgICAgICBhbmQgc2hlIG1ha2VzIGF0dGFjayByb2xscyB3aXRoIGRpc2FkdmFudGFnZSBmb3IgZXZlcnkgY3JlYXR1cmUgd2l0aGluIDQwIGZ0IGJlaGluZCB0aGUgcHJpbWFyeSB0YXJnZXQuPC9wPmApKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkFjdGlvbiwgYDxwPjxzdHJvbmc+PGVtPkVsZWN0cm9zdGF0aWMgU2hhY2tsZXMuIDwvZW0+KDcvTFIpPC9zdHJvbmc+IElyZW5lIFxyXG4gICAgICAgIHVubGVhc2hlcyBhIHBvd2VyZnVsIGJ1cnN0IG9mIHN0YXRpYyBlbGVjdHJpY2l0eSB0aHJpY2UgLSBvbiBlYWNoIFxyXG4gICAgICAgIG9jY2FzaW9uIGFsbCBjcmVhdHVyZXMgd2l0aGluIDUgZnQgb2YgaGVyIHRha2UgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzEsIERpY2VfMS5EOF0sIFtpcmVuZS5DSEEsIERpY2VfMS5EMV1dKX1cclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTGlnaHRuaW5nKX0gZGFtYWdlIChoYWx2ZWQgb24gYSAke2lyZW5lLmRjKGNvbnN0YW50c18xLkRTdGF0LkNoYSkgKyAzfVxyXG4gICAgICAgIENPTiBzYXZlOyBvbmUgc2F2ZSBmb3IgYWxsIHRocmVlIGJ1cnN0cykuIEFmdGVyIHRoZSBmaXJzdCBidXJzdCwgXHJcbiAgICAgICAgaW5zdGVhZCBvZiBzb3VyY2luZyB0aGUgbGlnaHRuaW5nIGZyb20gaGVyc2VsZiwgc2hlIGNhbiBtYWtlIGFueSBvdGhlclxyXG4gICAgICAgIGNyZWF0dXJlIHdobyBoYXMgdGFrZW4gZGFtYWdlIGZyb20gdGhpcyBhdHRhY2sgdGhlIHNvdXJjZSBpbnN0ZWFkLjxici8+IElmIFxyXG4gICAgICAgIHBlcmZvcm1lZCB1bmRlcndhdGVyLCB0aGUgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZyl9XHJcbiAgICAgICAgZGFtYWdlIGlzICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoW1szLCBEaWNlXzEuRDhdLCBbaXJlbmUuQ0hBLCBEaWNlXzEuRDFdXSl9IGluc3RlYWQuPC9wPmApKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkFjdGlvbiwgYDxwPjxzdHJvbmc+PGVtPkp1ZGdlbWVudCBvZiB0aGUgU3Rvcm1zLiA8L2VtPigxL1NSKTwvc3Ryb25nPlxyXG4gICAgICAgIElyZW5lIHVubGVhc2hlcyBUaGUgUHJpbWFsIFdpbmRzIGZvcm0gdGhlIElubmVyIFBsYW5lIG9mIEFpciB0byBmb3JjZSBhbGwgY3JlYXR1cmVzXHJcbiAgICAgICAgb2YgaGVyIGNob2ljZSB3aXRoaW4gMzAgZnQgdG8gbWFrZSBhIERDICR7aXJlbmUuZGMoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKSArIDN9IENPTiBcclxuICAgICAgICBzYXZlLiBBbGwgY3JlYXR1cmVzIHdobyBmYWlsIHRha2UgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzYsIERpY2VfMS5EOF0sIFsoaXJlbmUuQ0hBICsgMyksIERpY2VfMS5EMV1dKX0gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkZvcmNlKX0gZGFtYWdlIGFuZCBsZXZpdGF0ZSAyMCBmdFxyXG4gICAgICAgIGluIHRoZSBhaXIgdW50aWwgdGhlIHN0YXJ0IG9mIGhlciBuZXh0IHR1cm4uIENyZWF0dXJlcyB3aG8gc3VjY2VlZCB0aGUgXHJcbiAgICAgICAgc2F2ZSB0YWtlIGhhbGYgZGFtYWdlIGFuZCBkb24ndCBsZXZpdGF0ZS4gSW1tZWRpYXRlbHkgYWZ0ZXIgdW5sZWFzaGluZyB0aGUgd2luZHMsIHNoZSBzaG9vdHMgXHJcbiAgICAgICAgMTIgdGltZXMgd2l0aCBoZXIgcmV2b2x2ZXIsIGVhY2ggc2hvdCBkZWFsaW5nIDxzcGFuIGNsYXNzPVwicm9sbGFibGVcIj4keygxMSArIGlyZW5lLkRFWCl9PC9zcGFuPiBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmcpfSBkYW1hZ2UgdG8gdGhlIHRhcmdldCBhbmQgPHNwYW4gY2xhc3M9XCJyb2xsYWJsZVwiPiR7KDgpfTwvc3Bhbj4gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZyl9IGRhbWFnZSB0byBhbGwgY3JlYXR1cmVzIHdpdGhpbiBcclxuICAgICAgICA1IGZ0IG9mIHRoZSB0YXJnZXQgKGluY2x1ZGluZyB0aGUgdGFyZ2V0KS48YnIvPlxyXG4gICAgICAgIElmIHBlcmZvcm1lZCB1bmRlcndhdGVyLCBUaGUgUHJpbWFsIFdpbmRzIGZpcnN0IGZvcm0gYSBidWJibGUgb2YgdG9ycmVudGlhbCB3aW5kcyBvZiBcclxuICAgICAgICA2MCBmdCByYWRpdXMgY2VudGVyZWQgb24gaGVyLiBJbiB0aGlzIGNhc2UgZXZlcnkgZW5lbXkgd2l0aG91dCBhIGZseWluZyBzcGVlZFxyXG4gICAgICAgIGF1dG9tYXRpY2FsbHkgaXMgY29uc2lkZXJlZCB0byBoYXZlIGZhaWxlZCB0aGUgQ09OIHNhdmUuPC9wPmApKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+RGVzdHJ1Y3RpdmUgV3JhdGguPC9lbT4gKDIvU1IpPC9zdHJvbmc+IElyZW5lIGVtcG93ZXJzIGhlcnNlbGYgXHJcbiAgICAgICAgd2l0aCBwcmltYWwgZWxlY3RyaWNpdHkuIEZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyB0dXJuLCBJcmVuZSBkZWFscyBcclxuICAgICAgICBtYXhpbXVtIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYWxsIGF0dGFja3MgYW5kIGhlciBhdHRhY2tzIGlnbm9yZSByZXNpc3RhbmNlXHJcbiAgICAgICAgdG8gZWxlY3RyaWMgZGFtYWdlLjwvcD5gKSk7XHJcbiAgICBpcmVuZS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5Cb251c0FjdGlvbiwgYDxwPjxzdHJvbmc+PGVtPkd1c3QuPC9lbT48L3N0cm9uZz4gSXJlbmUncyBuZXh0IG1lbGVlIGF0dGFjayBkZWFscyBhbiBcclxuICAgICAgICBleHRyYSAkeygwLCBXcmFwXzEud3JhcFJvbGwpKFsyLCBEaWNlXzEuRDhdKX0gJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkZvcmNlKX0gZGFtYWdlIGFuZCwgc2hvdWxkIHRoZXkgZmFpbCBhICBcclxuICAgICAgICBEQyAke2lyZW5lLmRjKGNvbnN0YW50c18xLkRTdGF0LkNoYSkgKyAzfSBDT04gc2F2ZSwgY2F1c2VzIHRoZSB0YXJnZXQgdG8gbGV2aXRhdGUgMjAgZnQgdW50aWwgdGhlIGVuZCBvZiBoZXIgdHVybi48L3A+YCkpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQm9udXNBY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5DYWxtIGJyZWV6ZS48L2VtPjwvc3Ryb25nPiBJcmVuZSBtb3ZlcyBoZXIgZmx5aW5nIFxyXG4gICAgICAgIHNwZWVkIGFuZCBoZWFscyBmb3IgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzEsIERpY2VfMS5EMTBdLCBbNywgRGljZV8xLkQxXV0pfSBIUC4gVGhpcyBtb3ZlbWVudCBcclxuICAgICAgICBkb2Vzbid0IHByb3Zva2Ugb3BwdXJ0dW5pdHkgYXR0YWNrcy4gSWYgcGVyZm9ybWVkIHVuZGVyd2F0ZXIsIGhlciBmbHlpbmcgXHJcbiAgICAgICAgc3BlZWQgaXMgcXVhZHJ1cGxlZCwgYnV0IHNoZSBjYW4gb25seSBtb3ZlIHVwd2FyZHMuPC9wPmApKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+UXVpY2tlbmVkIFNwZWxscy48L2VtPiAoNS9MUik8L3N0cm9uZz4gSXJlbmUgY2FuIGNhc3QgXHJcbiAgICAgICAgYW55IG9mIGhlciBzcGVsbHMgd2l0aCBhIGNhc3RpbmcgdGltZSBvZiAxIGFjdGlvbiBhcyBhIGJvbnVzIGFjdGlvbiBcclxuICAgICAgICBpbnN0ZWFkLjwvcD5gKSk7XHJcbiAgICBpcmVuZS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5SZWFjdGlvbiwgYDxwPjxzdHJvbmc+PGVtPlNwZWxsY2FzdGluZy48L2VtPjwvc3Ryb25nPiBTaGllbGQ8L3A+YCkpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uUmVhY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5XcmF0aCBvZiB0aGUgc3Rvcm0uPC9lbT48L3N0cm9uZz4gV2hlbmV2ZXIgYSBjcmVhdHVyZSBcclxuICAgICAgICBzaGUgY2FuIHNlZSBoaXRzIElyZW5lIHdpdGggYW4gYXR0YWNrLCBzaGUgY2FuIHVzZSBoZXIgcmVhY3Rpb24gdG8gY2F1c2UgXHJcbiAgICAgICAgaXQgdG8gbWFrZSBhIERDICR7aXJlbmUuZGMoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKSArIDN9IENPTiBzYXZlIGFuZCB0YWtlICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoWzMsIERpY2VfMS5EOF0pfSBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTGlnaHRuaW5nKX0gb3IgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlRodW5kZXIpfSBcclxuICAgICAgICBkYW1hZ2UgaWYgaXQgZmFpbHMuPC9wPmApKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkxlZ2VuZGFyeUFjdGlvbiwgXCI8cD5JcmVuZSBnZXRzIDMgbGVnZW5kYXJ5IGFjdGlvbnMgcGVyIHJvdW5kLjwvcD5cIikpO1xyXG4gICAgaXJlbmUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uTGVnZW5kYXJ5QWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+TW92ZS48L2VtPiAoQ29zdHMgMSk8L3N0cm9uZz4gSXJlbmUgbW92ZXMgdXB0byBoZXIgbW92ZW1lbnQgXHJcbiAgICAgICAgc3BlZWQuPC9wPmApKTtcclxuICAgIGlyZW5lLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkxlZ2VuZGFyeUFjdGlvbiwgYDxwPjxzdHJvbmc+PGVtPkxldml0YXRlLjwvZW0+IChDb3N0cyAxKTwvc3Ryb25nPiBJcmVuZSBjYXN0cyBsZXZpdGF0ZSBvbiBcclxuICAgICAgICBvbmUgdGFyZ2V0LCBjb25zdW1pbmcgYSBzcGVsbCBzbG90LjwvcD5gKSk7XHJcbiAgICBpcmVuZS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5MZWdlbmRhcnlBY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5TaGF0dGVydGlkZS48L2VtPiAoQ29zdHMgMyk8L3N0cm9uZz4gSXJlbmUgY2F1c2VzIHVwdG8gNiBjcmVhdHVyZXMgXHJcbiAgICAgICAgaW4gYSA0MCBmdCBjb25lIGZyb20gaGVyIHRoYXQgYXJlICR7KDAsIFdyYXBfMS53cmFwQ3JlYXR1cmVTaXplKShjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuTGFyZ2UpfSBcclxuICAgICAgICBvciBzbWFsbGVyIHRvIGJlIHB1c2hlZCBiYWNrIHRvIDQwIGZ0IGRpc3RhbmNlIG9uIGEgZmFpbGVkIERFWCBcclxuICAgICAgICBzYXZlIG9mIERDICR7aXJlbmUuZGMoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKSArIDN9IGFuZCBkZWFscyAkeygwLCBXcmFwXzEud3JhcFJvbGwpKFszLCBEaWNlXzEuRDhdKX0gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZyl9LCAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRm9yY2UpfSxcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuVGh1bmRlcil9IGFuZCAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmcpfVxyXG4gICAgICAgIChtYWdpY2FsKSBkYW1hZ2UgZWFjaCB0byB0aGVtIChoYWx2ZWQgaWYgdGhlIERFWCBzYXZlIHdhcyBhIHN1Y2Nlc3MpLjwvcD5gKSk7XHJcbiAgICBpcmVuZS5jb21iYXQuYWRkQWNCb251cyg0KTtcclxuICAgIGlyZW5lLnNoZWV0LnNpemUgPSBjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuTWVkaXVtO1xyXG4gICAgaXJlbmUuc2hlZXQuc3VidGl0bGUgPSBcIiBIdW1hbm9pZCAoQWlyIEdlbmFzaSksIExhd2Z1bCBHb29kXCI7XHJcbiAgICBpcmVuZS5zaGVldC5hY0Rlc2MgPSBcIihNYXN0ZXJjcmFmdGVkIFN0dWRkZWQgTGVhdGhlcilcIjtcclxuICAgIGlyZW5lLnNoZWV0LmNhdGVnb3J5ID0gXCJodW1hblwiO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBJcmVuZSA9IHNldHVwSXJlbmU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlyZW5lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBMZXNsZXkgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cExlc2xleSgpIHtcclxuICAgIGNvbnN0IGxlcyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5MZXNsZXkpO1xyXG4gICAgbGVzLmNvcmUubmFtZSA9IFwiTGVzbGV5IEFldGVybnVzXCI7XHJcbiAgICBsZXMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzEvbGVzbGV5LnBuZ1wiO1xyXG4gICAgbGVzLmNhcmQuYWRkQ2FyZFRhZyhcIkRlY2Vhc2VkXCIpO1xyXG4gICAgbGVzLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMSk7XHJcbiAgICBsZXMuY2FyZC5hZGRDYXJkVGFnKFwiRjI4NjBcIik7XHJcbiAgICBsZXMuY2FyZC5hZGRDYXJkVGFnKFwiQ1IgfCAxOCAvIDI0XCIpO1xyXG4gICAgbGVzLmNhcmQuYWRkQ2FyZFRhZyhcIkZyb20gfCBTaGFkb3dmZWxsIC8gTWF0ZXJpYSAvIFByZXNlcnZhdGlvblwiKTtcclxuICAgIGxlcy5jYXJkLmFkZENhcmRUYWcoXCJBbGxlZ2lhbmNlIHwgUHJlc2VydmF0aW9uXCIpO1xyXG4gICAgbGVzLmNhcmQuYWRkQ2FyZFRhZyhcIlJhY2UgfCBIaWdoZXIgVmFtcGlyZVwiKTtcclxuICAgIGxlcy5jYXJkLmFkZENhcmRUYWcoXCI8c3BhbiBjbGFzcz0ndmVyYm9zZSc+Q2hyb251cmd5PC9zcGFuPiBXaXphcmQgLyA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+S25vd2xlZGdlPC9zcGFuPiBDbGVyaWNcIik7XHJcbiAgICBsZXMuY2FyZC5hZGRDYXJkVGFnKFwiVGltZSBDb21tYW5kXCIpO1xyXG4gICAgbGVzLmNhcmQuYWRkQ2FyZFRhZyhcIkZhY3Rpb246IFByb2plY3RvcnNcIik7XHJcbiAgICBsZXMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYEEgcmljaCBoaWdoZXIgdmFtcGlyZSBtYWdlIHdpdGggcG93ZXJmdWwgdGltZSBjb250cm9sIHBvd2Vycy4gQ2FtZSB0byBUaGUgR2FyZGVucyBhZnRlciBhIGZhaWxlZCBhdHRlbXB0IHRvXHJcbiAgICAgIGtpbGwgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuQ2FlbHlubikuY3JlYXRlTGluayhcIkNhZWx5bm5cIil9LiBMaXZlZCBmb3IgdHdvIG1pbGxlbm5pYSB0aGVyZSBhcyBoZXIgY2xvc2VzdCBmcmllbmQvYWR2aXNvci4gRGV0ZXN0ZWQgXHJcbiAgICAgIGhlciBmYW1pbHkgYW5kIGF2b2lkZWQgdXNpbmcgaGVyIGhpZ2hlciB2YW1waXJpYyBhbmQgYmxvb2RsaW5lIHBvd2Vycy4gSW5zdGVhZCwgc3BlbnQgYWxsIHRoYXQgdGltZSBjdWx0aXZhdGluZyBoZXIgYXJjYW5lIHNraWxscyxcclxuICAgICAgYmVjb21pbmcgYSBoaWdobHkgc2tpbGxlZCBtYWdlL2VuY2hhbnRlciBvdmVyIHRpbWUuIEhlciBza2lsbHMgZXZlbnR1YWxseSBiZWNvbWluZyBzbyB3ZWxsIGtub3duIGluIHRoZSByaWdodCBjaXJjbGVzIHRoYXQgY2xpZW50c1xyXG4gICAgICBmcm9tIHZhcmlvdXMgcGxhbmVzIHdvdWxkIGdpdmUgaGVyIGNvbnRyYWN0cyB0byByZXNlYXJjaCBuZXcgc3BlbGxzIG9yIGVuY2hhbnRtZW50cyBhdCB0aGVpciBkaXJlY3Rpb24uPGJyLz5cclxuICAgICAgSW4gaGVyIHRpbWUgZHVyaW5nIHRoZSBnYXJkZW5zLCBzaGUgdG9vayBvbiB0d28gc3R1ZGVudHMgLSBib3RoIG9mIHdob20gbGVmdCBoZXIgYWZ0ZXIgdGhlaXIgdHJhaW5pbmcgd2FzIGNvbXBsZXRlLiBPbmUsIFxyXG4gICAgICAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5FYmVuZXphcikuY3JlYXRlTGluayhcImEgaHVtYW4gd2l0aCB3aG9tIHNoZSB3YXMgcm9tYW50aWNhbGx5IGludm9sdmVkIHdpdGhcIil9LCBldmVudHVhbGx5IGRpdGNoZWQgaGVyIHRvIFxyXG4gICAgICBwZXJzdWUgbGljaGRvbSBhbmQgZGVsdmUgZGVlcGVyIGludG8gdGhlIGFyY2FuZS4gVGhlIG90aGVyPyBXZWxsICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELk1vc3RpbWEpLmNyZWF0ZUxpbmsoXCJ0aGF0IGZhbGxlbiBhbmdlbFwiKX0gd2FzIFxyXG4gICAgICBjbGVhciBmcm9tIHRoZSBzdGFydCBzaGUgd291bGRuJ3Qgc3RheSB0aGVyZSBmb3JldmVyLCBidXQgd291bGQgY29udGludWUgdG8gb2NjYXNpb25hbGx5IGRyb3AgaW4gZm9yIGEgY3VwIG9mIHRlYSwgYmVmb3JlIFxyXG4gICAgICBkaXNhcHBlYXJpbmcgb2ZmIHRvIEdvZCBrbm93cyB3aGVyZS48YnIvPlxyXG4gICAgICBJbiBoZXIgbGFzdCBkYXlzLCBzaGUgd2VudCBvbmUgc3RlcCBmdXJ0aGVyIGFuZCBldmVuIHN0b3BwZWQgZmVlZGluZyBvbiBibG9vZCBlbnRpcmVseS4gV2hpbGUgYSBsYXVkYWJsZSBzdGVwLCBpdFxyXG4gICAgICB0b29rIGEgdG9sbCBvbiBoZXIgbWVudGFsIGhlYWx0aCwgYW5kIHRob3VnaCBzaGUgZGlkbid0IGNhdXNlIHRyb3VibGUgdG8gYW55b25lLCBoZXIgcmVzb2x2ZSBmYWlsZWQgaGVyIHdoZW4gYW4gXHJcbiAgICAgICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkx1Y2lhbikuY3JlYXRlTGluayhcImFzc2Fzc2luIGluIGJsYWNrXCIpfSBmaW5hbGx5IGNhbWUgZm9yIGhlciBsaWZlLiBCdXQgYnkgc29tZSB0d2lzdCBvZiBmYXRlLCBzaGUgaGFkIGZvcmdlZCBhXHJcbiAgICAgIGJvbmQgd2l0aCBhIHBlcnNvbiB3aG8gd2FzIHN1cHBvc2VkIHRvIGJlIGhlciBqdWRnZSwganVyeSBhbmQgZXhlY3V0aW9uZXIgLSBidXQgaGUgaGFkIGRlZW1lZCBoZXIgbm90IGd1aWx0eS4gQW5kIHZpYSB0aGF0IGJvbmQuLi5gO1xyXG4gICAgbGVzLmNhcmQuc3RvcnkgPSAoKSA9PiBgXHJcbjxoNT5FYXJseSBsaWZlPC9oNT5cclxuQWxsIGhpZ2hlciB2YW1waXJlcyBhcmUgYXJpc3RvY3JhdHMsIHNlcnZlZCB1cG9uIC0gc2hvdWxkIHRoZXkgcmVxdWlyZSBpdCAtIGJ5IHRoZWlyIHRocmFsbHMgYW5kIG90aGVyIGNyZWF0dXJlcyBvZiBcclxudGhlIHNoYWRvd2ZlbGwuIEhvd2V2ZXIsIGV2ZW4gYW1vbmcgdGhlbSwgdGhlIEFldGVybnVzIGZhbWlseSAtIG9uZSBvZiB0aGUgb2xkZXN0IC0gd2FzIGhpZ2hseSBmZWFyZWQgYW5kIHJlZ2FyZGVkLFxyXG5zaW5jZSB0aGVpciBibG9vZCBncmFudGVkIHRoZW0gY29tbWFuZCBvdmVyIHRoZSBmbG93IG9mIHRpbWUgaXRzZWxmLiBBcyBzdWNoLCBhcyB0aGVpciB5b3VuZ2VzdCBjaGlsZCwgTGVzbGV5IFxyXG5jb21tYW5kZWQgZmVhciBhbmQgcmVzcGVjdCBiZWZvcmUgc2hlIHdhcyBldmVuIG9sZCBlbm91Z2ggdG8ga25vdyB3aGF0IHRoZSB3b3JkcyBtZWFudC4gSXQgd291bGQgYmUgbG9uZyBiZWZvcmUgc2hlXHJcbndvdWxkIGxlYXJuIHdoYXQgcmVzcGVjdCBtZWFudCwgYnV0IHVuZm9ydHVuYXRlbHkgd2hhdCBmZWFyIHdhcyBiZWNhbWUgY2xlYXIgdG8gaGVyIHZlcnkgZWFybHkgaW4gbGlmZS48YnIvPlxyXG5Gb3IgbW9zdCBoaWdoZXIgdmFtcGlyZXMgYWxzbyBzaGFyZSBhIHBhcnRpY3VsYXIgdHJhaXQgLSB3aGlsZSB0aGVpciBib2RpZXMgYXJlIGFnZWxlc3MsIGFuZCBjYW4gb25seSBldmVyIGdyb3cgXHJcbnN0cm9uZ2VyIC0gb2xkIGFnZSBpcyBtYXJrZWQgYXMgdGhlaXIgbWluZCBiZWdpbnMgdG8gc2xpcC4gTm90IGluIHRlcm1zIG9mIHN0dXBpZGl0eSwgbG9zcyBvZiB3aXNkb20gb3Igd2Vha25lc3Ncclxub2Ygd2lsbCAtIG5vLCBhIGhpZ2hlciB2YW1waXJlIGNvdWxkIDxpPm5ldmVyPC9pPiBiZSB3ZWFrLiBJdCBzbGlwcyBpbiB0ZXJtcyBvZiBiYWxhbmNlIGFuZCBzdGFiaWxpdHkuIEVsZGVyIHZhbXBpcmVzXHJcbm9mIGFnZWQgbWluZHMgYXJlIGV4dHJlbWVseSBwYXJhbm9pZCBhbmQgZWFzeSBhbm5veWVkLiBUaGV5IGJlY29tZSBkZXNwZXJhdGUgZm9yIHNvbGl0dWRlLCBhbmQgc3VmZmVyIGluIGV2ZXJ5IHdvcmRcclxudGhleSBzcGVhayAtIGFzIGlmIGV2ZXJ5IHNpbmdsZSB3b3JkIHdvdWxkIGJyaW5nIHRoZW0gb25lIHN0ZXAgY2xvc2VyIHRvIGluc2FuaXR5LiBUaGV5IGFsc28gdHVybiBpbnRvIGV4dHJlbWUgXHJcbnBzeWNob3BhdGhzIC0gaXQgaXMgc2FpZCBpbiB0aGUgc2hhZG93ZmVsbCB0aGF0IHNob3VsZCBhbnkgY3JlYXR1cmUgc2F2ZSBhbm90aGVyIGhpZ2hlciB2YW1waXJlIGV2ZW4gYXBwcm9hY2ggd2l0aGluXHJcbmEgbWlsZSBvZiB0aGVtLCBldmVuIHVud2l0dGluZ2x5LCB0aGV5IHdvdWxkIGluc3RhbnRseSBraWxsIHRoZW0gZm9yIG9mZmVuZGluZyB0aGVtIHdpdGggdGhlaXIgZXhpc3RlbmNlLiBVbHRpbWF0ZWx5LFxyXG50aGlzIGlzIHdoYXQga2VlcHMgdGhlIHBvcHVsYXRpb24gaW4gY2hlY2ssIGZvciBvbmx5IGFub3RoZXIgaGlnaGVyIHZhbXBpcmUgLSBvciBhbm90aGVyIHRpdGFuIC0gY2FuIHRydWx5IGtpbGwgYSBcclxuaGlnaGVyIHZhbXBpcmUuPGJyLz5cclxuVW5mb3J0dW5hdGVseSwgZm9yIGNoaWxkIExlc2xleSB0aGlzIG1lYW50IHNoZSBoYWQgdG8gYmVhciB3aXRuZXNzIHRvIG1pbmQtbnVtYmluZyBhbW91bnRzIG9mIGRvbWVzdGljIHZpb2xlbmNlIGFzXHJcbnNoZSBncmV3IGludG8gaGVyIHRlZW5hZ2UgeWVhcnMgKGkuZS4sIHdhcyBhIGNlbnR1cnkgb2xkKSwgdG8gdGhlIHBvaW50IHdoZXJlIG9uZSBvZiB0aGUgcGFyZW50cyByaXBwaW5nIG91dCB0aGUgXHJcbmhlYWQgb2YgYW5vdGhlciB3b3VsZCBqdXN0IGRyYXcgYSB2YWNhbnQgZGVhZCBnbGFuY2UgZnJvbSBoZXIsIGJlZm9yZSBzaGUgd2VudCBiYWNrIHRvIHJlYWRpbmcgaGVyIGJvb2tzLiBIZXIgc29sZSBcclxuY29tZm9ydCB3YXMgaW4gaGVyIGVsZGVyIGJyb3RoZXIsIHdobyB0YXVnaHQgaGVyIHRvIHVzZSB0aGUgcG93ZXJzIG9mIHRoZSBibG9vZGxpbmUgLSB3aG8gc3Rvb2QgYnkgaGVyIC0gdGFraW5nIHRoZVxyXG5icnVudCBvZiB0aGUgc2hpdCAtIGFzIGhlciBwYXJlbnRzIHNlcGVyYXRlZCwgZWFjaCBjb2Nvb25pbmcgdXAgaW4gdGhlaXIgc3ViZG9tYWlucywgbmV2ZXIgdG8gYmUgZGlzdHVyYmVkIGFnYWluLiBcclxuSG93ZXZlciwgdGhhdCBzdHJhaW4gd2FzIHRvbyBtdWNoIGZvciBoaW0gdG9vLCBhbmQgb24gb25lIC0gb25seSBvbmUgLSBvY2Nhc2lvbiwgaGUgc25hcHBlZCB2aW9sZW50bHkgYXQgaGVyLiBcclxuVGhhdCBvbmNlIHdhcyBlbm91Z2gsIHNoZSBmbGVkIGZyb20gdGhlIHJlYWxtLCBuZXZlciB0byBsb29rIGJhY2sgYWdhaW4uXHJcbjxoNT5NZWV0aW5nIENhZWx5bm48L2g1PlxyXG5JbiBNYXRlcmlhLCBMZXNsZXkgdG9vayBzaGVsdGVyIGluIHRoZSB2YXN0IGNpdHkgb2YgT3J0dXMgb2YgVGVycmEgUHJpbWEuIFdoaWxlIHRoZSByZXN0IG9mIHRoZSBtYXRlcmlhbCBwbGFuZSB3YXMgXHJcbnN0aWxsIHVzaW5nIGJyb256ZSwgYW5kIGluIHNvbWUgY2FzZXMsIHN0b25lIHRvb2xzLiBWZXRlcmVzIGhhZCBhbHJlYWR5IG1vdmVkIG9uIHRvIGlyb24sIGNlbWVudCBhbmQgZXZlbiBuaXRlci4gXHJcbk9ydHVzIHdhcyBxdWlja2x5IHJlZ2FpbmluZyB0aGUgZ2xvcmllcyBvZiB0aW1lcyBwYXN0LCBMZXNsZXkgd2FzIGNlcnRhaW4gdGhleSB3b3VsZCBsZWFybiBzdGVlbC1jcmFmdCBzb29uIHRvby4gXHJcblRoYXQgZ2xvcmlvdXMsIGRlbnNlbHkgcG9wdWxhdGVkIGNpdHkgd2FzIHRoZSBwZXJmZWN0IGRyZWFtLiBCb29rcyB0aGF0IHdlcmUgYSByYXJpdHkgaW4gU2hhZG93ZmVsbCB3ZXJlIHByZXNlbnQgaW4gXHJcbnRob3VzYW5kcyBpbiB0aGUgbWFueSBsaWJyYXJpZXMgaGVyZS4gUG9ldHMgYW5kIHNjaG9sYXJzIGJsb3Nzb21lZCBpbiBncmVhdCBudW1iZXJzLiBDb252ZXJzYXRpb24gd2l0aCBhbnkgc3RyYW5nZXIgXHJcbndhcyBhIHBsZWFzdXJlLiBMZXNsZXkgZmluYWxseSByZWxheGVkIGhlcnNlbGYsIHRvb2sgdGhlIHBlcnNvbmEgb2YgYW4gYXV0aG9yIGFuZCBzZXQgaGVyc2VsZiBmcmVlLi4uPGJyLz5cclxuIFNhZGx5LCB3aXRoIGFsbCB0aGUgcGVudC11cCBkYXJrbmVzcyB3aXRoaW4sIHNldHRpbmcgaGVyc2VsZiBmcmVlIHdhcyB0aGUgbW9zdCBkYW5nZXJvdXMgdGhpbmcgc2hlIGNvdWxkIGRvLiBTb29uXHJcbnNoZSBiZWdhbiB0byBkZXZlbG9wIGEgdGFzdGUgZm9yIGJsb29kLCBzb21ldGhpbmcgc2hlJ2QgbmV2ZXIgaGFkIGJlZm9yZSBzaGUgY2FtZSBoZXJlLCB3aGljaCBiZWZvcmUgc2hlIGtuZXcgaXQgXHJcbndhcyBhIGNyaXBwbGluZyBhZGRpY3Rpb24uIEJ1dCB1bmxpa2UgaGVyIGlsaywgc2hlIGF2b2lkZWQgdmlvbGVuY2UsIGF2b2lkZWQga2lsbGluZywgbWFraW5nIHRocmFsbHMuIEl0IHJlbWluZGVkIGhlclxyXG5vZiBoZXIgZmFtaWx5LCBoZXIga2luZCB3YXkgdG9vIG11Y2guIFRoZSB2ZXJ5IHRob3VnaHQgZGlzZ3VzdGVkIGhlci4gRm9yIHRoYXQgbWF0dGVyLCBzbyBkaWQgaGVyIGFkZGljdGlvbiwgYnV0IHRyeSBhc1xyXG5zaGUgd291bGQsIHNoZSBjb3VsZG4ndCBsZXQgZ28gLSBoZXIgZGFya25lc3MgcmV0dXJuZWQgc3Ryb25nZXIgdGhhbiBldmVyIGV2ZXJ5IHRpbWUgc2hlIHRyaWVkIHRvIHN0ZXAgYXdheSwgYW5kIHdoYXRcclxud2FzIGEgdGhpbmcgb2YgcGxlYXN1cmUgc29vbiBiZWNhbWUgYSBuZWNlc3NpdHkgZm9yIGJlaW5nIGFibGUgdG8gZnVuY3Rpb24uPGJyLz5cclxuSXQgd2FzIGF0IHRoaXMgdGltZSB0aGF0IHNoZSBtYWRlIGZyaWVuZHMgd2l0aCBhIHJhdGhlciBuaWNlIGd1eSwgTm9oYWRvbiwgYSBwZXJzb24gd2hvIHdvdWxkIG9uZSBkYXkgYmUgcmVnYXJkZWQgYXMgb25lIG9mIFxyXG50aGUgZ3JlYXRlc3QgdGhpbmtlcnMgb2YgdGhlIGVhcmx5IGNsYXNzaWNhbCBlcmEuIFRvIExlc2xleSBob3dldmVyLCBhIHBlcnNvbiB3aG8gd291bGQgaGF2ZSBiZWVuIGEgR29kLXNlbnQgY29tcGFueSBcclxub25jZSB3YXMgbm93IGp1c3QgYW4gb2JqZWN0IG9mIGRlcHJhdmVkIGFudGljaXBhdGlvbi4gQXMgc2hlIHNvZnRseSBzbWlsZWQgYW5kIGRpc2N1c3NlZCBpZGVhcyB3aXRoIGhpbSwgc2hlIHdvdWxkIFxyXG5pbnRlcm5hbGx5IGJlIHBpY3R1cmluZyB0aGUgb2gtc28tc2F0aXNmeWluZyBsb29rIG9mIGhvcnJvciBhcyBzaGUgdHVybmVkIHRvIGZlYXN0IHVwb24gaGltLiBIb3dldmVyLCB0aGVyZSB3YXMganVzdFxyXG5vbmUgc25hZyAtIGEgcmFuZG9tIG5vYmxld29tYW4sIHdobyBzZWVtZWQgdG9vIHNtYXJ0IGZvciBoZXIgb3duIGdvb2QsIHNlZW1lZCB0byBoYXZlIGNhdWdodCBvbiB0byBzb21ldGhpbmcgYW5kIHdhc1xyXG50aW1lIGFuZCBhZ2FpbiB0aHdhcnRpbmcgTGVzbGV5J3MgYXR0ZW1wdHMgdG8gaXNvbGF0ZSB0aGUgZ3V5LiBGaW5hbGx5LCBMZXNsZXkgaGFkIGhhZCBlbm91Z2gsIGZvciB0aGUgZmlyc3QgdGltZSBcclxuc2hlIGZlbHQgdG9vIHBpc3NlZCBvZmYgdG8gY2FyZSBhYm91dCBoZXIgaGVyaXRhZ2UuIFNoZSB3b3VsZCBnZXQgcmlkIG9mIHRoaXMgbWVkZGxpbmcgYXJyb2dhbnQgYml0Y2ggd2hvIGhhZCBubyBpZGVhXHJcbndoYXQgc2hlIHdhcyBmYWNpbmcuPGJyLz4gXHJcblVuZm9ydHVuYXRlbHksIGFzIHNoZSBsYXkgLSBhIGRlY2FwaXRhdGVkIGFuZCBibG9vZHkgbWVzcyAtIHRhbmdsZWQgaW4gYSBidW5jaCBvZiB0aG9ybnkgdmluZXMsIHNoZSBmb3VuZCBvdXQgXHJcbnRoZSBzaXR1YXRpb24gd2FzIHJldmVyc2UsIGFuZCBpdCB3YXMgaGVyIHdobyBoYWQgYmVlbiB1dHRlcmx5IGRlbHVkZWQuIEl0IHdhcyBhdCB0aGlzIHRpbWUgdGhhdCByZWFsaXR5IG9mIHdoYXRcclxuc2hlIHdhcyB0cnlpbmcgdG8gZG8gZmluYWxseSBkYXduZWQgb24gaGVyIC0gc2hlIHdhcyB0dXJuaW5nIGludG8gdGhlIHNhbWUgcGVvcGxlIGFzIHRob3NlIHNoZSBoYWQgZGV0ZXN0ZWQgdGhlIFxyXG5tb3N0LiBBbmQgc28sIGluc3RlYWQgb2YgZmxlZWluZyBhbmQgZGlzYXBwZWFyaW5nIGxpa2UgdGhlIG5vYmxld29tYW4gYWR2aXNlZCwgc2hlIHdlbnQgYmFjayB0byByZXN1bWUgaGVyIGxpZmUsXHJcbmRyYXdpbmcgYW4gYW5ncnkgZ2xhcmUgZnJvbSBoZXIgbW9yZSB0aGFuIG9uY2UuIEFzIHRpbWUgcGFzc2VkLCBzaGUgbGVhcm50IHRvIGZ1bmN0aW9uLCB0byBjdXJ0YWlsIGhlciBibG9vZGx1c3QgXHJcbmFuZCBqdXN0Li4uIGZ1bmN0aW9uLiBHcmFkdWFsbHksIGhlciB0aW1lIHNwZW50IHdpdGggTm9oYWRvbiB0dXJuZWQgXHJcbmNvbnNpZGVyYWJseSBtb3JlIGhvbmVzdCwgcHVyZSBhbmQsIHN0cmFuZ2VseSwgZnVuLiBUaGUgbm9ibGV3b21hbiB0b28sIExlc2xleSBsZWFybnQgaGVyIHRydWUgbmFtZSB3YXMgXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkNhZWx5bm4pLmNyZWF0ZUxpbmsoXCJDYWVseW5uXCIpfSwgYmVnYW4gdG8gd2FybSB1cCB0byBoZXIuIEhlciBuaWdodG1hcmUgd2FzIGFnYWluIHR1cm5pbmcgXHJcbmludG8gYSBkcmVhbS4uLiB1bnRpbCBoZXIgYnJvdGhlciBjYW1lLjxici8+XHJcbkV2ZXJ5dGhpbmcgc2hhdHRlcmVkLCB1dHRlcmx5IGJyb2tlbiBhbmQgdHJhdW1hdGl6ZWQgYnkgd2hhdCBwcm9jZWVkZWQsIHRoYXQgdmVyeSBuaWdodCBMZXNsZXkgYXNzYXVsdGVkIE5vaGFkb24gYW5kIGZlZFxyXG5vbiBoaXMgbGlmZWJsb29kLiBBcyBoZXIgc3VwcHJlc3NlZCBhZGRpY3Rpb24gcmV0dXJuZWQgd2l0aCBhIHZlbmdlYW5jZSwgc2hlIHN1Y2tlZCBvdXQgbW9yZSBhbmQgbW9yZSAtIGZ1cnRoZXIgdGhhbiBcclxuc2hlJ2QgZXZlciBnb25lIGJlZm9yZSAtIHRvIHRoZSBwb2ludCB3aGVyZSBzaGUgY291bGQndmUga2lsbGVkIGhpbSBhdCBhbnkgcG9pbnQuIEJ1dCB0aHJpbGxlZCwgYW54aW91cywgc2hlIHdhbnRlZCBcclxudG8gcGxlYXN1cmUgaGVyc2VsZiBtb3JlIGJlZm9yZSBzaGUgZGlkIHRoYXQgZmluYWxlIC0gc2hlIHdhbnRlZCB0byBmb3JnZXQgZXZlcnl0aGluZy4uLiBidXQgZm91bmQgc2hlIGNvdWxkbid0LiBGcm9tXHJcbndoZXJlIHNoZSBjb3VsZG4ndCBmYXRob20sIGJ1dCB0aGUgYXdmdWwgZ3JhY2Ugb2YgR29kIHNlZW1lZCB0byBoYXZlIGZlbGwgb24gaGVyLiBTaGUgY291bGRuJ3QgbG9zZSBoZXJzZWxmLCBjb3VsZG4ndCBcclxucHJldGVuZCBzaGUgZW5qb3llZCB0aGlzIC0gYXMgc2hlIGZpbmFsbHkgb3BlbmVkIGhlciBleWVzIGFuZCBmYWNlZCB3aGF0IHNoZSB3YXMgZG9pbmcuIEFnaGFzdCwgZ3VpbHQgc2VpemVkIGhlciwgXHJcbmNob2tlZCBoZXIuIEhlIHdhc24ndCBkZWFkIHlldCAtIGJ1dCB0aGVyZSB3YXMgbm90aGluZyBzaGUgY291bGQgZG8gdG8gaGVscCBoaW0gYXQgdGhpcyBzdGFnZS4gWWV0IHNoZSB0cmllZCwgd2VlcGluZ1xyXG5hbmQgYnJva2VuLCBzaGUgdHJpZWQgLSBidXQgY291bGQgb25seSB3YXRjaCBhcyB0aGUgbGlmZSBsZWZ0IGhpbS4uLjxici8+XHJcblVudGlsIGEgc2luZ2xlIHdvcmQgZm9yY2VkIHRoZSBsaWZlIGJhY2sgaW50byBoaW0sIGEgc2luZ2xlIHdvcmQgZnJvbSBDYWVseW5uLCBtb3JlIHBsZWFzYW50IHRoYW4gYW55IHNoZSdkIGhlYXJkIGhlciBcclxud2hvbGUgbGlmZS4gQSB3b3JkIHRoYXQgY2FycmllZCBtYW5hIGNvbnNpZGVyYWJseSBzdHJvbmdlciB0aGFuIHNoZSBjb3VsZCBldmVyIHN1bW1vbi4gVGhhdCB3YXMgd2hlbiBDYWVseW5uIHRvbGQgaGVyIFxyXG5ldmVyeXRoaW5nIC0gaW5jbHVkaW5nIGFib3V0IHRoZSBwbGFjZSB3aGVyZSBldmVuIDxpPmhlcjwvaT4gZmFtaWx5IGNvdWxkIG5ldmVyIHJlYWNoIGhlciBhZ2FpbiwgYSBwbGFjZSB3aGVyZSBhIGdyb3VwIG9mIFxyXG5laWdodCBjb3VsZCB3ZWxsIHRha2Ugb24gYSBoaWdoZXIgdmFtcGlyZSwgYSBwbGFjZSB3aGVyZSB0aGUgbGVhZGVycyB3ZXJlIGV2ZW5seSBtYXRjaGVkIGFnYWluc3QgXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlNhbmd1aW5hcmNoKS5jcmVhdGVMaW5rKFwiVGhlIFNhbmd1aW5lQXJjaFwiKX0gdGhlbXNlbGYuLi5cclxuPGg1PkViZW5lemFyPC9oNT4gIFxyXG5MZXNsZXkncyB0aW1lIGluIEJ1bmtlciMzNzEgd2FzIHNhdGlzZnlpbmcsIG5vdCBlbnRpcmVseSBwZXJmZWN0IC0gYnV0IGFzIGhhcHB5IGFzIGEgcGVuYW5jZSBjb3VsZCBiZS4gSGFwcGllciB0aGFuIFxyXG5zaGUgZmVsdCBzaGUgZGVzZXJ2ZWQgYW55d2F5LiBBbmQgd2hpbGUgdGhlIGJsYWNrc21pdGggYW5kIGhpcyB3aWZlIHBpc3NlZCBoZXIgb2ZmLCBzdWJ0bHkgcmVtaW5kaW5nIGhlciBvZiBoZXIgXHJcbmZhbWlseSwgQ2FlbHlubiB3YXMgYSBwdXJlIHBsZWFzdXJlLiBQbHVzIGV2ZW4gJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuSXJlbmUpLmNyZWF0ZUxpbmsoXCJhbiBpbnF1aXNpdG9yXCIpfSwgd2hvIGhhZCBiZWVuIFxyXG5zbyBhZGFtYW50IHRoYXQgTGVzbGV5IHdhcyBhIGNyaW1pbmFsLCB0aGF0IHRoZXJlIHdhcyBzb21ldGhpbmcgb2ZmIGFib3V0IGhlciAtIHVudGlsIExlc2xleSBoYWQgcmV2ZWFsZWRcclxuaGVyIGhlcml0YWdlLCB3YXMgYmVjb21pbmcgYSBncmVhdCBmcmllbmQuIEFuZCBzbyBzaGUgd2FzIHN1cmUgc2hlIHdhc24ndCBsYWNraW5nIGluIGFueSB3YXkgLSB1bnRpbCBzaGUgbWV0IFxyXG4ke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5FYmVuZXphcikuY3JlYXRlTGluayhcIkJlblwiKX0uIEEgaHVtYW4gXHJcbmJveSB3aG8nZCBzdHVtYmxlZCBpbnRvIGEgcGVycGVuZGljdWxhcml0eSBieSBhY2NpZGVudCAod2VsbCBoZSdkIGRyb3duZWQgaW4gdGhlcmUpLCB0aGUgdGVlbmFnZXIgd2FzIHNvbGVtbiBmYXIgYmV5b25kIFxyXG5oaXMgYWdlLiBBbmQgaGlzIGV5ZXMgc2VlbWVkIHNvIDxpPnRpcmVkPC9pPiwgZXllcyB0aGF0IGhhZCBzZWVuIHdheSB0b28gbXVjaC4gU2VlaW5nIGEgYm95IHRoYXQgZGVhZCBpbnNpZGUgcmVtaW5kZWQgXHJcbkxlc2xleSBvZiB0aW1lcyBsb25nIHBhc3QsIHRpbWVzIGJlZm9yZSBzaGUnZCB0YXN0ZWQgaHVtYW4gYmxvb2QsIHRpbWVzIHdoZW4gc2hlIHN0aWxsIGxvb2tlZCB1cCB0byBoZXIgYnJvdGhlci4uLiBcclxuc2hlIHBsZWFkZWQgQ2FlbHlubiB0byBhbGxvdyBoZXIgdG8gdGFrZSBoaW0gaW4uIEFmdGVyIGhlciBhcHByb3ZhbCwgYXMgQmVuIGNhbWUgdG8gbGl2ZSB3aXRoIHRoZW0sIExlc2xleSBmb3VuZCBvdXRcclxudGhhdCB0aGVyZSB3YXMgb25lIHRoaW5nIHdoaWNoIHN0aWxsIGV4Y2l0ZWQgaGltLCBvbmUgdGhpbmcgdGhhdCBtYWRlIGhpcyBleWVzIHNoaW5lIGxpa2UgYSBjaGlsZCdzIGFnYWluIC0gbWFnaWMuPGJyLz5cclxuSGUnZCB3YXRjaCB3aWRlLWV5ZWQgd2l0aCB3b25kZXIgYXQgZXZlcnkgZXhwZXJpbWVudCBMZXNsZXkgZGlkLCBhc2sgYWJvdXQgZXZlcnkgcG90aW9uIHNoZSBjb25jb2N0ZWQsIGJlIGFtYXplZCBieVxyXG5ldmVyeSBzcGVsbCBzaGUgY2FzdC4gRmxhdHRlcmVkIGJ5IGJlaW5nIHRoZSBzdWJqZWN0IG9mIHN1Y2ggaW5ub2NlbnQsIGdlbnVpbmUgcHJhaXNlLCBzaGUgb2ZmZXJlZCB0byB0ZWFjaCB0aGUga2lkIFxyXG5oZXIgd2F5cy4gSGUgcmVhZGlseSBhZ3JlZWQsIGFuZCBMZXNsZXkgd2F0Y2hlZCB3aXRoIHByaWRlIGFzIHRoaXMgbmV3IHB1cnBvc2UgYnJvdWdodCBsaWZlIGJhY2sgaW50byBoaW0uIEhpcyBtb29kIFxyXG5pbXByb3ZlZCBjb25zaWRlcmFibHksIGhlIHR1cm5lZCB0byBjb29raW5nIGFuZCBwYWludGluZyBhcyBob2JiaWVzLCBiZWNhbWUgdGhlIGJlc3QgZnJpZW5kIG9mIGV2ZXJ5b25lIGluIHRoZSBcclxuYnVua2VyLCBhbmQgYmVmb3JlIGxvbmcgd2FzIHRoZSBnbHVlIHRoYXQgaGVsZCB0aGVtIGFsbCB0b2dldGhlci4gQSBzbGlnaHQgdm9pY2UgZGVlcCBpbnNpZGUgTGVzbGV5IG1hZGUgaGVyIHdvcnJ5IGFcclxuYml0IG9uIGhvdyA8aT5wYXNzaW9uYXRlPC9pPiB0aGUgYm95IHdhcyBhYm91dCBsZWFybmluZywgZXZlcnkgZGF5IGluIGEgbGFuZCB3aGVyZSBhbGwgd2VyZSBpbW1vcnRhbCwgYW5kIHNvIFxyXG5wcmVmZXJyZWQgdG8gbWFpbnRhaW4gYSB2ZXJ5IGhlYWx0aHkgd29yay1saWZlIGJhbGFuY2UgKG9mdGVuIGJpdCBhIGJpdCBtb3JlIGVtcGhhc2lzIG9uIHRoZSBsYXR0ZXIpLCB0aGUga2lkIHdvdWxkIFxyXG5lYXNpbHkgYmUgc3R1ZHlpbmcgZm9yIG92ZXIgMTMgaG91cnMgYSBkYXkuIFdoYXQgd2FzIGhlciB3YXJkIHN0dWR5aW5nIHRoYXQgaGFyZCBmb3IsIExlc2xleSBjb3VsZG4ndCBoZWxwIGJ1dCB3b25kZXIsIFxyXG5idXQgaGVscGVkIGhpbSB0aGUgYmVzdCBzaGUgY291bGQgYW55d2F5Ljxici8+XHJcbkxlc3MgdGhhbiB0d28gY2VudHVyaWVzIGxhdGVyLCBoZXIgdGVhY2hpbmcgYW5kIGhpcyBzdHVkeWluZyB0dXJuZWQgaW50byBib3RoIG9mIHRoZW0gcmVzZWFyY2hpbmcgdG9nZXRoZXIsIGFzIHRoZVxyXG5ib3kncyBza2lsbHMgYmVnYW4gdG8gcml2YWwgaGVycy4gU2hlIGFsc28gYmVjYW1lIGF3YXJlLCBwYXJ0bHkgZnJvbSB0aGUgdGVhc2luZyBvZiBvdGhlcnMsIHRoYXQgdGhlIGJveSBzZWVtZWQgdG8gYmVcclxuZGV2ZWxvcGluZyBmZWVsaW5ncyBmb3IgaGVyIC0gZmVlbGluZ3Mgc2hlIGZlbHQgc2hlIGNvdWxkLCBwcm9iYWJseSBkaWQgcmVjaXByb2NhdGUuIFlldCBkZXNwaXRlIGJlaW5nIG92ZXIgdHdvIFxyXG5jZW50dXJpZXMgb2xkIGJ5IGV4cGVyaWVuY2UsIGhpcyBib2R5IHdhcyBzdGlsbCB0aGF0IG9mIHNvbWVvbmUgaW4gdGhlaXIgbGF0ZSB0ZWVucy4gU28sIGhpcyByZXF1ZXN0IG9mIGJlaW5nIGFsbG93ZWRcclxudGltZSB0byByb2FtIE1hdGVyaWEsIG1vcmUgc3BlY2lmaWNhbGx5LCBoaXMgaG9tZSBwbGFuZXQgdGVycmEgLSB3YXMgbWV0IHdpdGggYXBwcm92YWwgYnkgYWxsLiBDYWVseW5uIGRpZCB3YXJuIGhlciBcclxuaG93ZXZlciB0aGF0IHNvbWV0aGluZyBmZWx0IHdyb25nIGluIHRoZSBraWQncyBleWVzIGFzIHNoZSBoYWQgYXBwcm92ZWQsIHNvIExlc2xleSBzZWNyZXRseSBzcGlrZWQgb25lIG9mIGhpcyBkcmlua3Ncclxud2l0aCBhIHBpbmNoIG9mIGhlciBibG9vZCAtIGl0IHdvdWxkIGxldCBoZXIga25vdyBpZiBoZSBldmVyIGRpZWQuPGJyLz5cclxuSGUgd2VudCBvdXQgbW9yZSB0aGFuIHR3byBkb3plbiB0aW1lcyBvdmVyIHRocmVlIGNlbnR1cmllcywgYW5kIExlc2xleSB3YXMgc3VyZSBoZXIgZmVhcnMgd2VyZSB1bndhcnJhbnRlZCwgd2hlbiBcclxuc3VkZGVubHkgaGVyIGJsb29kIGZyb3plIC0gQmVuIHdhcyBkZWFkISBBcyBzaGUgaW1tZWRpYXRlbHkgcHJlcGFyZWQgaGVyc2VsZiB0byBwcm9qZWN0LCB0aGUgY29ubmVjdGlvbiB3YXMgXHJcbnJlLWVzdGFibGlzaGVkLCBhbmQgc28gc2hlIGhhZCBubyBpZGVhIHdoYXQgaGFwcGVuZWQuIElmIHNoZSBoYWQgdHJhaW5lZCBoZXIgdmFtcGlyaWMgYWJpbGl0aWVzIGJldHRlciwgaW5zdGVhZCBvZiBcclxubGVhdmluZyB0aGVtIHNlYWxlZCBhbmQgZm9yZ290dGVuIHVudGlsIHRoZSByYXJlIG9jY2FzaW9ucyB0aGF0IHJlcXVpcmVkIHRoZW0gYXJvc2UgLSBzaGUgbWlnaHQndmUga25vd24gaGUnZCB0dXJuZWRcclxudG8gTGljaGRvbS4gQnV0IGFzIGl0IGhhcHBlbmVkLCBzaGUgbWVyZWx5IGFzc3VtZWQgdGhlcmUgd2FzIHNvbWUgZGlzcnVwdGlvbiBhbmQgcmVsYXhlZCBoZXJzZWxmLiBBZnRlcndhcmRzLCBoZSBkaWRcclxucmV0dXJuIHRvIHRoZSBidW5rZXIsIGJ1dCBjb250aW51ZWQgdG8gZ28gb3V0IHN0ZWFkaWx5IGJhY2sgaW50byB0aGUgbWF0ZXJpYWwgcGxhbmUuIEFzIGhpcyBza2lsbHMgc3VycGFzc2VkIGhlcnMsIFxyXG5oZSBhbHNvIGJlZ2FuIHRvIGJlY29tZSBkaXN0YW50LCBhbmQgd291bGQgYXQgdGltZXMgcmVidWtlIGhlciBmb3IgYmVpbmcgdG9vIGNsaW5naW5nIC0gc29tZXRoaW5nIHZlcnkgdW5mYWlyLCBhbmQgXHJcbnNvbWV0aGluZyBoZSdkIG5ldmVyIHNheSBiZWZvcmUsIGJ1dCBhbHNvIHNvbWV0aGluZyB0aGF0IHN0cnVjayBhIGRlZXAgaW5zZWN1cml0eSB3aXRoaW4gaGVyIGZyb20gaGVyIGNoaWxkaG9vZCBkYXlzLCBcclxuYW5kIHNob29rIGhlciB0byB0aGUgY29yZS48YnIvPlxyXG5XaGlsZSB0aGVpciByZWxhdGlvbnNoaXAgd2Fzbid0IHF1aXRlIHBlcmZlY3QsIHRoZXkgc3RpbGwgd2VyZSBoYXBweSAtIG9yIGF0IGxlYXN0IHNvIExlc2xleSBmZWx0LiBTbyB3aGVuIHNoZSB3YXMgXHJcbmRldmFzdGF0ZWQgd2hlbiBoZSBkZWNsYXJlZCBoZSBuZWVkZWQgdG8gZ28gaW50byB0aGUgY2FzdGxlLiBUaG91Z2ggaGUgcHJvbWlzZWQgaGUnZCByZXR1cm4sIHNoZSBrbmV3IGl0IHdhcyBvdmVyIFxyXG5iZXR3ZWVuIHRoZW0uIE1heWJlIHNoZSBzaG91bGQndmUgc3RvcHBlZCBoaW0sIGJ1dCBvbGQgaW5zdGluY3RzIHRvb2sgb3ZlciB0aGF0IHdvdWxkIG5vdCBhbGxvdyBoZXIgdG8gJ2xvb2snIHdlYWsuIFxyXG5TbyBpbnN0ZWFkIHNoZSwgcGVyaGFwcyBhIGJpdCBjb2xkbHksIHNhaWQgc2hlIHdhcyBvayAtIGJ1dCBpbnNpc3RlZCBoZSB0YWtlIGEgdmVyeSBwYXJ0aWN1bGFyICd3YXRjaCcgd2l0aCBoZXIuIFdpdGggXHJcbmhpbSBnb25lLCBMZXNsZXkgZmluYWxseSBicm9rZSAtIGFuZCBvbGQgaGFiaXRzIHJldHVybmVkLiBIb3dldmVyLCB0aGlzIHRpbWUgc2hlIHdhcyB3aXNlIGVub3VnaCB0byBub3QgZHJpbmsgd2FudG9ubHksIFxyXG5idXQgb25seSBmcm9tIHNvbWVvbmUgd2hvIGNvdWxkIG92ZXJwb3dlciBoZXIgaWYgc2hlIGxvc3QgY29udHJvbCAtIHNvbWVvbmUgd2hvIHdhcyBhbHNvIGNsb3NlIHRvIGhlci4gV2hpbGUgdGhlIFxyXG5vdGhlcnMgYWx3YXlzIGtlcHQgZW5jb3VyYWdpbmcgaGVyIHRoYXQgaGUgd291bGQgcmV0dXJuIC0gaGUgaGFkIGxlYXJudCBtYWdpYyBzdHJvbmcgZW5vdWdoIHRvIG9wZW4gcGVycGVuZGljdWxhcml0aWVzXHJcbi0gaGVyIGJsb29kIGFscmVhZHkgaGFkIHRvbGQgaGVyIGhlIHdhcyBkZWFkIGZvciBnb29kLiBTbyBzaGUgZHJhbmsuIEhhdGluZyBoZXJzZWxmLCBzaGUgY29udGludWVkIHRvIGRyaW5rLCBhbmQgXHJcbmRyaW5rLCBhbmQgZHJpbmsgKGJlY29taW5nIHRoZSByZWFzb24gZm9yIENhZWx5bm4gdG8gYXBwZWFyIGV2ZW4gcGFsZXIgdGhhbiBoZXIgbmF0dXJhbCBjb21wbGV4aW9uKS5cclxuPGg1PkZvcmdpdmVuZXNzPC9oNT5cclxuVGhlIGZpcnN0IGJyZWFrIGZyb20gaGVyIHJlbGFwc2UgaW50byBkYXJrbmVzcyB3YXMgd2hlbiBwZW9wbGUgc2FpZCBhIFxyXG4ke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5Nb3N0aW1hKS5jcmVhdGVMaW5rKFwibXlzdGVyaW91cyBnaXJsIHdpdGggdGVtcG9yYWwgY29udHJvbFwiKX0gaGFkIHNob3duIHVwIGFuZCB3YW50ZWQgdG8gYmUgaGVyIHdhcmQuXHJcblRob3VnaCBzaGUgd2FzIGluIG5vIG1vb2QgdG8sIENhZWx5bm4gZm9yY2VkIGhlciB0byB0YWtlIGhlciBhcyBhIHN0dWRlbnQsIHNvbWV0aGluZyBMZXNsZXkgdGhhbmtlZCBoZXIgZm9yIGxhdGVyLlxyXG5CdXQgdGhlIGZpbmFsIHJlcHJpZXZlIGNhbWUgd2hlbiwgYSBmZXcgZGVjYWRlcyBsYXRlciwgQ2FlbHlubiBicm91Z2h0IGhvbWUgYSBncm91cCBvZiBndWVzdHMgLSBvbmUgb2YgdGhlbSBhbiBhYXNpbWFyIHBhbGFkaW4sXHJcbm9mIGFuIG9hdGggaGlnaCBlbm91Z2ggdG8gYmUgYSBmdWxsIGtuaWdodCByYWRpYW50LiBGcm9tIHRoZSBmaXJzdCBkYXksIGhlIGNvdWxkIGZlZWwgc29tZXRoaW5nIHdhcyBvZmYgaW4gdGhlIFxyXG5idW5rZXIuIEhlIHdvdWxkIGZpbmQgaGVyLCBzaGUga25ldywgYW5kIHdoaWxlIHNoZSBjb3VsZCBraWxsIGhpbSwgc2hlIGZvdW5kIGhlcnNlbGYgdW53aWxsaW5nIHRvLiBIZXIgcGFzdCBoYWQgXHJcbmZpbmFsbHkgY2F1Z2h0IHVwLCBqdWRnZW1lbnQgd2FzIGhlcmUsIGFuZCB3aXRoIGhlciBhZGRpY3Rpb24gcmVzdXJmYWNpbmcsIHNoZSBjb3VsZG4ndCBmaW5kIGl0IGluIGhlcnNlbGYgdG8gdHJ5IHRvIFxyXG5oaW5kZXIgaXQuIFNoZSBkaWRuJ3Qgd2FudCB0byBkaWUsIHRob3VnaCBhbmQgdHJpZWQgaGlkaW5nIGhlciB0cnVlIG5hdHVyZSB1bnRpbCBoaWRpbmcgaXQgd2FzIHZpcnR1YWxseSBlcXVpdmFsZW50IFxyXG50byBraWxsaW5nIGhpbS4gRm9yIGhlJ2QgY29uam9pbmVkIHR3byBwb3dlcmZ1bCByZWxpY3MsIG9uZSBmcm9tIHRoZSBjYXN0bGUgYW5kIGFub3RoZXIgZnJvbSB0aGUgR3VhcmRpYW4gb2YgbWFnaWMsIHRoZSBcclxubGF0dGVyIHNlYWxpbmcgdGhlIGVzc2VuY2Ugb2YgdGhlIFByaW1vcmRpYWxzIGFuZCBiZWluZyB3YXRjaGVkIGJ5IFJ1aW4gaGltc2VsZi4gSGUgd2FzIHRha2VuIGJ5IHN1cnByaXNlIGFuZCBcclxuY291bGRuJ3QgcmVzaXN0IGl0LiBIZSB3b3VsZCBkaWUgYmVmb3JlIHRoZSBzcGxpdC1zZWNvbmQgd2FzIG92ZXIuIE5vIG9uZSBlbHNlIGhhZCBub3RpY2VkIHlldCAtIGFuZCB3b3VsZG4ndCBiZWZvcmVcclxuaXQgd2FzIHRvbyBsYXRlLCBidXQgZXZlbiB0aGUgYmVzdCBvZiB0aGVtIGRpZG4ndCBoYXZlIHRoZSByZWZsZXhlcyBvZiBhIGhpZ2hlciB2YW1waXJlIC0gbm9yIHRoZSBzdHJlbmd0aC48YnIvPlxyXG5TbyBiZXRyYXlpbmcgaGVyIHRydWUgbmF0dXJlLCB0byB0aGUgc2hvY2sgb2YgbWFueSwgc2hlIGJyb2tlIHRoZSBjb25qdW5jdGlvbiBhbmQgcHVsbGVkIGhpbSBvdXQgdG8gc2FmZXR5LiBJdCB3YXMgXHJcbm5vdCBhIHBsZWEgdG8gc3BhcmUgaGVyIGxpZmUgYmVjYXVzZSBzaGUnZCBzYXZlZCBoaXMuIE5vLCB0aGlzIHdhcyBubyBiYXJnYWluLCBubyB0cmFkZSBkZWFsLiBBZnRlciBwcmVwYXJpbmcgaGVyc2VsZlxyXG5hbmQgd3JhcHBpbmcgb24gcmVzdHJhaW50cyB0byBzdXBwcmVzcyBoZXIgdmFtcGlyaWMgcG93ZXJzLCBzaGUgc3Rvb2QgYmVmb3JlIGhpbS4gV2l0aCB0aGUgc2VjcmV0IG91dCwgc2hlIGFuc3dlcmVkXHJcbmFsbCBoaXMgcXVlc3Rpb25zIGhvbmVzdGx5LCBhbmQgY2xvc2VkIGhlciBleWVzLCBicmFjaW5nIGZvciB0aGUgZW5kLiBZZXQgaGUgd291bGRuJ3Qgc3RyaWtlLiBXaGlsZSBoZSBtYWRlIGl0IGNsZWFyXHJcbmhlIGRpZG4ndCBmdWxseSB0cnVzdCBoZXIsIHNoZSBoYWQgdG8gYmUgc3VyZSBoZSA8aT5tZWFudDwvaT4gaXQgd2hlbiBoZSBjaG9zZSB0byBzcGFyZSBoZXIuIFNvIHNoZSBhc2tlZCBoaW0gdG8gXHJcbmJyZWFrIHRoZSByZXN0cmFpbnRzIHNoZSBoYWQgb24gLSBhbmQgc3RhbmQgYmVmb3JlIGhlciBpbiBoZXIgdW5yZXN0cmFpbmVkIHZhbXBpcmljIHBvd2Vycywgd2hpY2ggaGUgZGlkLiBCbGVzcyB0aGVcclxubWFuLCBoZSBkaWQhIEFuZCBzbywga25vd2luZyB0aGF0IHRoZXkgd291bGQgYmUgaGVhZGluZyBpbnRvIHRoZSBjYXN0bGUgLSBzaGUgZ2F2ZSBoaW0gaGVyIHZhbXBpcmljIHNpZ2lsIC0gYSB0b2tlbiBcclxub2YgdHJ1c3QgYmV5b25kIHdoYXQgbW9zdCBtb3J0YWxzIGNvdWxkIGNvbXByZWhlbmQuIEl0IGdhdmUgaGltIHBvd2VycyBsaWtlIGhlciBvd24gd2hpY2ggd291bGQgc3VyZmFjZSBpZiwgYW5kIG9ubHkgXHJcbmlmLCBuZWVkZWQuIEl0IGFsc28gbGVudCB0aGUgYXV0aG9yaXR5IG9mIGhlciBmYW1pbHkgdG8gaGltLCBhbmQgZ2F2ZSBoaW0gdGhlIHBvd2VyIHRvIHRydWx5IGtpbGwgaGVyIGZvciBnb29kLiBTdWNoXHJcbmEgbmVlZCBkaWRuJ3QgYXJpc2UsIGhvd2V2ZXIuIEJ1dCB0aGUgZ3JvdXAgZGlkIGNvbnRhY3QgaGVyIHRvIGNvbmZpcm0gQmVuIHdhcyBnb25lICh2aWEgYSBkZXZpY2UgaGUnZCBsZWZ0IFxyXG5iZWhpbmQpLCBidXQgc2hlIGtuZXcgdGhhdCBhbHJlYWR5LiBTdGlsbCwgd2hlbiBDYWVseW5uIHRvbGQgaGVyIGFsbCB0aGUgR3VhcmRpYW5zIHdlcmUgaGVhZGluZyB0aGVyZSwgYW5kIHdlcmUgXHJcbmxpa2VseSB0byBydW4gaW50byB0aGVtLCBzaGUgd2FzIGFsbCB0b28gZ2xhZCB0byBiZSBhIHBhcnQgb2YgdGhhdCBncm91cCwgZXZlbiBpZiBpdCBtZWFudCBydW5uaW5nIGludG8gdGhlIFxyXG5TYW5ndWluZUFyY2ggdGhlbXNlbGYuLi5gO1xyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnW1wiUmVjb3ZlcmluZyBBZGRpY3RcIl0sIDVdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkJpYmxpb3BoaWxlLCAzXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5SZWNsdXNlLCAzXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5MYXp5LCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5EZXByZXNzaXZlLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZ1tcIkd1aWx0LXJpZGRlblwiXSwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuSW50cm92ZXJ0LCAxXSxcclxuICAgIGxlcy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cExlc2xleSA9IHNldHVwTGVzbGV5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZXNsZXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cExpYSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwTGlhKCkge1xyXG4gICAgY29uc3QgbGlhID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkxpYSk7XHJcbiAgICBsaWEuY29yZS5uYW1lID0gXCJMaWEgTWlzdGNsb2FrXCI7XHJcbiAgICBsaWEuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzEvbGlhLnBuZ1wiO1xyXG4gICAgbGlhLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMSk7XHJcbiAgICBsaWEuY2FyZC5hZGRDYXJkVGFnKFwiRjEyODBcIik7XHJcbiAgICBsaWEuY2FyZC5hZGRDYXJkVGFnKFwiQ1IgfCAxMFwiKTtcclxuICAgIGxpYS5jYXJkLmFkZENhcmRUYWcoXCJGcm9tIHwgRmFld2lsZCAvIFByZXNlcnZhdGlvblwiKTtcclxuICAgIGxpYS5jYXJkLmFkZENhcmRUYWcoXCJBbGxlZ2lhbmNlIHwgUHJlc2VydmF0aW9uXCIpO1xyXG4gICAgbGlhLmNhcmQuYWRkQ2FyZFRhZyhcIlJhY2UgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+SGlnaDwvc3Bhbj4gRWxmXCIpO1xyXG4gICAgbGlhLmNhcmQuYWRkQ2FyZFRhZyhcIjxzcGFuIGNsYXNzPSd2ZXJib3NlJz5TYW11cmFpPC9zcGFuPiBGaWdodGVyXCIpO1xyXG4gICAgbGlhLmNhcmQuYWRkQ2FyZFRhZyhcIkZhY3Rpb246IFdhdGNoZXJzXCIpO1xyXG4gICAgbGlhLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBBbiBlbHZlbiBhcmNoZXIgd2hvIHJvYW1lZCBmcmVlbHkgdGhlIEZleXdpbGQgdW50aWwgYnkgY3J1ZWwgY2lyY3Vtc3RhbmNlIHNoZSBmZWxsIHByZXkgdG8gdGhlIHNlY29uZCBcclxuICAgICAgbmlnaHRtYXJlLiBTdXJ2aXZlZCB0aGUgZW5jb3VudGVyIHRoYW5rcyB0byAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5DYWVseW5uKS5jcmVhdGVMaW5rKFwiQ2FlbHlublwiKX0ncyBcclxuICAgICAgaW50ZXJ2ZW50aW9uLCB3aG8gcmVtYWluZWQgb24gdGhlIGxvb2tvdXQgZm9yIHByaW1vcmRpYWwgaW5jdXJzaW9ucy4gQ2FlbHlubiB0aGVuIG9mZmVyZWQgaGVyIGFzeWx1bSB3aXRoIFxyXG4gICAgICBoZXJzZWxmIHByb21pc2luZyB0byBrZWVwIGhlciBzYWZlIGZyb20gdGhlIHByaW1vcmRpYWwgYXMgZmFyIGFzIHBvc3NpYmxlLCBhbiBvZmZlciBzaGUgcmVhZGlseSB0b29rLiBcclxuICAgICAgUmVzY3VlZCAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5VbHJpY2gpLmNyZWF0ZUxpbmsoXCJVbHJpY2hcIil9IHdoZW4gaGUgc2hvd2VkIHVwIGEgZmV3IGNlbnR1cmllcyBsYXRlciBhbmQgc3Vic2VxdWVudGx5IFxyXG4gICAgICBtYXJyaWVkIGhpbSBvbiBoaXMgaW5zaXN0ZW5jZS4gV2hpbGUgbm90IHRoZSBpZGVhbCBtYXJyaWFnZSwgdGhlIHR3byBtYW5hZ2UgZmluZSBub3dhZGF5cy5gO1xyXG4gICAgbGlhLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxufVxyXG5leHBvcnRzLnNldHVwTGlhID0gc2V0dXBMaWE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpYS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwTGluZyA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwTGluZygpIHtcclxuICAgIGNvbnN0IGxpbmcgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuTGluZyk7XHJcbiAgICBsaW5nLmNvcmUubmFtZSA9IFwiTGluZ1wiO1xyXG4gICAgbGluZy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMS9saW5nX2dhcmRlbi5wbmdcIjtcclxuICAgIGxpbmcuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAxKTtcclxuICAgIGxpbmcuY2FyZC5hZGRDYXJkVGFnKFwiRlwiKTtcclxuICAgIGxpbmcuY2FyZC5hZGRDYXJkVGFnKFwiQ1IgfCAyN1wiKTtcclxuICAgIGxpbmcuY2FyZC5hZGRDYXJkVGFnKFwiRnJvbSB8IFByZXNlcnZhdGlvblwiKTtcclxuICAgIGxpbmcuY2FyZC5hZGRDYXJkVGFnKFwiQWxsZWdpYW5jZSB8ID8/P1wiKTtcclxuICAgIGxpbmcuY2FyZC5hZGRDYXJkVGFnKFwiUmFjZSB8IFRpdGFuICZ0aW1lczsgPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPkJsdWUgRHJhZ29uPC9zcGFuPlwiKTtcclxuICAgIGxpbmcuY2FyZC5hZGRDYXJkVGFnKFwiPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPkRyYWNvbmljPC9zcGFuPiBTb3JjZXJlclwiKTtcclxuICAgIGxpbmcuY2FyZC5hZGRDYXJkVGFnKFwiPHNwYW4+UHJpbW9yZGlhbCB8IE91dHNpZGVyIDxzcGFuIGNsYXNzPSd2ZXJib3NlJz4oMzxzdXA+cmQ8L3N1cD4gRnJhZ21lbnQgb2YgU3VpKTwvc3Bhbj48L3NwYW4+XCIpO1xyXG4gICAgbGluZy5jYXJkLmFkZENhcmRUYWcoXCJFeC1HdWFyZGlhbiBvZiBEaXBsb21hY3lcIik7XHJcbiAgICBsaW5nLmNhcmQuYWRkQ2FyZFRhZyhcIkV4LUxpZ2h0aG91c2UgS2VlcGVyXCIpO1xyXG4gICAgbGluZy5jYXJkLnByaW1hcnlJbWFnZVRpdGxlID0gXCJMaWdodGhvdXNlIEtlZXBlclwiO1xyXG4gICAgbGluZy5jYXJkLmFkZEFsdGVybmF0ZUltYWdlKFwiU2hyaW5lIE1haWRlblwiLCBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMS9saW5nX3N1aS5wbmdcIik7XHJcbiAgICBsaW5nLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBPbmUgb2YgdGhlIGZyYWdtZW50cyBvZiBhbiBvdXRlciBwcmltb3JkaWFsLiBNb3ZlZCBpbnRvIHRoZSBHYXJkZW5zIGxvbmcgYWdvIGFsb25nIHdpdGggXHJcbiAgICAgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuS2plcnJhKS5jcmVhdGVMaW5rKFwiS2plcmFcIil9IGFuZCB3b3JrZWQgYXMgYSBsaWdodGhvdXNlIGtlZXBlciB0aGVyZSBzbyBhcyB0byBiZSBiZXN0IHBsYWNlZCB0b1xyXG4gICAgICByZXNwb25kIHRvIHRoZSByZXZpdmFsIG9mIGhlciAncGFyZW50JyBvciBhbnkgb3RoZXIgb3V0c2lkZXJzLiBXYXMgY2hvc2VuIHRvIGJlIHRoZSBHdWFyZGlhbiBvZiBEaXBsb21hY3kgYWZ0ZXJcclxuICAgICAgdGhlIGlucXVpc2l0b3JzJyBiZXRyYXlhbC4gQWdyZWVkIGJ1dCB3ZW50IG1pc3NpbmcgZHVyaW5nIHRoZSBleHBlZGl0aW9uIGluc2lkZSB0aGUgQ2FzdGxlIG9mIHRoZSBOaWdodCBcclxuICAgICAgZm9sbG93aW5nIFByZXNlcnZhdGlvbidzIGRlYXRoIGFuZCB0aGUgU3Vydml2b3IncyBBc2NlbnNpb24uYDtcclxuICAgIGxpbmcub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBMaW5nID0gc2V0dXBMaW5nO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5nLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBMdWNpYW4gPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBMdWNpYW4oKSB7XHJcbiAgICBjb25zdCBsdWNpYW4gPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuTHVjaWFuKTtcclxuICAgIGx1Y2lhbi5jb3JlLm5hbWUgPSBcIkx1Y2lhblwiO1xyXG4gICAgbHVjaWFuLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMxL2x1Y2lhbl9ub3JtLnBuZ1wiO1xyXG4gICAgbHVjaWFuLmRTdGF0cy5wYiA9IGNvbnN0YW50c18xLlByb2YuZ2V0KDcpO1xyXG4gICAgbHVjaWFuLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMTMsIDI1LCA3LCAxMywgNSwgMjcpO1xyXG4gICAgbHVjaWFuLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMSk7XHJcbiAgICBsdWNpYW4uY2FyZC5hZGRDYXJkVGFnKFwiTTIxMFwiKTtcclxuICAgIGx1Y2lhbi5jYXJkLmFkZENhcmRUYWcoXCJGcm9tIHwgUnVpblwiKTtcclxuICAgIGx1Y2lhbi5jYXJkLmFkZENhcmRUYWcoXCJBbGxlZ2lhbmNlIHwgUnVpbiAvIFRyb3VwZSBMZWFkZXJcIik7XHJcbiAgICBsdWNpYW4uY2FyZC5hZGRDYXJkVGFnKFwiUmFjZSB8IEZlbGluZVwiKTtcclxuICAgIGx1Y2lhbi5jYXJkLmFkZENhcmRUYWcoXCI8c3BhbiBjbGFzcz0ndmVyYm9zZSc+RWNobzwvc3Bhbj4gV2FycmlvciAvIDxzcGFuIGNsYXNzPSd2ZXJib3NlJz5Bc3Nhc3Npbjwvc3Bhbj4gUm9ndWUgLyAuLi5cIik7XHJcbiAgICAvLyBHcmF2ZSBjbGVyaWMsIGNocm9ubyBtYWdlXHJcbiAgICBsdWNpYW4uY2FyZC5hZGRDYXJkVGFnKFwiTmlnaHRibG9vZCB8IE9taW5vdXMgTWVsb2R5XCIpO1xyXG4gICAgbHVjaWFuLmNhcmQuYWRkQ2FyZFRhZyhcIlRpbWUgQ29tbWFuZFwiKTtcclxuICAgIGx1Y2lhbi5jYXJkLmFkZENhcmRUYWcoXCJBYmVycmFudCBGdXNlZCAoPz8/KVwiKTtcclxuICAgIGx1Y2lhbi5jYXJkLmFkZENhcmRUYWcoXCI8aT5IZSB3aG8gcXVpZXRzPC9pPlwiKTtcclxuICAgIGx1Y2lhbi5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDIzXCIpO1xyXG4gICAgbHVjaWFuLmNhcmQucHJpbWFyeUltYWdlVGl0bGUgPSBcIlBoYW50b21cIjtcclxuICAgIGx1Y2lhbi5jYXJkLmFkZEFsdGVybmF0ZUltYWdlKFwiU29saXRhaXJlXCIsIFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMxL2x1Y2lhbl9tYWQucG5nXCIpO1xyXG4gICAgbHVjaWFuLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBcclxuICAgIFwiVGhpcyBkYXJrbmVzcyBpcyBhIHJlZnVnZSwgYSB0aHJvbmUsIGFuZCBwYXJhZGlzZS4gVGhlIHNwaXJpdHMgb2YgdGhlIGRlYWQgaGF2ZSBuZXZlciBsZWZ0LCBhbmQgSeKAmXZlIGN1cnNlZCBcclxuICAgICB0aGUgd29ybGQgZnJvbSBhdG9wIHRoZWlyIGJvbmVzLi4uIFNlZWluZyBtZSBhcyBJIGFtIG5vdywgZG8geW91IHN0aWxsIHdhbnQgdG8gaGVhciBteSBzb25nPyBEbyB5b3Ugc3RpbGxcclxuICAgICBkYXJlLi4uIHRvIHN0YW5kIGJlZm9yZSBtZT9cIjxici8+XHJcbiAgICAgQ2FsYW1pdHkgb2YgVGhlIFRyb3VwZSAtIGFuIHVuZmluaXNoZWQgbWFzdGVycGllY2Ugb2YgdGhlaXIgbGVhZGVyLiBXYXMgb25jZSByYWlzZWQgYXMgdGhlaXIgcmlzaW5nIHN0YXIgaW5cclxuICAgICByZXNwb25zZSB0byB0aGUgdGhyZWF0IHRoYXQgd2FzICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkViZW5lemFyKS5jcmVhdGVMaW5rKFwidGhlIExpY2hcIil9LiBCdXQgdHVybmVkIGFnYWluc3QgdGhlbSBvbmx5IFxyXG4gICAgIGFzIGhlIHNsYXVnaHRlcmVkIGFsbCB0aGUgdHJvdXBlJ3Mgc2VuaW9yIG1lbWJlcnMgaW4gb25lIG5pZ2h0IGFuZCBlc2NhcGVkIGludG8gTWF0ZXJpYSAtIHNlYWxpbmcgaGlzXHJcbiAgICAgbWVtb3JpZXMgYW5kIHBvd2Vycy4gSGUgcmV0dXJuZWQgdG8gdGhlIG91dGVyIHBsYW5lcyBieSBhY2NpZGVudCBhbmQgc291Z2h0IG91dCB0aGUgdHJvdXBlIHdoZW4gaGUgZGlkLiBcclxuICAgICBEZXNjZW5kZWQgaW50byBpbnNhbml0eSBhZnRlciBraWxsaW5nICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELk1vdXRocGllY2UpLmNyZWF0ZUxpbmsoXCJUaGUgTW91dGhwaWVjZVwiKX0gYW5kIGluaGVyaXRpbmcgXHJcbiAgICAgaGlzIGN1cnNlLiBGb2xsb3dpbmcgd2hpY2ggaGUgc3RlYWx0aGlseSBhc3Nhc3NpbmF0ZWQgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuVHJhaXRvck90aGVsbG8pLmNyZWF0ZUxpbmsoXCJUaGUgVHJhaXRvclwiKX0sIHdobyB3YXMgXHJcbiAgICAgcHJlb2NjdXBpZWQgaW4gZmlnaHRpbmcgJ0FnZW50cyBvZiB0aGUgRmlmdGgnLCB0aHVzIGZyZWVpbmcgdGhlIFByaW1vcmRpYWwgbmlnaHRtYXJlcy5cclxuICAgIGA7XHJcbiAgICBsdWNpYW4ub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBMdWNpYW4gPSBzZXR1cEx1Y2lhbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHVjaWFuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBNYXN0ZXIgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cE1hc3RlcigpIHtcclxuICAgIGNvbnN0IG1hcyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5UaGVNYXN0ZXIpO1xyXG4gICAgbWFzLmNvcmUubmFtZSA9IFwiVGhlIE1hc3RlclwiO1xyXG4gICAgbWFzLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMxL2dfb3JkZXIucG5nXCI7XHJcbiAgICBtYXMuY2FyZC5hZGRDYXJkVGFnKFwiRGVjZWFzZWRcIik7XHJcbiAgICBtYXMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAxKTtcclxuICAgIG1hcy5jYXJkLmFkZENhcmRUYWcoXCJNNTBLK1wiKTtcclxuICAgIG1hcy5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDI3XCIpO1xyXG4gICAgbWFzLmNhcmQuYWRkQ2FyZFRhZyhcIkZyb20gfCBNYXRlcmlhIC8gUHJlc2VydmF0aW9uXCIpO1xyXG4gICAgbWFzLmNhcmQuYWRkQ2FyZFRhZyhcIkFsbGVnaWFuY2UgfCBQcmVzZXJ2YXRpb24gLyA/Pz9cIik7XHJcbiAgICBtYXMuY2FyZC5hZGRDYXJkVGFnKFwiUmFjZSB8IFNoYWRhci1LYWlcIik7XHJcbiAgICBtYXMuY2FyZC5hZGRDYXJkVGFnKFwiUGFsYWRpbiAvIEJhcmRcIik7XHJcbiAgICBtYXMuY2FyZC5hZGRDYXJkVGFnKFwiRmFjdGlvbjogSW5xdWlzaXRvcnNcIik7XHJcbiAgICBtYXMuY2FyZC5hZGRDYXJkVGFnKFwiRXgtR3VhcmRpYW4gb2YgT3JkZXJcIik7XHJcbiAgICBtYXMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYEtub3duIGFjcm9zcyBhbGwgdGhlIHJlYWxtcyBzaW1wbHkgYXMgJ1RoZSBNYXN0ZXInIC0gdGhlIEd1YXJkaWFuIG9mIE9yZGVyIHdhcyBhbiBleHBlcnQgYXQgZGlwbG9tYWN5LCB0aGUgXHJcbiAgICAgIGZvcmNlZnVsIGFybS10d2lzdGluZyBraW5kLCB3aG8gYWx3YXlzIGdvdCBoaXMgd2F5LiBVbmxpa2UgbW9zdCBvdGhlcnMgd2hvIHRvb2sgaXQgZWFzeSBpbiB0aGUgZ2FyZGVuLCBoZSBzcGVudFxyXG4gICAgICBoaXMgd2hvbGUgbGlmZSBzY2hlbWluZyBhbmQgcnV0aGxlc3NseSBleGVjdXRpbmcgZXZlci1tb3JlLWNvbXBsZXggTWFjaGlhdmVsbGlhbiBzY2hlbWVzLiBTbyBjb21wbGV4IHRoYXQgZXZlblxyXG4gICAgICBoaXMgb3duIGxveWFsdGllcyB3ZXJlIGF0IHRpbWVzIGRvdWJ0ZWQsIHBhcnRpY3VsYXJseSB3aGVuIHNvbWUgbGlua3Mgd2VyZSBmb3VuZCBiZXR3ZWVuIGhpbSBhbmRcclxuICAgICAgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuVHJhaXRvck90aGVsbG8pLmNyZWF0ZUxpbmsoXCJUaGUgVHJhaXRvclwiKX0uIEhlIHdhcyBhbHNvIGEgdmVyeSBzdHJvbmcgd2FycmlvciwgcnVtb3VyZWQgdG8gYmUgYSBcclxuICAgICAgcmFkaWFudCBhcyB3ZWxsIGFzIGhhdmUgaGVtYWx1cmdpYyBwb3dlcnMgZXF1aXZhbGVudCBvZiBNaXN0Ym9ybiBvZiBvbGQgZGVyaXZlZCBmcm9tIGFuIGlub3JkaW5hdGUgXHJcbiAgICAgIG51bWJlciBvZiBzcGlrZXMuIEEgbnVtYmVyIGVxdWl2YWxlbnQgdG8gc29tZSBvZiBoaXMgc2VuaW9ybW9zdCBjb3VudGVycGFydHMgd2l0aGluIHRoZSBjYXN0bGUgaXRzZWxmLCBzbyBtYW55IHRoYXQgXHJcbiAgICAgIGV2ZW4gQWx1bWluaXVtIGNvdWxkbid0IG5lZ2F0ZSB0aGVtIGluIHRpbWUuIENvbW1pdHRlZCBzdWljaWRlIHdoZW4gUnVpbiBhdHRlbXB0ZWQgdG8gYXNzZXJ0IGhpcyB3aWxsIHZpYSB0aGVcclxuICAgICAgaGVtYWx1cmdpYyBzcGlrZXMgaW5zdGVhZCBvZiBsZXR0aW5nIGhpcyBrbm93bGVkZ2UgZmFsbCBpbnRvIHRoZSBlbmVtaWVzIGhhbmRzLiBBIHBpdHkgdG9vLCBmb3IgaGUgd2FzIFxyXG4gICAgICBsaXRlcmFsbHkgdGhlIHBlcnNvbmlmaWNhdGlvbiBvZiBvbmUgb2YgdGhlIGlkZWFscyBvZiB0aGUgbmV3IFByZXNlcnZhdGlvbiwgXCJUaGVyZSdzIGFsd2F5cyBhbm90aGVyIHNlY3JldC5cImA7XHJcbiAgICBtYXMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBNYXN0ZXIgPSBzZXR1cE1hc3RlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFzdGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBVbHJpY2ggPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFVscmljaCgpIHtcclxuICAgIGNvbnN0IHVsciA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5VbHJpY2gpO1xyXG4gICAgdWxyLmNvcmUubmFtZSA9IFwiVWxyaWNoIE1pc3RjbG9ha1wiO1xyXG4gICAgdWxyLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMxL3VscmljaC5wbmdcIjtcclxuICAgIHVsci5jYXJkLnNldENhbXBhaWduQXJjKDEsIDEpO1xyXG4gICAgdWxyLmNhcmQuYWRkQ2FyZFRhZyhcIk0xMDIwXCIpO1xyXG4gICAgdWxyLmNhcmQuYWRkQ2FyZFRhZyhcIkNSIHwgN1wiKTtcclxuICAgIHVsci5jYXJkLmFkZENhcmRUYWcoXCJGcm9tIHwgTWF0ZXJpYSAvIFByZXNlcnZhdGlvblwiKTtcclxuICAgIHVsci5jYXJkLmFkZENhcmRUYWcoXCJSYWNlIHwgSHVtYW5cIik7XHJcbiAgICB1bHIuY2FyZC5hZGRDYXJkVGFnKFwiPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPkZvcmdlPC9zcGFuPiBDbGVyaWNcIik7XHJcbiAgICB1bHIuY2FyZC5hZGRDYXJkVGFnKFwiRmFjdGlvbjogU2Nob2xhcnNcIik7XHJcbiAgICB1bHIuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYEEgaHVtYW4gdGhhdCBsaXZlZCBpbiB0aGUgbGFzdCB5ZWFycyBvZiB0aGUgQXJjaGFpYyBlcmEgYW5kIGhhZCBzaG93biByZW1hcmthYmxlIHNraWxsIGluIG1ha2luZyBoZWF2eSBhcm1vcnMgXHJcbiAgICAgIGZvciB0aG9zZSBvZiBoaXMgY2xlcmljYWwgb3JkZXIuIFVwb24gaGlzIGRlYXRoIGluIHdhciwgUHJlc2VydmF0aW9uIGdhdmUgaGltIGEgc2Vjb25kIGNoYW5jZSBhdCBzZW50aWVudCBsaWZlXHJcbiAgICAgIGluIHRoZSBHYXJkZW5zLCBhcyBhIHJld2FyZCBmb3Igc2F2aW5nIHRoZSBsaXZlcyBvZiBzbyBtYW55IHRoYW5rcyB0byBoaXMgbWV0aWN1bG91cyB3b3JrIGF0IHRoZWlyIGFybW9ycy4gXHJcbiAgICAgIFNpbmNlIHRoZW4gaGUncyBiZWVuIGhvbmluZyBoaXMgc2tpbGxzIGFuZCBpcyBub3cgcmVnYXJkZWQgYXMgb25lIG9mIHRoZSBmaW5lc3Qgc21pdGhzIGluIHRoZSBtdWx0aXZlcnNlLmA7XHJcbiAgICB1bHIub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBVbHJpY2ggPSBzZXR1cFVscmljaDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dWxyaWNoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBWYWhhcmV0aCA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwVmFoYXJldGgoKSB7XHJcbiAgICBjb25zdCB2YWggPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuVmFoYXJldGgpO1xyXG4gICAgdmFoLmNvcmUubmFtZSA9IFwiVmFoYXJldGggVHNhdiBBbmF0XCI7XHJcbiAgICB2YWguY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzEvZ19saWZlLnBuZ1wiO1xyXG4gICAgdmFoLmNhcmQuYWRkQ2FyZFRhZyhcIjxpPlJldGlyZWQ8L2k+XCIpO1xyXG4gICAgdmFoLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMSk7XHJcbiAgICB2YWguY2FyZC5hZGRDYXJkVGFnKFwiTTUwSytcIik7XHJcbiAgICB2YWguY2FyZC5hZGRDYXJkVGFnKFwiQ1IgfCAyOFwiKTtcclxuICAgIHZhaC5jYXJkLmFkZENhcmRUYWcoXCJGcm9tIHwgTWF0ZXJpYSAvIFByZXNlcnZhdGlvblwiKTtcclxuICAgIHZhaC5jYXJkLmFkZENhcmRUYWcoXCJBbGxlZ2lhbmNlIHwgUHJlc2VydmF0aW9uXCIpO1xyXG4gICAgdmFoLmNhcmQuYWRkQ2FyZFRhZyhcIlJhY2UgfCBLYWxhc2h0YXJcIik7XHJcbiAgICB2YWguY2FyZC5hZGRDYXJkVGFnKFwiRHJ1aWRcIik7XHJcbiAgICB2YWguY2FyZC5hZGRDYXJkVGFnKFwiRmFjdGlvbjogSW5zcGVjdG9yXCIpO1xyXG4gICAgdmFoLmNhcmQuYWRkQ2FyZFRhZyhcIkV4LUd1YXJkaWFuIG9mIExpZmVcIik7XHJcbiAgICB2YWguY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYCR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkNhZWx5bm4pLmNyZWF0ZUxpbmsoXCJDYWVseW5uXCIpfSdzIHByZWRlY2Vzc29yIGFzIHRoZSBHdWFyZGlhbiBvZiBMaWZlIGFzIHdlbGwgYXMgYSBcclxuICAgICAgZmF0aGVyIGZpZ3VyZSB0byBoZXIuIFNjb3V0ZWQgaGVyIG91dCBpbiBNYXRlcmlhLCB0aGVuIGdvdCBoZXIgdG8gdGhlIGdhcmRlbnMgYW5kIHBlcnNvbmFsbHkgdHJhaW5lZCBoZXIuIFxyXG4gICAgICBLbm93biBhbmQgZmVhcmVkIHRocm91Z2hvdXQgYWxsIHRoZSBvdXRlciBwbGFuZXMgZm9yIGhpcyB1bmJyZWFrYWJsZSB3aWxsIGFuZCBleWVzIHRoYXQgY291bGQgZGVsdmUgaW50byB0aGUgXHJcbiAgICAgIGRlZXBlc3QgbmF0dXJlIG9mIGEgcGVyc29uJ3Mgc291bCB3aXRoIGp1c3QgYSBnbGFuY2UuICdSZXRpcmVkJyBhZnRlciBMZXJhcycgZGVhdGguYDtcclxuICAgIHZhaC5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFZhaGFyZXRoID0gc2V0dXBWYWhhcmV0aDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFoYXJldGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEMxQTIgPSB2b2lkIDA7XHJcbmNvbnN0IGFtYWlhXzEgPSByZXF1aXJlKFwiLi9hbWFpYVwiKTtcclxuY29uc3QgYmFwaG9tZXRfMSA9IHJlcXVpcmUoXCIuL2JhcGhvbWV0XCIpO1xyXG5jb25zdCBkZWNyb2FfMSA9IHJlcXVpcmUoXCIuL2RlY3JvYVwiKTtcclxuY29uc3QgZmllc3RfMSA9IHJlcXVpcmUoXCIuL2ZpZXN0XCIpO1xyXG5jb25zdCBnZGVmXzEgPSByZXF1aXJlKFwiLi9nZGVmXCIpO1xyXG5jb25zdCBnZW5fMSA9IHJlcXVpcmUoXCIuL2dlblwiKTtcclxuY29uc3Qga2plcmFfMSA9IHJlcXVpcmUoXCIuL2tqZXJhXCIpO1xyXG5jb25zdCBsZW11ZW5fMSA9IHJlcXVpcmUoXCIuL2xlbXVlblwiKTtcclxuY29uc3QgbG9nb3NfMSA9IHJlcXVpcmUoXCIuL2xvZ29zXCIpO1xyXG5jb25zdCBtYW5kcmFnb3JhXzEgPSByZXF1aXJlKFwiLi9tYW5kcmFnb3JhXCIpO1xyXG5jb25zdCBtb3N0aW1hXzEgPSByZXF1aXJlKFwiLi9tb3N0aW1hXCIpO1xyXG5jb25zdCBtb3V0aHBpZWNlXzEgPSByZXF1aXJlKFwiLi9tb3V0aHBpZWNlXCIpO1xyXG5jb25zdCBtdWVsc3lzZV8xID0gcmVxdWlyZShcIi4vbXVlbHN5c2VcIik7XHJcbmNvbnN0IG90aGVsbG9fMSA9IHJlcXVpcmUoXCIuL290aGVsbG9cIik7XHJcbmNvbnN0IHNhbmd1aW5lQXJjaF8xID0gcmVxdWlyZShcIi4vc2FuZ3VpbmVBcmNoXCIpO1xyXG5jb25zdCBzaGFtYXJlXzEgPSByZXF1aXJlKFwiLi9zaGFtYXJlXCIpO1xyXG5jb25zdCBzaGltYWtlbl8xID0gcmVxdWlyZShcIi4vc2hpbWFrZW5cIik7XHJcbmNvbnN0IHNoaW1hcmluXzEgPSByZXF1aXJlKFwiLi9zaGltYXJpblwiKTtcclxuY29uc3QgdmVycmFkZXJfMSA9IHJlcXVpcmUoXCIuL3ZlcnJhZGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEMxQTIoKSB7XHJcbiAgICAoMCwgbG9nb3NfMS5zZXR1cExvZ29zKSgpO1xyXG4gICAgKDAsIG1vc3RpbWFfMS5zZXR1cE1vc3RpbWEpKCk7XHJcbiAgICAoMCwgc2hpbWFrZW5fMS5zZXR1cFNoaW1ha2VuKSgpO1xyXG4gICAgKDAsIHNoaW1hcmluXzEuc2V0dXBTaGltYXJpbikoKTtcclxuICAgICgwLCB2ZXJyYWRlcl8xLnNldHVwVmVycmFkZXIpKCk7XHJcbiAgICAoMCwgZmllc3RfMS5zZXR1cEZpZXN0KSgpO1xyXG4gICAgKDAsIG1vdXRocGllY2VfMS5zZXR1cE1vdXRocGllY2UpKCk7XHJcbiAgICAoMCwgc2FuZ3VpbmVBcmNoXzEuc2V0dXBTQXJjaCkoKTtcclxuICAgICgwLCBkZWNyb2FfMS5zZXR1cERlY3JvYSkoKTtcclxuICAgICgwLCBiYXBob21ldF8xLnNldHVwQmFwaG9tZXQpKCk7XHJcbiAgICAoMCwga2plcmFfMS5zZXR1cEtqZXJyYSkoKTtcclxuICAgICgwLCBnZGVmXzEuc2V0dXBHRGVmKSgpO1xyXG4gICAgKDAsIG90aGVsbG9fMS5zZXR1cE90aGVsbG8pKCk7XHJcbiAgICAoMCwgbWFuZHJhZ29yYV8xLnNldHVwTWFuZHJhZ29yYSkoKTtcclxuICAgICgwLCBnZW5fMS5zZXR1cEdlbikoKTtcclxuICAgICgwLCBtdWVsc3lzZV8xLnNldHVwTXVlbHN5c2UpKCk7XHJcbiAgICAoMCwgc2hhbWFyZV8xLnNldHVwU2hhbWFyZSkoKTtcclxuICAgICgwLCBsZW11ZW5fMS5zZXR1cExlbXVlbikoKTtcclxuICAgICgwLCBhbWFpYV8xLnNldHVwQW1haWEpKCk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEMxQTIgPSBzZXR1cEMxQTI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9pbml0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBBbWFpYSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwQW1haWEoKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkFtYWlhKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJBbWFpYVwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9hbWFpYS5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdEZWNlYXNlZCAoTWVyZ2VkKScpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0Y0MycpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0Zyb20gfCBNYXRlcmlhIC8gV2F0ZXInKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBSYWNlIHwgSHVtYW5gKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBBYmVycmFudC1mdXNlZGApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYENvcmUgb2YgdGhlIE1hbnlgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdDUiB8ID8nKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYFxyXG4gICAgYDtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBBbWFpYSA9IHNldHVwQW1haWE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFtYWlhLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBCYXBob21ldCA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwQmFwaG9tZXQoKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkJhcGhvbWV0KTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJCYXBob21ldFwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9iYXBob21ldC5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdNMjBLKycpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0Zyb20gfCBSdWluJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnUmFjZSB8IERlbW9uJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnRGVtb24gTG9yZCcpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0RvbWFpbiB8IDIwOjAwIHRvIDIxOjAwJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnQ1IgfCAyMycpO1xyXG4gICAgYy5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgXHJcbiAgICBUaGUgRGVtb24gTG9yZCBpbiBjb21tYW5kIG9mIHRoZSAnbG93ZXN0IGxldmVsJyBvZiB0aGUgQ2FzdGxlIHdobyBvZnRlbiB3YXMgc3VtbW9uZWQgdG8gb3RoZXIgcmVhbG1zIHRvIGZpZ2h0XHJcbiAgICAgIG9uIHRoZSBmcm9udCBsaW5lcywgYW5kIHNvIGhhZCBpbmhlcml0ZWQgdGhlIHRyYWl0cyBvZiBsZXNzZXIgZGVtb25zIC0gbmFtZWx5IGZlcm9jaXR5IGluIGJhdHRsZSB3aXRob3V0IHJlZ2FyZFxyXG4gICAgICB0byBzZWxmLXByZXNlcnZhdGlvbiwgYW4gaXJyYXRpb25hbCBoYXRyZWQgb2YgZGV2aWxzLCBhbmQgYSBzbGlnaHQgZGVhcnRoIG9mIGJyYWluIGNlbGxzLiBSZWdhcmRsZXNzLCB0aGUgbWVyZVxyXG4gICAgICBtZW50aW9uIG9mIGhpcyBuYW1lIGJyb3VnaHQgdGVycm9yIGluIHRoZSBoZWFydHMgb2YgbWFueSAtIHBhcnRpY3VsYXJseSBpbiB0aGUgbG93ZXIgbGV2ZWxzIG9mIHRoZSBjYXN0bGUuLi5gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEJhcGhvbWV0ID0gc2V0dXBCYXBob21ldDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFwaG9tZXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cERlY3JvYSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwRGVjcm9hKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5EZWNyb2FTYWwpO1xyXG4gICAgYy5jb3JlLm5hbWUgPSBcIkRlY3JvYSBTYWxcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzIvZGVjcm9hLnBuZ1wiO1xyXG4gICAgYy5jYXJkLnNldENhbXBhaWduQXJjKDEsIDIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0YyNjIwJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnRnJvbSB8IFNoYWRvd2ZlbGwnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdSYWNlIHwgSGlnaGVyIFZhbXBpcmUnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdDcnlzdGFsIENvbW1hbmQnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdDUiB8IDIzJyk7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBcclxuICAgIEEgaGlnaGVyIHZhbXBpcmUgd2hvIGhhZCBiZWVuIGNhcHR1cmVkIGJ5IHRoZSBUcm91cGUgTG9uZyBhZ28gYW5kIHVzZWQgYm90aCBhcyBhIHRyYXAgYWdhaW5zdCB1bndhbnRlZCBcclxuICAgICAgaW50cnVkZXJzIGFuZCBmb3IgdGhlaXIgJ3BsYXlzJyBhbmQgcmVzZWFyY2guIFByb2xvbmdlZCB0b3J0dXJlIGFuZCB3aXRoZHJhd2FsIHN5bXB0b21zIGhhZCBtYWRlIGhlciBhIGxpdHRsZSBcclxuICAgICAgdW5oaW5nZWQsIGFuZCA8aT52ZXJ5PC9pPiB0aHJpc3R5LiBXYXMgZmluYWxseSBmcmVlZCBieSBhIGdyb3VwIG9mIGFkdmVudHVyZXJzIGFuZCB0aGVyZWFmdGVyIHByb3RlY3RlZCBieSBcclxuICAgICAgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuU2FuZ3VpbmFyY2gpLmNyZWF0ZUxpbmsoXCJUaGUgU2FuZ3VpbmVBcmNoXCIpfSB1bnRpbCBzaGUgY291bGQgZXNjYXBlIHRoZSBcclxuICAgICAgY2FzdGxlLiBSZXZlYWxlZCBoZXJzZWxmIHRvIGJlIGEgY2hpbGRob29kIGZyaWVuZCBvZiAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5MZXNsZXkpLmNyZWF0ZUxpbmsoXCJMZXNsZXlcIil9J3MuYDtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBEZWNyb2EgPSBzZXR1cERlY3JvYTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjcm9hLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBGaWVzdCA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwRmllc3QoKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkZpZXN0KTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJGaWVzdFwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9maWVzdC5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBEZWNlYXNlZGApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ004MCcpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0Zyb20gfCBSdWluJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnUmFjZSB8IEh1bWFuJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCBBcnRpZmljZXJgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdDUiB8IDknKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYFxyXG4gICAgV2hpbGUgaGUgcmFyZWx5IHN0ZXBwZWQgb24gdG8gdGhlIGZpZWxkIGhpbXNlbGYsICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlNoaW1ha2VuKS5jcmVhdGVMaW5rKFwiU2hpbWFrZW5cIil9IGFuZCB0aGUgXHJcbiAgICAgIG90aGVycyBvd2VkIGEgbG90IHRvIGhpcyB0ZWNobmljYWwgZ2VuaXVzLiBTaW5jZSBoZSByYXJlbHkgZXZlbiBsZWZ0IHRoZSBjb25maW5lcyBvZiBoaXMgbGFiLCBoaXMgbGlmZSB3YXNcclxuICAgICAgcmF0aGVyIHNoZWx0ZXJlZCBhbmQgaGFwcHkuICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkxlbXVlbikuY3JlYXRlTGluayhcIkxlbXVlblwiKX0ncyBib3lmcmllbmQgYmVmb3JlIHNoZSBkaWVkLmA7XHJcbiAgICBjLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxufVxyXG5leHBvcnRzLnNldHVwRmllc3QgPSBzZXR1cEZpZXN0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWVzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwR0RlZiA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwR0RlZigpIHtcclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuR0RlZik7XHJcbiAgICBjLmNvcmUubmFtZSA9IFwiVGhlIEd1YXJkaWFuIG9mIERlZmVuc2VcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzIvZ19kZWYucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnLTQwSysnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGcm9tIHwgSW5ub3ZhdGlvbiAvIFByZXNlcnZhdGlvbicpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYEFsbGVnaWFuY2UgfCBQcmVzZXJ2YXRpb25gKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBSYWNlIHwgV2FyZm9yZ2VkICZ0aW1lczsgQWFzaW1hcmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYENsYXNzIHwgRmlnaHRlcmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0d1YXJkaWFuIG9mIERlZmVuc2UnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdBdGl1bSBTYXZhbnQnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGAnU2FpbnQnYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnQ1IgfCAyNycpO1xyXG4gICAgYy5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgXHJcbiAgICA/Pz9gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEdEZWYgPSBzZXR1cEdEZWY7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdkZWYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEdlbiA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwR2VuKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5HZW4pO1xyXG4gICAgYy5jb3JlLm5hbWUgPSBcIkdlblwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9nZW4ucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnRnJvbSB8IE1hdGVyaWEgLyBSdWluIC8gRGV2b3Rpb24nKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBSYWNlIHwgSHVtYW5gKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBDbGFzcyB8IDxzcGFuIGNsYXNzPSd2ZXJib3NlJz5JbGx1c2lvbjwvc3Bhbj4gV2l6YXJkYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCBBcnRpZmljZXJgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdDUiB8IDE3Jyk7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBcclxuICAgIExpdHRsZSBpcyBrbm93biAoc28gZmFyKSBvZiAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5NYW5keSkuY3JlYXRlTGluayhcIk1hbmRyYWdvcmFcIil9J3MgYnJvdGhlciBleGNlcHQgdGhhdCBoZSB3YXNcclxuICAgICAgYSByZWd1bGFyIHN0dWRpb3VzIGJveSBpbiBUZXJyYSBQcmltYSB1bnRpbCBoZSB3YXMga2lkbmFwcGVkIGJ5IGEgXHJcbiAgICAgICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELk1vc3RpbWEpLmNyZWF0ZUxpbmsoXCJib3JlZCB3YW5kZXJpbmcgcGxhbmUtaG9wcGVyXCIpfSBhbmQgYnJvdWdodCBpbnRvIHRoZSBDYXN0bGUgb2YgXHJcbiAgICAgIERlYXRoIHRvIGJlIHVzZWQgYXMgYSBiYXJnYWluaW5nIGNoaXAgYnkgYSBncm91cCBvZiBhZHZlbnR1cmVycywgc2luY2UgaGUgd2FzIHN1cHBvc2VkbHkgdGhlIG9ubHkgZmFtaWx5LCBhbmQgXHJcbiAgICAgIG9ubHkgd2Vha25lc3Mgb2YgaGlzIHNpc3Rlci5gO1xyXG4gICAgYy5jYXJkLnByaW1hcnlJbWFnZVRpdGxlID0gXCJDaGlsZFwiO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEdlbiA9IHNldHVwR2VuO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEtqZXJyYSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwS2plcnJhKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5LamVycmEpO1xyXG4gICAgYy5jb3JlLm5hbWUgPSBcIktqZXJyYVwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9nX21hZ19zdG9uZS5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnRnJvbSB8IFN0b25lIC8gUHJlc2VydmF0aW9uJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgUmFjZSB8IFRpdGFuIDxzcGFuIGNsYXNzPSd2ZXJib3NlJz4mdGltZXM7IFNlcnBlbnRpbmU8L3NwYW4+YCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCBTcGVsbGNhc3RlciA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+KEFsbCk8L3NwYW4+YCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnUHJpbW9yZGlhbCB8IFNoYXJkaWMnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdHdWFyZGlhbiBvZiBNYWdpYycpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0F0aXVtIFNhdmFudCcpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0NSIHwgMzAnKTtcclxuICAgIGMuY2FyZC5wcmltYXJ5SW1hZ2VUaXRsZSA9IFwiTGl0aGljXCI7XHJcbiAgICBjLmNhcmQuYWRkQWx0ZXJuYXRlSW1hZ2UoXCJIdW1hbm9pZFwiLCBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9nX21hZ19odW1hbi5wbmdcIik7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBcclxuICAgIFZlcnkgbGl0dGxlIGlzIGtub3duIChzbyBmYXIpIGFib3V0IHRoZSBHdWFyZGlhbiBvZiBNYWdpYy4gRXhjZXB0IHRoYXQgc2hlIGtlZXBzIGhlciBjb25zY2lvdXNuZXNzIGRpc3RyaWJ1dGVkXHJcbiAgICAgIGFjcm9zcyB2YXJpb3VzIGZvcm1zIGFuZCBib2RpZXMsIG5vdCBhbGwgaHVtYW5vaWQsIGFjcm9zcyBzZXZlcmFsIHJlYW1zLiBBbmQgc28gc2hlIGlzIHByZXR0eSBtdWNoIGltbW9ydGFsIGV2ZW5cclxuICAgICAgYmVmb3JlIGhlciBwcmltb3JkaWFsIG9yaWdpbnMgYXJlIHRha2VuIGludG8gYWNjb3VudC4gU2luY2UgZWFjaCBib2R5IGhhcyBpdHMgb3duIHJlc2Vydm9pciBvZiBtYW5hLCBzaGUgXHJcbiAgICAgIGhlcnNlbGYgaGFzIG5lYXIgdW5saW1pdGVkIG1hbmEgYW5kIGNhbiBjYXN0IGFsbCBub24tcHJvcHJpZXRhcnkgc3BlbGxzLCBhbmQgbW9zdCBwcm9wcmlldGFyeSBvbmVzLCBrbm93biBpbiBcclxuICAgICAgYWxsIHRoZSBkaW1lbnNpb25zLiBTaGUgcGVyc29uYWxseSBtYWludGFpbnMgdGhlIGVudGlyZSBpbnRlcm5hbCBmaW5hbmNpYWwgaW5mcmFzdHJ1Y3R1cmUgb2YgdGhlIEdhcmRlbnMuYDtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBLamVycmEgPSBzZXR1cEtqZXJyYTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2plcmEuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cExlbXVlbiA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwTGVtdWVuKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5MZW11ZW4pO1xyXG4gICAgYy5jb3JlLm5hbWUgPSBcIkxlbXVlblwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9sZW11ZW4ucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnRGVjZWFzZWQnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGMTI0Jyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnRnJvbSB8IFJ1aW4nKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBSYWNlIHwgQWFzaW1hcmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYENsYXNzIHwgPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPkd1bnNsaW5nZXI8L3NwYW4+IEZpZ2h0ZXJgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBDbGFzcyB8IDxzcGFuIGNsYXNzPSd2ZXJib3NlJz5Bc3Nhc3Npbjwvc3Bhbj4gUm9ndWVgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGAnU2FpbnRlc3MnYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgTmlnaHRibG9vZCB8IE5ldXJhbCBMaW5rYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnQ1IgfCAxNCcpO1xyXG4gICAgYy5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgXHJcbiAgICAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5Nb3N0aW1hKS5jcmVhdGVMaW5rKFwiTW9zdGltYVwiKX0ncyBoYWxmLXNpc3RlciBhbmQgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuU2hpbWFyaW4pLmNyZWF0ZUxpbmsoXCJSaW5cIil9J3NcclxuICAgICAgdGVhY2hlciAtIHNoZSB3YXMgcmVwdXRlZCB0byBiZSBhIHNuaXBlciB3aXRob3V0IGNvbXBhcmUuIFdoaWxlIGhlciBsaWZlIGhhZCBhIGdyZWF0IGRlYWwgb2YgdXBzIGFuZCBkb3ducyxcclxuICAgICAgdmVyeSBmZXcgaW5kaXZpZHVhbHMgd291bGQga25vdyBoZXIgZnVsbCBsaWZlIHN0b3J5IC0gcHJvYmFibHkgb25seSBNb3N0aW1hLiBBbmQgeWV0LCBvbmUgYWR2ZW50dXJlciBkaWQgYmVnaW5cclxuICAgICAgdG8gYm9uZCB3aXRoIGEgcGFydCBvZiBoZXIgbGVmdCBiZWhpbmQgYWZ0ZXIgc2hlIGRpZWQsIGluaGVyaXRpbmcgaGVyIHNraWxscyBhbmQgc21hbGwgcGllY2VzIG9mIGhlciBtZW1vcmllcy5gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cExlbXVlbiA9IHNldHVwTGVtdWVuO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sZW11ZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cExvZ29zID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBMb2dvcygpIHtcclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuTG9nb3NQbGF5d3JpZ2h0KTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJUaGUgUGxheXdyaWdodFwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9sb2dvc19ub3JtYWwucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnTTUwSysnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGcm9tIHwgUnVpbicpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ1JhY2UgfCBCYW5zaGVlIChEZW1vbiknKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdHcmVhdGVyIERlbW9uIExvcmQnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdEb21haW4gfCAwMTo0MCB0byAwMTo1NicpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYEFiZXJyYW50LUZ1c2VkIDxzcGFuIGNsYXNzPVwidmVyYm9zZVwiPihUcmFnb2RpYSk8L3NwYW4+YCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ1IgMzBgKTtcclxuICAgIGMuY2FyZC5wcmltYXJ5SW1hZ2VUaXRsZSA9IFwiVGhlIFdyaXRlclwiO1xyXG4gICAgYy5jYXJkLmFkZEFsdGVybmF0ZUltYWdlKFwiVGhlIERlbW9uIExvcmRcIiwgXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzIvbG9nb3NfYmFuc2hlZS5wbmdcIik7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBcclxuICAgIFRoZSBlbmlnbWF0aWMgJ3NjcmlwdHdyaXRlcicgb2YgdGhlIFRyb3VwZS4gRnJvbSB0aGUgJ1Ryb3VwZSBMZWFkZXInIGhlXHJcbiAgICBnYWluZWQgYW4gdW5jYW5ueSBhYmlsaXR5IHRvIHdyaXRlIHJlYWxpdHkgdG8gaGlzIHdoaW0sIGFueXRoaW5nIGhlIHdyaXRlcyA8aT53aWxsIGV4YWN0bHkgb2NjdXI8L2k+IGFzIGhlIHdyb3RlIGl0LiBcclxuICAgIEhvd2V2ZXIgdGhpcyB3b3JrcyBiZXR0ZXIgZm9yIGZ1dHVyZXMgZmFyIG9mZiBhbmQgd2l0aCBhIGxvdCBvZiBwb3NzaWJpbGl0aWVzLiBJcyBmdW5jdGlvbmFsbHkgaW1tb3J0YWxcclxuICAgIHNpbmNlIGhlIHdyb3RlIGhpcyBvd24gZW5kaW5nIGluIHRoZSBmYXIgZnV0dXJlLiA8YnIvPlxyXG4gICAgQmVmb3JlIGhlIGJlY2FtZSB0aGUgUGxheXdyaWdodCwgaGUgd2FzIGFsc28gYSBncmVhdGVyIGRlbW9uIGxvcmQuIEJhbnNoZWVzIGJlaW5nIG1hbGUgaXMgZXh0cmVtZWx5IHJhcmUsIGFuZCBcclxuICAgIGFsbCBhcmUgdmVyeSBkYW5nZXJvdXMsIGFuZCBvbmUgYW1vbmcgdGhlbSBiZWNvbWluZyBMb3JkIHdhcyB1bmhlYXJkIG9mIGJlZm9yZSBoaW0uIEV2ZW4gYmFjayB0aGVuIGhlIGNvdWxkIFxyXG4gICAgY2FzdCByZWFsaXR5LWJlbmRpbmcgbWFnaWMgc2ltcGx5IGJ5IHNwZWFraW5nIGFsb3VkIG9yIHdyaXRpbmcgaGlzIGNvbW1hbmRzIGluIHRoZSBhaXIuYDtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBMb2dvcyA9IHNldHVwTG9nb3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ29zLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBNYW5kcmFnb3JhID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBNYW5kcmFnb3JhKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5NYW5keSk7XHJcbiAgICBjLmNvcmUubmFtZSA9IFwiTWFuZHJhZ29yYVwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9tYW5keS5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGNzYgKDE2KScpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0Zyb20gfCBNYXRlcmlhIC8gUnVpbicpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYFJhY2UgfCBVcnNpbmVgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBOaWdodGJsb29kIHwgU3RvbmV3YXJkYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnQ1IgfCAxNicpO1xyXG4gICAgYy5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgXHJcbiAgICBBIGNyaW1pbmFsIGFuZCBnYW5nL2N1bHQgbGVhZGVyLCBzaGUgd2FzIHdlbGwga25vd24gYW5kIGZlYXJlZCB0aHJvdWdob3V0IHRoZSBsb3dlciBsZXZlbHMgb2YgdGhlIGNhc3RsZSBmb3IgXHJcbiAgICAgIGJlaW5nIGEgdmVyeSBhZHZhbmNlZCBjYXNlIG9mIG5pZ2h0Ymxvb2QuIEl0IGdhdmUgaGVyIHBvd2VycyB0byBtYW5pcHVsYXRlIHN0b25lLCBzb21ldGhpbmcgd2hpY2ggYWxzbyBtYWRlIFxyXG4gICAgICBoZXIgbmVhciBpbXBvc3NpYmxlIHRvIGtpbGwsIHdoaWxlIGNvbXBsZXRlbHkgc2FwcGluZyBoZXIgb2YgaHVtYW4gZW1vdGlvbnMgbGlrZSBlbXBhdGh5LCBtYWtpbmcgaGVyIGEgXHJcbiAgICAgIHBzeWNob3BhdGhpYyBraWxsaW5nIG1hY2hpbmUuIFNlZW1lZCB0byBiZSByZXNlYXJjaGluZyBzb21lIGNsdWVzIHJlZ2FyZGluZyB0aGUgcGxhbmUgb2YgdGhlIGVhcnRoIGEgXHJcbiAgICAgICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkViZW5lemFyKS5jcmVhdGVMaW5rKFwicGFydGljdWxhcmx5IGFkZXB0IHNwZWxsY2FzdGVyXCIpfSBoYWQgbGVmdCBiZWhpbmQgYnV0IHdhcyB0aHdhcnRlZCBieSBhIFxyXG4gICAgICBncm91cCBvZiBhZHZlbnR1cmVycyB3aG8gaGFuZGVkIGhlciByZXNlYXJjaCB0byAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5WZXJyYWRlcikuY3JlYXRlTGluayhcIlZlcnJhZGVyXCIpfS5gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cE1hbmRyYWdvcmEgPSBzZXR1cE1hbmRyYWdvcmE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hbmRyYWdvcmEuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cE1vc3RpbWEgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cE1vc3RpbWEoKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELk1vc3RpbWEpO1xyXG4gICAgYy5jb3JlLm5hbWUgPSBcIk1vc3RpbWFcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzIvbW9zdGltYS5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGMTUyJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnUGxhbmUtaG9wcGVyJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgRnJvbSB8IERldm90aW9uIHwgTWF0ZXJpYSB8IFJ1aW4gfCBBTExgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBSYWNlIHwgQWFzaW1hciAmdGltZXM7IFRpZWZsaW5nYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+Q2xvY2t3b3JrIFNvdWw8L3NwYW4+IFNvci1sb2NrYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+Q2hyb251cmd5PC9zcGFuPiBXaXphcmRgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBDbGFzcyB8IEZpZ2h0ZXJgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBOaWdodGJsb29kIHwgU2hhdHRlcmVkIFRpbWVgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGAnRmFsbGVuIFNhaW50ZXNzJ2ApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYEtlZXBlciBvZiB0aGUgTG9jayBhbmQgS2V5YCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ1IgfCAyNWApO1xyXG4gICAgYy5jYXJkLnByaW1hcnlJbWFnZVRpdGxlID0gXCJNZXNzZW5nZXJcIjtcclxuICAgIGMuY2FyZC5hZGRBbHRlcm5hdGVJbWFnZShcIlNhaW50ZXNzXCIsIFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMyL21vc3RpbWFfc2FpbnQucG5nXCIpO1xyXG4gICAgYy5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgXHJcbiAgICBBIGZhbGxlbiBhbmdlbCB3aG8gY2FuIG1vdmUgdGhyb3VnaCBwbGFuZXMgd2l0aG91dCByZWx5aW5nIG9uIHBlcnBlbmRpY3VsYXJpdGllcy4gSGFzIGEgdGVuZGVuY3kgb2YgdGFsa2luZyB0b1xyXG4gICAgc29tZW9uZSBvbmUgbWludXRlIGFuZCBkaXNhcHBlYXJpbmcgdGhlIG5leHQuIFN1ZmZlcnMgZnJvbSBhbiBhZHZhbmNlZCBjYXNlIG9mIE5pZ2h0Ymxvb2QgYnV0IGRvZXNuJ3Qgc2VlbSB0byBcclxuICAgIHN1ZmZlciBmcm9tIHBzeWNob3NpcyBvciBuZXVyb3Npcy4gQ2FycmllcyB0d28gc3RhdmVzIHRoYXQgYXBwZWFyIHBvd2VyZnVsIGFuZCBzZWVtIHRvIGJlIHRoZSBtYW5pZmVzdGF0aW9uIG9mXHJcbiAgICBhbiBhbmNpZW50LCBvciByYXRoZXIgdGltZWxlc3MsIHNvdWwuYDtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBNb3N0aW1hID0gc2V0dXBNb3N0aW1hO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb3N0aW1hLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBNb3V0aHBpZWNlID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBNb3V0aHBpZWNlKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5Nb3V0aHBpZWNlKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJUcm91cGUgTW91dGhwaWVjZVwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9haHJlbmR0cy5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdNJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgRGVjZWFzZWRgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGcm9tIHwgTWF0ZXJpYSAvIFNoYWRvd2ZlbGwgLyBSdWluJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnQWxsZWdpYW5jZSB8IFJ1aW4gJnRpbWVzOyBPdXRzaWRlcnMnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBSYWNlIHwgVGl0YW4gPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPiZ0aW1lczsgQWJlcnJhdGlvbjwvc3Bhbj5gKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBQcmltb3JkaWFsIHwgT3V0c2lkZXIgPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPihDdXJzZSk8L3NwYW4+YCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnQ1IgfCAyMycpO1xyXG4gICAgYy5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgXHJcbiAgICBXYXMgc29tZWhvdyByZWxhdGVkIHRvIHRoZSBXaXRjaCBLaW5nIG9mIGxvcmUuIFRoZSBtb3N0IGxveWFsIG1lbWJlciBvZiB0aGUgdHJvdXBlLCBoZSB0b29rIGl0IHVwb24gaGltc2VsZlxyXG4gICAgICB0byBiZSB0aGUgaG9zdC9hbm5vdW5jZXIgb2YgdGhlIFRyb3VwZSdzICdzaG93cycuIFJlc3BvbnNpYmxlIGZvciB0aGVpciBtb3N0IGdyb3Rlc3F1ZSBjcmVhdGlvbnMgd2hpY2ggb2Z0ZW4gXHJcbiAgICAgIHdlcmUgbG9va2VkIGRvd24gdXBvbiBieSAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5Mb2dvc1BsYXl3cmlnaHQpLmNyZWF0ZUxpbmsoXCJUaGUgUGxheXdyaWdodFwiKX0gYXMgYmVpbmcgY3J1ZGUgYW5kIHRhc3RlbGVzcy4gXHJcbiAgICAgIFdhcyBraWxsZWQgYnkgYSBncm91cCBvZiBhZHZlbnR1cmVycyBhbmQgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuTHVjaWFuKS5jcmVhdGVMaW5rKFwiU29saXRhcmVcIil9IGJ1dCBoZSBoYWQgYWxyZWFkeSBcclxuICAgICAgYWNjb21wbGlzaGVkIHdoYXQgaGlzIG1hc3RlciBuZWVkZWQuLi5gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cE1vdXRocGllY2UgPSBzZXR1cE1vdXRocGllY2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vdXRocGllY2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cE11ZWxzeXNlID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBNdWVsc3lzZSgpIHtcclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuTXVtdSk7XHJcbiAgICBjLmNvcmUubmFtZSA9IFwiTXVlbHN5c2VcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzIvbXVlbHN5c2UucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnRjM0MycpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0Zyb20gfCBXYXRlciAvIElubm92YXRpb24nKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBSYWNlIHwgSGlnaC1FbGZgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBDbGFzcyB8IEFydGlmaWNlcmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYE1EID8/PywgUnluZVRlY2ggTGFic2ApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0NSIHwgMjUnKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYFxyXG4gICAgQSB3ZWxsIGtub3duIHJlc2VhcmNoIHNwZWNpYWxpc3QgZnJvbSBJbm5vdmF0aW9uIHdobyBzcGVjaWFsaXplZCBpbiBuYW5vbWFjaGluZXMgYW5kIGZsdWlkIGF1dG9tYXRpb24uIEhhZCBcclxuICAgICAgY29tZSB0byB0aGUgY2FzdGxlIG9mIFJ1aW4gZm9yIHJlYXNvbnMgdW5rbm93biBhbmQgdGhlcmUgaGFwcGVuZWQgdG8gbWVldCwgYW5kIHByb3RlY3QgZnJvbSBpbW1pbmVudCBcclxuICAgICAgZGVzdHJ1Y3Rpb24sICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkZpZXN0KS5jcmVhdGVMaW5rKFwib25lIG9mIHRoZSBmYW5zIG9mIGhlciByZXNlYXJjaFwiKX0gYW5kIGFsc28gaGVscGVkIG91dCBoaXMgZ3JvdXAgb2YgYWR2ZW50dXJlciBcclxuICAgICAgZnJpZW5kcy4gSG93ZXZlciwgYmVpbmcgaW4gYSBydXNoIHRoZXkgY291bGRuJ3QgcmVhbGx5IGdldCB0byBrbm93IGhlciBiZXR0ZXIgdGhlbi5gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cE11ZWxzeXNlID0gc2V0dXBNdWVsc3lzZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVlbHN5c2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cE90aGVsbG8gPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cE90aGVsbG8oKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELlRyYWl0b3JPdGhlbGxvKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJUaGUgdHJhaXRvclwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9vdGhlbGxvLnBuZ1wiO1xyXG4gICAgYy5jYXJkLnNldENhbXBhaWduQXJjKDEsIDIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0RlY2Vhc2VkJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnTTUwMjAnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGcm9tIHwgTWF0ZXJpYSAvIFByZXNlcnZhdGlvbiAvIFJ1aW4nKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBBbGxlZ2lhbmNlIHwgUHJlc2VydmF0aW9uICg/KWApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYFJhY2UgfCBIdW1hbmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYENsYXNzIHwgRmlnaHRlcmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYENsYXNzIHwgQmFyYmFyaWFuYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCBQYWxhZGluYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnQXBwcmVudGljZSBHdWFyZGlhbiBvZiBEZWZlbnNlJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnPGk+QmVhcmVyIG9mIEFnb25pZXM8L2k+Jyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnQ1IgfCAyMCcpO1xyXG4gICAgYy5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgXHJcbiAgICBPbmNlIHRoZSBhcHByZW50aWNlIGd1YXJkaWFuIG9mIGRlZmVuc2UsIGhlIGJldHJheWVkIHRoZSBwZW9wbGUgaW4gUHJlc2VydmF0aW9uIHRvIGtpbGwgZXZlcnlvbmUgaW4gdGhlIGJ1bmtlclxyXG4gICAgICB3aXRoIHRoZSBoZWxwIG9mIHRoZSB0cm91cGUgYW5kIGVzY2FwZWQgaW50byB0aGUgY2FzdGxlLiBUaGUgb25seSBwZXJzb24sIG90aGVyIHRoYW4gaGltc2VsZiwgd2hvIHdvdWxkJ3ZlIFxyXG4gICAgICBrbm93biBhbGwgdGhlIGRldGFpbHMgd2FzICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlRoZU1hc3RlcikuY3JlYXRlTGluayhcIlRoZSBHdWFyZGlhbiBvZiBPcmRlclwiKX0gYmVmb3JlIGhlIHBhc3NlZCBhd2F5LlxyXG4gICAgICA8YnIvPlxyXG4gICAgICBCeSB0aGUgdGltZSBoZSB3YXMgZm91bmQgYWdhaW4gYnkgYSBncm91cCBvZiBhZHZlbnR1cmVycywgaGUgd2FzIGltcHJpc29uZWQgYnkgdGhlIHRyb3VwZSBuZXh0IHRvIGEgcmF0aGVyIFxyXG4gICAgICBsYXJnZSBleHBsb3NpdmUsIGFuZCBoYWQgY29tcGxldGVseSBsb3N0IGhpcyBtaW5kIC0gYXMgaGUga2VwdCBiYWJibGluZyBzb21lIGdpYmJlcmlzaC4gQXMgdGhleSB3ZXJlIGVzY2FwaW5nXHJcbiAgICAgIHdpdGggaGltLCBob3dldmVyLCB0aGUgbWlzdHMgdG91Y2hlZCBoaW0gY2F1c2luZyBoaW0gdG8gZnVsbHkgYmVjb21lIGhpbXNlbGYgYWdhaW4uIFVuZm9ydHVuYXRlbHksIHRoaXMgd2FzIGJ1dFxyXG4gICAgICBmb3IgYSBtb21lbnQgc2luY2Ugc29vbiBhZnRlciBoZSB3YXMgYXNzYXNzaW5hdGVkIGJ5ICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkx1Y2lhbikuY3JlYXRlTGluayhcIlNvbGl0YWlyZVwiKX0uYDtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBPdGhlbGxvID0gc2V0dXBPdGhlbGxvO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdGhlbGxvLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBTQXJjaCA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwU0FyY2goKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELlNhbmd1aW5hcmNoKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJUaGUgU2FuZ3VpbmVBcmNoXCI7XHJcbiAgICBjLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMS9BcmMyL3NhcmNoX20ucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnLScpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0Zyb20gfCBTaGFkb3dmZWxsJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgUmFjZSB8IFRpdGFuIDxzcGFuIGNsYXNzPSd2ZXJib3NlJz4mdGltZXM7IFZhbXBpcmU8L3NwYW4+YCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnUHJpbW9yZGlhbCB8IFNoYXJkaWMnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdUaGUgT3JpZ2luYWwnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdMaWZlIENvbW1hbmQnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdDUiB8IDI5Jyk7XHJcbiAgICBjLmNhcmQucHJpbWFyeUltYWdlVGl0bGUgPSBcIk1hbGVcIjtcclxuICAgIGMuY2FyZC5hZGRBbHRlcm5hdGVJbWFnZShcIkZlbWFsZVwiLCBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9zYXJjaF9mLnBuZ1wiKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYFxyXG4gICAgTGl0dGxlIGlzIGtub3duIChzbyBmYXIpIGFib3V0IHRoZSBmaXJzdCwgYW5kIHByaW1vcmRpYWwsIHZhbXBpcmUgYW5kIHRoZSBkZSBmYWN0byBMb3JkIG9mIHRoZSBlbnRpcmUgZGltZW5zaW9uXHJcbiAgICAgIG9mIHRoZSBTaGFkb3dmZWxsIGV4Y2VwdCB0aGF0IHRoZXkgYXJlIGV4dHJlbWVseSBkYW5nZXJvdXMgdG8gYWxsIGJ1dCBvdGhlciBoaWdoZXIgdmFtcGlyZXMsIG1vc3Qgb2Ygd2hvbSByZWdhcmQgXHJcbiAgICAgIHRoZW0gd2l0aCB1dG1vc3QgcmVzcGVjdC4gRmVhciwgeWVzLCBidXQgcmVzcGVjdC4uLmA7XHJcbiAgICBjLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxufVxyXG5leHBvcnRzLnNldHVwU0FyY2ggPSBzZXR1cFNBcmNoO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW5ndWluZUFyY2guanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cFNoYW1hcmUgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFNoYW1hcmUoKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELlNoYW1hcmUpO1xyXG4gICAgYy5jb3JlLm5hbWUgPSBcIlNoYW1hcmVcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzIvc2hhbWFyZS5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdEZWNlYXNlZD8nKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGNTInKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGcm9tIHwgUnVpbicpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYFJhY2UgfCBWdWxwaW5lYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgV2FybG9ja2ApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYE5pZ2h0Ymxvb2QgfCBWb29kb29gKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBTb3VsIFdlYXZlcmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0NSIHwgMTInKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYFxyXG4gICAgQSBjaGlsZCB3aG8nZCBiZWVuIGZvcmNlZCBpbnRvIGEgaGFyc2hlciBsaWZlIHNvbWVvbmUgb2YgaGVyIGFnZSBkZXNlcnZlZCwgdGhlIGRlYXRoIG9mIGhlciBzaXN0ZXIgY2F1c2VkIGhlclxyXG4gICAgICB0byBpbmhlcml0IGhlciBuaWdodGJsb29kIGFuZCBsZWFybiBvZiBoZXIgJ2FydHMnLiBUaGVzZSAnYXJ0cycgaW52b2x2ZWQgd2VhdmluZyB0aGUgc291bHMgb2YgcGVvcGxlLCBhbmQgXHJcbiAgICAgIG90aGVycywgaW50byBpbmFuaW1hdGUgb2JqZWN0cyAtIHR3aXN0aW5nIHRoZWlyIGlkZW50aXR5IGFuZCBzcGlyaXR1YWwgZW5lcmd5IHRvIHBlcmZvcm0gY2VydGFpbiB0YXNrcy4gVGhlXHJcbiAgICAgIGZpcnN0IHNvdWwgc2hlIHdlYXZlZCB3YXMgdGhhdCBvZiBoZXIgb3duIHNpc3RlcidzLCB3aG8gaGFkIGJlZW4gc2hvdCAtIGFzIHNoZSB3YXMgdHJ5aW5nIHRvIGdvIGluY29nbml0byAtIGJ5IFxyXG4gICAgICAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5TaGltYXJpbikuY3JlYXRlTGluayhcImEgc25pcGVyXCIpfSBhdCB0aGUgYmVoZXN0IG9mIGhlciBcclxuICAgICAgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuTW91dGhwaWVjZSkuY3JlYXRlTGluayhcImxhc3QgZW1wbG95ZXJcIil9IGFmdGVyIHNoZSBoYWQgY29tcGxldGVkIGEgY2VydGFpbiBjb250cmFjdCBzdXBwb3NlZGx5XHJcbiAgICAgIGludm9sdmluZyBhIGxvY2suIFNoYW1hcmUgZmluYWxseSBnYXZlIHVwIGhlciBxdWVzdCBmb3IgdmVuZ2VhbmNlIHdoZW4gc2hlIHJlYWxpemVkIHNoZSB3YXMgYmVpbmcgbWFuaXB1bGF0ZWQuYDtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBTaGFtYXJlID0gc2V0dXBTaGFtYXJlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFtYXJlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBTaGltYWtlbiA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwU2hpbWFrZW4oKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELlNoaW1ha2VuKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJLZW4gU2hpbWFcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzIvc2hpbWFrZW4ucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgRGVjZWFzZWRgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdNNzInKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGcm9tIHwgUnVpbicpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0FsbGVnaWFuY2UgfCBQcmVzZXJ2YXRpb24nKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdSYWNlIHwgSHVtYW4nKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBDbGFzcyB8IDxzcGFuIGNsYXNzPSd2ZXJib3NlJz5CYXR0bGVtYXN0ZXI8L3NwYW4+IEZpZ2h0ZXJgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBDbGFzcyB8IDxzcGFuIGNsYXNzPSd2ZXJib3NlJz5Cb25kc21pdGg8L3NwYW4+IFBhbGFkaW5gKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBMZXJhc2l1bSBTYXZhbnRgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdDUiB8ID8nKTtcclxuICAgIGMuY2FyZC5wcmltYXJ5SW1hZ2VUaXRsZSA9IFwiUmViZWxcIjtcclxuICAgIGMuY2FyZC5hZGRBbHRlcm5hdGVJbWFnZShcIkJvbmRzbWl0aFwiLCBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi9zaGltYWtlbl91YmVyLnBuZ1wiKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYFxyXG4gICAgQW4gb3JwaGFuIGluIHRoZSBDYXN0bGUgb2YgdGhlIE5pZ2h0IHdobyB3YXMgYWRvcHRlZCBhbmQgcmFpc2VkIGJ5ICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkxlbXVlbikuY3JlYXRlTGluaygpfSBhbG9uZyBcclxuICAgIHdpdGggJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuU2hpbWFyaW4pLmNyZWF0ZUxpbmsoXCJoaXMgc2lzdGVyXCIpfS4gV2Fzbid0IHRoZVxyXG4gICAgYmVzdCBhdCBmaWdodGluZyBidXQgbWFpbnRhaW5lZCBhbiB1bnNoYWthYmxlLCBhbmQgY29udGFnaW91cywgYXVyYSBvZiBob3BlIGFuZCBvcHRpbWlzbSBkZXNwaXRlIGhhdmluZyBzZWVuIFxyXG4gICAgaGlzIGZhaXIgc2hhcmUgb2YgYXRyb2NpdGllcyBhbmQgaG9ycm9ycy4gT3JnYW5pemVkIGEgJ3Jlc2lzdGFuY2UnIGFpbWVkIGF0IG1ha2luZyBsZWF2aW5nIHRoZSBjYXN0bGUgcG9zc2libGUuYDtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBTaGltYWtlbiA9IHNldHVwU2hpbWFrZW47XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoaW1ha2VuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBTaGltYXJpbiA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwU2hpbWFyaW4oKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELlNoaW1hcmluKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJSaW4gU2hpbWFcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MxL0FyYzIvc2hpbWFyaW4ucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMSwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgRGVjZWFzZWRgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGODEnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdGcm9tIHwgUnVpbicpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0FsbGVnaWFuY2UgfCBSdWluIC8gUHJlc2VydmF0aW9uJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnUmFjZSB8IEh1bWFuJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+QXNzYXNzaW48L3NwYW4+IFJvZ3VlYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+R3Vuc2xpbmdlcjwvc3Bhbj4gRmlnaHRlcmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0NSIHwgMTMnKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYFxyXG4gICAgQW4gb3JwaGFuIGFkb3B0ZWQgYW5kIHJhaXNlZCBieSAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5MZW11ZW4pLmNyZWF0ZUxpbmsoKX0gd2hvIHRhdWdodCBoZXIgc25pcGluZy4gVG9vayBpdCB1cCBhcyBhIGpvYiBhZnRlciBcclxuICAgIExlbXVlbiBnb3QgY3JpcHBsZWQuIFdvcmtlZCBpbiBhIHRlYW0gdW50aWwgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuVmVycmFkZXIpLmNyZWF0ZUxpbmsoXCJWZXJyYWRlclwiKX0gc29sZCB0aGVtIG91dCwgXHJcbiAgICB0aGVuIHdvcmtlZCBzb2xvLiBXYXMgdGhlcmUsIHBhc3QgbWlkbmlnaHQsIHdoZW4gUnVpbiBhbG1vc3QgZ290IGNvbXBsZXRlIC0gc2hlIG1hZGUgaXQgYmFjayB3aXRoIFxyXG4gICAgJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuTG9nb3NQbGF5d3JpZ2h0KS5jcmVhdGVMaW5rKFwiVGhlIFBsYXl3cmlnaHRcIil9J3MgYWlkLmA7XHJcbiAgICBjLmNhcmQuc3RvcnkgPSAoKSA9PiBgXHJcbjxoNT5FYXJseSBMaWZlIGFuZCBDYXB0dXJlPC9oNT5cclxuSXQgaXMgaGFyZGx5IHVudXN1YWwgZm9yIGEgY2hpbGQgdG8gbG9zZSB0aGVpciBwYXJlbnRzIGF0IGEgdmVyeSB5b3VuZyBhZ2UgaW4gdGhlIENhc3RsZSBvZiB0aGUgTmlnaHQsIGFuZCBzbyB3aGVuIGhlclxyXG5wYXJlbnRzIHdlbnQgbWlzc2luZywgZWlnaHQteWVhci1vbGQgUmluIGZvdW5kIGEgcGxlbml0dWRlIG9mIG9kZCBqb2JzLCBub3QgYWxsIHZlcnkgZXRoaWNhbCwgdG8gc3VwcG9ydCBoZXJzZWxmIGFuZCBcclxuaGVyIGZvdXIteWVhci1vbGQgYnJvdGhlciAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5TaGltYWtlbikuY3JlYXRlTGluayhcIktlblwiKX0uIE5vdCBhbGwgaGVyIGVtcGxveWVycyB3ZXJlIHRoZSBtb3N0IHNjcnVwdWxvdXMsXHJcbmhvd2V2ZXIgLSBhbmQgb24gb25lIG9jY2FzaW9uLCBub3cgMTQgeXJzIG9mIGFnZSwgc2hlIGZvdW5kIGhlcnNlbGYgaW4gdGhlIHNlcnZpY2Ugb2YgYSBzYWRpc3RpYywgaGF0ZWZ1bCBhbmQgZGFuZ2Vyb3VzXHJcbihhdCBsZWFzdCwgc28gaXQgc2VlbWVkIHRvIGhlciB0aGVuKSB0aHVnLiBGb3IgaGlzIGFtdXNlbWVudCwgaGUgZm9yY2VkIGhlciB0byBzdWZmZXIgZnJvbSBhIHJvdW5kIG9mICdSdXNzaWFuIFxyXG5Sb3VsZXR0ZScsIGFuZCBleHBlcmllbmNlIHRoYXQgZGVlcGx5IHRlcnJpZmllZCBhbmQgdHJhdW1hdGl6ZWQgaGVyLiBIZSB0aGVuIHRvbGQgaGVyIHRoYXQgaGUnZCBmb3VuZCB0aGUgdHJhaWwgb2YgYSBcclxudmVyeSBkYW5nZXJvdXMgYXNzYXNzaW4gdGhhdCBoYWQgc25pcGVkIG9uZSBvZiBoaXMgcmlnaHQtaGFuZCBtZW4uIFNoZSB3YXMgdG8gZ28gYW5kIHNhYm90YWdlIHRoZWlyIHJpZmxlIHdpdGggYW4gXHJcbmV4cGxvc2l2ZSBoZSBnYXZlLjxici8+XHJcblRoaXMgbWlzc2lvbiBsZWFkIGhlciB0byBzbmVhayBpbnRvIGEgcmVtb3RlIGFsbGV5IHdoaWNoIHNoZSBsZWFybnQgaGFkIGJlZW4gZHViYmVkICdTYWludHMgUm93Jy4gVW5mb3J0dW5hdGVseSwgb3JcclxucGVyaGFwcyBmb3J0dW5hdGVseSwgc2hlIHdhcyB3b2VmdWxseSB1bmRlci1wcmVwYXJlZCAtIHdoaWxlIHNoZSB3YXMgcXVpdGUgYWRlcHQgaW4gc3RlYWx0aCwgc2hlIGRpZG4ndCBrbm93IGEgdmVyeSBcclxuaW1wb3J0YW50IGZhY3QsIGFsbCAnU2FpbnRzJyB3ZXJlIGJvbmRlZCB0byB0aGVpciBmaXJlYXJtcy4gVGhlIG1pbnV0ZSBzaGUgdG91Y2hlZCB0aGUgZ3VuLCBoZXIgdGFyZ2V0IGtuZXcuIEFsYXJtcyBcclxud2VudCBvZmYgZXZlcnl3aGVyZSwgYW5kIHNoZSB3YXMgc3Vycm91bmRlZCBpbiBtb21lbnRzLiBBcyBzaGUgd2FzIGJlaW5nIGFwcHJlaGVuZGVkLCBzaGUgY291bGRuJ3QgaGVscCBidXQgbm90aWNlIFxyXG5ob3cgYWxsIG9mIHRoZW0gd2VyZSBhYXNpbWFyIHdobyBsb29rZWQgbm9ibGUtdG8tYS1mYXVsdCBhbmQgaGFkIGhhbG9zIGFuZCB3aW5ncyBob3ZlcmluZyBhcm91bmQgdGhlbSB0aGF0IGFwcGVhcmVkXHJcbmxpa2UgbGlnaHQgcmVmbGVjdGVkIG9uIGEgY3J5c3RhbGxpbmUgc3VyZmFjZS4gJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuTW9zdGltYSkuY3JlYXRlTGluayhcIk9uZSBvZiB0aGVtXCIpfSBob3dldmVyLCBhbHNvXHJcbnNlZW1lZCB0byBoYXZlIHRoZSBibGFjayBob3JucyBhbmQgdGFpbHMgb2YgYSBmaWVuZC4gU2hlIHNlZW1lZCBhIGxvdCBsZXNzIG5vYmxlLCBhbmQgc28gdG8gUmluIGEgbG90IG1vcmUgdW5uZXJ2aW5nLFxyXG5tb3JlIGxpa2UgYSBzdHJlZXQgdGh1ZyBzaGUgd2FzIHVzZWQgdG8gaW5zdGVhZCBvZiBhIGRpdmluZSBiZWluZyBsaWtlIHRoZSBvdGhlcnMuPGJyLz5cclxuV2hlbiBoZXIgYmxpbmRmb2xkcyB3ZXJlIHJlbW92ZWQsIHNoZSBmb3VuZCBoZXJzZWxmIGluIGEgY2VsbC4gU2l0dGluZyBuZXh0IHRvIGhlciwgd2l0aCBoZXIgZ3VuIG9uIGhlciBsYXAsIHdhcyB0aGVcclxuJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuTGVtdWVuKS5jcmVhdGVMaW5rKFwiZmFtZWQgc25pcGVyXCIpfSBzaGUnZCBoZWFyZCBzbyBtdWNoIG9mZi4gSGVyIGtpbmRseSAtIGFsbW9zdCBqb3ZpYWwgLSBkZW1lYW5vdXJcclxuY29tcGxldGVseSBzaG9ja2VkIFJpbi4gU2hlIHNlZW1lZCBub3QgYSBiaXQgbWFkLCBtZXJlbHkgYW11c2VkIGFuZCBjdXJpb3VzLiBUaGUgc3RhcmsgY29udHJhc3QgYmV0d2VlbiBoZXIgdGFyZ2V0LFxyXG5zdXBwb3NlZGx5IGhlciBlbmVteSwgYW5kIGhlciBlbXBsb3llciBjcmFja2VkIHNvbWV0aGluZyBkZWVwIGluc2lkZSBvZiBoZXIuIFNoZSBjb21wbGV0ZWx5IGJyb2tlIGRvd24sIGFmdGVyIGhhbGYgYSBcclxuZGVjYWRlIG9mIGtlZXBpbmcgaXQgdG9nZXRoZXIgd2hpbGUgbGl2aW5nIHRocm91Z2ggaGVsbCwgc2hlIC0gaW4gdGhlIG1pZHN0IG9mIGh5cGVydmVudGlsYXRpb24gYW5kIHNvYmJpbmcgLSB1bmxvYWRlZFxyXG5hbGwgdGhhdCBoZXIgc291bCBoYWQgYmVlbiBidXJkZW5lZCB3aXRoIGF0IHRoYXQgcG9pbnQuIExlbXVlbiBoZWFyZCBoZXIgd2hvbGUgdGFsZSBzb2Jlcmx5IC0gUmluIGNvdWxkbid0IGhlbHAgYnV0IFxyXG5ub3RpY2UgaG93IExlbXVlbidzIGZhY2UgaGFyZGVuZWQgd2hlbiBzaGUgZ290IHRvIGhlciBsYXRlc3QgZW1wbG95ZXIuIFdoZW4gc2hlIHdhcyBkb25lLCB3aXRoIGEgdmVyeSBjb21mb3J0aW5nIGh1ZywgXHJcbkxlbXVlbiBzYWlkIHNoZSBhbmQgYSBmZXcgb3RoZXJzIHdvdWxkIGxlYXZlIHRoaXMgY29sb255IHRvIGRpZmZ1c2UgdGhlIHRyYWlsIG9uIGhlci4gU2hlIGFza2VkIFJpbiB0byBjb21lIGFsb25nIFxyXG53aXRoIHRoZW0gZm9yIG5vdy4gTGVtdWVuIGhlcnNlbGYgd291bGQgdHJhaW4gUmluIHRvIG1ha2UgaGVyIHN0cm9uZyBlbm91Z2ggdG8gZ28gYmFjayBhbmQgcmV0cmlldmUgaGVyIGJyb3RoZXIuIFJpblxyXG5ncmF0ZWZ1bGx5IGFncmVlZCwgdGhvdWdoIHNoZSB3YXMgc3VyZSBzaGUgaGFkbid0IGJlZW4gb2ZmZXJlZCBhIGNob2ljZSAod2hpY2ggbWFkZSBoZXIgbW9yZSBoYXBweSB0aGFuIFxyXG5pdCBzaG91bGQgaGF2ZSkuPGJyLz5cclxuTGVtdWVuIHNhaWQgdGhlIG9uZXMgY29taW5nIHdpdGggaGVyIHdvdWxkIGJlIGhlciBoYWxmLXNpc3RlciBhbmQgXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELkZpZXN0KS5jcmVhdGVMaW5rKFwiaGVyIGJveWZyaWVuZFwiKX0gLSBhIGh1bWFuIGd1eSB0aGV5J2QgbWV0IGhlcmUgd2hvIFxyXG51c2VkIHRvIHdvcmsgb24gbWFraW5nIGFuZCBtYWludGFpbmluZyB0aGVpciBmaXJlYXJtcyBhbmQgb3RoZXIgZXF1aXBtZW50LiBBbHNvLCBpdCB0dXJuZWQgb3V0IHRoZSAnaGFsZi1zaXN0ZXInIHdhc1xyXG5ub25lIG90aGVyIHRoYW4gdGhlIGhhbGYtZmllbmQgUmluIGhhZCBub3RpY2VkIGVhcmxpZXIuIEhlciBlYXJsaWVyIGFzc2Vzc21lbnQgd2FzIHNwb3Qgb24sIHNoZSB3YXMgd2F5IHJvdWdoZXIgdGhhblxyXG5MZW11ZW4gLSBhdCBsZWFzdCBzdXBlcmZpY2lhbGx5LiBUaG91Z2ggd2l0aCBMZW11ZW4sIE1vc3RpbWEgdG9vIGNvbXBsZXRlbHkgbGV0IGRvd24gaGVyIGd1YXJkIGFuZCB3YXMgY2hlZXJmdWwgYW5kXHJcbnJlbGF4ZWQuIFRoZSBmb3VyIG9mIHRoZW0gbW92ZWQgaW50byBhIHZlcnkgc2VjdXJlLCBhbmQgcXVpdGUgY296eSwgYnVua2VyLWxpa2UgcGxhY2Ugd2hlcmUgdGhlIHR3byBzaXN0ZXJzIHRyYWluZWRcclxuaGVyIHdpdGggZmlyZWFybXMgLSBMZW11ZW4gd2l0aCByaWZsZXMgYW5kIE1vc3RpbWEgd2l0aCBoYW5kZ3Vucy4gRGVzcGl0ZSB0aGVpciBsaWdodC1oZWFydGVkIG5hdHVyZXMsIFJpbiBjb3VsZG4ndFxyXG5oZWxwIGJ1dCBub3RpY2UgdGhlIHR3byB3ZXJlIDxpPnZlcnk8L2k+IGdvb2Qgd2l0aCB3ZWFwb25zIGFuZCBpbmZpbHRyYXRpb24uIFRoZXNlIHdlcmUgbm90IHNraWxscyBzb21lb25lIGFjcXVpcmVkXHJcbndpdGggZXhwZXJpZW5jZSBvbiB0aGUgc3RyZWV0LCBidXQgdGhlIHJlc3VsdCBvZiBhIGNhcmVmdWwgdHJhaW5pbmcgcmVnaW1lbiBkcmlsbGVkIGludG8gZWxpdGUgc3F1YWRzIG9mIHRoZSBcclxuc3Ryb25nZXN0IG1pbGl0YXJpZXMuXHJcbjxoNT5CZWNvbWluZyBhIFNuaXBlcjwvaDU+XHJcbkEgeWVhciBsYXRlciwgd2hpbGUgc2hlIHdhcyBnZXR0aW5nIGFueGlvdXMgdG8gcmVzY3VlIGhlciBicm90aGVyIGFscmVhZHkgLSB0aGUgbGluZ2VyaW5nIGZlYXIgdGhhdCBzaGUgd2Fzbid0IHlldCBcclxucHJlcGFyZWQgdG8gdGFrZSBvbiB0aGUgbW9uc3RlciB0aGF0IHdhcyBoZXIgZm9ybWVyIGVtcGxveWVyIGNvbnRpbnVlZCB0byBoYXVudCBoZXIuIFVuZm9ydHVuYXRlbHksIGZhdGUgd291bGRuJ3QgXHJcbmxlYXZlIGhlciBhIGNob2ljZS4gSW4gdGhlaXIgeWVhciB0b2dldGhlciwgc2hlIGZvdW5kIG91dCBhIGxvdCBhYm91dCB0aGVtIC0gYXQgbGVhc3QgYWJvdXQgc3R1ZmYgdGhleSB3ZXJlIHdpbGxpbmcgXHJcbnRvIHNoYXJlLiBUaGUgdHdvIGhhZCBjb21lIGZyb20gdGhlIG1hdGVyaWFsIHBsYW5lLiBUaGVpciBmYXRoZXIgaGFkIHR1cm5lZCBhd2F5IE1vc3RpbWEgd2hvJ2Qgc291Z2h0IGhpbSBvdXQsIFxyXG5kZW55aW5nIHRoYXQgc2hlIHdhcyBoaXMgY2hpbGQsIGFuZCBMZW11ZW4gaGFkIGxlZnQgaGltIHRvIGxpdmUgd2l0aCBoZXIuIFRoZSB0d28gb2YgdGhlbSBoYWQgdGhlbiBiZWd1biB0byBtYW5pZmVzdFxyXG50aGUgcG93ZXJzIG9mICdTYWludHMnLCB3aGljaCBoYWQgbGVhZCBhIGNlcnRhaW4gb3JnYW5pemF0aW9uIHRvIHNlZWsgdGhlbSBvdXQuIFRoZSBvdGhlcnMgdGhleSB3ZXJlIGxpdmluZyB3aXRoIHdlcmVcclxucGFydCBvZiB0aGVpciBvbGQgc3F1YWQuIFRoZWlyIHNxdWFkIGhhZCBhcHBhcmFudGx5IGJlZW4gY2hhcmdlZCB3aXRoIHNvbWUgbWlzc2lvbiBpbiBhIHBsYWNlIGRlZXAgdW5kZXIgdGhlIHN1cmZhY2Vcclxub2YgdGhlaXIgJ3BsYW5ldCcga25vd24gYXMgdGhlIHVuZGVyZGFyay4gV2hpbGUgdGhlcmUsIHRoZSB0cmFpbHMgb2Ygc29tZSByZWxpYyBvZiB0aGUgcGFzdCBoYWQgdW53aXR0aW5nbHkgbGVkIHRoZW1cclxucmlnaHQgaW50byBhIHBlcnBlbmRpY3VsYXJpdHkgd2hpY2ggaGFkIGxlZCB0aGVtIHN0cmlnaHQgaW50byB0aGUgcGl0cyB1bmRlcm5lYXRoIHRoZSBjYXN0bGUgLSB3aGVyZSwgZXZlciBzbyByYXJlbHksXHJcbkF0aXVtIGNvdWxkIGJlIGZvdW5kLiBNb3N0aW1hIGhhZCByZWNvZ25pemVkIHRoaXMgYXMgdGhlIHBsYWNlIHdoZXJlIGhlciBtb3RoZXIgaGFkIGxvbmcgYWdvIGJlZW4gc3VtbW9uZWQgZnJvbSwgYW5kXHJcbndoZW4gdGhlIGdyb3VwIGhhZCBsZWFybnQgdGhleSBjb3VsZCByZXR1cm4sIHRoZXkgaGFkIGVzdGFibGlzaGVkIHRoZW1zZWx2ZXMgaGVyZSAtIGF3YWl0aW5nIGFueSBvcmRlcnMgdGhhdCBtYXkgY29tZSBcclxuc29tZWRheS48YnIvPlxyXG5BbmQgc28sIGFmdGVyIGEgeWVhciwgUmluIHdhcyBkZWVwbHkgdHJvdWJsZWQgd2hlbiBzaGUgc2F3IHRoZWlyIGxlYWRlciBhcnJpdmUgYXQgdGhlIGRvb3JzIG9mIHRoZWlyIGJ1bmtlci4gTm8gXHJcbm9yZGVyIGhhZCBjb21lLCBidXQgaGUnZCBmaW5hbGx5IGZvdW5kIGEgdHJhaWwgb2YgdGhlIHJlbGljcyB0aGF0IGhhZCBsZWFkIHRoZW0gaW4gdGhpcyBjYXN0bGUgaW4gdGhlIGZpcnN0IHBsYWNlLiBcclxuV2hpbGUgdGhlIG1lbnRpb24gb2YgdGhlIHJlbGljcyBkaWRuJ3QgcmVhbGx5IGdpdmUgdGhlIHNpc3RlcnMgYSBncmVhdCBkZWFsIG9mIGhhcHBpbmVzcyAtIGZvciB0aGV5IHdlcmUgdGhlIHJlYXNvbiBcclxuYWxsIG9mIHRoZW0gd2VyZSBzdHJ1Z2dsaW5nIHdpdGhpbiB0aGUgQ2FzdGxlIG9mIERlYXRoIGhpbXNlbGYgaW5zdGVhZCBvZiBjaGlsbGluZyBpbiBUZXJyYSBQcmltYSAtIHRoZXkgd291bGQgbm90IFxyXG5kaXNvYmV5IG9yZGVycywgZXZlbiBpZiBpdCB3YXMgdW5jZXJ0YWluIGlmIHRoZSBjaGFpbiBvZiBjb21tYW5kIHN0aWxsIGFwcGxpZWQuIFBsdXMgZXZlbiB0aGV5IGtuZXcgdGhlIHN1cHBvc2VkIHBvd2VyXHJcbm9mIHRob3NlIHJlbGljcywgYW5kIHRoZSBpbXBvcnRhbmNlIG9mIHJlY292ZXJpbmcgdGhlbS4gQW5kIHNvIHRoZSB0aHJlZSBvZiB0aGVtIHNldCBvdXQsIGxlYXZpbmcgUmluIGFsb25lIGluIHRoZSBidW5rZXIuPGJyLz5cclxuQSBmZXcgZGF5cyBsYXRlciwgYSBmYW1pbGlhciAtIHRob3VnaCB0aXJlZCAtIGtub2NrIG9uIHRoZSBkb29yIG9mIHRoZWlyIGJ1bmtlciB3YXMgaGVhcmQuIE5lcnZvdXMgd2l0aCBleGNpdGVtZW50LCBcclxuYnV0IGEgYml0IGFwcHJlaGVuc2l2ZSwgUmluIG9wZW5lZCB0aGUgZG9vci4uLiBhbmQgd2FzIHNob2NrZWQgdG8gZmluZCBhbiBhYm9zb2x1dGVseSB3b3JuIGRvd24gTW9zdGltYSwgY292ZXJlZCBcclxud2l0aCBibG9vZCwgaGFsbyBhbmQgd2luZ3MgdHVybmVkIGRhcmsgYmxhY2ssIGNhcnJ5aW5nIGFuIHVuY29uY2lvdXMgTGVtdWVuIGluc2lkZS4gRmllc3QgZm9sbG93ZWQgaGVyIHdpdGggYSBoYXVudGVkLCBcclxuaG9ycmlmaWVkIGxvb2suIE5laXRoZXIgd291bGQgZXhwbGFpbiBhbnkgZGV0YWlscywgZXhjZXB0IHRoYXQgTGVtdWVuIHdvdWxkIHN1cnZpdmUgLSB0aG91Z2ggcHJvYmFibHkgaGFkIGxvc3QgdGhlIFxyXG51c2Ugb2YgaGVyIGxlZ3MgLSBhbmQgdGhhdCBNb3N0aW1hIHdvdWxkIHN0YXkgYXdheSBmcm9tIGd1bnMgaGVuY2Vmb3J0aCwgYW5kIHRoZXkgd291bGQgbmV2ZXIgc2VlIHRoZSBvdGhlciBhYXNpbWFyc1xyXG5hZ2Fpbi4gQW5kIHNvIHRoZSBmdWxsIHJlYWxpdHkgc2FuayBpbnRvIFJpbiwgdGhlIG9ubHkgXHJcbndheSB0byBzdXJ2aXZlIG5vdyB3YXMgZm9yIFJpbiB0byB0YWtlIHVwIExlbXVlbidzIGpvYi4gU2hlIHdhcyBub3QgcGFydGljdWxhcmx5IHNraWxsZWQgaW4gYW55dGhpbmcgZWxzZSwgc2F2ZSBcclxuc3RlYWx0aCBhbmQgdGhlaXZlcnksIGJ1dCB0aGF0IHdvdWxkIG5ldmVyIGVhcm4gZW5vdWdoIGZvciB0aGUgZml2ZSBvZiB0aGVtLCBhbmQgbm9uZSBvZiB0aGUgb3RoZXJzIGNvdWxkIHdvcmsuIEJ1dCBcclxuYmVmb3JlIHRoYXQsIHNoZSBuZWVkZWQgdG8gc29ydCBvdXQgaGVyIG93biBkZW1vbnMsIGhlciBvd24gbW9yYWwgcXVhbmRyaWVzLiBTaGUgaGFkIHNlZW4gbXVjaCwgdHJ1ZSwgaGFkIGJlZW4gXHJcbmhhcmRlbmVkIGJ5IGxpZmUsIHRydWUsIGJ1dCBsaXZpbmcgd2l0aCB0aGUgc2lzdGVycyBoYWQgbWFkZSBoZXIgYXdhcmUgdGhhdCBzaGUgY291bGRuJ3QganVzdCBjbG9zZSBoZXIgbWluZCBhbmQgXHJcbmtpbGwuIElmIHNoZSB3ZW50IGRvd24gdGhpcyBwYXRoLCB0aGVyZSB3YXMgbm8gbG9va2luZyBiYWNrIC0gYW5kIHNvIHNoZSBoYWQgdG8gYmUgYWJzb2x1dGVseSBjZXJ0YWluIHRoYXQgbm90IGFuIFxyXG5pb3RhIG9mIGRvdWJ0IG9yIHJlZ3JldCBzdXJ2aXZlZCB3aXRoaW4gaGVyLiBTaGUgaGFkIHRvICdraWxsJyBoZXIgaGVhcnQgY29tcGxldGVseS48YnIvPlxyXG5TbyBhZnRlciBmb3JjaW5nIEZpZXN0IHRvIG1ha2Ugc29tZSAnc3BlY2lhbCBwcmVwYXJhdGlvbnMnLCBzaGUgc2V0IG9mZiB0byByZXNjdWUgaGVyIGJyb3RoZXIuIEFzIHNoZSByZWFjaGVkIHRoZSBcclxuZG9vcnMgYW5kIGNvcnJpZG9ycyBvZiBoZXIgZm9ybWVyIGVtcGxveWVyLCBzaGUgbm90aWNlZCBzbyBtYW55IHdlYWtuZXNzZXMgaW4gaGlzIGRlZmVuc2VzIC0gc3R1ZmYgc2hlJ2QgbmV2ZXIgXHJcbm5vdGljZWQgYmVmb3JlLiBTZWN1cml0eSB0aGF0IHNlZW1lZCBpbXByZWduYWJsZSBiZWZvcmUgc2VlbWVkIHRyaXZpYWwgbm93LiBPbmUgeWVhciBvZiB0cmFpbmluZyBoYWQgcHV0IGhlciBvbiBhIFxyXG5sZXZlbCBmYXIgYmV5b25kIHRoaXMuIEluIGZhY3QsIHNoZSBwcm9iYWJseSBjb3VsZCd2ZSBzdG9ybWVkIGluIGhlcmUgZXZlbiBhZnRlciB0d28gbW9udGhzIG9mIHRyYWluaW5nLiBTaGUgcmVhbGl6ZWQgdGhhdCBcclxudGhlIHBlcnNvbiBzaGUgaGFkIGZlYXJlZCBhcyBhICdtb25zdGVyJyBiZWZvcmUgd2FzIG5vIG1vcmUgdGhhbiBhIHBldHR5IGNyaW1pbmFsLiBPZiBjb3Vyc2UgdGhlIG1pc3Npb24gaGUnZCBzZW50IFxyXG5oZXIgb24gd2FzIGRvb21lZCB0byBmYWlsLCBhIG1pc3Npb24gZmFyIGJleW9uZCBoaXMgbWVhbnMsIGEgbWlzc2lvbiBhZ2FpbnN0IHRydWUgJ21vbnN0ZXJzJy4gQSBsdWNreSBicmVhayBoYWQgcHV0IFxyXG5oaW0gb24gdGhlaXIgdHJhaWwsIGFuZCBoZSB3YXMgdG9vIGxvdy1sZXZlbCB0byBldmVuIGZhdGhvbSBob3cgZm9vbGlzaCBwdXJzdWluZyB0aGF0IHRyYWlsIHdhcy4gV2VsbCBoZSdkIGtub3cgbm93LFxyXG5zaGUgdGhvdWdodCBzYXZhZ2VseSBhcyBzaGUgZmluYWxseSB3YWxrZWQgaW50byBoaXMgcm9vbSAtIHRoZSB3cmV0Y2hlZCBtYW4gY2FsbGVkIG91dCBmb3IgaGVscCwgYnV0IG5vbmUgd291bGQgY29tZS4gXHJcbk5vbmUgY291bGQgY29tZS4gU2hlIHRvb2sgb3V0IGhlciByZXZvbHZlciwgbWFkZSBzdXJlIGl0IHdhcyBmdWxsLCB0aGVuIHRvb2sgb3V0IG9uZSBidWxsZXQgYXMgc2hlIGhlYWRlZCB0byBoaW0sIFxyXG5zcGlubmluZyB0aGUgY2hhbWJlci48YnIvPlxyXG5JbiBoaXMgZGVmZW5zZSwgaGUgZm91bmQgc29tZSBiYWNrYm9uZSBzb21ld2hlcmUsIGFuZCBmbGF0IG91dCBkZWNsYXJlZCAtIGRlc3BpdGUgYmVpbmcgdGVycmlmaWVkIC0gaGUgd291bGQgbm90IFxyXG5wbGF5IGFueSBnYW1lcywgc2hlIGNvdWxkIGp1c3Qgc2hvb3QgaGltIGFuZCBnZXQgaXQgb3ZlciB3aXRoLiBCdXQgc2hlJ2Qgbm90IGNvbWUgaGVyZSB0byBraWxsIGhpbSwgc2hlJ2QgY29tZSBoZXJlIFxyXG50byBkaWUuIFRoZSBvdGhlcnMgd291bGQgbWFuYWdlIHNvbWVob3cuIEJ1dCBpZiBzaGUgc3Vydml2ZWQgdGhpcyBuaWdodCwgYSBsb3Qgb2YgcGVvcGxlIHdvdWxkIGRpZSAtIHNvbWUgaW5ub2NlbnQsIFxyXG5zb21lIHVuZGVzZXJ2aW5nIG9mIGRlYXRoLiBJZiBHb2QgZGlkbid0IHdhbnQgdGhhdCwgbm93IHdhcyB0aGUgdGltZSB0byBzdG9wIGhlci4gU2hlIHB1dCB0aGUgbXV6emxlIHRvIGhlciBvd24gXHJcbm1vdXRoIGFuZCwgYXMgaGVyIGZvcm1lci1ib3NzIGxvb2tlZCBvbiAtIHN0dW5uZWQgYW5kIGFnaGFzdCwgc2hlIHB1bGxlZCB0aGUgdHJpZ2dlci4uLi4gYW5kIHdhcyBzdGlsbCBhbGl2ZS4gXHJcbkRlZXAgZG93biwgYXQgdGhhdCBtb21lbnQsIHNoZSBzd29yZSBzaGUgY291bGQgaGVhciByZWFsaXR5IGFyb3VuZCBoZXIgaXRzZWxmIGNodWNrbGUgc29mdGx5LiBXZWxsLCBpZiBcclxudGhhdCdzIHdoYXQgR29kIGRlc2lyZWQsIHdobyB3YXMgc2hlIHRvIGRlbnkgSGltLiBTaGUgd291bGQgZG8gd2hhdCBzaGUgZGlkIGJlc3QsIGFuZCB3b3VsZCBtb3VybiBldmVyeSBzaW5nbGUgdGltZSwgXHJcbmJ1dCB0aGVuIGRvIGl0IGFnYWluLiBBZnRlciB0aGUgcmVzb2x2ZSBzYW5rIGluLCBzaGUgdHVybmVkIHRvIGhlciBmb3JtZXIgYm9zcywgc3RpbGwgY3JvdWNoZWQgaW4gYSBjb3JuZXIgLSBleWVzIFxyXG5iZXRyYXlpbmcgcHVyZSB0ZXJyb3IgLSBhcyBzaGUgZW1wdGllZCB0aGUgb3RoZXIgZml2ZSBidWxsZXRzIGluIGhpcyBicmFpbi48YnIvPlxyXG5XaXRoIHRoYXQgZG9uZSwgc2hlIHdlbnQgdG8gZmluZCBoZXIgYnJvdGhlciwgaGVyIGlyb24gbWFzayBjcmFja2luZyBhcyBzaGUgdHJpZWQgdG8gaW1hZ2luZSB0aGUgbG9vayBvZiBob3Jyb3JcclxudGhhdCB3b3VsZCBwYWludCBoaXMgZmFjZSBmcm9tIGxpdmluZyBhIHllYXIgaW4gdGhpcyBoZWxsIGFsb25lLiBCdXQgc2hlIHdhcyB3cm9uZy4gSGVyIGJyb3RoZXIsIHdoaWxlIGEgYml0IHdpc2VyIFxyXG5hbmQgaGFyZGVuZWQgbm93LCBsb29rZWQgYXMgcHVyZSBhbmQgb3B0aW1pc3RpYyBhcyB0aGUgZGF5IHNoZSdkIGxlZnQgaGltLiBUaGF0IG1vbWVudCBzaGUgcmVhbGl6ZWQgaGVyIGJyb3RoZXIgaGVsZFxyXG5vbiB0byBzb21ldGhpbmcgc2hlJ2QganVzdCBraWxsZWQgaW4gaGVyc2VsZiBhIGZldyBtb21lbnRzIGFnby4gSG9wZS4gSG9wZSBmb3IgYSBiZXR0ZXIgZnV0dXJlIGV2ZW4gd2hpbGUgc3RhbmRpbmcgXHJcbmluIHV0dGVyIGRhcmtuZXNzLiBBbmQgdGhlIGNvdXJhZ2UgdG8gYWN0IGZvciBpdCwgZGVzcGl0ZSBhbGwgb2Rkcy4gU3RhbmRpbmcgdGhlcmUgc2hlIGNvdWxkIGZlZWwgaGltIHNoaW5lIHNvIGJyaWdodFxyXG50aGF0IHNoZSBhY3R1YWxseSBzcXVpbnRlZCBoZXIgZXllcy4gQW5kIHRoYXQncyB3aGVyZSBzaGUgZm91bmQgaGVyIHB1cnBvc2UsIHNoZSB3b3VsZCBzdGFsayB0aGUgZGFya25lc3MgYW5kIGRlYWwgXHJcbndpdGggdGhyZWF0cyBhbmQgb2JzdGFjbGVzIHRoZXJlIHdoaWxlIGhlciBicm90aGVyIHNvdWdodCB0aGUgbGlnaHQuXHJcbjxoNT5BZ2FpbnN0IHRoZSB0cm91cGU8L2g1PlxyXG5UaGUgeWVhcnMgdGhhdCBmb2xsb3dlZCBkaWQgc2VlIGxpZmUgY2hhbmdlIGZvciB0aGVtIGFsbC4gTGVtdWVuIHdobydkIGJlZW4gcGFyYWx5emVkIGJlbG93IGhlciB3YWlzdCB3YXMgcmVjb3ZlcmluZyBcclxudW5kZXIgdGhlIHBhdGllbnQgY2FyZSBvZiBGaWVzdCBhbmQgY29udGludWVkIHRvIHRyYWluIFNoaW1hcmluIGluIHRoZSBhcnQgb2Ygc25pcGluZy4gU2hpbWFyaW4gY2hvc2UgdG8gYmVjb21lIHBhcnRcclxub2YgYSBjcmV3IHRvIHBlcnN1ZSBiaWdnZXIgY29udHJhY3RzLCBob3dldmVyIHRoYXQgZW5kZWQgd2hlbiBcclxuJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuVmVycmFkZXIpLmNyZWF0ZUxpbmsoXCJvbmUgbWVtYmVyIG9mIHRoZSBjcmV3XCIpfSBiZXRyYXllZCB0aGUgb3RoZXJzIGZvciBwZXJzb25hbCBnYWluLFxyXG5vbmx5IHRvIGZpbmQgaGUgaGltc2VsZiBoYWQgYmVlbiBkZWx1ZGVkIGJ5IHRoZWlyICdmaXhlcicgLSB3aGF0IHJlc3VsdGVkLCB0aGVyZWZvcmUsIHdhcyBhbGwgb2YgdGhlbSBkcm93aW5nIGluIFxyXG5tYWdtYSwgZXhjZXB0IFNoaW1hcmluLCB3aG8gd2FzIGNvdmVyaW5nIHRoZW0gZnJvbSBhIGRpc3RhbmNlLiBPZiB0aGUgcmVzdCBvZiB0aGUgY3Jldywgb25seSB0aGUgdHJhaXRvciBzdXJ2aXZlZCwgXHJcbmdhaW5pbmcgbmlnaHRibG9vZCBhdCBleGFjdGx5IHRoYXQgcG9pbnQuIFRoaXMgd2FzIHNvbWV0aGluZyBTaGltYXJpbiBsZWFybnQgbXVjaCBsYXRlciB0aG91Z2gsIGhvd2V2ZXIgc2hlIG5ldmVyIFxyXG5hZ2FpbiB3b3VsZCB3b3JrIGluIGEgY3Jldy4gRHVyaW5nIHRoaXMgdGltZSBNb3N0aW1hIGhhZCBzdGFydGVkIHRvIGdvIG1pc3NpbmcgZm9yIGxhcmdlIGFtb3VudHMgb2YgdGltZSwgYW5kIG9ubHkgXHJcbnRvIGhlciBzaXN0ZXIgd291bGQgc2hlIGNvbmZpZGUgdGhlIGRldGFpbHMgb2YgaGVyICdqb3VybmV5cycuIFNoaW1hcmluIGNvdWxkbid0IGhlbHAgYnV0IG5vdGljZSB0aGF0IGhlciBtb29kIGhhZCBcclxuc3RhYmxpc2VkIGFuZCBpbXByb3ZlZCBjb25zaWRlcmFibHksIGFuZCBzaGUgc2VlbWVkIHRvIGhhdmUgZ2FpbmVkIGV4cGVydGlzZSBpbiB0aW1lIG1hZ2ljIGFmdGVyIGhlciBmcmVxdWVudCBcclxudHJhdmVscyAtIHRob3VnaCBzaGUgZGlkbid0IHByeSBpbnRvIG1vcmUgZGV0YWlscy4gQSBmZXcgeWVhcnMgbGF0ZXIsIExlbXVlbiB0byBwYXNzZWQgYXdheSBmcm9tIGhlciBuaWdodGJsb29kIFxyXG5sZWFkaW5nIHRvIGdyZWF0IGxvc3Mgb2YgbW9yYWxlIGluIHRoZSBidW5rZXIuIFlldCBNb3N0aW1hIGhhZCBkb25lIHNvbWV0aGluZyBiZWZvcmUgdGhlIGRlYXRoLCBhbmQgUmluIFxyXG5jb3VsZCBmZWVsIHNvbWV0aGluZyB3YXMgb2ZmLCB0aGUgZGVhdGggJ2ZlbHQnIHVubGlrZSB0aGUgb3RoZXJzIHNoZSdkIHNlZW4uIEEgZmV3IHllYXJzIGFmdGVyIGhlciBcclxuZGVhdGgsIHRoZXkgd2VyZSBqb2luZWQgYnkgYSB0aWVmbGluZywgd2hvIHJlbWFpbmVkIGluIGhpZGluZyBmcm9tIHRoZSBkZW1vbnMgaW4gdGhlIGNhc3RsZS4gVGhlIGtpbmRlc3QgcGVyc29uIFxyXG50aGV5J2QgZXZlciBtZXQsIGhlIGhhZCB0YWtlbiBhIGxpa2luZyB0byBoZXIsIGRlc3BpdGUgaGVyc2VsZi4gQXMgbGlmZSBsb29rZWQgYSBiaXQgYmV0dGVyLCBpbiB0aGUgeWVhcnMgdG8gY29tZSwgXHJcbnNoZSB0b29rIG1hbnkgaGlnaCBwcm9maWxlIGNvbnRyYWN0cyAtIGFuZCBkaWRuJ3QgYXNrIHF1ZXN0aW9ucy4gU29tZSBldmVuIGNhbWUgZnJvbSBhbG1vc3QgbXl0aGljIGZpZ3VyZXMgLSBsaWtlXHJcbm9uY2Ugd2hlbiB0aGUgdHJvdXBlICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELk1vdXRocGllY2UpLmNyZWF0ZUxpbmsoXCJNb3V0aHBpZWNlXCIpfSBoaW1zZWxmIGFza2VkIGhlciB0byBraWxsIGEgY2VydGFpbiBWdWxwaW5lIHNvdWwgd2VhdmVyLiA8YnIvPiAgIFxyXG5JbiBhbGwgaGVyIG1pc3Npb25zXHJcbnNoZSBhbHdheXMgZm9sbG93ZWQgb25lIHVuc2FpZCBydWxlIC0gYWZ0ZXIga2lsbGluZyB0aGUgdGFyZ2V0LCBzaGUgY291bGQgYWxzbyBraWxsIGFueSBvbmUgcGVyc29uIG5lYXIgdGhlbSBvZiBoZXIgXHJcbmNob2ljZS4gVGhhdCBwcmV2ZW50ZWQgaGVyIGZyb20gYmVpbmcgYSBtZXJlIHBhd24sIGEgbWVyZSB0b29sIC0gYW5kIGRyb3ZlIGF3YXkgYSBsb3Qgb2YgcGV0dHkgc2NoZW1lcnMgZnJvbSBoZXIgd2hvXHJcbnJlZ2FyZGVkIGhlciBhcyB0b28gbXVjaCBvZiBhIHdpbGRjYXJkIHdoaWxlIGF0dHJhY3RpbmcgY2xpZW50cyB3aG8gd2FudGVkIHBlb3BsZSBkZWFkIGZvciBwZXJzb25hbCByZWFzb25zIGJ1dFxyXG53ZXJlbid0IHN0cm9uZyBlbm91Z2ggdG8gY2hhbGxlbmdlIHRoZW0uIEZvciBhcm91bmQgc3VjaCBwZW9wbGUsIGl0IHdhcyB1bmxpa2VseSBzaGUnZCB3YW50IHRvIGtpbGwgYSBwYXNzZXItYnkuIFxyXG5UaGVzZSB3ZXJlIHRoZSBjbGllbnRzIHNoZSBmYXZvdXJlZCwgZm9yIHRoZWlyIHRhcmdldHMgd2VyZSBhbG1vc3QgYWx3YXlzIHBlb3BsZSB0aGUgd29ybGQgd2FzIGJldHRlciBvZmYgd2l0aG91dC5cclxuVW5mb3J0dW5hdGVseSwgdGhpcyB0cmFkaXRpb24gb2YgaGVycyBiYWNrZmlyZWQgYmFkbHkgb25lIGRheSAtIHNoZSB3YXMgdG9sZCBieSB0aGUgbW91dGhwaWVjZSB0aGF0IGEgZ3JvdXAgb2YgcGVvcGxlIG1pZ2h0IFxyXG5iZSBjb21pbmcgZnJvbSB0aGUgZ2FyZGVucywgYW5kIG1heSBiZSBhY2NvbXBhbmllZCBieSBzb21lIG1lbWJlcnMgb2YgdGhlIHRyb3VwZS4gSWYgYSBkcm93IHByaWVzdGVzcyB3YXMgYW1vbmcgdGhlbSxcclxuc2hlIHdhcyB0byBkaWUuIFNoZSBkaWQgZGllLCB5ZXQgUmluIGZvdW5kIGFub3RoZXIgZHJvdyAtIHByb2JhYmx5IHN0aWxsIGEgdGVlbmFnZXIsIHdpdGggdGhlbS4gQSBtZW1iZXIgb2YgdGhlIFxyXG50cm91cGUsIGhhdmluZyBmYWlsZWQgYSBtaXNzaW9uIC0gUmluIGRpZG4ndCBlbnZ5IGhlciBhbmQgd2Fzbid0IHN1cnByaXNlZCB3aGVuIHNoZSBhc2tlZCBoZXIgY2FwdG9ycyB0byBraWxsIGhlci4gXHJcbk9mIGNvdXJzZSwgdGhleSByZWZ1c2VkLCBidXQgdGhlbiB0aGV5IGRpZG4ndCBrbm93IHRoZSBjYXN0bGUsIGRpZG4ndCBrbm93IHRoZSB0cm91cGUsIHRoZSBtb3V0aHBpZWNlLiBCZXR0ZXIgYnkgaGVyIFxyXG5idWxsZXQgdGhlbiBhdCB0aGVpciBoYW5kcywgYmV0dGVyIGluIFByZXNlcnZhdGlvbiB0aGFuIGluIFJ1aW4sIHNoZSB0aG91Z2h0LCBhcyBzaGUgZmlyZWQgYWdhaW4uIEFuZCBzbywgaGVyIGxhc3QgXHJcbnRob3VnaHRzIHdlcmUgb2YgcGVhY2UsIG9mIGJlaW5nIHJlLWFzc3VyZWQgYnkgdGhlIGh1bGtpbmcgYmFyYmFyaWFuLiBTaGUgZGlkbid0IGV2ZW4ga25vdyB3aGVuIHNoZSBkaWVkLiBFbnZpYWJsZSwgXHJcblJpbiB0aG91Z2h0IGNvbGRseSwgYXMgc2hlIHBhY2tlZCB1cCBhbmQgd2VudCBiYWNrIGhvbWUuIFdoYXQgc2hlIGRpZG4ndCBrbm93IHdhcyB0aGF0IHNoZSBoYWQgZGlzcnVwdGVkIG9uZSBvZiB0aGUgXHJcbm1ham9yIHNjaGVtZXMgb2YgdGhlIHRyb3VwZSBhbmQgdHJpZ2dlcmVkIG9mIGEgY3ljbGUgb2YgdmVuZGV0dGEncyBhbmQgbXV0dWFsIGRlc3RydWN0aW9uLjxici8+XHJcblRoZSBuZXh0IGRheSwgdGhlIGRlbW9ucyBoYWQgY2FwdHVyZWQgdGhlIHRpZWZsaW5nIC0gYW5kIHBsYW5uZWQgdG8gYnVybiBoaW0gaW4gYSBweXJlIG9mIGhlbGxmaXJlIGZvciBzb21lIG1hZGUgdXBcclxuY3JpbWVzLiBHaXZlbiBob3cgc3R1cGlkIGRlbW9ucyBhdCB0aGlzIGxldmVsIHdlcmUsIFJpbiBoYWQgbm8gZG91YnQgdGhleSBoYWQgYmVlbiBhc3Npc3RlZCwgYW5kIGxpdHRsZSBkb3VidCBhcyB0byBcclxuYnkgd2hvbS4gV2VsbCwgc2hlIHdhcyBub3Qgc3R1cGlkIGVub3VnaCB0byBnbyBpbnRvIGFuIGV4ZWN1dGlvbiBncm91bmQsIGJ1dCBzaGUgd291bGRuJ3QgbGV0IGhpbSBzdWZmZXIgaW4gaGVsbGZpcmUuIFxyXG5TdHJhbmdlbHkgZW5vdWdoLCBhbmQgYWxtb3N0IGFzIGEgbW9ja2VyeSwgc2hlJ2QgYWxzbyBnb3QgYW5vdGhlciBhc3Nhc3NpbmF0aW9uIGNvbnRyYWN0IGZyb20gdGhlIHRyb3VwZSAtIGEganVuaW9yXHJcbmhhZCBkZWxpdmVyZWQgaXQgdGhpcyB0aW1lIC0gdGhhdCBzaGUgd2FzIHRvIGFzc2Fzc2luYXRlIHRoZSBleGVjdXRpb25lci4gQnV0IHRoZW4gc29tZXRoaW5nIGNoYW5nZWQgYWxsIHRoZSBwbGFucyBcclxuLSB0aGUgc2FtZSBncm91cCBvZiBhZHZlbnR1cmVycyAoc2hlJ2QgaGVscGVkIHRoZW0gZWFybGllciB0aGF0IGRheSksIGhhZCB0YWtlbiBpdCB1cG9uIHRoZW1zZWx2ZXMgdG8gcmVzdWNlIHRoZSBndXkuXHJcblNoZSB3YXMgZXhjaXRlZCwgYW5kIGZvciBvbmNlIGluIGEgdmVyeSBsb25nIHRpbWUgZGFyZWQgdG8gaG9wZSBhcyBzaGUgY292ZXJlZCB0aGVtIGFzIHRoZXkgZXNjYXBlZC4gU2FkbHksIHRoZSBcclxuY2FzdGxlIHdhcyBub3QgYSBwbGFjZSB3aGVyZSBob3BlIGNhbiBsaXZlLCBhbmQgd2l0aCBhIGRlZXAgaG9ycm9yLCBzaGUgcmVhbGl6ZWQgdGhhdCB0aGUgcGFydHkgd2FzIGNvcm5lcmVkIC0gYW5kIFxyXG5ieSBub25lIG90aGVyIHRoYW4gJHtDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZ2V0KG5wY0luZGV4XzEuTnBjSUQuQmFwaG9tZXQpLmNyZWF0ZUxpbmsoXCJCYXBob21ldFwiKX0gaGltc2VsZi4gVGhlcmUgd2FzIG5vIHdheSBvdXQgb2YgdGhpcywgYW5kIHNvIHNoZSBkaWQgd2hhdCBzaGUgaGFkIHBsYW5uZWQgYmVmb3JlLCBhbmRcclxucHV0IGEgYnVsbGV0IGludG8gaGVyIGZyaWVuZC4gU29tZXRoaW5nIHdoaWNoLCBieSB0aGUgdGVhcnMgaW4gaGlzIGV5ZXMsIGhlIGtuZXcgd2FzIGNvbWluZy48YnIvPlxyXG5BZnRlciB0aGF0LCBzaGUgZGVjaWRlZCB0byBiaXRlIGJhY2sgYXQgdGhlIHRyb3VwZSBieSB0YWtpbmcgb3V0IHRoZWlyIG1vc3QgdmFsdWFibGUgcGllY2UsIHNvbWVvbmUgc2hlIGtuZXcgdGhleSBcclxuaGFkIGJpZyBwbGFucyBmb3IgLSAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5MdWNpYW4pLmNyZWF0ZUxpbmsoXCJUaGUgU29saXRhaXJlXCIpfS4gVGhpbmdzIGRpZG4ndCBnbyBhcyBwbGFubmVkIGhvd2V2ZXIsXHJcbmFuZCBpbnN0ZWFkIHNoZSBlbmRlZCB1cCBpbiB0aGUgZm9ydHJlc3Mgb2YgdGhlIGlucXVpc2l0b3JzLCBnYWluaW5nIGFuIEF0aXVtIHNwaWtlIGFuZCBhIFN0ZWVsIHNwaWtlIHBvd2VyZWQgYnkgXHJcblZlcnJhZGVyJ3Mgc291bCBmb2xsb3dlZCBieSBoZWFkaW5nIHJpZ2h0IHBhc3QgbWlkbmlnaHQgaW50byBhIHNob3dkb3duIHRoYXQgaW52b2x2ZWQgbW9yZSBteXRocyBhbmQgbGVnZW5kcyB0aGFuIFxyXG5zaGUgY291bGQgZXZlbiBkcmVhbSBvZiAtIGFsbCB0aGUgR3VhcmRpYW5zIHdpdGggUHJlc2VydmF0aW9uIGhpbXNlbGYgaW4gdGhlIG1pc3RzLCBlaWdodCBzZW5pb3IgaW5xdWlzaXRvcnMgbW92ZWRcclxuYnkgUnVpbiBoaW1zZWxmICh3aG8gd2FzIGFsc28gbW92aW5nIGhlciAtIGRlc3BpdGUgaGVyIGJlc3QgZWZmb3J0cyksIFxyXG4ke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5Mb2dvc1BsYXl3cmlnaHQpLmNyZWF0ZUxpbmsoXCJUaGUgUGxheXdyaWdodFwiKX0gYW5kIHRoZSBNb3V0aHBpZWNlIGFuZCBsYXN0bHkgXHJcbiR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELlNhbmd1aW5hcmNoKS5jcmVhdGVMaW5rKFwiVGhlIFNhbmd1aW5lQXJjaFwiKX0gYWxvbmcgd2l0aCB0d28gb3RoZXIgaGlnaGVyIHZhbXBpcmVzLiBGaW5hbGx5LCBcclxudGhlcmUgd2FzIG9uZSBvdGhlciAtIGEgc2luZ2xlIEhvbm9yc3ByZW4gd2hvIHN0b29kIG5leHQgdG8gaGVyLCB3YWl0aW5nLCBhbmQgaGFkIGdvbmUgdW5ub3RpY2VkIGJ5IGFsbC4uLiAgXHJcbmA7XHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQ29uZmlkZW50LCAzXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5CbG9vZGx1c3QsIDNdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlBlc3NpbWlzdCwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuUXVpZXQsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkFzY2V0aWMsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlN0ZXJuLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5LaW5kLCAxXSxcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBTaGltYXJpbiA9IHNldHVwU2hpbWFyaW47XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoaW1hcmluLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBWZXJyYWRlciA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwVmVycmFkZXIoKSB7XHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELlZlcnJhZGVyKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJWZXJyYWRlclwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzEvQXJjMi92ZXJyYWRlci5wbmdcIjtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygxLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdNMzEnKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBEZWNlYXNlZGApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoJ0Zyb20gfCBSdWluJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZygnUmFjZSB8IEh1bWFuJyk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+RWxvcXVlbmNlPC9zcGFuPiBCYXJkYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+RWxlbWVudGFsIEJsb29kbGluZTwvc3Bhbj4gU29yY2VyZXJgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBOaWdodGJsb29kIHwgTWFnbWFgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKGBaaW5jIFNhdmFudGApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYENvcHBlciBTYXZhbnRgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKCdDUiB8IDEwJyk7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBcclxuICAgIEFuIGluZmx1ZW50aWFsIGZpeGVyIGluIE5pZ2h0IENhc3RsZS4gTWFkZSBpdCBiaWcgdGhhbmtzIHRvIGhpcyBpbmNyZWRpYmxlIGNoYXJpc21hIGFuZCBkZWNlcHRpb24gc2tpbGxzLiBcclxuICAgICAgR2FpbmVkIE5pZ2h0Ymxvb2QgaW4gYW4gYWNjaWRlbnQgLSBhIHJlc3VsdCBvZiBoaXMgZmlyc3QgYmV0cmF5YWwgLSBkdXJpbmcgaGlzXHJcbiAgICAgIGVhcmx5IHllYXJzIHNwZW50IG9uIHRoZSBmaWVsZCBpbiBhIGZvcmdlIHdoaWNoIHN1Ym1lcmdlZCBoaXMgd2hvbGUgdGVhbSwgZXhjZXB0IFxyXG4gICAgICAke0NoYXJhY3Rlcl8xLkNoYXJhY3Rlci5nZXQobnBjSW5kZXhfMS5OcGNJRC5TaGltYXJpbikuY3JlYXRlTGluayhcIlNoaW1hcmluXCIpfSwgaW4gbWFnbWEuIERpZWQgYXQgdGhlIGhhbmRzIG9mIHRoZSBTdGVlbCBJbnF1aXNpdG9ycywgXHJcbiAgICAgIGhpcyBzb3VsIGJ1cm50IHRvIHBvd2VyIFJpbidzIGhlbWFsdXJneS5gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFZlcnJhZGVyID0gc2V0dXBWZXJyYWRlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVycmFkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEMyQTEgPSB2b2lkIDA7XHJcbmNvbnN0IGFuZG9haW5fMSA9IHJlcXVpcmUoXCIuL2FuZG9haW5cIik7XHJcbmNvbnN0IGFuZHJpXzEgPSByZXF1aXJlKFwiLi9hbmRyaVwiKTtcclxuY29uc3QgYXRobG9uXzEgPSByZXF1aXJlKFwiLi9hdGhsb25cIik7XHJcbmNvbnN0IGJqb3JuXzEgPSByZXF1aXJlKFwiLi9iam9yblwiKTtcclxuY29uc3QgY2VjaWxpYV8xID0gcmVxdWlyZShcIi4vY2VjaWxpYVwiKTtcclxuY29uc3QgY29yb3RvXzEgPSByZXF1aXJlKFwiLi9jb3JvdG9cIik7XHJcbmNvbnN0IGRhd25fMSA9IHJlcXVpcmUoXCIuL2Rhd25cIik7XHJcbmNvbnN0IGR1c2tfMSA9IHJlcXVpcmUoXCIuL2R1c2tcIik7XHJcbmNvbnN0IGVseXNpdW1fMSA9IHJlcXVpcmUoXCIuL2VseXNpdW1cIik7XHJcbmNvbnN0IGVyaWNhXzEgPSByZXF1aXJlKFwiLi9lcmljYVwiKTtcclxuY29uc3QgZXplbGxfMSA9IHJlcXVpcmUoXCIuL2V6ZWxsXCIpO1xyXG5jb25zdCBnZW5lZmVfMSA9IHJlcXVpcmUoXCIuL2dlbmVmZVwiKTtcclxuY29uc3QgaGF2XzEgPSByZXF1aXJlKFwiLi9oYXZcIik7XHJcbmNvbnN0IGhpbmFfMSA9IHJlcXVpcmUoXCIuL2hpbmFcIik7XHJcbmNvbnN0IGluZ3JpZF8xID0gcmVxdWlyZShcIi4vaW5ncmlkXCIpO1xyXG5jb25zdCBpb25hXzEgPSByZXF1aXJlKFwiLi9pb25hXCIpO1xyXG5jb25zdCBqYXllXzEgPSByZXF1aXJlKFwiLi9qYXllXCIpO1xyXG5jb25zdCBqb3JkaV8xID0gcmVxdWlyZShcIi4vam9yZGlcIik7XHJcbmNvbnN0IGthc3Rvcl8xID0gcmVxdWlyZShcIi4va2FzdG9yXCIpO1xyXG5jb25zdCByb2JlcnRhXzEgPSByZXF1aXJlKFwiLi9yb2JlcnRhXCIpO1xyXG5jb25zdCBzYXNoYV8xID0gcmVxdWlyZShcIi4vc2FzaGFcIik7XHJcbmNvbnN0IHN5YmlsbGFfMSA9IHJlcXVpcmUoXCIuL3N5YmlsbGFcIik7XHJcbmNvbnN0IHRvbWFzYV8xID0gcmVxdWlyZShcIi4vdG9tYXNhXCIpO1xyXG5jb25zdCB2ZXJuYV8xID0gcmVxdWlyZShcIi4vdmVybmFcIik7XHJcbmNvbnN0IHZpdGFjaWFfMSA9IHJlcXVpcmUoXCIuL3ZpdGFjaWFcIik7XHJcbmNvbnN0IHl1a2lfMSA9IHJlcXVpcmUoXCIuL3l1a2lcIik7XHJcbmZ1bmN0aW9uIHNldHVwQzJBMSgpIHtcclxuICAgICgwLCBhbmRvYWluXzEuc2V0dXBBbmRvYWluKSgpO1xyXG4gICAgKDAsIGFuZHJpXzEuc2V0dXBBbmRyaSkoKTtcclxuICAgICgwLCBhdGhsb25fMS5zZXR1cEF0aGxvbikoKTtcclxuICAgICgwLCBiam9ybl8xLnNldHVwQmpyb24pKCk7XHJcbiAgICAoMCwgY2VjaWxpYV8xLnNldHVwQ2VjaWxpYSkoKTtcclxuICAgICgwLCBjb3JvdG9fMS5zZXR1cENvcm90bykoKTtcclxuICAgICgwLCBkYXduXzEuc2V0dXBEYXduKSgpO1xyXG4gICAgKDAsIGR1c2tfMS5zZXR1cER1c2spKCk7XHJcbiAgICAoMCwgZWx5c2l1bV8xLnNldHVwRWx5c2l1bSkoKTtcclxuICAgICgwLCBlcmljYV8xLnNldHVwRXJpY2EpKCk7XHJcbiAgICAoMCwgZXplbGxfMS5zZXR1cEV6ZWxsKSgpO1xyXG4gICAgKDAsIGdlbmVmZV8xLnNldHVwR2VuZWZlKSgpO1xyXG4gICAgKDAsIGhhdl8xLnNldHVwSGF2KSgpO1xyXG4gICAgKDAsIGhpbmFfMS5zZXR1cEhpbmEpKCk7XHJcbiAgICAoMCwgaW5ncmlkXzEuc2V0dXBJbmdyaWQpKCk7XHJcbiAgICAoMCwgaW9uYV8xLnNldHVwSW9uYSkoKTtcclxuICAgICgwLCBqYXllXzEuc2V0dXBKYXllKSgpO1xyXG4gICAgKDAsIGpvcmRpXzEuc2V0dXBKb3JkaSkoKTtcclxuICAgICgwLCBrYXN0b3JfMS5zZXR1cEthc3RvcikoKTtcclxuICAgICgwLCByb2JlcnRhXzEuc2V0dXBSb2JlcnRhKSgpO1xyXG4gICAgKDAsIHNhc2hhXzEuc2V0dXBTYXNoYSkoKTtcclxuICAgICgwLCBzeWJpbGxhXzEuc2V0dXBTeWJpbGxhKSgpO1xyXG4gICAgKDAsIHRvbWFzYV8xLnNldHVwVG9tYXNhKSgpO1xyXG4gICAgKDAsIHZlcm5hXzEuc2V0dXBWZXJuYSkoKTtcclxuICAgICgwLCB2aXRhY2lhXzEuc2V0dXBWaXRhY2lhKSgpO1xyXG4gICAgKDAsIHl1a2lfMS5zZXR1cFl1a2kpKCk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEMyQTEgPSBzZXR1cEMyQTE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9pbml0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBBbmRvYWluID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBBbmRvYWluKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5BbmRvYWluKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJBbmRvYWluXCI7XHJcbiAgICBjLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMi9BcmMxL0FuZG9haW4ucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIk0yMjFcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIkZyb20gfCA/IC8gTWF0ZXJpYVwiKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiUmFjZSB8IEFhc2ltYXJcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+R3Vuc2xpbmdlcjwvc3Bhbj4gRmlnaHRlcmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYENsYXNzIHwgPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPkhleGJsYWRlPC9zcGFuPiBXYXJsb2NrYCk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhgQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+V2FyPC9zcGFuPiBDbGVyaWNgKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiJ1NhaW50J1wiKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiQ1IgfCAyMVwiKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYFxyXG4gICAgQW4gYWFzaW1hciB3aXRoIGEgaGFsbyBhbmQgZ2xvd2luZyB3aW5ncyBsaWtlIHJlZmxlY3RlZCBnbGFzcyB3aG8gbXlzdGVyaW91c2x5IGFwcGVhcmVkIGluIFZldGVyZXMgaW4gYXJvdW5kIFxyXG4gICAgICAxNTgwIEFSLiBTZWVtZWQgdG8gYmUgc3VwZXJuYXR1cmFsbHkgZ2lmdGVkIGluIHRoZSB1c2Ugb2YgZmlyZWFybXMgYW5kIHByZWZlcnJlZCB0aGVtIHRvIHN3b3Jkcy4gS25vd24gYnkgYWxsIFxyXG4gICAgICB0byBiZSBhbiBleHRyZW1lbHkgZ2VuZXJvdXMgYW5kIGtpbmQgc291bCwgYnV0IHNlZW1lZCB0byBiZSBoYXVudGVkIGJ5IGRlbW9ucyBvZiBoaXMgb3duLCBhbmQgd2FzIGFsd2F5cyBcclxuICAgICAgYmVnZ2luZyBHb2QgZm9yIGZvcmdpdmVuZXNzLiBXYXMgcmFuZG9tbHkgYXNzYXVsdGVkIGJ5IGEgXHJcbiAgICAgICR7Q2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmdldChucGNJbmRleF8xLk5wY0lELk1vc3RpbWEpLmNyZWF0ZUxpbmsoXCJteXN0ZXJpb3VzIGhhbGYtYmxvb2QgZmFsbGVuIGFhc2ltYXJcIil9IHdoaWxlIHBlYWNlZnVsbHkgZXhwbG9yaW5nIHRoZVxyXG4gICAgICBjb2FzdCBvZiBBZWdpci48YnIvPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZWZmZWN0X3RhZ1wiPkluY29tcGxldGU8L2Rpdj5gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEFuZG9haW4gPSBzZXR1cEFuZG9haW47XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuZG9haW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEFuZHJpID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBBbmRyaSgpIHtcclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuQW5kcmkpO1xyXG4gICAgYy5jb3JlLm5hbWUgPSBcIkFuZHJpXCI7XHJcbiAgICBjLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMi9BcmMxL0FuZHJpLnBuZ1wiO1xyXG4gICAgYy5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJNMzdcIik7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGA/Pz9gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEFuZHJpID0gc2V0dXBBbmRyaTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5kcmkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEF0aGxvbiA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEF0aGxvbigpIHtcclxuICAgIGNvbnN0IGF0aGxvbiA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5BdGhsb24pO1xyXG4gICAgYXRobG9uLmNvcmUubmFtZSA9IFwiQXRobG9uXCI7XHJcbiAgICBhdGhsb24uY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvQXRobG9uLnBuZ1wiO1xyXG4gICAgLy8gU2V0dXAgRCZEIHN0YXRzLlxyXG4gICAgYXRobG9uLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMTAsIDIwLCAxOCwgOCwgMTYsIDEwKTtcclxuICAgIGF0aGxvbi5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg0KTtcclxuICAgIGF0aGxvbi5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgYXRobG9uLmNhcmQuYWRkQ2FyZFRhZyhcIk01OFwiKTtcclxuICAgIGF0aGxvbi5jYXJkLnN1bW1hcnkgPSAoKSA9PiBgPz8/YDtcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5BZGRpY3QsIDRdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnW1wiR3VpbHQtcmlkZGVuXCJdLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5EZXByZXNzaXZlLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5BY2NlcHRpbmcsIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlBzeWNob3BhdGgsIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnW1wiQWJob3JzIFZpb2xlbmNlXCJdLCAxXSxcclxuICAgIC8vIHRpZXNUb090aGVyTnBjczogbmV3IE1hcChbXHJcbiAgICAvLyAgICAgW2Ake0NhcmQubGluayhcIltjaGFyYWN0ZXJ8WXVraV1cIiwgXCJZdWtpXCIpfWAsXHJcbiAgICAvLyAgICAgIGBBbHRob3VnaCBoZSB3b3VsZCBuZXZlciBzYXkgaXQgYWxvdWQsIGhlIGRlZXBseSBodXJ0cyBpbnNpZGUgZm9yIHdoYXQgaGlzIHNvbiBoYWQgdG8gZ28gdGhyb3VnaCwgYW5kXHJcbiAgICAvLyAgICAgICB3aGF0IGl0IG1hZGUgb2YgaGltLiBIYXMgcmVhbGl6ZWQgdGhlIGZ1dGlsaXR5IG9mIHByZWFjaGluZyB0byBoaW0sIGJ1dCBrZWVwcyBob3BlIHRoYXQgaGlzIGZhbWlseSdzXHJcbiAgICAvLyAgICAgICBub2JsZSBibG9vZCB3aWxsIGd1aWRlIFl1a2kgdG8gdGhlIHJpZ2h0IHBhdGguYF0sXHJcbiAgICAvLyAgICAgW2Ake0NhcmQubGluayhcIltjaGFyYWN0ZXJ8S2VuIFNoaW1hXVwiLCBcIlNoaW1ha2VuXCIpfWAsXHJcbiAgICAvLyAgICAgIGBTYXcgaGltIGFzIGRpdmluaXR5LCBhIHNhdmlvdXIgYW5kIGFuIGlkZWFsLiBXb3VsZCd2ZSBkaWVkIHNldmVyYWwgdGltZXMgb3ZlciBmb3IgaGlzIHNha2UuXHJcbiAgICAvLyAgICAgICBBbHNvIGtlcHQgdGhlIG90aGVycyB3aG8gd2VyZSB3aXRoIGhpbSwgbGlrZSAke0NhcmQubGluayhcIltjaGFyYWN0ZXJ8UmluIFNoaW1hXVwiLCBcIlNoaW1hcmluXCIpfSBhbmRcclxuICAgIC8vICAgICAgICR7Q2FyZC5saW5rKFwiW2NoYXJhY3RlcnxGaWVzdF1cIiwgXCJGaWVzdFwiKX0sIGluIHZlcnkgaGlnaCByZWdhcmQuYF0sXHJcbiAgICAvLyBdKSxcclxuICAgIGF0aGxvbi5vcGluaW9ucy5pc09waW5pb25hdGVkID0gdHJ1ZTtcclxufVxyXG5leHBvcnRzLnNldHVwQXRobG9uID0gc2V0dXBBdGhsb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF0aGxvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwQmpyb24gPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEJqcm9uKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5Cam9ybik7XHJcbiAgICBjLmNvcmUubmFtZSA9IFwiQmpyb25cIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvQmpvcm4ucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIk0zNVwiKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYD8/P2A7XHJcbiAgICBjLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxufVxyXG5leHBvcnRzLnNldHVwQmpyb24gPSBzZXR1cEJqcm9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1iam9ybi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwQ2VjaWxpYSA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cENlY2lsaWEoKSB7XHJcbiAgICBjb25zdCBjZWNpbGlhID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkNlY2VsaWEpO1xyXG4gICAgY2VjaWxpYS5jb3JlLm5hbWUgPSBcIkNlY2lsaWFcIjtcclxuICAgIGNlY2lsaWEuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvQ2VjaWxpYS5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIGNlY2lsaWEuZFN0YXRzLmluaXRpYWxpemVTdGF0cyg2LCAxNiwgOCwgMTAsIDE0LCAxOCk7XHJcbiAgICBjZWNpbGlhLmRTdGF0cy5wYiA9IGNvbnN0YW50c18xLlByb2YuZ2V0KDMpO1xyXG4gICAgY2VjaWxpYS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkluc2lnaHQsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICAvL3RvZG9cclxuICAgIGNlY2lsaWEuZFNLaWxscy5maW5hbGl6ZVNraWxscygpO1xyXG4gICAgY2VjaWxpYS5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgY2VjaWxpYS5jYXJkLmFkZENhcmRUYWcoXCJGMTFcIik7XHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQ29uY2lsaWF0b3J5LCAzXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5OYWl2ZSwgM10sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQXNjZXRpYywgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuS2luZCwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuRGVwcmVzc2l2ZSwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWdbXCJBYmhvcnMgVmlvbGVuY2VcIl0sIDFdLFxyXG4gICAgY2VjaWxpYS5vcGluaW9ucy5pc09waW5pb25hdGVkID0gdHJ1ZTtcclxufVxyXG5leHBvcnRzLnNldHVwQ2VjaWxpYSA9IHNldHVwQ2VjaWxpYTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2VjaWxpYS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwQ29yb3RvID0gdm9pZCAwO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL2NvbnN0YW50c1wiKTtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwQ29yb3RvKCkge1xyXG4gICAgLy8gUHJlcGFyZSB0aGUgY2hhcmFjdGVyIG9iamVjdC5cclxuICAgIGNvbnN0IGNvcm90byA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5Db3JvdG8pO1xyXG4gICAgY29yb3RvLmNvcmUubmFtZSA9IFwiQ29yb3RvXCI7XHJcbiAgICBjb3JvdG8uY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvQ29yb3RvLnBuZ1wiO1xyXG4gICAgLy8gU2V0dXAgRCZEIHN0YXRzLlxyXG4gICAgY29yb3RvLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMTQsIDEyLCAxNCwgMTMsIDEyLCAxNyk7XHJcbiAgICBjb3JvdG8uZFN0YXRzLnBiID0gY29uc3RhbnRzXzEuUHJvZi5nZXQoMyk7XHJcbiAgICAvLyBTZXR1cCBEJkQgc2tpbGxzLlxyXG4gICAgY29yb3RvLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuSW50aW1pZGF0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgY29yb3RvLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuTmF0dXJlLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgY29yb3RvLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuUGVyZm9ybWFuY2UsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICBjb3JvdG8uZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TdGVhbHRoLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgY29yb3RvLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuRGVjZXB0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIGNvcm90by5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcnN1YXNpb24sIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgY29yb3RvLmRTS2lsbHMuZmluYWxpemVTa2lsbHMoKTtcclxuICAgIGNvcm90by5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgY29yb3RvLmNhcmQuYWRkQ2FyZFRhZyhcIk01NFwiKTtcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5QYXJhbm9pZCwgM10sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuSW5kdXN0cmlvdXMsIDNdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlN0ZXJuLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5Db25mcm9udGF0aW9uYWwsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkluc2VjdXJlLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5BYnVzaXZlLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5WYWluLCAxXSxcclxuICAgIGNvcm90by5vcGluaW9ucy5pc09waW5pb25hdGVkID0gdHJ1ZTtcclxufVxyXG5leHBvcnRzLnNldHVwQ29yb3RvID0gc2V0dXBDb3JvdG87XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcm90by5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwRGF3biA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cERhd24oKSB7XHJcbiAgICAvLyBQcmVwYXJlIHRoZSBjaGFyYWN0ZXIgb2JqZWN0LlxyXG4gICAgY29uc3QgZGF3biA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5EYXduKTtcclxuICAgIGRhd24uY29yZS5uYW1lID0gXCJEYXduXCI7XHJcbiAgICBkYXduLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMi9BcmMxL0Rhd24ucG5nXCI7XHJcbiAgICAvLyBTZXR1cCBEJkQgc3RhdHMuXHJcbiAgICBkYXduLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoOCwgOCwgMTYsIDExLCAxNywgMTgpO1xyXG4gICAgZGF3bi5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg0KTtcclxuICAgIC8vIFNldHVwIEQmRCBza2lsbHMuXHJcbiAgICBkYXduLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuQW5pbWFsSGFuZGxpbmcsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICBkYXduLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuRGVjZXB0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgZGF3bi5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkhpc3RvcnksIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICBkYXduLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuSW5zaWdodCwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGRhd24uZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5NZWRpY2luZSwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGRhd24uZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TdXJ2aXZhbCwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YsIDUpO1xyXG4gICAgZGF3bi5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcnN1YXNpb24sIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgZGF3bi5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcmZvcm1hbmNlLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIGRhd24uZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TbGlnaHRPZkhhbmQsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgZGF3bi5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLl9BTEwsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5IYWxmKTtcclxuICAgIGRhd24uZFNLaWxscy5maW5hbGl6ZVNraWxscygpO1xyXG4gICAgZGF3bi5vcGluaW9ucy5pc09waW5pb25hdGVkID0gdHJ1ZTtcclxuICAgIC8vIENhcmQgaW5mb3JtYXRpb24uXHJcbiAgICBkYXduLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBkYXduLmNhcmQuYWRkQ2FyZFRhZyhcIkY0MDUgKDMyKVwiKTtcclxuICAgIGRhd24uY2FyZC5hZGRDYXJkVGFnKFwiRnJvbSB8IE1hdGVyaWE8c3BhbiBjbGFzcz0ndmVyYm9zZSc+KE5haXl1bWkpPC9zcGFuPiAvIERldm90aW9uXCIpO1xyXG4gICAgZGF3bi5jYXJkLmFkZENhcmRUYWcoXCJSYWNlIHwgSHVtYW5cIik7XHJcbiAgICBkYXduLmNhcmQuc3VtbWFyeSA9ICgpID0+IGBcclxuICAgIFRoZSBnZW50bGUgYW5kIHJlc2VydmVkIHBhd24gc2hvcCBvd25lciBhbmQgdGhlIGRlIGZhY3RvIGNhcmV0YWtlciBvZiB0aGUgc21hbGwgbW91bnRhaW5vdXMgdmlsbGFnZSBvZiBQbydzaGFuLiBcclxuICAgIEFwcGVhcnMgdG8gaGlkZSBxdWl0ZSBhIGJpdCBvZiBwYWluIHVuZGVybmVhdGggYSBzYWQgc21pbGUuIFdhcyBib3JuIGluIHRoZSBoaW50ZXJsYW5kcyBvZiBOYWl5dW1pIGFyb3VuZCBcclxuICAgIDEyMDAgQVIuIEtlcHQgd2l0bmVzc2luZyB0aGUgcmVzaWRlbnRzIG9mIGhlciB2aWxsYWdlIGNvbnN0YW50bHkgZ2V0IHNsYXVnaHRlcmVkIGFnYWluIGFuZCBhZ2FpbiwgYW5kIGxvc2UgXHJcbiAgICBxdWl0ZSBhIGJpdCBvZiB0aGUgbWVtb3JpZXMgb2YgdGhlaXIgdGltZXMgc3BlbnQgdG9nZXRoZXIgYWdhaW4gYW5kIGFnYWluLjxici8+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZWZmZWN0X3RhZ1wiPkluY29tcGxldGU8L2Rpdj5gO1xyXG4gICAgLy8gICAgICAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWdbXCJOYXR1cmUgTG92ZXJcIl0sIDNdLFxyXG4gICAgLy8gICAgICAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuSW5kdXN0cmlvdXMsIDJdLFxyXG4gICAgLy8gICAgICAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQXNjZXRpYywgMl0sXHJcbiAgICAvLyAgICAgICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZ1tcIkFiaG9ycyBWaW9sZW5jZVwiXSwgMl0sXHJcbiAgICAvLyAgICAgICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5Ib21vc2V4dWFsLCAxXSxcclxuICAgIC8vICAgICAgICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkFjY2VwdGluZywgMV0sXHJcbiAgICAvLyAgICAgICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5EZXByZXNzaXZlLCAxXSxcclxuICAgIGRhd24uY1NraWxscy5zZXRTa2lsbFZhbHVlcyhbXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BY2NvdW50aW5nLCAzNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFudGhyb3BvbG9neSwgMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFwcHJhaXNlLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXJjaGFlb2xvZ3ksIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BcnRpbGxlcnksIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGFybSwgMTUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Db21wdXRlclVzZSwgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRlbW9saXRpb25zLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGlzZ3Vpc2UsIDUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5EaXZpbmcsIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Ecml2ZUF1dG8sIDIwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRWxlY3RyaWNhbFJlcGFpciwgMTAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbGVjdHJvbmljcywgMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZpcnN0QWlkLCA2MCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkh5cG5vc2lzLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTGF3LCA1LCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTGlicmFyeVVzZSwgMjAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Mb2Nrc21pdGgsIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5NZWNoYW5pY2FsUmVwYWlyLCAxMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1vZGVybk1lZGljaW5lLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTmF0dXJhbFdvcmxkLCAzNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdmlnYXRlLCAxMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk9jY3VsdCwgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk9wZXJhdGVIZWF2eU1hY2hpbmVyeSwgMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBzeWNob2FuYWx5c2lzLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUmVhZExpcHMsIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5SaWRlLCAxNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlRocm93LCAyMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFjdGluZywgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNhbGxpZ3JhcGh5LCA5MCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNhcnBlbnRyeSwgMTAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Db29raW5nLCA5MCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRhbmNpbmcsIDUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5GaW5lQXJ0LCA1LCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRm9yZ2VyeSwgMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLldyaXRpbmcsIDUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5TaW5naW5nLCA1LCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUGFpbnRpbmcsIDc1LCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUGhvdG9ncmFwaHksIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5TY3VscHRpbmcsIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGFpbnNhdywgMTAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5IZWF2eVdlYXBvbnMsIDEwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRmxhbWV0aHJvd2VyLCAxMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1hY2hpbmVHdW4sIDEwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuU3VibWFjaGluZUd1biwgMTAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BaXJjcmFmdCwgMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkJvYXQsIDUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Bc3Ryb25vbXksIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5CaW9sb2d5LCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQm90YW55LCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgXSk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cERhd24gPSBzZXR1cERhd247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhd24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cER1c2sgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBEdXNrKCkge1xyXG4gICAgLy8gUHJlcGFyZSB0aGUgY2hhcmFjdGVyIG9iamVjdC5cclxuICAgIGNvbnN0IGR1c2sgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuRHVzayk7XHJcbiAgICBkdXNrLmNvcmUubmFtZSA9IFwiRHVza1wiO1xyXG4gICAgZHVzay5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMS9EdXNrLnBuZ1wiO1xyXG4gICAgLy8gU2V0dXAgRCZEIHN0YXRzLlxyXG4gICAgZHVzay5kU3RhdHMuaW5pdGlhbGl6ZVN0YXRzKDI4LCAxOCwgMjYsIDIxLCAyNCwgMzApO1xyXG4gICAgZHVzay5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg4KTtcclxuICAgIC8vIFNldHVwIEQmRCBza2lsbHMuXHJcbiAgICBkdXNrLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuUGVyc3Vhc2lvbiwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLk5vbmUsIC01KTtcclxuICAgIGR1c2suZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5EZWNlcHRpb24sIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5IYWxmKTtcclxuICAgIGR1c2suZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5QZXJjZXB0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuSGFsZik7XHJcbiAgICBkdXNrLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuU3RlYWx0aCwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkhhbGYpO1xyXG4gICAgZHVzay5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkhpc3RvcnksIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mKTtcclxuICAgIGR1c2suZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5JbnNpZ2h0LCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZik7XHJcbiAgICBkdXNrLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuTWVkaWNpbmUsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgZHVzay5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcmZvcm1hbmNlLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIGR1c2suZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TbGlnaHRPZkhhbmQsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgZHVzay5kU0tpbGxzLmZpbmFsaXplU2tpbGxzKCk7XHJcbiAgICBkdXNrLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSB0cnVlO1xyXG4gICAgLy8gQ2FyZCBpbmZvcm1hdGlvbi5cclxuICAgIGR1c2suY2FyZC5zZXRDYW1wYWlnbkFyYygyLCAxKTtcclxuICAgIGR1c2suY2FyZC5hZGRDYXJkVGFnKFwiRlwiKTtcclxuICAgIGR1c2suY2FyZC5hZGRDYXJkVGFnKFwiRnJvbSB8IERldm90aW9uXCIpO1xyXG4gICAgZHVzay5jYXJkLmFkZENhcmRUYWcoYFJhY2UgfCBUaXRhbiA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+JnRpbWVzOyBKYWRlIERyYWdvbjwvc3Bhbj5gKTtcclxuICAgIGR1c2suY2FyZC5hZGRDYXJkVGFnKGA8c3Bhbj5Qcmltb3JkaWFsIHwgT3V0c2lkZXIgPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPigxMTxzdXA+dGg8L3N1cD4gRnJhZ21lbnQgb2YgU3VpKTwvc3Bhbj48L3NwYW4+YCk7XHJcbiAgICBkdXNrLmNhcmQuYWRkQ2FyZFRhZyhcIkNSIHwgMjZcIik7XHJcbiAgICBkdXNrLmNhcmQuc3VtbWFyeSA9ICgpID0+IFwiPz8/XCI7XHJcbn1cclxuZXhwb3J0cy5zZXR1cER1c2sgPSBzZXR1cER1c2s7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR1c2suanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEVseXNpdW0gPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuY29uc3QgTW9yYWxlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vTW9yYWxlXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEVseXNpdW0oKSB7XHJcbiAgICBjb25zdCBlbHlzaXVtID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkVseXNpdW0pO1xyXG4gICAgZWx5c2l1bS5jb3JlLm5hbWUgPSBcIkVseXNpdW1cIjtcclxuICAgIGVseXNpdW0uY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvRWx5c2l1bS5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIGVseXNpdW0uZFN0YXRzLmluaXRpYWxpemVTdGF0cyg4LCAxOCwgMTQsIDE1LCAxOCwgMTApO1xyXG4gICAgZWx5c2l1bS5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg1KTtcclxuICAgIC8vIFNldHVwIEQmRCBza2lsbHMuXHJcbiAgICBlbHlzaXVtLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuSW5zaWdodCwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGVseXNpdW0uZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5JbnZlc3RpZ2F0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgZWx5c2l1bS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLk1lZGljaW5lLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgZWx5c2l1bS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlN0ZWFsdGgsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgZWx5c2l1bS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcmNlcHRpb24sIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQsIDUpO1xyXG4gICAgZWx5c2l1bS5vcGluaW9ucy5pc09waW5pb25hdGVkID0gdHJ1ZTtcclxuICAgIGVseXNpdW0ub3BlcmF0b3IubW9yYWxlID0gTW9yYWxlXzEuTW9yYWxlLkF2ZXJhZ2U7XHJcbiAgICBlbHlzaXVtLmRTS2lsbHMuZmluYWxpemVTa2lsbHMoKTtcclxuICAgIGVseXNpdW0ub3BlcmF0b3IuZmF0aWd1ZSA9IDEwO1xyXG4gICAgZWx5c2l1bS5vcGVyYXRvci5yYXRpbmdzID0ge1xyXG4gICAgICAgIGRhbWFnZTogXCJDLVwiLFxyXG4gICAgICAgIGNvbnRyb2w6IFwiU1NcIixcclxuICAgICAgICBzdXJ2aXZhbDogXCJEXCIsXHJcbiAgICAgICAgcHJvOiBcIlNcIixcclxuICAgIH07XHJcbiAgICBlbHlzaXVtLm9wZXJhdG9yLmVyYSA9IGNvbnN0YW50c18xLkVyYS5JbmZvcm1hdGlvbjtcclxuICAgIGVseXNpdW0ub3BlcmF0b3IucHJvZmVzc2lvbnMgPSBbXCJNZXNzZW5nZXIgLyBMb2dpc3RpY3NcIiwgXCJNZXNzZW5nZXJcIl07XHJcbiAgICBlbHlzaXVtLm9wZXJhdG9yLmFkZE5vdGFibGVTdHVmZihcIk1ham9yIERhbWFnZSBUeXBlXCIsIFwiU2xhc2hpbmcgLyBQaWVyY2luZ1wiKTtcclxuICAgIGVseXNpdW0ub3BlcmF0b3IuYWRkTm90YWJsZVN0dWZmKFwiU3Ryb25nIGFnYWluc3RcIiwgXCJOb3RoaW5nIHJlYWxseSAoYnkgaGltc2VsZilcIik7XHJcbiAgICBlbHlzaXVtLm9wZXJhdG9yLmFkZE5vdGFibGVTdHVmZihcIkNvbWJhdCBFeHBlcmllbmNlXCIsIFwiQiBHcmFkZSAoNSB5ZWFycyAvIGluIGxvZ2lzdGljcylcIik7XHJcbiAgICBlbHlzaXVtLm9wZXJhdG9yLmFkZE5vdGFibGVTdHVmZihcIkNoYWxsZW5nZSBSYXRpbmdcIiwgXCI5XCIpO1xyXG4gICAgZWx5c2l1bS5vcGVyYXRvci5zZXRDaGVtaXN0cnlXaXRoKG5wY0luZGV4XzEuTnBjSUQuRXplbGwsIDMxLCBcIihCb3lmcmllbmQpIER1cmluZyB0aGUgY291cnNlIG9mIGhpcyBsYXRlc3QgYXNzaWdubWVudCBpbiBhc3Npc3RpbmcgdGhlIFNhaW50cywgXCIgK1xyXG4gICAgICAgIFwidGhlIHR3byBoYXZlIGJlZW4gdGhyb3VnaCBhIGxvdCBvZiBwZXJpbG91cyBtaXNzaW9ucyB0b2dldGhlciAtIGluY2x1ZGluZyBzb21lIFwiICtcclxuICAgICAgICBcIm91dHNpZGUgb2YgcHJvZmVzc2lvbmFsIHNjb3BlIChsaWtlIGZpbmRpbmcgYSBjdXJlIGZvciBDZWNpbGlhKS5cIik7XHJcbiAgICBlbHlzaXVtLm9wZXJhdG9yLnNldENoZW1pc3RyeVdpdGgobnBjSW5kZXhfMS5OcGNJRC5Kb3JkaSwgMTcsIFwiVGhvdWdoIEpvcmRpIGRvZXNuJ3QgcmVtZW1iZXIsIEVseXNpdW0ga25vd3MgaGltIGZyb20gYSB0aW1lIGxvbmcgYWdvLi4uXCIpO1xyXG4gICAgZWx5c2l1bS5vcGVyYXRvci5zZXRDaGVtaXN0cnlXaXRoKG5wY0luZGV4XzEuTnBjSUQuRGF3biwgMTQsIFwiV2FzIGF3YXJlIHRoYXQgc2hlIHdhcyBpbiB0b3VjaCB3aXRoIHRoZSBlbnRpdHkgJ2d1YXJkaW5nJyB0aGUgdmlsbGFnZS4gSGUgY291bGQgc2VlIFwiICtcclxuICAgICAgICBcImhlciBidXJ5aW5nIHNhZG5lc3MgYW5kIHN0cm9uZ2x5IGZlbHQgc2hlIHdhcyBhIGdvb2QgcGVyc29uLCBkZXNwaXRlIGhlciBzZWNyZXRzLiBcIiArXHJcbiAgICAgICAgXCJIaXMgcmVzcGVjdCBmb3IgaGVyIGluY3JlYXNlZCBzaWduaWZpY2FudGx5IGFmdGVyIHJlY2VudCBldmVudHMuXCIpO1xyXG4gICAgZWx5c2l1bS5vcGVyYXRvci5zZXRDaGVtaXN0cnlXaXRoKG5wY0luZGV4XzEuTnBjSUQuSGluYSwgMTMsIFwiRmVlbHMgYSBzdHJvbmcgc2Vuc2Ugb2Ygc3ltcGF0aHkgYW5kIGEgc2xpZ2h0IHBhdGVybmFsIGluc3RpbmN0IGZvciBoZXIuIFVuZGVyc3RhbmRzIFwiICtcclxuICAgICAgICBcImhlciBzaXR1YXRpb24gYW5kIHBlcmlvZGljYWxseSBzbXVnZ2xlcyBzdHVmZiBzaGUgbmVlZHMuIEFsc28gc3BvaWxzIGhlciByb3R0ZW4uXCIpO1xyXG4gICAgZWx5c2l1bS5vcGVyYXRvci5zZXRDaGVtaXN0cnlXaXRoKG5wY0luZGV4XzEuTnBjSUQuQ2VjZWxpYSwgMTEsIFwiSGFzIGtub3duIGhlciBmcm9tIGFsbW9zdCB0aGUgZGF5IHNoZSB3YXMgYm9ybi4gSXMgcXVpdGUgZW1wYXRoZXRpYyB0byBoZXIgc2l0dWF0aW9uIFwiICtcclxuICAgICAgICBcImFuZCBmZWVscyBzaGUgaXMgdG9vIGdvb2QgYSBwZXJzb24gdG8gZGllIHNvIHlvdW5nLiBBbHNvIEV6ZWxsJ3MgY29uY2VybiBmb3IgaGVyIGhhcyBcIiArXHJcbiAgICAgICAgXCJtYWRlIGhpbSBxdWl0ZSBpbnZlc3RlZCBpbiBoZXIgZmF0ZS5cIik7XHJcbiAgICBlbHlzaXVtLmNTa2lsbHMuc2V0U2tpbGxWYWx1ZXMoW1xyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQWNjb3VudGluZywgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQW50aHJvcG9sb2d5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BcHByYWlzZSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXJjaGFlb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFydGlsbGVyeSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2hhcm0sIDE1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Db21wdXRlclVzZSwgNjUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRlbW9saXRpb25zLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5EaXNndWlzZSwgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGl2aW5nLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Ecml2ZUF1dG8sIDgwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbGVjdHJpY2FsUmVwYWlyLCA2MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRWxlY3Ryb25pY3MsIDUwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5GaXJzdEFpZCwgMzAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkh5cG5vc2lzLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5MYXcsIDYwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5MaWJyYXJ5VXNlLCAyMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTG9ja3NtaXRoLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5NZWNoYW5pY2FsUmVwYWlyLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTW9kZXJuTWVkaWNpbmUsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdHVyYWxXb3JsZCwgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdmlnYXRlLCA4MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuT2NjdWx0LCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5PcGVyYXRlSGVhdnlNYWNoaW5lcnksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBzeWNob2FuYWx5c2lzLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5SZWFkTGlwcywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUmlkZSwgMTUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlRocm93LCAyMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQWN0aW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DYWxsaWdyYXBoeSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2FycGVudHJ5LCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ29va2luZywgMjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRhbmNpbmcsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZpbmVBcnQsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZvcmdlcnksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLldyaXRpbmcsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlNpbmdpbmcsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBhaW50aW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5QaG90b2dyYXBoeSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuU2N1bHB0aW5nLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGFpbnNhdywgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkhlYXZ5V2VhcG9ucywgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZsYW1ldGhyb3dlciwgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1hY2hpbmVHdW4sIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5TdWJtYWNoaW5lR3VuLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQWlyY3JhZnQsIDk1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb2F0LCA1MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXN0cm9ub215LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5CaW9sb2d5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb3RhbnksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNoZW1pc3RyeSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ3J5cHRvZ3JhcGh5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbmdpbmVlcmluZywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRm9yZW5zaWNzLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5HZW9sb2d5LCAzMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTWF0aGVtYXRpY3MsIDUwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5NZXRlb3JvbG9neSwgMzAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBoYXJtYWN5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5QaHlzaWNzLCAzMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuWm9vbG9neSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgXSk7XHJcbiAgICBlbHlzaXVtLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBlbHlzaXVtLmNhcmQuYWRkQ2FyZFRhZyhcIk0zM1wiKTtcclxufVxyXG5leHBvcnRzLnNldHVwRWx5c2l1bSA9IHNldHVwRWx5c2l1bTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWx5c2l1bS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwRXJpY2EgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBFcmljYSgpIHtcclxuICAgIC8vIFByZXBhcmUgdGhlIGNoYXJhY3RlciBvYmplY3QuXHJcbiAgICBjb25zdCBlcmljYSA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5FcmljYSk7XHJcbiAgICBlcmljYS5jb3JlLm5hbWUgPSBcIkVyaWNhXCI7XHJcbiAgICBlcmljYS5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMS9FcmljYS5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIGVyaWNhLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoOCwgOCwgMTQsIDEyLCAxNCwgMjApO1xyXG4gICAgZXJpY2EuZFN0YXRzLnBiID0gY29uc3RhbnRzXzEuUHJvZi5nZXQoMyk7XHJcbiAgICAvLyBTZXR1cCBEJkQgc2tpbGxzLlxyXG4gICAgZXJpY2EuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5QZXJjZXB0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgZXJpY2EuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5JbnNpZ2h0LCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIGVyaWNhLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuUGVyZm9ybWFuY2UsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgZXJpY2EuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5fQUxMLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuSGFsZik7XHJcbiAgICBlcmljYS5kU0tpbGxzLmZpbmFsaXplU2tpbGxzKCk7XHJcbiAgICBlcmljYS5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgZXJpY2EuY2FyZC5hZGRDYXJkVGFnKFwiRjUwXCIpO1xyXG4gICAgZXJpY2Eub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IHRydWU7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEVyaWNhID0gc2V0dXBFcmljYTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJpY2EuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEV6ZWxsID0gdm9pZCAwO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL2NvbnN0YW50c1wiKTtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwRXplbGwoKSB7XHJcbiAgICBjb25zdCBlemVsbCA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5FemVsbCk7XHJcbiAgICBlemVsbC5jb3JlLm5hbWUgPSBcIkV6ZWxsXCI7XHJcbiAgICBlemVsbC5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMS9FemVsbC5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIGV6ZWxsLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoOCwgMjAsIDE0LCAxMCwgMTMsIDE2KTtcclxuICAgIGV6ZWxsLmRTdGF0cy5wYiA9IGNvbnN0YW50c18xLlByb2YuZ2V0KDQpO1xyXG4gICAgZXplbGwub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IHRydWU7XHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuUmVjbHVzZSwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuSnVkZ2luZywgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuRGlzdGFudCwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWdbXCJHdWlsdC1yaWRkZW5cIl0sIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLktpbmQsIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlF1aWV0LCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5QZXNzaW1pc3QsIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnW1wiTmlnaHQgb3dsXCJdLCAxXSxcclxuICAgIGV6ZWxsLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBlemVsbC5jYXJkLmFkZENhcmRUYWcoXCJNMzJcIik7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEV6ZWxsID0gc2V0dXBFemVsbDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXplbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEdlbmVmZSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwR2VuZWZlKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5HZW5lZmUpO1xyXG4gICAgYy5jb3JlLm5hbWUgPSBcIkdlbmVmZVwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMS9HZW5lZmUucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIkYyOFwiKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYD8/P2A7XHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQ29uY2lsaWF0b3J5LCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5BYnVzaXZlLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5Bc2NldGljLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5EZXByZXNzaXZlLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5JbnNlY3VyZSwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuSHlwb2NyaXRlLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5KZWFsb3VzLCAxXSxcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBHZW5lZmUgPSBzZXR1cEdlbmVmZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZWZlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBIYXYgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEhhdigpIHtcclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuSGF2KTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJIYXZcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvSGF2LnBuZ1wiO1xyXG4gICAgYy5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJNNDdcIik7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGA/Pz9gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEhhdiA9IHNldHVwSGF2O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEhpbmEgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IEFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9BY3Rpb25cIik7XHJcbmNvbnN0IFdyYXBfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9hY3Rpb24vV3JhcFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5jb25zdCBNb3JhbGVfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9Nb3JhbGVcIik7XHJcbmZ1bmN0aW9uIHNldHVwSGluYSgpIHtcclxuICAgIC8vIFByZXBhcmUgdGhlIGNoYXJhY3RlciBvYmplY3QuXHJcbiAgICBjb25zdCBoaW5hID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkhpbmEpO1xyXG4gICAgLy8gU2V0dXAgY29yZSBpbmZvLlxyXG4gICAgaGluYS5jb3JlLm5hbWUgPSBcIkhpbmFcIjtcclxuICAgIGhpbmEuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvSGluYS5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIGhpbmEuZFN0YXRzLmluaXRpYWxpemVTdGF0cygxMywgMjAsIDI0LCAxOCwgMTQsIDIwKTtcclxuICAgIGhpbmEuZFN0YXRzLnBiID0gY29uc3RhbnRzXzEuUHJvZi5nZXQoNik7XHJcbiAgICAvLyBTZXR1cCBEJkQgc2tpbGxzLlxyXG4gICAgaGluYS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkludmVzdGlnYXRpb24sIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mLCA1KTtcclxuICAgIGhpbmEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5NZWRpY2luZSwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGhpbmEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5BdGhsZXRpY3MsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgaGluYS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkhpc3RvcnksIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgaGluYS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcmNlcHRpb24sIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQsIDUpO1xyXG4gICAgaGluYS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlNsaWdodE9mSGFuZCwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGhpbmEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TdGVhbHRoLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIGhpbmEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TdXJ2aXZhbCwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICBoaW5hLm9wZXJhdG9yLm1vcmFsZSA9IE1vcmFsZV8xLk1vcmFsZS5EaXNtYWw7XHJcbiAgICBoaW5hLmRTS2lsbHMuZmluYWxpemVTa2lsbHMoKTtcclxuICAgIGhpbmEub3BlcmF0b3IuZmF0aWd1ZSA9IDIwO1xyXG4gICAgaGluYS5vcGVyYXRvci5yYXRpbmdzID0ge1xyXG4gICAgICAgIGRhbWFnZTogXCJTXCIsXHJcbiAgICAgICAgY29udHJvbDogXCJTK1wiLFxyXG4gICAgICAgIHN1cnZpdmFsOiBcIlNcIixcclxuICAgICAgICBwcm86IFwiU1NcIixcclxuICAgIH07XHJcbiAgICBoaW5hLm9wZXJhdG9yLmFkZE5vdGFibGVTdHVmZihcIk1ham9yIERhbWFnZSBUeXBlXCIsIFwiTWFnaWNhbCBCbHVkZ2VvbmluZ1wiKTtcclxuICAgIGhpbmEub3BlcmF0b3IuYWRkTm90YWJsZVN0dWZmKFwiU3Ryb25nIGFnYWluc3RcIiwgXCJBYmVycmF0aW9ucywgTWFjaGluZXMsIEh1Z2UgY3JlYXR1cmVzXCIpO1xyXG4gICAgaGluYS5vcGVyYXRvci5hZGROb3RhYmxlU3R1ZmYoXCJXZWFrIGFnYWluc3RcIiwgXCJIdW1hbm9pZHNcIik7XHJcbiAgICBoaW5hLm9wZXJhdG9yLmFkZE5vdGFibGVTdHVmZihcIkNvbWJhdCBFeHBlcmllbmNlXCIsIFwiUyBHcmFkZSAoNyB5ZWFycylcIik7XHJcbiAgICBoaW5hLm9wZXJhdG9yLnNldENoZW1pc3RyeVdpdGgobnBjSW5kZXhfMS5OcGNJRC5EYXduLCAyMSwgXCJBbHRob3VnaCB0aGV5IGRvbid0IGludGVyYWN0IHRoYXQgbXVjaCwgaW4gaGVyIG1pbmQsIEhpbmEgdmlydHVhbGx5IHNlZXMgRGF3biBhcyBhIG1vdGhlci5cIik7XHJcbiAgICBoaW5hLm9wZXJhdG9yLnNldENoZW1pc3RyeVdpdGgobnBjSW5kZXhfMS5OcGNJRC5FbHlzaXVtLCAxNywgXCJUaGUgb25seSBvbmUgaW4gdGhlIHZpbGxhZ2Ugd2hvIHRydWx5IGtub3dzIGhlciAtIGlkZW50aXR5LCBwYXN0LCBuYXR1cmUsIGV2ZXJ5dGhpbmcuLi5cIik7XHJcbiAgICBoaW5hLm9wZXJhdG9yLnNldENoZW1pc3RyeVdpdGgobnBjSW5kZXhfMS5OcGNJRC5Jb25hLCAxMiwgXCJGb3Igc29tZSByZWFzb24sIEhpbmEgdHJlYXRzIGhlciBhcyB0aG91Z2ggc2hlIHdlcmUgaGVyIGxpdHRsZSBzaXN0ZXIuXCIpO1xyXG4gICAgaGluYS5vcGVyYXRvci5lcmEgPSBjb25zdGFudHNfMS5FcmEuRnV0dXJlO1xyXG4gICAgaGluYS5vcGVyYXRvci5wcm9mZXNzaW9ucyA9IFtcIkJpb25pYyBUYW5rXCIsIFwiU3R1ZGVudCAvIExhYm9yZXJcIl07XHJcbiAgICAvLyBDYW4gaGF2ZSBvcGluaW9ucy5cclxuICAgIGhpbmEub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IHRydWU7XHJcbiAgICAvLyBDYXJkIGluZm9ybWF0aW9uLlxyXG4gICAgaGluYS5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgaGluYS5jYXJkLmFkZENhcmRUYWcoXCJGMjEgKDE0KVwiKTtcclxuICAgIGhpbmEuY2FyZC5hZGRDYXJkVGFnKFwiRnJvbSB8IElubm92YXRpb24gLyBSdWluIC8gTWF0ZXJpYSAvIERldm90aW9uXCIpO1xyXG4gICAgaGluYS5jYXJkLmFkZENhcmRUYWcoXCJSYWNlIHwgSHVtYW4gPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPihDeWJlcnB1bmspPC9zcGFuPlwiKTtcclxuICAgIGhpbmEuY2FyZC5hZGRDYXJkVGFnKFwiT1MgfCBCZXJzZXJrIE1LNVwiKTtcclxuICAgIGhpbmEuY2FyZC5hZGRDYXJkVGFnKFwiTXV0YXRpb24gfCBHcmVhdGVyIEdyZWVuXCIpO1xyXG4gICAgaGluYS5jYXJkLmFkZENhcmRUYWcoXCI8c3BhbiBjbGFzcz0ndmVyYm9zZSc+UHJvamVjdCBEaWFibG8gfDwvc3Bhbj4gIzQxXCIpO1xyXG4gICAgaGluYS5jYXJkLmFkZENhcmRUYWcoXCJFZGdlZGFuY2VyIDxzcGFuIGNsYXNzPSd2ZXJib3NlJz4oQ3VsdGl2YXRpb24pPC9zcGFuPlwiKTtcclxuICAgIGhpbmEuY2FyZC5hZGRDYXJkVGFnKFwiQm9uZHNtaXRoIDxzcGFuIGNsYXNzPSd2ZXJib3NlJz4oUHJlc2VydmF0aW9uKTwvc3Bhbj5cIik7XHJcbiAgICBoaW5hLmNhcmQuYWRkQ2FyZFRhZyhcIkNoYW1waW9uIG9mIFJ1aW5cIik7XHJcbiAgICBoaW5hLmNhcmQuYWRkQ2FyZFRhZyhcIkNoYW1iZXIgb2YgR3VpbHRcIik7XHJcbiAgICBoaW5hLmNhcmQuYWRkQ2FyZFRhZyhcIkNsYXNzIHwgQmFyYmFyaWFuICZ0aW1lczsgUm9ndWVcIik7XHJcbiAgICBoaW5hLmNhcmQuYWRkQ2FyZFRhZyhcIkNSIHwgMjNcIik7XHJcbiAgICBoaW5hLmNhcmQuc3VtbWFyeSA9ICgpID0+IFwiPz8/XCI7XHJcbiAgICBoaW5hLmNhcmQucHJpbWFyeUltYWdlVGl0bGUgPSBcIlVyY2hpblwiO1xyXG4gICAgLy8gQ29DIFNraWxscyBpbmZvcm1hdGlvblxyXG4gICAgaGluYS5jU2tpbGxzLnNldFNraWxsVmFsdWVzKFtcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFjY291bnRpbmcsIDgwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BbnRocm9wb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFwcHJhaXNlLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BcmNoYWVvbG9neSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXJ0aWxsZXJ5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGFybSwgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ29tcHV0ZXJVc2UsIDEwMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGVtb2xpdGlvbnMsIDkwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5EaXNndWlzZSwgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGl2aW5nLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Ecml2ZUF1dG8sIDcwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbGVjdHJpY2FsUmVwYWlyLCA0MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRWxlY3Ryb25pY3MsIDUwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5GaXJzdEFpZCwgMzAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkh5cG5vc2lzLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5MYXcsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkxpYnJhcnlVc2UsIDIwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Mb2Nrc21pdGgsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1lY2hhbmljYWxSZXBhaXIsIDM1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Nb2Rlcm5NZWRpY2luZSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTmF0dXJhbFdvcmxkLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTmF2aWdhdGUsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5PY2N1bHQsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk9wZXJhdGVIZWF2eU1hY2hpbmVyeSwgNjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBzeWNob2FuYWx5c2lzLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5SZWFkTGlwcywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUmlkZSwgMTUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlRocm93LCAyMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQWN0aW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DYWxsaWdyYXBoeSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2FycGVudHJ5LCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ29va2luZywgMjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRhbmNpbmcsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZpbmVBcnQsIDIwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Gb3JnZXJ5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Xcml0aW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5TaW5naW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5QYWludGluZywgNzUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBob3RvZ3JhcGh5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5TY3VscHRpbmcsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNoYWluc2F3LCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuSGVhdnlXZWFwb25zLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRmxhbWV0aHJvd2VyLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTWFjaGluZUd1biwgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlN1Ym1hY2hpbmVHdW4sIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BaXJjcmFmdCwgMjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkJvYXQsIDMwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Bc3Ryb25vbXksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkJpb2xvZ3ksIDMwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb3RhbnksIDIwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGVtaXN0cnksIDUwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DcnlwdG9ncmFwaHksIDkwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbmdpbmVlcmluZywgNjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZvcmVuc2ljcywgMzAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkdlb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1hdGhlbWF0aWNzLCA4MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTWV0ZW9yb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBoYXJtYWN5LCAzMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUGh5c2ljcywgNjAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlpvb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgIF0pO1xyXG4gICAgaGluYS5jb21iYXQuc2V0U3BlZWQoY29uc3RhbnRzXzEuU3BlZWQuV2Fsa2luZywgNDApO1xyXG4gICAgaGluYS5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5TdHIsIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZik7XHJcbiAgICBoaW5hLmNvbWJhdC5zZXRTYXZlKGNvbnN0YW50c18xLkRTdGF0LkRleCwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mKTtcclxuICAgIGhpbmEuY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRDbGFzc0xldmVscyhjb25zdGFudHNfMS5BZHZlbnR1cmVyQ2xhc3MuQmFyYmFyaWFuLCA5KTtcclxuICAgIGhpbmEuY29tYmF0LmFkZENsYXNzTGV2ZWxzKGNvbnN0YW50c18xLkFkdmVudHVyZXJDbGFzcy5Sb2d1ZSwgOSk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRDbGFzc0xldmVscyhjb25zdGFudHNfMS5BZHZlbnR1cmVyQ2xhc3MuV2FybG9jaywgMik7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRBY0JvbnVzKDIpO1xyXG4gICAgaGluYS5jb21iYXQuYm9udXNIUCA9IDQ4OyAvLyBDeWJvcmcgLyBUb3VnaC5cclxuICAgIGhpbmEuY29tYmF0LmNvbXB1dGVIUCgpO1xyXG4gICAgaGluYS5jb21iYXQuc2V0U2Vuc2UoY29uc3RhbnRzXzEuU2Vuc2UuRGV2aWxTaWdodCwgMTIwKTtcclxuICAgIGhpbmEuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWMsIDUwKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZENvbmRpdGlvbkltbXVuaXR5KGNvbnN0YW50c18xLkNvbmRpdGlvbi5DaGFybWVkKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZENvbmRpdGlvbkltbXVuaXR5KGNvbnN0YW50c18xLkNvbmRpdGlvbi5GcmlnaHRlbmVkKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYDxwPjxzdHJvbmc+PGVtPkJpb25pYyBCcmFpbi48L2VtPjwvc3Ryb25nPiBIaW5hIGlzIGFsd2F5cyBhd2FyZSBvZiBoZXIgXHJcbiAgICAgICAgZGlyZWN0aW9ucyBhbmQgYWx3YXlzIHJlbWVtYmVycyBhbnl0aGluZyBzaGUncyBzZWVuIG9yIGhlYXJkLCBldmVuIHdoZW5cclxuICAgICAgICB1bmNvbnNjaW91cyBvciBzbGVlcGluZy4gU2hlIGdhaW5zIGEgKzUgdG8gcGVyY2VwdGlvbiBhbmQgaW52ZXN0aWdhdGlvbiBcclxuICAgICAgICBzY29yZXMsIGFuZCBjYW4gdW5kZXJzdGFuZCBhIHBlcnNvbidzIHdvcmRzIGJ5IGxpcC1yZWFkaW5nLCBhc3N1bWluZyB0aGVcclxuICAgICAgICBsYW5ndWFnZSBpcyBvbmUgc2hlIGtub3dzLjwvcD5gKSk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsIGA8cD48c3Ryb25nPjxlbT5DaGFtYmVyIG9mIEd1aWx0LjwvZW0+PC9zdHJvbmc+IEJlaW5nIHBvc3Nlc3NlZCBieSBQZW5hbmNlLFxyXG4gICAgICAgIEhpbmEgY2FuIHRlbGVwYXRoaWNhbGx5IGdhdWdlIGFuZCBzZWxlY3RpdmVseSBpbmZsdWVuY2UgYSBjcmVhdHVyZSdzXHJcbiAgICAgICAgbWVudGFsIHN0YXRlLCBhcyBsb25nIGFzIHRoZSBjcmVhdHVyZSBpcyB3aXRoaW4gMSBtaWxlIGFuZCBhd2FyZSBvZiBoZXIgXHJcbiAgICAgICAgKGNvbnNlcXVlbnRseSBzdWNoIGEgY3JlYXR1cmUgY291bGQgbmV2ZXIgYmUgaGlkZGVuIGZyb20gaGVyKS5cclxuICAgICAgICBCZWNhdXNlIG9mIHRoZSBzYW1lIHBvc3Nlc3Npb24sIHNoZSBjYW5ub3QgZHJlYW0gYW5kIGdhaW5zIGFkdmFudGFnZSBvbiBXaXMgc2F2aW5nIFxyXG4gICAgICAgIHRocm93cy48L3A+YCkpO1xyXG4gICAgaGluYS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PHN0cm9uZz48ZW0+Qm9uZHNtaXRoICZ0aW1lczsgRWRnZWRhbmNlciBIeWJyaWQuPC9lbT48L3N0cm9uZz4gSGluYSBcclxuICAgICAgICBpcyBib25kZWQgdG8gYSBDdWx0aXZhdGlvbiBTcHJlbiBlbGV2YXRlZCB0byBhIEdvZCBTcHJlbiBieSB0aGUgc3BsaW50ZXJcclxuICAgICAgICBvZiBQcmVzZXJ2YXRpb24uIE5vdGFibHksIGFzIHN1Y2ggc2hlIGNhbiBkcmF3IGludmVzdGl0dXJlIGZyb20gbGlmZSBsaWdodCBcclxuICAgICAgICAocmVzcGlyYXRpb24pIGFuZCBpcyBhIGZ1bGwtYm9ybiBpbiB0aGUgcHJlc2Vuc2Ugb2YgUHJlc2VydmF0aW9uJ3MgbWlzdHMuICBcclxuICAgICAgICA8L3A+YCkpO1xyXG4gICAgaGluYS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PHN0cm9uZz48ZW0+TW9yYWxlOiBEaXNtYWwuPC9lbT48L3N0cm9uZz4gRHVlIHRvIGhlciBsb3cgbW9yYWxlLCBcclxuICAgICAgICBIaW5hJ3MgcHJvZmljaWVuY3kgYm9udXMgZGVjcmVhc2VzIGJ5IDEgYW5kIHNoZSBnYWlucyBhIC0xIHRvIGFsbCBoZXIgXHJcbiAgICAgICAgc2tpbGwgbW9kaWZpZXJzIChpbmNsdWRlZCBpbiB0aGUgc2hlZXQpLiBcclxuICAgICAgICA8L3A+YCkpO1xyXG4gICAgaGluYS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5NdWx0aWF0dGFjay48L2VtPjwvc3Ryb25nPiBBcyBhbiBhY3Rpb24gSGluYSBtYWtlcyBvbmUgYmxhY2sgXHJcbiAgICAgICAga25pZmUgYXR0YWNrIGFuZCB0d28gdGVsZWtpbmV0aWMgc2xhbXMuPC9wPmApKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+QmxhY2sgS25pZmUuPC9lbT48L3N0cm9uZz4gTWVsZWUgV2VhcG9uIEF0dGFjazogJHsoMCwgV3JhcF8xLndyYXBSb2xsKShoaW5hLkRFWCArIGhpbmEuUHJvZiArIDMpfSwgXHJcbiAgICAgICAgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzYsIERpY2VfMS5ENl0sIFtoaW5hLkRFWCArIDYsIERpY2VfMS5EMV1dKX0gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBpZXJjaW5nKX0gZGFtYWdlLiBBIHRhcmdldCBoaXQgYnkgdGhpcyBhdHRhY2sgXHJcbiAgICAgICAgY2FuJ3QgcmVnZW5lcmF0ZSBIUCB0aWxsIHRoZSBlbmQgb2YgdGhlaXIgbmV4dCB0dXJuIGFuZCBpbnN0YW50bHkgYnJlYWtzIFxyXG4gICAgICAgIGNvbmNlbnRyYXRpb24gb24gYSBzcGVsbCwgY2F1c2luZyB0aGUgdGFyZ2V0IG9mIHRoZSBzcGVsbCB0byB0YWtlIG5lY3JvdGljXHJcbiAgICAgICAgKHZvaWQpIGRhbWFnZSBlcXVhbCB0byAxMCB0aW1lcyB0aGUgc3BlbGwgc2xvdCBsZXZlbC4gSW4gSGluYSdzIGhhbmRzLCBcclxuICAgICAgICB0aGlzIHdlYXBvbiBhbHNvIGJlaGF2ZXMgYXMgYSB2b3JwYWwgYmxhZGUuIE9uIGEgY3JpdGljYWwgaGl0LCBpdCBpbnN0YW50bHkga2lsbHMgdGFyZ2V0cyBcclxuICAgICAgICB3aXRob3V0IGxlZ2VuZGFyeSByZXNpc3RhbmNlcyBhbmQgZGVhbHMgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzE4LCBEaWNlXzEuRDZdLCBbaGluYS5ERVggKyA2LCBEaWNlXzEuRDFdXSl9XHJcbiAgICAgICAgdG8gdGFyZ2V0cyB3aXRoIGxlZ2VuZGFyeSByZXNpc3RhbmNlcy48L3A+YCkpO1xyXG4gICAgaGluYS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5UZWxla2luZXRpYyBzbGFtLjwvZW0+PC9zdHJvbmc+IFJhbmdlZCBBdHRhY2s6IEhpbmEgdGFyZ2V0c1xyXG4gICAgICAgIGEgcG9pbnQgb24gdGhlIGdyb3VuZCB3aXRoaW4gNjAwIGZ0IG9mIGhlciBhbmQgc2xhbXMgYSBoZWF2eSBvYmplY3QgXHJcbiAgICAgICAgdGVsZWtpbmV0aWNhbGx5IG9uIHRoYXQgc3BvdC4gVGFyZ2V0cyB3aXRoaW4gNSBmdCBvZiB0aGUgcG9pbnQgbXVzdCBtYWtlXHJcbiAgICAgICAgYSBEQyAke2hpbmEuZGMoY29uc3RhbnRzXzEuRFN0YXQuQ29uKX0gREVYIHNhdmUgb3IgdGFrZSAkeygwLCBXcmFwXzEud3JhcFJvbGwpKFtbMTAsIERpY2VfMS5EMTJdLCBbaGluYS5DT04gKyAzLCBEaWNlXzEuRDFdXSl9IFxyXG4gICAgICAgICR7KDAsIFdyYXBfMS53cmFwRGFtYWdlVHlwZSkoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5CbHVkZ2VvbmluZyl9IChtYWdpY2FsKSBkYW1hZ2UuIE9uIGEgc3VjY2Vzc2Z1bCBzYXZlIHRoZXkgdGFrZSBoYWxmIGRhbWFnZS5cclxuICAgICAgICBUaGlzIGF0dGFjayBkZWFscyB0cmlwbGUgZGFtYWdlIHRvIHN0cnVjdHVyZXMuPC9wPmApKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+T3ZlcndoZWxtaW5nIFJlZ3JldHMuPC9lbT48L3N0cm9uZz4gSGluYSBpbmZ1c2VzIGEgY3JlYXR1cmUncyBcclxuICAgICAgICBzb3VsIHdpdGggYW4gaW50ZW5zZSBmb2N1c2VkIG9uc2xhdWdodCBvZiBndWlsdC4gVGhlIHRhcmdldCBtYWtlcyBhIERDIFxyXG4gICAgICAgICR7aGluYS5nZXRTa2lsbE1vZChjb25zdGFudHNfMS5EU2tpbGwuUGVyc3Vhc2lvbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpWzBdICsgMTN9IENIQSBzYXZlLlxyXG4gICAgICAgIE9uIGZhaWx1cmUgYSBub24taG9zdGlsZSBjcmVhdHVyZSBpcyBjaGFybWVkIGJ5IGhlciB3aGlsZSBhIGhvc3RpbGUgY3JlYXR1cmVcclxuICAgICAgICBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscy4gQWxzbywgdGhleSBjYW4ndCB0YWtlIG9wcG9ydHVuaXR5IGF0dGFja3MgYWdhaW5zdCBcclxuICAgICAgICB0YXJnZXRzIG90aGVyIHRoYW4gaGVyLiBBbnkgb3RoZXIgZWZmZWN0cyBjaGFybWluZyBvciBmcmVpZ2h0ZW5pbmcgdGhlIFxyXG4gICAgICAgIHRhcmdldCBlbmQgaW1tZWRpYXRlbHkgYW5kIGNvbmNlbnRyYXRpb24gaXMgYnJva2VuLiBJZiB0aGUgZmFpbHVyZSBpcyBieSBcclxuICAgICAgICBhIG1hcmdpbiBvZiAxNSBvciBtb3JlLCB0aGV5IGFyZSBhbHNvIHBhcmFseXplZCBieSBndWlsdC4gVGhlc2UgZWZmZWN0cyBsYXN0IFxyXG4gICAgICAgIHVudGlsIGEgbWludXRlLCBvciB1bnRpbCBIaW5hIGxpZnRzIHRoZSBlZmZlY3QuIFRoaXMgZWZmZWN0IGNhbiBvbmx5IFxyXG4gICAgICAgIHRhcmdldCBjcmVhdHVyZXMgYXdhcmUgb2YgaGVyLjwvcD5gKSk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkFjdGlvbiwgYDxwPjxzdHJvbmc+PGVtPkVkZ2VkYW5jZXIgKFByb2dyZXNzaW9uKS48L2VtPjwvc3Ryb25nPiAoJHtoaW5hLlByb2Z9IC8gTFIpIFxyXG4gICAgICAgIEhpbmEgaGVhbHMgYSBjcmVhdHVyZSBzaGUgdG91Y2hlcyBieSAke2hpbmEuQ09OICogMTB9LiBUaGlzIGVmZmVjdCBlbmRzIFxyXG4gICAgICAgIGJsaW5kZXNzLCBkZWFmbmVzcyBhbmQgYW55IGRpc2Vhc2VzIGFmZmxpY3RpbmcgdGhlIHRhcmdldCBhbmQgcmVzdG9yZXMgXHJcbiAgICAgICAgbWlzc2luZyBib2R5IHBhcnRzLjwvcD5gKSk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+QmVyc2VyayBNSzUuPC9lbT48L3N0cm9uZz4gKDQgLyBMUikgQnkgYWN0aXZhdGluZyBoZXIgbmV1cmFsIE9TLCBcclxuICAgICAgICBIaW5hIGRyYXN0aWNhbGx5IGluY3JlYXNlcyBoZXIgZGVmZW5zaXZlIGNhcGFiaWxpdGllcy4gRm9yIHRoZSBkdXJhdGlvbiBcclxuICAgICAgICBvZiAxIG1pbnV0ZSwgc2hlIGhhcyByZXNpc3RhbmNlIHRvIGFsbCBkYW1hZ2UsIGFkdmFudGFnZSBvbiBTVFIgY2hlY2tzXHJcbiAgICAgICAgYW5kIHNhdmluZyB0aHJvd3MgYW5kIGhlciAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGh5c2ljYWwpfSBkYW1hZ2UgXHJcbiAgICAgICAgcGVyIGF0dGFjayBpcyBpbmNyZWFzZWQgYnkgMy48L3A+YCkpO1xyXG4gICAgaGluYS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5Cb251c0FjdGlvbiwgYDxwPjxzdHJvbmc+PGVtPkVkZ2VkYW5jZXIgKEFicmFzaW9uKS48L2VtPjwvc3Ryb25nPiBIaW5hIGNhbiB1c2UgaGVyIGJvbnVzXHJcbiAgICAgICAgYWN0aW9uIHRvIHRha2UgdGhlIGRvZGdlLCBkaXNlbmdhZ2Ugb3IgaGlkZSBhY3Rpb24uIFVudGlsIHRoZSBzdGFydCBvZiBoZXJcclxuICAgICAgICBuZXh0IHR1cm4gc2hlIGlzIG5vdCBhZmZlY3RlZCBieSBkaWZmaWN1bHQgdGVycmFpbiwgaGFzIGFkdmFudGFnZSBvbiBERVggXHJcbiAgICAgICAgc2F2aW5nIHRocm93cywgaXMgaW1tdW5lIHRvIGJlaW5nIGdyYXBwbGVkIGFuZCBoZXIgbW92ZW1lbnQgc3BlZWQgaW5jcmVhc2VzIGJ5IDE1ZnQuPC9wPmApKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQm9udXNBY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5UZWxla2luZXRpYyBsYXNoaW5nLjwvZW0+PC9zdHJvbmc+IEhpbmEgYXR0ZW1wdHMgdG8gXHJcbiAgICAgICAgdGVsZWtpbmV0aWNhbGx5IG1vdmUgY3JlYXR1cmVzIGFyb3VuZC4gU2hlIGNhbiBlaXRoZXIgdGFyZ2V0IHVwdG8gNiBcclxuICAgICAgICBjcmVhdHVyZXMsIG1vdmluZyBlYWNoIDEwZnQgaW4gYW55IGRpcmVjdGlvbiAob24gY29sbGlzaW9uIHRoZXkgdGFrZSBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcFJvbGwpKERpY2VfMS5ENil9ICR7KDAsIFdyYXBfMS53cmFwRGFtYWdlVHlwZSkoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5CbHVkZ2VvbmluZyl9IGRhbWFnZSkgXHJcbiAgICAgICAgc2hvdWxkIHRoZXkgZmFpbCBhIERDICR7aGluYS5kYyhjb25zdGFudHNfMS5EU3RhdC5Db24pICsgaGluYS5Qcm9mfSBTVFIgc2F2ZSwgb3IgdGFyZ2V0IG9uZVxyXG4gICAgICAgIGNyZWF0dXJlIGFuZCBtb3ZlIGl0IHVwdG8gMTAwZnQgKCR7KDAsIFdyYXBfMS53cmFwUm9sbCkoWzEwLCBEaWNlXzEuRDZdKX0gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkJsdWRnZW9uaW5nKX0gZGFtYWdlIG9uIGNvbGxpc2lvbikgc2hvdWxkIGl0XHJcbiAgICAgICAgZmFpbCBhIERDICR7aGluYS5kYyhjb25zdGFudHNfMS5EU3RhdC5Db24pICsgaGluYS5Qcm9mICsgMTB9IFNUUiBzYXZlLjwvcD5gKSk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+RmxhcmUgQWx1bWluaXVtLjwvZW0+PC9zdHJvbmc+IEhpbmEgaGVtYWxsdXJnaWNhbGx5IGJ1cm5zIFxyXG4gICAgICAgIEFsdW1pbml1bSB0byBudWxsaWZ5IGFsbCBpbnZlc3RpdHVyZSBpbiBoZXIgc3lzdGVtLiBTaGUgbG9vc2VzIGFjY2VzcyBcclxuICAgICAgICB0byBhbGwgaGVyIG5vbi1jeWJlcndhcmUgYWJpbGl0aWVzIChpbmNsdWRpbmcgcmVzaXN0YW5jZSB0byBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpYyl9IGRhbWFnZSBhbmQgY29uZGl0aW9uIGltbXVuaXRpZXMpIFxyXG4gICAgICAgIGFuZCBoZXIgbWF4IEhQIGRyb3BzIHRvIDIyLiBTaGUgY2FuIG5vIGxvbmdlciBiZSB0YXJnZXRlZCBieSBzcGVsbHMgYW5kXHJcbiAgICAgICAgZG9lc24ndCBzdWZmZXIgYW55IGVmZmVjdHMgZnJvbSBhbnkgbWFnaWMgaXRlbXMuPC9wPmApKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uUmVhY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5TaWRlc3RlcC48L2VtPjwvc3Ryb25nPiBIaW5hIGNhbiBoYWx2ZSB0aGUgZGFtYWdlIHNoZSBcclxuICAgICAgICB0YWtlcyBvbiBhIGhpdCBmcm9tIGEgc291cmNlIHRoYXQgc2hlIGNhbiBzZWUuPC9wPmApKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uUmVhY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5QYXJyeS48L2VtPjwvc3Ryb25nPiBIaW5hIGdhaW5zIGEgKyR7aGluYS5Qcm9mfSB0byBoZXIgQUNcclxuICAgICAgICBhZ2FpbnN0IGEgaGl0IGZyb20gYSB0YXJnZXQgc2hlIGNhbiBzZWUuPC9wPmApKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uUmVhY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5SaXBvc3RlLjwvZW0+PC9zdHJvbmc+IEhpbmEgaW1tZWRpYXRlbHkgbWFrZXMgb25lIGF0dGFjayBcclxuICAgICAgICB3aXRoIGhlciBrbmlmZSBhZ2FpbnN0IGEgdGFyZ2V0IHdpdGhpbiA1IGZ0IG9mIGhlciB3aG8gYXR0ZW1wdHMgdG8gaGl0IFxyXG4gICAgICAgIGhlciB3aXRoIGFuIGF0dGFjayBhbmQgbWlzc2VzLjwvcD5gKSk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlJlYWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+TWFnZSBzbGF5ZXIuPC9lbT48L3N0cm9uZz4gSGluYSBpbW1lZGlhdGVseSBtYWtlcyBvbmUgXHJcbiAgICAgICAgYXR0YWNrIHdpdGggaGVyIGtuaWZlIGFnYWluc3QgYSB0YXJnZXQgd2hvIGNhc3RzIGEgc3BlbGwgd2l0aGluIDUgZnQgb2YgXHJcbiAgICAgICAgaGVyLjwvcD5gKSk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkxlZ2VuZGFyeUFjdGlvbiwgYDxwPkhpbmEgaGFzIHRocmVlIGxlZ2VuZGFyeSBhY3Rpb25zLjwvcD5gKSk7XHJcbiAgICBoaW5hLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkxlZ2VuZGFyeUFjdGlvbiwgYDxwPjxwPjxzdHJvbmc+PGVtPlRlbGVraW5ldGljIGxhc2hpbmcuPC9lbT48L3N0cm9uZz4gKENvc3Q6IDIpIEhpbmEgdXNlcyBoZXIgdGVsZWtpbmV0aWMgbGFzaGluZyBhcyBhIGxlZ2VuZGFyeSBhY3Rpb24uPC9wPmApKTtcclxuICAgIGhpbmEuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uTGVnZW5kYXJ5QWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+VGVsZWtpbmV0aWMgc2xhbS48L2VtPjwvc3Ryb25nPiAoQ29zdDogMSkgSGluYSB1c2VzIGhlciB0ZWxla2luZXRpYyBzbGFtIGFzIGEgbGVnZW5kYXJ5IGFjdGlvbi48L3A+YCkpO1xyXG4gICAgaGluYS5zaGVldC5jciA9IG5ldyBjb25zdGFudHNfMS5DUlZhbHVlKDIzKTtcclxuICAgIGhpbmEub3BlcmF0b3IuYWRkTm90YWJsZVN0dWZmKFwiQ2hhbGxlbmdlIFJhdGluZ1wiLCBcIjIzXCIpO1xyXG4gICAgaGluYS5zaGVldC5zaXplID0gY29uc3RhbnRzXzEuQ3JlYXR1cmVTaXplLk1lZGl1bTtcclxuICAgIGhpbmEuc2hlZXQuc3VidGl0bGUgPSBcIiBIdW1hbm9pZCAoQ3liZXJwdW5rKSwgQ2hhb3RpYyBHb29kXCI7XHJcbiAgICBoaW5hLnNoZWV0LmFjRGVzYyA9IFwiKFN1YmRlcm1hbCBBcm1vciBNSzQpXCI7XHJcbiAgICBoaW5hLnNoZWV0LmNhdGVnb3J5ID0gXCJodW1hblwiO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBIaW5hID0gc2V0dXBIaW5hO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oaW5hLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBJbmdyaWQgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEluZ3JpZCgpIHtcclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuSW5ncmlkKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJJbmdyaWRcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvSW5ncmlkLnBuZ1wiO1xyXG4gICAgYy5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJGMjRcIik7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGA/Pz9gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEluZ3JpZCA9IHNldHVwSW5ncmlkO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmdyaWQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cElvbmEgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBJb25hKCkge1xyXG4gICAgLy8gUHJlcGFyZSB0aGUgY2hhcmFjdGVyIG9iamVjdC5cclxuICAgIGNvbnN0IGlvbmEgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuSW9uYSk7XHJcbiAgICBpb25hLmNvcmUubmFtZSA9IFwiSW9uYVwiO1xyXG4gICAgaW9uYS5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMS9Jb25hLnBuZ1wiO1xyXG4gICAgLy8gU2V0dXAgRCZEIHN0YXRzLlxyXG4gICAgaW9uYS5kU3RhdHMuaW5pdGlhbGl6ZVN0YXRzKDgsIDEwLCAxNiwgMTcsIDExLCAxMik7XHJcbiAgICBpb25hLmRTdGF0cy5wYiA9IGNvbnN0YW50c18xLlByb2YuZ2V0KDIpO1xyXG4gICAgLy8gU2V0dXAgRCZEIHNraWxscy5cclxuICAgIGlvbmEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5BcmNhbmEsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICBpb25hLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuSGlzdG9yeSwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGlvbmEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5JbnZlc3RpZ2F0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgaW9uYS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLk5hdHVyZSwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGlvbmEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5QZXJjZXB0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgaW9uYS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlJlbGlnaW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgaW9uYS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlN0ZWFsdGgsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICBpb25hLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuU3Vydml2YWwsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICBpb25hLmRTS2lsbHMuZmluYWxpemVTa2lsbHMoKTtcclxuICAgIGlvbmEub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IHRydWU7XHJcbiAgICBpb25hLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBpb25hLmNhcmQuYWRkQ2FyZFRhZyhcIkYxM1wiKTtcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5TYW5ndWluZSwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuT3B0aW1pc3QsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlRydXN0aW5nLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5Tb2NpYWwsIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlBzeWNob3BhdGgsIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLk1vZGVzdCwgMV0sXHJcbn1cclxuZXhwb3J0cy5zZXR1cElvbmEgPSBzZXR1cElvbmE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlvbmEuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEpheWUgPSB2b2lkIDA7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IEFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9BY3Rpb25cIik7XHJcbmNvbnN0IFdyYXBfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9hY3Rpb24vV3JhcFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEpheWUoKSB7XHJcbiAgICAvLyBQcmVwYXJlIHRoZSBjaGFyYWN0ZXIgb2JqZWN0LlxyXG4gICAgY29uc3QgamF5ZSA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5KYXllKTtcclxuICAgIGpheWUuY29yZS5uYW1lID0gXCJKYXllXCI7XHJcbiAgICBqYXllLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMi9BcmMxL0pheWUucG5nXCI7XHJcbiAgICAvLyBTZXR1cCBEJkQgc3RhdHMuXHJcbiAgICBqYXllLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMTYsIDE4LCAxNiwgOCwgMTIsIDgpO1xyXG4gICAgamF5ZS5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg0KTtcclxuICAgIC8vIFNldHVwIEQmRCBza2lsbHMuXHJcbiAgICBqYXllLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuQWNyb2JhdGljcywgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGpheWUuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5BdGhsZXRpY3MsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICBqYXllLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuTmF0dXJlLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgamF5ZS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkludGltaWRhdGlvbiwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIGpheWUuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TdGVhbHRoLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIGpheWUuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TbGlnaHRPZkhhbmQsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgamF5ZS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlN1cnZpdmFsLCBjb25zdGFudHNfMS5TaG93biwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgamF5ZS5kU0tpbGxzLmZpbmFsaXplU2tpbGxzKCk7XHJcbiAgICAvLyBTZXR1cCBPcGluaW9ucy5cclxuICAgIGpheWUub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IHRydWU7XHJcbiAgICAvLyBTZXR1cCBjYXJkIHRhZ3MuXHJcbiAgICBqYXllLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBqYXllLmNhcmQuYWRkQ2FyZFRhZyhcIk0yNlwiKTtcclxuICAgIGpheWUuY2FyZC5hZGRDYXJkVGFnKGBSYWNlIHwgVXJzaW5lIDxzcGFuIGNsYXNzPSd2ZXJib3NlJz4oUG9sYXIpPC9zcGFuPmApO1xyXG4gICAgamF5ZS5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDVcIik7XHJcbiAgICBqYXllLmNhcmQuc3VtbWFyeSA9ICgpID0+IFwiPz8/XCI7XHJcbiAgICBqYXllLmNTa2lsbHMuc2V0U2tpbGxWYWx1ZXMoW1xyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQWNjb3VudGluZywgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFudGhyb3BvbG9neSwgMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFwcHJhaXNlLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXJjaGFlb2xvZ3ksIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BcnRpbGxlcnksIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGFybSwgMTUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Db21wdXRlclVzZSwgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRlbW9saXRpb25zLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGlzZ3Vpc2UsIDUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5EaXZpbmcsIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Ecml2ZUF1dG8sIDIwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRWxlY3RyaWNhbFJlcGFpciwgMTAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbGVjdHJvbmljcywgMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZpcnN0QWlkLCAzMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkh5cG5vc2lzLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTGF3LCA1LCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTGlicmFyeVVzZSwgMjAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Mb2Nrc21pdGgsIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5NZWNoYW5pY2FsUmVwYWlyLCAxMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1vZGVybk1lZGljaW5lLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTmF0dXJhbFdvcmxkLCA4NSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdmlnYXRlLCAxMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk9jY3VsdCwgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk9wZXJhdGVIZWF2eU1hY2hpbmVyeSwgMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBzeWNob2FuYWx5c2lzLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUmVhZExpcHMsIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5SaWRlLCAxNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlRocm93LCA4MCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFjdGluZywgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNhbGxpZ3JhcGh5LCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2FycGVudHJ5LCAxMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNvb2tpbmcsIDk1LCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGFuY2luZywgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZpbmVBcnQsIDUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Gb3JnZXJ5LCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuV3JpdGluZywgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlNpbmdpbmcsIDUsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5QYWludGluZywgNSwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBob3RvZ3JhcGh5LCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuU2N1bHB0aW5nLCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2hhaW5zYXcsIDEwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuSGVhdnlXZWFwb25zLCAxMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkZsYW1ldGhyb3dlciwgMTAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5NYWNoaW5lR3VuLCAxMCwgY29uc3RhbnRzXzEuSGlkZGVuXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlN1Ym1hY2hpbmVHdW4sIDEwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQWlyY3JhZnQsIDAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb2F0LCA1LCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXN0cm9ub215LCAwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQmlvbG9neSwgMzAsIGNvbnN0YW50c18xLkhpZGRlbl0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb3RhbnksIDIwLCBjb25zdGFudHNfMS5IaWRkZW5dLFxyXG4gICAgXSk7XHJcbiAgICBqYXllLmNvbWJhdC5hZGRDbGFzc0xldmVscyhjb25zdGFudHNfMS5BZHZlbnR1cmVyQ2xhc3MuUm9ndWUsIDUpO1xyXG4gICAgamF5ZS5jb21iYXQuYm9udXNIUCA9IDU7IC8vIE1lZGl1bSBzaXplZCBjcmVhdHVyZS5cclxuICAgIGpheWUuY29tYmF0LmNvbXB1dGVIUCgpO1xyXG4gICAgLy8gdG9kbzogbGluayB0aGVzZSB0d28gdG8gY2xhc3NcclxuICAgIGpheWUuY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuSW50KTtcclxuICAgIGpheWUuY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuRGV4KTtcclxuICAgIGpheWUuY29tYmF0LnNldFNwZWVkKGNvbnN0YW50c18xLlNwZWVkLldhbGtpbmcsIDMwKTtcclxuICAgIGpheWUuY29tYmF0LnNldFNlbnNlKGNvbnN0YW50c18xLlNlbnNlLkRhcmt2aXNpb24sIDYwKTtcclxuICAgIGpheWUuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkNvbGQsIDUwKTtcclxuICAgIGpheWUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYFxyXG4gICAgICAgIDxwPjxzdHJvbmc+PGVtPlBzaW9uaWMgS25pZmUuPC9lbT48L3N0cm9uZz4gVGhvdWdoIGhlIG5ldmVyIGxlYXJudCBob3csIEpheWUgc2VlbXMgdG8gaGF2ZSBmb3JtZWQgYSBcclxuICAgICAgICBjb2duaXRpdmUgYm9uZCB3aXRoIGhpcyBmYXZvcml0ZSBjb29raW5nIGtuaWZlLiBXZWFwb24gYXR0YWNrcyB3aXRoIGl0IGRlYWwgYWRkaXRpb25hbCBwc3ljaGljIGRhbWFnZVxyXG4gICAgICAgIGFuZCB0aGUga25pZmUgY2FuIGN1dCB0aHJvdWdoIG5vbi1zZW50aWVudCBtYXR0ZXIgcmF0aGVyIGVhc2lseSBpZiBKYXllIHdpbGxzIHNvLiBBbHNvLCBoZSBjYW4gdGhyb3cgdGhlXHJcbiAgICAgICAga25pZmUgcG9pbnQgZmlyc3QgYW5kIG1lbnRhbGx5IGNvbW1hbmQgaXQgdG8gcmV0dXJuIHRvIGhpcyBoYW5kIChhbHNvIHBvaW50IGZpcnN0IGlmIHBvc3NpYmxlKS4gVGhlIHJldHVyblxyXG4gICAgICAgIG9mIHRoZSBrbmlmZSBvYmV5cyB0aGUgY29uc2VydmF0aW9uIG9mIG1vbWVudHVtIGFuZCBzZWVtcyB0byBjYXJyeSBncmVhdCBpbmVydGlhIChtdWNoIG1vcmUgdGhhbiBpdHMgXHJcbiAgICAgICAgbW9tZW50dW0pLiBJdCB3b3VsZCB0YWtlIGEgREMgMjcgU3RyIGNoZWNrIG9yIDQwMCBrZ3Mgd3QuIGVxdWl2YWxlbnQgb2YgZm9yY2UgdG8ga2VlcCB0aGUga25pZmUgYW5kIEpheWVcclxuICAgICAgICBzZXBhcmF0ZSA8L3A+YCkpO1xyXG4gICAgamF5ZS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgXHJcbiAgICAgICAgPHA+PHN0cm9uZz48ZW0+RXhwZXJ0IEhhbmRzLjwvZW0+PC9zdHJvbmc+IEpheWUgaXMgZXh0cmVtZWx5IHNraWxsZWQgaW4gaGFuZGxpbmcgaGlzIGZhdm9yaXRlIGNvb2tpbmcga25pZmUuXHJcbiAgICAgICAgSGUgcGVyZm9ybXMgYXR0YWNrcyB3aXRoIGl0IHdpdGggZXhwZXJ0aXNlIGFuZCBjYW4gdXNlIGl0IHRvIHBhcnJ5IG1pbm9yIGJsb3dzLiBBbHNvLCBpZiBoaXMgb2ZmaGFuZCBpcyBcclxuICAgICAgICBmcmVlLCBoZSBjYW4gdHJhbnNmZXIgdGhlIGtuaWZlIGJldHdlZW4gaGlzIG1haW4gaGFuZCBhbmQgaGlzIG9mZmhhbmQgYW5kIG1ha2UgYW4gZXh0cmEgYXR0YWNrIGFzIGEgYm9udXMgXHJcbiAgICAgICAgYWN0aW9uLiBJZiBoaXMgcHJpbWFyeSBhdHRhY2sgdGhhdCB0dXJuIHdhcyBhIGZlaW50LCB0aGUgc2Vjb25kYXJ5IGF0dGFjayBpcyBhdCBhZHZhbnRhZ2UgYW5kIGhhcyBhIFxyXG4gICAgICAgICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoRGljZV8xLkQ4KX0gc3VwZXJpb3JpdHkgZGljZSBhZGRlZCB0byB0aGUgdG8taGl0IHJvbGwuPC9wPmApKTtcclxuICAgIGpheWUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYFxyXG4gICAgICAgIDxwPjxzdHJvbmc+PGVtPlByZWRhdG9yeSBIeXBlcmZvY3VzLjwvZW0+PC9zdHJvbmc+IEV2ZXJ5dGltZSBoZSBkZWFscyBkYW1hZ2UsIEpheWUgbXVzdCBtYWtlIGEgREMgXHJcbiAgICAgICAgJHtqYXllLmRjKGNvbnN0YW50c18xLkRTdGF0LkNvbil9IFdpcyBzYXZlLiBPbiBmYWlsdXJlLCBKYXllJ3MgYmVhc3RpYWwgaW5zdGluY3RzIG9mIGFuIGFwZXggcHJlZGF0b3Iga2ljayBpbiwgYW5kIGhlIFxyXG4gICAgICAgIGVudGVycyBhIHZhbXBpcmljIGh5cGVyZm9jdXNlZCBzdGF0ZS4gV2hpbGUgaW4gdGhhdCBzdGF0ZSwgZWFjaCBvZiBKYXllJ3MgYXR0YWNrcyBoZWFscyBoaW1zZWxmIG9yIGEgXHJcbiAgICAgICAgY3JlYXR1cmUgb2YgaGlzIGNob2ljZSB3aXRoaW4gNWZ0IGJ5IGhhbGYgdGhlIGRhbWFnZSBkZWFsdC4gQWxzbywgYW55b25lIGhpdCBieSBoaXMgYXR0YWNrcyBtdXN0IG1ha2UgYSBEQ1xyXG4gICAgICAgICR7amF5ZS5kYyhjb25zdGFudHNfMS5EU3RhdC5Db24pfSBDaGEgc2F2ZSBvciBiZSAkeygwLCBXcmFwXzEud3JhcENvbmRpdGlvbikoY29uc3RhbnRzXzEuQ29uZGl0aW9uLlNpbGVuY2VkKX0gdW50aWwgdGhlIGVuZCBvZiB0aGVpciBuZXh0IHR1cm4uXHJcbiAgICAgICAgVGhlIGRvd25zaWRlIG9mIHRoaXMgaXMgdGhhdCBpbiB0aGlzIHN0YXRlLCBhdCB0aGUgc3RhcnQgb2YgaGlzIHR1cm4gb25lIGNyZWF0dXJlIHdpdGhpbiA1ZnQgZnQgb2YgaGltc2VsZlxyXG4gICAgICAgIHRha2VzICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoWzEwLCBEaWNlXzEuRDFdKX0gJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWMpfSBkYW1hZ2UuIElmIG5vIGNyZWF0dXJlIGlzIHdpdGhpbiB0aGF0IFxyXG4gICAgICAgIHJhbmdlLCBKYXllIGhpbXNlbGYgdGFrZXMgdGhhdCBkYW1hZ2UuPC9wPmApKTtcclxuICAgIGpheWUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYFxyXG4gICAgICAgIDxwPjxzdHJvbmc+PGVtPlNuZWFrIEF0dGFjay48L2VtPjwvc3Ryb25nPiBPbmNlIHBlciB0dXJuLCBKYXllIGNhbiBib29zdCBhIGZpbmVzc2UvcmFuZ2VkIHdlYXBvbiBhdHRhY2sgYnkgXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbMywgRGljZV8xLkQ2XSl9IGFzIHBlciByZWd1bGFyIHNuZWFrIGF0dGFjayBydWxlcy48L3A+YCkpO1xyXG4gICAgamF5ZS5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sIGBcclxuICAgICAgICA8cD48c3Ryb25nPjxlbT5Db29raW5nIEtuaWZlLjwvZW0+PC9zdHJvbmc+IE1lbGVlIFdlYXBvbiBBdHRhY2s6ICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoamF5ZS5ERVggKyBqYXllLkV4cGVydGlzZSl9LCBcclxuICAgICAgICByZWFjaCA1IGZ0LiAob3IgYSA2MGZ0IFJhbmdlZCB0aHJvdyksIG9uZSB0YXJnZXQuIEhpdDogJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzEsIERpY2VfMS5ENl0sIFtqYXllLkRFWCwgRGljZV8xLkQxXV0pfSBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuU2xhc2hpbmcpfSAoc2xhc2gpIG9yICR7KDAsIFdyYXBfMS53cmFwRGFtYWdlVHlwZSkoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5QaWVyY2luZyl9IGRhbWFnZSAoc3RhYikgXHJcbiAgICAgICAgcGx1cyAkeygwLCBXcmFwXzEud3JhcFJvbGwpKERpY2VfMS5ENil9ICR7KDAsIFdyYXBfMS53cmFwRGFtYWdlVHlwZSkoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qc3ljaGljKX0gZGFtYWdlLiBKYXllIGNhbiBjaG9vc2UgdG8gZmVpbnQgaW5zdGVhZCBvZlxyXG4gICAgICAgIGF0dGVtcHRpbmcgdG8gaGl0IHdpdGggdGhpcyBhdHRhY2suPC9wPmApKTtcclxuICAgIGpheWUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQm9udXNBY3Rpb24sIGBcclxuICAgICAgICAgICAgPHA+PHN0cm9uZz48ZW0+Q29va2luZyBLbmlmZS48L2VtPiAoT2ZmaGFuZCk8L3N0cm9uZz4gTWVsZWUgV2VhcG9uIEF0dGFjazogJHsoMCwgV3JhcF8xLndyYXBSb2xsKShqYXllLkRFWCArIGpheWUuRXhwZXJ0aXNlKX0sIFxyXG4gICAgICAgICAgICByZWFjaCA1IGZ0LiAob3IgYSA2MGZ0IFJhbmdlZCB0aHJvdyksIG9uZSB0YXJnZXQuIEhpdDogJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzEsIERpY2VfMS5ENF0sIFtqYXllLkRFWCwgRGljZV8xLkQxXV0pfSBcclxuICAgICAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlNsYXNoaW5nKX0gKHNsYXNoKSBvciAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUGllcmNpbmcpfSBkYW1hZ2UgKHN0YWIpIFxyXG4gICAgICAgICAgICBwbHVzICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoRGljZV8xLkQ0KX0gJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWMpfSBkYW1hZ2UuPC9wPmApKTtcclxuICAgIGpheWUuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQm9udXNBY3Rpb24sIGBcclxuICAgICAgICAgICAgPHA+PHN0cm9uZz48ZW0+Q3VubmluZyBBY3Rpb24uPC9lbT48L3N0cm9uZz4gQ2FuIHVzZSBhIGJvbnVzIGFjdGlvbiB0byB0YWtlIHRoZSBEYXNoLCBEaXNlbmdhZ2UsIG9yIEhpZGVcclxuICAgICAgICAgICAgYWN0aW9uLjwvcD5gKSk7XHJcbiAgICBqYXllLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlJlYWN0aW9uLCBgXHJcbiAgICAgICAgICAgIDxwPjxzdHJvbmc+PGVtPlBhcnJ5LjwvZW0+PC9zdHJvbmc+IElmIGhlIGNhcnJpZXMgYSBrbmlmZSwgSmF5ZSBjYW4gYWRkIGEgKzIgdG8gaGlzIEFDIGFnYWluc3QgYW4gYXR0YWNrIFxyXG4gICAgICAgICAgICB0aGF0IHdvdWxkIGhpdCBoaW0gYW5kIGNhdXNlIGl0IHRvIG1pc3MuIFRoZSBBQyBpbmNyZWFzZSBpcyBhICszIGluc3RlYWQgaWYgdGhlIGtuaWZlIGlzIGhpcyBmYXZvcml0ZSBcclxuICAgICAgICAgICAgY29va2luZyBrbmlmZTwvcD5gKSk7XHJcbiAgICBqYXllLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlJlYWN0aW9uLCBgXHJcbiAgICAgICAgICAgIDxwPjxzdHJvbmc+PGVtPkNvbW1hbmQgUmV0dXJuLjwvZW0+PC9zdHJvbmc+IEF0IHdpbGwsIEpheWUgY2FuIGNvbW1hbmQgaGlzIGZhdm9yaXRlIGNvb2tpbmcga25pZmUgdG8gcmV0dXJuIFxyXG4gICAgICAgICAgICB0byBoaXMgaGFuZHMgaWYgaXQgaXMgd2l0aGluIDI0MCBmdCBvZiBoaW0uIEl0IGRlYWxzIHRoZSBkYW1hZ2UgZXF1aXZhbGVudCBvZiBhIG1haW4taGFuZCBzdGFiIHRvIGFsbCBcclxuICAgICAgICAgICAgY3JlYXR1cmVzIGluIGl0cyBwYXRoIGFuZCBjYW4gcHVsbCBvYmplY3RzIGFsb25nIHdpdGggaXQuIElmIHBvc3NpYmxlLCBzbmVhayBhdHRhY2sgbWF5IG9ubHkgYmUgYXBwbGllZCBcclxuICAgICAgICAgICAgdG8gZmlyc3QgY3JlYXR1cmUgdG8gYmUgaGl0LjwvcD5gKSk7XHJcbiAgICBqYXllLnNoZWV0LmNyID0gbmV3IGNvbnN0YW50c18xLkNSVmFsdWUoNSk7XHJcbiAgICBqYXllLnNoZWV0LnNpemUgPSBjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuTWVkaXVtO1xyXG4gICAgamF5ZS5zaGVldC5zdWJ0aXRsZSA9IFwiIEh1bWFub2lkIChVcnNpbmUgfCBQb2xhciksIE5ldXRyYWwgR29vZFwiO1xyXG4gICAgamF5ZS5zaGVldC5hY0Rlc2MgPSBcIihOYXR1cmFsIERleClcIjtcclxuICAgIGpheWUuc2hlZXQuY2F0ZWdvcnkgPSBcImh1bWFuXCI7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEpheWUgPSBzZXR1cEpheWU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpheWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEpvcmRpID0gdm9pZCAwO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL2NvbnN0YW50c1wiKTtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwSm9yZGkoKSB7XHJcbiAgICBjb25zdCBqb3JkaSA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5Kb3JkaSk7XHJcbiAgICBqb3JkaS5jb3JlLm5hbWUgPSBcIkpvcmRpXCI7XHJcbiAgICBqb3JkaS5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMS9Kb3JkaS5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIGpvcmRpLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMTAsIDEzLCAxNCwgMTMsIDE3LCA4KTtcclxuICAgIGpvcmRpLmRTdGF0cy5wYiA9IGNvbnN0YW50c18xLlByb2YuZ2V0KDMpO1xyXG4gICAgLy90b2RvXHJcbiAgICBqb3JkaS5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbiAgICBqb3JkaS5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgam9yZGkuY2FyZC5hZGRDYXJkVGFnKFwiTTIzXCIpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBKb3JkaSA9IHNldHVwSm9yZGk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpvcmRpLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBLYXN0b3IgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBLYXN0b3IoKSB7XHJcbiAgICBjb25zdCBrYXN0b3IgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuS2FzdG9yKTtcclxuICAgIGthc3Rvci5jb3JlLm5hbWUgPSBcIkthc3RvclwiO1xyXG4gICAga2FzdG9yLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMi9BcmMxL0thc3Rvci5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIGthc3Rvci5kU3RhdHMuaW5pdGlhbGl6ZVN0YXRzKDE2LCAxNCwgMTQsIDgsIDExLCAxNCk7XHJcbiAgICBrYXN0b3IuZFN0YXRzLnBiID0gY29uc3RhbnRzXzEuUHJvZi5nZXQoMyk7XHJcbiAgICBrYXN0b3Iub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IHRydWU7XHJcbiAgICBrYXN0b3IuY2FyZC5zZXRDYW1wYWlnbkFyYygyLCAxKTtcclxuICAgIGthc3Rvci5jYXJkLmFkZENhcmRUYWcoXCJNMjZcIik7XHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQXJyb2dhbnQsIDNdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkp1ZGdpbmcsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkluc2VjdXJlLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5BYnJhc2l2ZSwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuVmFpbiwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQ29uZnJvbnRhdGlvbmFsLCAxXSxcclxufVxyXG5leHBvcnRzLnNldHVwS2FzdG9yID0gc2V0dXBLYXN0b3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWthc3Rvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwUm9iZXJ0YSA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5jb25zdCBNb3JhbGVfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9Nb3JhbGVcIik7XHJcbmZ1bmN0aW9uIHNldHVwUm9iZXJ0YSgpIHtcclxuICAgIGNvbnN0IHJvYmVydGEgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuUm9iZXJ0YSk7XHJcbiAgICAvLyBTZXR1cCBjb3JlLlxyXG4gICAgcm9iZXJ0YS5jb3JlLm5hbWUgPSBcIlJvYmVydGFcIjtcclxuICAgIHJvYmVydGEuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvUm9iZXJ0YS5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIHJvYmVydGEuZFN0YXRzLmluaXRpYWxpemVTdGF0cygxMCwgMTMsIDEzLCAxOSwgMTAsIDE2KTtcclxuICAgIHJvYmVydGEuZFN0YXRzLnBiID0gY29uc3RhbnRzXzEuUHJvZi5nZXQoNCk7XHJcbiAgICAvLyBTZXR1cCBEJkQgc2tpbGxzLlxyXG4gICAgcm9iZXJ0YS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcmZvcm1hbmNlLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgcm9iZXJ0YS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkludmVzdGlnYXRpb24sIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5IYWxmKTtcclxuICAgIHJvYmVydGEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5OYXR1cmUsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5IYWxmKTtcclxuICAgIHJvYmVydGEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5TbGlnaHRPZkhhbmQsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgcm9iZXJ0YS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLk1lZGljaW5lLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgcm9iZXJ0YS5vcGluaW9ucy5pc09waW5pb25hdGVkID0gdHJ1ZTtcclxuICAgIHJvYmVydGEub3BlcmF0b3IubW9yYWxlID0gTW9yYWxlXzEuTW9yYWxlLkNvbWZvcnRhYmxlO1xyXG4gICAgcm9iZXJ0YS5kU0tpbGxzLmZpbmFsaXplU2tpbGxzKCk7XHJcbiAgICByb2JlcnRhLm9wZXJhdG9yLmZhdGlndWUgPSAwO1xyXG4gICAgcm9iZXJ0YS5vcGVyYXRvci5yYXRpbmdzID0ge1xyXG4gICAgICAgIGRhbWFnZTogXCJEXCIsXHJcbiAgICAgICAgY29udHJvbDogXCJDXCIsXHJcbiAgICAgICAgc3Vydml2YWw6IFwiQytcIixcclxuICAgICAgICBwcm86IFwiUytcIixcclxuICAgIH07XHJcbiAgICByb2JlcnRhLm9wZXJhdG9yLmVyYSA9IGNvbnN0YW50c18xLkVyYS5GdXR1cmU7XHJcbiAgICByb2JlcnRhLm9wZXJhdG9yLnByb2Zlc3Npb25zID0gW1wiTWFrZXVwIGFydGlzdCAvIERvY3Rvcig/KVwiLCBcIkhlcmJhbGlzdCAoSnVzdCBjaGlsbGluZyB0YmgpXCJdO1xyXG4gICAgcm9iZXJ0YS5vcGVyYXRvci5hZGROb3RhYmxlU3R1ZmYoXCJNYWpvciBEYW1hZ2UgVHlwZVwiLCBcIkFjaWQgLyBQb2lzb24gLyBMaWdodG5pbmdcIik7XHJcbiAgICByb2JlcnRhLm9wZXJhdG9yLmFkZE5vdGFibGVTdHVmZihcIlN0cm9uZyBhZ2FpbnN0XCIsIFwiSW5zZWN0b2lkcywgUGxhbnRzLCBDeWJlcnB1bmtzXCIpO1xyXG4gICAgcm9iZXJ0YS5vcGVyYXRvci5hZGROb3RhYmxlU3R1ZmYoXCJXZWFrIGFnYWluc3RcIiwgXCJNb25zdGVycyBvZiBhbG1vc3QgYW55IHNvcnRcIik7XHJcbiAgICByb2JlcnRhLm9wZXJhdG9yLmFkZE5vdGFibGVTdHVmZihcIlRlcnJpYmxlIGFnYWluc3RcIiwgXCJVbmRlYWQsIEFiZXJyYXRpb25zXCIpO1xyXG4gICAgcm9iZXJ0YS5vcGVyYXRvci5hZGROb3RhYmxlU3R1ZmYoXCJDb21iYXQgRXhwZXJpZW5jZVwiLCBcIkQgR3JhZGUgKE5vbmUpXCIpO1xyXG4gICAgcm9iZXJ0YS5vcGVyYXRvci5hZGROb3RhYmxlU3R1ZmYoXCJDaGFsbGVuZ2UgUmF0aW5nXCIsIFwiNVwiKTtcclxuICAgIHJvYmVydGEub3BlcmF0b3Iuc2V0Q2hlbWlzdHJ5V2l0aChucGNJbmRleF8xLk5wY0lELlZpdGFjaWEsIDE4LCBcIihDb3VzaW4pIFRob3VnaCB0aGUgdHdvIGJlbG9uZ2VkIHRvIGNvbXBsZXRlbHkgZGlmZmVyZW50IHdvcmxkcyAnYmFjayBob21lJywgXCIgK1xyXG4gICAgICAgIFwiYW5kIHJhcmVseSBpbnRlcmFjdGVkLCB0aGV5IGFsd2F5cyBoYWQgYSBkZWNlbnQgbGV2ZWwgb2YgbXV0dWFsIHJlc3BlY3QuIEJlY2FtZSBcIiArXHJcbiAgICAgICAgXCJtdWNoIGNsb3NlciBhZnRlciBtb3ZpbmcgaW50byB0aGUgdmlsbGFnZSBvZiBQbydTaGFuLlwiKTtcclxuICAgIHJvYmVydGEub3BlcmF0b3Iuc2V0Q2hlbWlzdHJ5V2l0aChucGNJbmRleF8xLk5wY0lELkRhd24sIDE2LCBcIlRydXN0cyBEYXduIHF1aXRlIGEgYml0IGFuZCBzbyBvZnRlbiB0cmVhdHMgaGVyIGFzIGEgcGVyc29uYWwgdGhlcmFwaXN0LiBHcmVhdGx5IFwiICtcclxuICAgICAgICBcInJlc3BlY3RzIGhlciBmb3IgYWx3YXlzIGxlbmRpbmcgYSBlYXIsIGRlc3BpdGUgYW55IHN1cGVyZmljaWFsIGF0dGVtcHRzIHRvIHdyaWdnbGUgb3V0LlwiKTtcclxuICAgIHJvYmVydGEub3BlcmF0b3Iuc2V0Q2hlbWlzdHJ5V2l0aChucGNJbmRleF8xLk5wY0lELlRvbWFzYSwgMTQsIFwiUHJldHR5IG11Y2ggY29uc2lkZXJzIGhlciBhICdiZXN0IGZyaWVuZCcuXCIpO1xyXG4gICAgcm9iZXJ0YS5vcGVyYXRvci5zZXRDaGVtaXN0cnlXaXRoKG5wY0luZGV4XzEuTnBjSUQuSmF5ZSwgMTAsIFwiQXMgYSBuZWlnaGJvdXIsIHNoZSBpcyBvbmUgb2YgaGlzIGZldyByZWd1bGFyIGN1c3RvbWVycy4gTG92ZXMgaGlzIHNhbmR3aWNoZXMuXCIpO1xyXG4gICAgcm9iZXJ0YS5vcGVyYXRvci5zZXRDaGVtaXN0cnlXaXRoKG5wY0luZGV4XzEuTnBjSUQuS2FzdG9yLCAxMCwgXCJIYWQgYSBtaW5vciBjcnVzaCBvbiBoaW0gYXQgZmlyc3QsIGJ1dCBzb29uIHJlYWxpemVkIGhlIHdhcyBxdWl0ZSBlbW90aW9uYWxseSBpbnNlY3VyZS4gXCIgK1xyXG4gICAgICAgIFwiRGVzcGl0ZSB0aGF0IHNoZSBmZWVscyBoZSdzIGEgZ29vZCBwZXJzb24gY2F1Z2h0IHVwIGluIGEgYmFkIG1lc3MgYW5kIGRvZXNuJ3QgbWluZCBcIiArXHJcbiAgICAgICAgXCJzcGVuZGluZyB0aW1lIHdpdGggaGltLlwiKTtcclxuICAgIHJvYmVydGEuY1NraWxscy5zZXRTa2lsbFZhbHVlcyhbXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BY2NvdW50aW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BbnRocm9wb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFwcHJhaXNlLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5BcmNoYWVvbG9neSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQXJ0aWxsZXJ5LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGFybSwgNzAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNvbXB1dGVyVXNlLCAzNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGVtb2xpdGlvbnMsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkRpc2d1aXNlLCA5MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRGl2aW5nLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Ecml2ZUF1dG8sIDIwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5FbGVjdHJpY2FsUmVwYWlyLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRWxlY3Ryb25pY3MsIDcwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5GaXJzdEFpZCwgODAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkh5cG5vc2lzLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5MYXcsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkxpYnJhcnlVc2UsIDIwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Mb2Nrc21pdGgsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1lY2hhbmljYWxSZXBhaXIsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Nb2Rlcm5NZWRpY2luZSwgNTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdHVyYWxXb3JsZCwgMzAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk5hdmlnYXRlLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuT2NjdWx0LCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5PcGVyYXRlSGVhdnlNYWNoaW5lcnksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBzeWNob2FuYWx5c2lzLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5SZWFkTGlwcywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUmlkZSwgMTUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlRocm93LCAyMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQWN0aW5nLCAzNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2FsbGlncmFwaHksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNhcnBlbnRyeSwgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkNvb2tpbmcsIDIwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5EYW5jaW5nLCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5GaW5lQXJ0LCA1MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuRm9yZ2VyeSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuV3JpdGluZywgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuU2luZ2luZywgNSwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUGFpbnRpbmcsIDUsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBob3RvZ3JhcGh5LCA1MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuU2N1bHB0aW5nLCAyMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuQ2hhaW5zYXcsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5IZWF2eVdlYXBvbnMsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5GbGFtZXRocm93ZXIsIDEwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5NYWNoaW5lR3VuLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuU3VibWFjaGluZUd1biwgMTAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkFpcmNyYWZ0LCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb2F0LCA1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Bc3Ryb25vbXksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkJpb2xvZ3ksIDk1LCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Cb3RhbnksIDUwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DaGVtaXN0cnksIDcwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5DcnlwdG9ncmFwaHksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkVuZ2luZWVyaW5nLCAwLCBjb25zdGFudHNfMS5WYWd1ZV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkNTa2lsbC5Gb3JlbnNpY3MsIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLkdlb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLk1hdGhlbWF0aWNzLCAxMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuTWV0ZW9yb2xvZ3ksIDAsIGNvbnN0YW50c18xLlZhZ3VlXSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuQ1NraWxsLlBoYXJtYWN5LCA3MCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuUGh5c2ljcywgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgICAgIFtjb25zdGFudHNfMS5DU2tpbGwuWm9vbG9neSwgMCwgY29uc3RhbnRzXzEuVmFndWVdLFxyXG4gICAgXSk7XHJcbiAgICByb2JlcnRhLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICByb2JlcnRhLmNhcmQuYWRkQ2FyZFRhZyhcIkYyNVwiKTtcclxufVxyXG5leHBvcnRzLnNldHVwUm9iZXJ0YSA9IHNldHVwUm9iZXJ0YTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm9iZXJ0YS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwU2FzaGEgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFNhc2hhKCkge1xyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5TYXNoYSk7XHJcbiAgICBjLmNvcmUubmFtZSA9IFwiU2FzaGFcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvU2FzaGEucG5nXCI7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIk0xM1wiKTtcclxuICAgIGMuY2FyZC5zdW1tYXJ5ID0gKCkgPT4gYD8/P2A7XHJcbiAgICBjLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxufVxyXG5leHBvcnRzLnNldHVwU2FzaGEgPSBzZXR1cFNhc2hhO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYXNoYS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwU3liaWxsYSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwU3liaWxsYSgpIHtcclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuU3liaWxsYSk7XHJcbiAgICBjLmNvcmUubmFtZSA9IFwiU3liaWxsYVwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMS9TeWJpbGxhLnBuZ1wiO1xyXG4gICAgYy5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJGMzRcIik7XHJcbiAgICBjLmNhcmQuc3VtbWFyeSA9ICgpID0+IGA/Pz9gO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFN5YmlsbGEgPSBzZXR1cFN5YmlsbGE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5YmlsbGEuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cFRvbWFzYSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwVG9tYXNhKCkge1xyXG4gICAgLy8gUHJlcGFyZSB0aGUgY2hhcmFjdGVyIG9iamVjdC5cclxuICAgIGNvbnN0IHRvbWFzYSA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5Ub21hc2EpO1xyXG4gICAgdG9tYXNhLmNvcmUubmFtZSA9IFwiVG9tYXNhXCI7XHJcbiAgICB0b21hc2EuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvVG9tYXNhLnBuZ1wiO1xyXG4gICAgLy8gU2V0dXAgRCZEIHN0YXRzLiB0b2RvXHJcbiAgICAvLyBTZXR1cCBEJkQgc2tpbGxzLiB0b2RvXHJcbiAgICB0b21hc2Eub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlNhbmd1aW5lLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5BY2NlcHRpbmcsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkdvdXJtYW5kLCAxXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5JbmR1c3RyaW91cywgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuQWJyYXNpdmUsIDFdLFxyXG4gICAgdG9tYXNhLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICB0b21hc2EuY2FyZC5hZGRDYXJkVGFnKFwiRjI3XCIpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBUb21hc2EgPSBzZXR1cFRvbWFzYTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9tYXNhLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBWZXJuYSA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFZlcm5hKCkge1xyXG4gICAgY29uc3QgdmVybmEgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuVmVybmEpO1xyXG4gICAgdmVybmEuY29yZS5uYW1lID0gXCJWZXJuYVwiO1xyXG4gICAgdmVybmEuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvVmVybmEucG5nXCI7XHJcbiAgICAvLyBTZXR1cCBEJkQgc3RhdHMuXHJcbiAgICB2ZXJuYS5kU3RhdHMuaW5pdGlhbGl6ZVN0YXRzKDE4LCAxMiwgMTgsIDgsIDEwLCAxNCk7XHJcbiAgICB2ZXJuYS5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg0KTtcclxuICAgIC8vdG9kb1xyXG4gICAgdmVybmEuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5BdGhsZXRpY3MsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICB2ZXJuYS5kU0tpbGxzLmZpbmFsaXplU2tpbGxzKCk7XHJcbiAgICB2ZXJuYS5vcGluaW9ucy5pc09waW5pb25hdGVkID0gdHJ1ZTtcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5Db25maWRlbnQsIDJdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkFicmFzaXZlLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5TdGVybiwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuT3B0aW1pc3QsIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLkp1ZGdpbmcsIDFdLFxyXG4gICAgdmVybmEuY2FyZC5zZXRDYW1wYWlnbkFyYygyLCAxKTtcclxuICAgIHZlcm5hLmNhcmQuYWRkQ2FyZFRhZyhcIkYyNFwiKTtcclxuICAgIHZlcm5hLmNhcmQuYWRkQ2FyZFRhZyhcIlJhY2UgfCBMZW9uaW5cIik7XHJcbiAgICB2ZXJuYS5jYXJkLmFkZENhcmRUYWcoXCJDbGFzcyB8IDxzcGFuIGNsYXNzPSd2ZXJib3NlJz5CYXR0bGVtYXN0ZXIgPC9zcGFuPkZpZ2h0ZXJcIik7XHJcbiAgICB2ZXJuYS5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDEwXCIpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBWZXJuYSA9IHNldHVwVmVybmE7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcm5hLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBWaXRhY2lhID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBWaXRhY2lhKCkge1xyXG4gICAgLy8gUHJlcGFyZSB0aGUgY2hhcmFjdGVyIG9iamVjdC5cclxuICAgIGNvbnN0IHZpdGFjaWEgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuVml0YWNpYSk7XHJcbiAgICB2aXRhY2lhLmNvcmUubmFtZSA9IFwiVml0YWNpYVwiO1xyXG4gICAgdml0YWNpYS5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMS9WaXRhY2lhLnBuZ1wiO1xyXG4gICAgLy8gU2V0dXAgRCZEIHN0YXRzLiB0b2RvXHJcbiAgICAvLyBTZXR1cCBEJkQgc2tpbGxzLiB0b2RvXHJcbiAgICB2aXRhY2lhLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZ1tcIk5hdHVyZSBMb3ZlclwiXSwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuRGlzdGFudCwgMl0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuTmVydm91cywgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuUmVjbHVzZSwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuTGF6eSwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuVmFpbiwgMV0sXHJcbiAgICB2aXRhY2lhLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMSk7XHJcbiAgICB2aXRhY2lhLmNhcmQuYWRkQ2FyZFRhZyhcIkYyNVwiKTtcclxufVxyXG5leHBvcnRzLnNldHVwVml0YWNpYSA9IHNldHVwVml0YWNpYTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dml0YWNpYS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwWXVraSA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFl1a2koKSB7XHJcbiAgICBjb25zdCB5dWtpID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELll1a2kpO1xyXG4gICAgeXVraS5jb3JlLm5hbWUgPSBcIll1a2lcIjtcclxuICAgIHl1a2kuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzEvWXVraS5wbmdcIjtcclxuICAgIC8vIFNldHVwIEQmRCBzdGF0cy5cclxuICAgIHl1a2kuZFN0YXRzLmluaXRpYWxpemVTdGF0cygxMSwgMTIsIDE0LCA4LCAxMiwgMjApO1xyXG4gICAgeXVraS5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg0KTtcclxuICAgIC8vIFNldHVwIEQmRCBza2lsbHMuXHJcbiAgICB5dWtpLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuU3RlYWx0aCwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIHl1a2kuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5EZWNlcHRpb24sIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICB5dWtpLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuSW50aW1pZGF0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4pO1xyXG4gICAgeXVraS5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkluc2lnaHQsIGNvbnN0YW50c18xLkhpZGRlbik7XHJcbiAgICB5dWtpLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuUGVyY2VwdGlvbiwgY29uc3RhbnRzXzEuSGlkZGVuKTtcclxuICAgIHl1a2kuZFNLaWxscy5maW5hbGl6ZVNraWxscygpO1xyXG4gICAgeXVraS5vcGluaW9ucy5pc09waW5pb25hdGVkID0gdHJ1ZTtcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5SZWNsdXNlLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5KdWRnaW5nLCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZy5EaXN0YW50LCAyXSxcclxuICAgIC8vIFtOcGNQZXJzb25hbGl0eVRhZ1tcIkd1aWx0LXJpZGRlblwiXSwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuS2luZCwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWcuUXVpZXQsIDFdLFxyXG4gICAgLy8gW05wY1BlcnNvbmFsaXR5VGFnLlBlc3NpbWlzdCwgMV0sXHJcbiAgICAvLyBbTnBjUGVyc29uYWxpdHlUYWdbXCJOaWdodCBvd2xcIl0sIDFdLFxyXG4gICAgeXVraS5jYXJkLnNldENhbXBhaWduQXJjKDIsIDEpO1xyXG4gICAgeXVraS5jYXJkLmFkZENhcmRUYWcoXCJNMjdcIik7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFl1a2kgPSBzZXR1cFl1a2k7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXl1a2kuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEMyQTIgPSB2b2lkIDA7XHJcbmNvbnN0IGVsbGlvdF8xID0gcmVxdWlyZShcIi4vZWxsaW90XCIpO1xyXG5jb25zdCBnbm9zaXNfMSA9IHJlcXVpcmUoXCIuL2dub3Npc1wiKTtcclxuY29uc3QgcnV6YWtpXzEgPSByZXF1aXJlKFwiLi9ydXpha2lcIik7XHJcbmNvbnN0IHNodW9fMSA9IHJlcXVpcmUoXCIuL3NodW9cIik7XHJcbmNvbnN0IHRlaWFpXzEgPSByZXF1aXJlKFwiLi90ZWlhaVwiKTtcclxuY29uc3QgeW9lcmljXzEgPSByZXF1aXJlKFwiLi95b2VyaWNcIik7XHJcbmZ1bmN0aW9uIHNldHVwQzJBMigpIHtcclxuICAgICgwLCBydXpha2lfMS5zZXR1cFJ1emFraSkoKTtcclxuICAgICgwLCBlbGxpb3RfMS5zZXR1cEVsbGlvdCkoKTtcclxuICAgICgwLCB5b2VyaWNfMS5zZXR1cFlvZXJpYykoKTtcclxuICAgICgwLCB0ZWlhaV8xLnNldHVwVGVpYWkpKCk7XHJcbiAgICAoMCwgc2h1b18xLnNldHVwU2h1bykoKTtcclxuICAgICgwLCBnbm9zaXNfMS5zZXR1cEdub3NpcykoKTtcclxufVxyXG5leHBvcnRzLnNldHVwQzJBMiA9IHNldHVwQzJBMjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2luaXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEVsbGlvdCA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwRWxsaW90KCkge1xyXG4gICAgLy8gUHJlcGFyZSB0aGUgY2hhcmFjdGVyIG9iamVjdC5cclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuRWxsaW90KTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJUaGUgU2FuZCBTb2xkaWVyXCI7XHJcbiAgICBjLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMi9BcmMyL0VsbGlvdC5wbmdcIjtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG4gICAgYy5jYXJkLnNldENhbXBhaWduQXJjKDIsIDIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJNMzdcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIlJhY2UgfCBIdW1hbiAmdGltZXM7IEFpciBHZW5hc2lcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIkZyb20gfCBIb25vciAoQXNoeW4pXCIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDE3XCIpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBFbGxpb3QgPSBzZXR1cEVsbGlvdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxsaW90LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBHbm9zaXMgPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEdub3NpcygpIHtcclxuICAgIC8vIFByZXBhcmUgdGhlIGNoYXJhY3RlciBvYmplY3QuXHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkdub3Npcyk7XHJcbiAgICBjLmNvcmUubmFtZSA9IFwiU2lyIEdub3NpcyBFZGVsd2Vpc3NcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzIvR25vc2lzLnBuZ1wiO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIk00MVwiKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiUmFjZSB8IEh1bWFuKD8pXCIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJGcm9tIHwgRGV2b3Rpb24gKE5peClcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIkNSIHwgMTNcIik7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEdub3NpcyA9IHNldHVwR25vc2lzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbm9zaXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cFJ1emFraSA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwUnV6YWtpKCkge1xyXG4gICAgLy8gUHJlcGFyZSB0aGUgY2hhcmFjdGVyIG9iamVjdC5cclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuUnV6YWtpKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJSdXpha2lcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzIvUnV6YWtpLnBuZ1wiO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIk01OFwiKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiUmFjZSB8IEh1bWFuXCIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJGcm9tIHwgSW5ub3ZhdGlvbiAvIEhvbm9yIChBc2h5bilcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIkhvRCBHZW5ldGljIEVuZ2luZWVyaW5nLCBSeW5lVGVjaCBMYWJzXCIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDBcIik7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFJ1emFraSA9IHNldHVwUnV6YWtpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydXpha2kuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cFNodW8gPSB2b2lkIDA7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFNodW8oKSB7XHJcbiAgICAvLyBQcmVwYXJlIHRoZSBjaGFyYWN0ZXIgb2JqZWN0LlxyXG4gICAgY29uc3QgYyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5TaHVvKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJTaHVvXCI7XHJcbiAgICBjLmNvcmUuaW1nUGF0aCA9IFwiY2hhcmFjdGVyX3Rva2Vucy9DMi9BcmMyL1NodW8ucG5nXCI7XHJcbiAgICBjLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxuICAgIGMuY2FyZC5zZXRDYW1wYWlnbkFyYygyLCAyKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiTVwiKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiRnJvbSB8IEhvbm9yXCIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJSYWNlIHwgVGl0YW4gPHNwYW4gY2xhc3M9J3ZlcmJvc2UnPiZ0aW1lczsgQmxhY2svR29sZCBEcmFnb248L3NwYW4+XCIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYDxzcGFuPlByaW1vcmRpYWwgfCBPdXRzaWRlciA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+KDE8c3VwPnN0PC9zdXA+IEZyYWdtZW50IG9mIFN1aSk8L3NwYW4+PC9zcGFuPmApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoYFRoZSBGaXJzdCBNYXJ0aWFsIEFydGlzdGApO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDI0IC8gMjhcIik7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFNodW8gPSBzZXR1cFNodW87XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNodW8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cFRlaWFpID0gdm9pZCAwO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBUZWlhaSgpIHtcclxuICAgIC8vIFByZXBhcmUgdGhlIGNoYXJhY3RlciBvYmplY3QuXHJcbiAgICBjb25zdCBjID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELlRlaWFpKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJUZWlhaVwiO1xyXG4gICAgYy5jb3JlLmltZ1BhdGggPSBcImNoYXJhY3Rlcl90b2tlbnMvQzIvQXJjMi9UZWlhaS5wbmdcIjtcclxuICAgIGMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG4gICAgYy5jYXJkLnNldENhbXBhaWduQXJjKDIsIDIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJGMzBcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIlJhY2UgfCBIdW1hblwiKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiRnJvbSB8IEhvbm9yIChBc2h5bilcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIkNsYXNzIHwgQXJ0aWZpY2VyXCIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJDUiB8IDZcIik7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFRlaWFpID0gc2V0dXBUZWlhaTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVpYWkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cFlvZXJpYyA9IHZvaWQgMDtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwWW9lcmljKCkge1xyXG4gICAgLy8gUHJlcGFyZSB0aGUgY2hhcmFjdGVyIG9iamVjdC5cclxuICAgIGNvbnN0IGMgPSBuZXcgQ2hhcmFjdGVyXzEuQ2hhcmFjdGVyKG5wY0luZGV4XzEuTnBjSUQuWW9lcmljKTtcclxuICAgIGMuY29yZS5uYW1lID0gXCJZb2VyaWNcIjtcclxuICAgIGMuY29yZS5pbWdQYXRoID0gXCJjaGFyYWN0ZXJfdG9rZW5zL0MyL0FyYzIvWW9lcmljLnBuZ1wiO1xyXG4gICAgYy5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbiAgICBjLmNhcmQuc2V0Q2FtcGFpZ25BcmMoMiwgMik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIk02MlwiKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiUmFjZSB8IEh1bWFuXCIpO1xyXG4gICAgYy5jYXJkLmFkZENhcmRUYWcoXCJGcm9tIHwgSG9ub3IgKEFzaHluKVwiKTtcclxuICAgIGMuY2FyZC5hZGRDYXJkVGFnKFwiQ2xhc3MgfCA8c3BhbiBjbGFzcz0ndmVyYm9zZSc+Q2hhbXBpb248L3NwYW4+IEZpZ2h0ZXJcIik7XHJcbiAgICBjLmNhcmQuYWRkQ2FyZFRhZyhcIkNSIHwgMTRcIik7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFlvZXJpYyA9IHNldHVwWW9lcmljO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD15b2VyaWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cE1vYnMgPSB2b2lkIDA7XHJcbmNvbnN0IEVwaHJlbWlzXzEgPSByZXF1aXJlKFwiLi9zZWFib3JuL0VwaHJlbWlzXCIpO1xyXG5jb25zdCBIYXJwb29uZXJfMSA9IHJlcXVpcmUoXCIuL3NlYWJvcm4vSGFycG9vbmVyXCIpO1xyXG5jb25zdCBOZXRoZXJzZWFCcmFuZF8xID0gcmVxdWlyZShcIi4vc2VhYm9ybi9OZXRoZXJzZWFCcmFuZFwiKTtcclxuY29uc3QgU2hyaWVrZXJOXzEgPSByZXF1aXJlKFwiLi9zZWFib3JuL1Nocmlla2VyTlwiKTtcclxuY29uc3QgU2xpZGVyXzEgPSByZXF1aXJlKFwiLi9zZWFib3JuL1NsaWRlclwiKTtcclxuY29uc3QgVXJjaGluXzEgPSByZXF1aXJlKFwiLi9zZWFib3JuL1VyY2hpblwiKTtcclxuY29uc3QgVXJjaGluTl8xID0gcmVxdWlyZShcIi4vc2VhYm9ybi9VcmNoaW5OXCIpO1xyXG5mdW5jdGlvbiBzZXR1cE1vYnMoKSB7XHJcbiAgICAoMCwgTmV0aGVyc2VhQnJhbmRfMS5zZXR1cE5ldGhlcnNlYUJyYW5kKSgpO1xyXG4gICAgKDAsIEVwaHJlbWlzXzEuc2V0dXBFcGhyZW1pcykoKTtcclxuICAgICgwLCBTbGlkZXJfMS5zZXR1cFNsaWRlcikoKTtcclxuICAgICgwLCBVcmNoaW5fMS5zZXR1cFVyY2hpbikoKTtcclxuICAgICgwLCBVcmNoaW5OXzEuc2V0dXBVcmNoaW5OKSgpO1xyXG4gICAgKDAsIEhhcnBvb25lcl8xLnNldHVwSGFycG9vbmVyKSgpO1xyXG4gICAgKDAsIFNocmlla2VyTl8xLnNldHVwU2hyaWVrZXJOKSgpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBNb2JzID0gc2V0dXBNb2JzO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1faW5pdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldHVwRXBocmVtaXMgPSB2b2lkIDA7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IEFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9BY3Rpb25cIik7XHJcbmNvbnN0IFdyYXBfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9hY3Rpb24vV3JhcFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cEVwaHJlbWlzKHN0YXRzKSB7XHJcbiAgICBjb25zdCBFcGhyZW1pcyA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5FcGhyZW1pcyk7XHJcbiAgICBFcGhyZW1pcy5jb3JlLm5hbWUgPSBcIkVwaHJlbWlzICg8aT5CZXRhPC9pPilcIjtcclxuICAgIEVwaHJlbWlzLmNvcmUuaW1nUGF0aCA9IFwibW9iX3Rva2Vucy9zZWFib3JuL0VwaHJlbWlzLnBuZ1wiO1xyXG4gICAgaWYgKHN0YXRzKSB7XHJcbiAgICAgICAgRXBocmVtaXMuZFN0YXRzLmluaXRpYWxpemVTdGF0cyhzdGF0cy5nZXQoXCJTVFJcIiksIHN0YXRzLmdldChcIkRFWFwiKSwgc3RhdHMuZ2V0KFwiQ09OXCIpLCBzdGF0cy5nZXQoXCJJTlRcIiksIHN0YXRzLmdldChcIldJU1wiKSwgc3RhdHMuZ2V0KFwiQ0hBXCIpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIEVwaHJlbWlzLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMzAsIDI0LCAyOSwgMjEsIDE4LCAyOCk7XHJcbiAgICB9XHJcbiAgICBFcGhyZW1pcy5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCg4KTtcclxuICAgIEVwaHJlbWlzLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuU3RlYWx0aCwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YpO1xyXG4gICAgRXBocmVtaXMuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5BdGhsZXRpY3MsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5Qcm9mKTtcclxuICAgIEVwaHJlbWlzLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuUGVyY2VwdGlvbiwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YpO1xyXG4gICAgRXBocmVtaXMuZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5QZXJmb3JtYW5jZSwgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLlByb2YpO1xyXG4gICAgRXBocmVtaXMuZFNLaWxscy5maW5hbGl6ZVNraWxscygpO1xyXG4gICAgRXBocmVtaXMub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LmFkZEJpb0hwRGljZShEaWNlXzEuRDEwLmNvdW50SGF2aW5nRSg0ODAsIGNvbnN0YW50c18xLlN0YXRWYWx1ZS5tb2QoMjkpKSwgRGljZV8xLkQxMCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQ2xhc3NMZXZlbHMoY29uc3RhbnRzXzEuQWR2ZW50dXJlckNsYXNzLkJhcmJhcmlhbiwgMSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuY29tcHV0ZUhQKCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5TdHIsICghc3RhdHMgfHwgc3RhdHMuZ2V0KFwiU1RSXCIpID09IDMwKSA/IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiA6IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuTm9uZSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5EZXgsICghc3RhdHMgfHwgc3RhdHMuZ2V0KFwiREVYXCIpID09IDI0KSA/IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiA6IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuTm9uZSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5Db24sICghc3RhdHMgfHwgc3RhdHMuZ2V0KFwiQ09OXCIpID09IDI5KSA/IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiA6IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuTm9uZSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5JbnQsICghc3RhdHMgfHwgc3RhdHMuZ2V0KFwiSU5UXCIpID09IDIxKSA/IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiA6IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuTm9uZSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5XaXMsICghc3RhdHMgfHwgc3RhdHMuZ2V0KFwiV0lTXCIpID09IDE4KSA/IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiA6IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuTm9uZSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5DaGEsICghc3RhdHMgfHwgc3RhdHMuZ2V0KFwiQ0hBXCIpID09IDI4KSA/IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZiA6IGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuTm9uZSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0U3BlZWQoY29uc3RhbnRzXzEuU3BlZWQuV2Fsa2luZywgMzApO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LnNldFNwZWVkKGNvbnN0YW50c18xLlNwZWVkLlN3aW1taW5nLCA4MCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuSGVsbGZpcmUsIC0xMDApO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZywgLTEwMCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTmVjcm90aWMsIDUwKTtcclxuICAgIEVwaHJlbWlzLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qc3ljaGljLCA1MCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUmFkaWFudCwgNTApO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlRodW5kZXIsIDUwKTtcclxuICAgIEVwaHJlbWlzLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5TbGFzaGluZywgNTApO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBpZXJjaW5nLCA1MCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQmx1ZGdlb25pbmcsIDUwKTtcclxuICAgIEVwaHJlbWlzLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5BY2lkLCAxMDApO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkNvbGQsIDEwMCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRmlyZSwgMTAwKTtcclxuICAgIEVwaHJlbWlzLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5QaHlzaWNhbCwgMTAwKTtcclxuICAgIEVwaHJlbWlzLmNvbWJhdC5hZGRDb25kaXRpb25JbW11bml0eShjb25zdGFudHNfMS5Db25kaXRpb24uQ2hhcm1lZCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQ29uZGl0aW9uSW1tdW5pdHkoY29uc3RhbnRzXzEuQ29uZGl0aW9uLkdyYXBwbGVkKTtcclxuICAgIEVwaHJlbWlzLmNvbWJhdC5hZGRDb25kaXRpb25JbW11bml0eShjb25zdGFudHNfMS5Db25kaXRpb24uUGFyYWx5emVkKTtcclxuICAgIEVwaHJlbWlzLmNvbWJhdC5hZGRDb25kaXRpb25JbW11bml0eShjb25zdGFudHNfMS5Db25kaXRpb24uUmVzdHJhaW5lZCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQ29uZGl0aW9uSW1tdW5pdHkoY29uc3RhbnRzXzEuQ29uZGl0aW9uLlN0dW5uZWQpO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LnNldFNlbnNlKGNvbnN0YW50c18xLlNlbnNlLkJsaW5kU2lnaHQsIDEyMCk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PGVtPjxzdHJvbmc+QW1waGliaW91cy48L3N0cm9uZz48L2VtPkVwaHJlbWlzIGNhbiBicmVhdGhlIGFpciBhbmQgXHJcbiAgICAgICAgIHdhdGVyLjwvcD5gKSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PGVtPjxzdHJvbmc+TmV0aGVyc2VhIFNpZ2h0LiZuYnNwOzwvc3Ryb25nPjwvZW0+RXBocmVtaXMgaGFzIDYwMGZ0IFxyXG4gICAgICAgICB0cmVtb3JzZW5zZSBvbiBhbnkgc3BvdCBvY2N1cGllZCBieSB0aGUgbmV0aGVyc2VhIGJyYW5kLjwvcD5gKSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PGVtPjxzdHJvbmc+TGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KS48L3N0cm9uZz48L2VtPiBJZiBFcGhyZW1pcyBcclxuICAgICAgICAgZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLjwvcD5gKSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PGVtPjxzdHJvbmc+U3BlbGwtUmVzaXN0YW50IENhcmFwYWNlLjwvc3Ryb25nPjwvZW0+IEVwaHJlbWlzIGhhcyBcclxuICAgICAgICAgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMsIGFuZCBhbnkgY3JlYXR1cmUgdGhhdCBtYWtlc1xyXG4gICAgICAgICBhIHNwZWxsIGF0dGFjayBhZ2FpbnN0IEVwaHJlbWlzIGhhcyBkaXNhZHZhbnRhZ2Ugb24gdGhlIGF0dGFjayByb2xsLlxyXG4gICAgICAgICA8L3A+YCkpO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYDxwPjxzdHJvbmc+Q2FsbCBvZiB0aGUgZmlyc3Rib3JuLjwvc3Ryb25nPiBGb3VyIHRpbWVzLCBmb3IgZXZlcnkgZm91ciBcclxuICAgICAgICAgdHVybnMgaXQgbGl2ZXMsIEVwaHJlbWlzIGdldHMgYSBuZXcgdHJhaXQsIGFzc3VtaW5nIGl0IGhhcyBkZWFsdCBhdFxyXG4gICAgICAgICBsZWFzdCA0MCBkYW1hZ2UgaW4gdGhvc2UgNCB0dXJucy4gSWYgaXQgc3Vydml2ZXMgdGhlIDE3dGggdHVybiBhbmQgaXMgXHJcbiAgICAgICAgIGluIGl0cyBmaW5hbCBmb3JtLCBpdCBzdW1tb25zIHRoZSBUc3VuYW1pIG9mIFByaW1vcmRpYWwgTGlmZSwgZHlpbmcgYW5kXHJcbiAgICAgICAgIGFic29yYmluZyBhbGwgbGlmZSB3aXRoaW4gYSAxMDBtaWxlIHJhZGl1cy4gVGhlIGZvdXIgdHJhaXRzIGFyZSAtPC9wPlxyXG4gICAgICAgIDxvbD5cclxuICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5Bc3NpbWlsYXRpb24uPC9zdHJvbmc+IEVwaHJlbWlzIG5vdyBjYW4gY2FzdCBcclxuICAgICAgICAgICAgICAgIDxzdHJvbmc+aHVuZ2VyIG9mIHdlIG1hbnk8L3N0cm9uZz4gYXMgYW4gYWN0aW9uLlxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICA8c3Ryb25nPlN1cnZpdmFsLjwvc3Ryb25nPiBFcGhyZW1pcyBub3cgcmVnZW5lcmF0ZXMgXHJcbiAgICAgICAgICAgICAgICAkezUgKiBFcGhyZW1pcy5DT059IEhQIHdoaWxlIGNvbm5lY3RlZCB0byB0aGUgc2VhIG9yIFxyXG4gICAgICAgICAgICAgICAgdGhlIG5ldGhlcnNlYSBicmFuZCBhdCBpbml0aWF0aXZlIGNvdW50IDIwIGV2ZXJ5IHJvdW5kLiBUaGV5IGNhblxyXG4gICAgICAgICAgICAgICAgbm93IHVzZSB0aGUgPHN0cm9uZz5OZXRoZXJzZWEgR3Jvd3RoPC9zdHJvbmc+IGxlZ2VuZGFyeSBhY3Rpb24uXHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgIDxzdHJvbmc+TWlncmF0aW9uLjwvc3Ryb25nPkVwaHJlbWlzJyBtb3ZlbWVudCBzcGVlZCBpbmNyZWFzZXMgYnkgXHJcbiAgICAgICAgICAgICAgICA1MCUuIFRoZXkgZ2FpbiBhIGZseWluZyBzcGVlZCBlcXVhbCB0byB0aGVpciB3YWxraW5nIHNwZWVkLiBUaGV5XHJcbiAgICAgICAgICAgICAgICBjYW4gbm93IGNhc3QgPHN0cm9uZz5OZXRoZXJzZWEgU3RlcDwvc3Ryb25nPiBhcyBhIGJvbnVzIGFjdGlvbiBcclxuICAgICAgICAgICAgICAgIG9yIGEgbGVnZW5kYXJ5IGFjdGlvbiB3aXRoIDEgY29zdC5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgPHN0cm9uZz5SZXByb2R1Y3Rpb24uPC9zdHJvbmc+RXBocmVtaXMgY3JlYXRlcyAkeygwLCBXcmFwXzEud3JhcFJvbGwpKERpY2VfMS5ENCl9IGNvcGllcyBvZiBcclxuICAgICAgICAgICAgICAgIGl0c2VsZiBmcm9tIHRoZSBwcmltb3JkaWFsIHNvdXAuIFRoZXNlIHRlbGVwb3J0IGZhciBhd2F5IGF0IHRoZSBcclxuICAgICAgICAgICAgICAgIHN0YXJ0IG9mIHRoZSBuZXh0IHJvdW5kLiBBdCB0aGUgZW5kIG9mIHRoYXQgcm91bmQsIGlmIEVwaHJlbWlzIGlzIFxyXG4gICAgICAgICAgICAgICAgc3RpbGwgYWxpdmUsIGl0J3MgZ2FtZSBvdmVyLlxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgIDwvb2w+YCkpO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLCBgPHA+PGVtPjxzdHJvbmc+Q2xhdy4gKDIgYXR0YWNrcyk8L3N0cm9uZz4gTWVsZWUgV2VhcG9uIEF0dGFjazo8L2VtPiBcclxuICAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShFcGhyZW1pcy5TVFIgKyBFcGhyZW1pcy5Qcm9mKX0gdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSBcclxuICAgICAgICAgdGFyZ2V0LiA8ZW0+SGl0OjwvZW0+ICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoW1szLCBEaWNlXzEuRDhdLCBbRXBocmVtaXMuU1RSLCBEaWNlXzEuRDFdXSl9IFxyXG4gICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuU2xhc2hpbmcpfSBkYW1hZ2UgKG1hZ2ljYWwpLCBhbmQgaWYgdGhlIHRhcmdldCBpcyBhXHJcbiAgICAgICAgIGNyZWF0dXJlLCBpdCBtdXN0IG1ha2UgYSBEQyAke0VwaHJlbWlzLmRjKGNvbnN0YW50c18xLkRTdGF0LlN0cil9IFNUUiBzYXZlLiBPbiBcclxuICAgICAgICAgZmFpbHVyZSwgaXQgaXMgcHVzaGVkIDVmdCBhd2F5LCBpZiBpdCBmYWlscyBieSAxMCBvciBtb3JlIGl0IGlzIGFsc28gXHJcbiAgICAgICAgIGtub2NrZWQgJHsoMCwgV3JhcF8xLndyYXBDb25kaXRpb24pKGNvbnN0YW50c18xLkNvbmRpdGlvbi5Qcm9uZSl9LjwvcD5gKSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sIGA8cD48ZW0+PHN0cm9uZz5IdW5nZXIgb2Ygd2UgbWFueS4gKFJlY2hhcmdlIDUvJHsoMCwgV3JhcF8xLndyYXBSb2xsKShEaWNlXzEuRDYpfSk8L3N0cm9uZz5cclxuICAgICAgICAgPC9lbT48c3Ryb25nPltSZXF1aXJlcyB0aGUgQXNzaW1pbGF0aW9uIFRyYWl0XTwvc3Ryb25nPiBFcGhyZW1pcyBcclxuICAgICAgICAgbGF1bmNoZXMgJHtFcGhyZW1pcy5DT059IENvcnJvc2l2ZSBWYWN1b2xlcyB3aGljaCBsb2NrIG9uIHRvIGEgdGFyZ2V0IFxyXG4gICAgICAgICB3aXRoaW4gMzAgZnQgb2YgaXRzZWxmLiBBdCBpbml0aWF0aXZlIGNvdW50IDIwLCBlYWNoIGNvcnJvc2l2ZSB2YWN1b2xlIFxyXG4gICAgICAgICAkeygwLCBXcmFwXzEud3JhcFJvbGwpKERpY2VfMS5EMTIpfSAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTmVjcm90aWMpfSBkYW1hZ2UuIDxiciAvPlxyXG4gICAgICAgICBJZiB0aGUgdGFyZ2V0IGlzIHN1cnJvdW5kZWQgYnkgNCBvciBtb3JlIHZhY3VvbGVzIGFuZCBzdGFuZHMgb24gdGhlIFxyXG4gICAgICAgICBuZXRoZXJzZWEgYnJhbmQgYW5kIGlzIGJlbG93IDUwIEhQLCB0aGVuIDQgdmFjdW9sZXMgbWVyZ2UgdG9nZXRoZXIgdG8gXHJcbiAgICAgICAgIGZvcm0gYSBzaW5nbGUgbGFyZ2Ugb25lIHdoaWNoIHN3YWxsb3dzIHRoZSB0YXJnZXQgYW5kIG1lcmdlcyBpbnRvIHRoZSBcclxuICAgICAgICAgYnJhbmQuPGJyIC8+XHJcbiAgICAgICAgIFdoaWxlIHN3YWxsb3dlZCwgdGhlIGNyZWF0dXJlIHRha2VzICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoWzEyLCBEaWNlXzEuRDZdKX0gXHJcbiAgICAgICAgICR7KDAsIFdyYXBfMS53cmFwRGFtYWdlVHlwZSkoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Db3Jyb3Npb24pfSBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgXHJcbiAgICAgICAgIEVwaHJlbWlzJyB0dXJucy4gSWYgaXQgZGVhbHMgNDAgZGFtYWdlIHRvIHRoZSB2YWN1b2xlcywgaXQgYXBwZWFycyBvbiBhXHJcbiAgICAgICAgIHJhbmRvbSBsb2NhdGlvbiB1cG9uIHRoZSBicmFuZC48L3A+YCkpO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQm9udXNBY3Rpb24sIGA8cD48ZW0+PHN0cm9uZz5XaGlzcGVycyBvZiB3ZSBtYW55LiA8L3N0cm9uZz5SYW5nZWQgU3BlbGwgQXR0YWNrOjwvZW0+XHJcbiAgICAgICAgICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoRXBocmVtaXMuQ0hBICsgRXBocmVtaXMuUHJvZil9IHRvIGhpdCwgcmVhY2ggMjAgZnQuLCBvbmUgXHJcbiAgICAgICAgIGNyZWF0dXJlLiA8ZW0+SGl0OjwvZW0+ICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoW1szLCBEaWNlXzEuRDZdLCBbRXBocmVtaXMuQ0hBLCBEaWNlXzEuRDFdXSl9XHJcbiAgICAgICAgICR7KDAsIFdyYXBfMS53cmFwRGFtYWdlVHlwZSkoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5OZXVyYWwpfSBkYW1hZ2UuPC9wPmApKTtcclxuICAgIEVwaHJlbWlzLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkJvbnVzQWN0aW9uLCBgPHA+PHN0cm9uZz48ZW0+TmV0aGVyc2VhIFN0ZXAuIDwvZW0+XHJcbiAgICAgICAgIFtSZXF1aXJlcyB0aGUgTWlncmF0aW9uIFRyYWl0XSA8L3N0cm9uZz5FcGhyZW1pcyBkZWFscyBcclxuICAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzEsIERpY2VfMS5EOF0sIFtFcGhyZW1pcy5DT04sIERpY2VfMS5EMV1dKX1cclxuICAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkNvcnJvc2lvbil9IGFuZCB0ZWxlcG9ydHMgdG8gYW4gdW5vY2N1cGllZCBcclxuICAgICAgICAgc3BvdCB3aXRoaW4gJHtFcGhyZW1pcy5JTlQgKiAxNX1mdCBvZiBpdHNlbGYgd2hpY2ggaXQgY2FuIHNlZSBvciB3aGVyZSBcclxuICAgICAgICAgdGhlIE5ldGhlcnNlYSBicmFuZCBoYXMgc3ByZWFkLjwvcD5gKSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5MZWdlbmRhcnlBY3Rpb24sIGA8cD5FcGhyZW1pcyBjYW4gdGFrZSAzIGxlZ2VuZGFyeSBhY3Rpb25zLCBjaG9vc2luZyBmcm9tIHRoZSBvcHRpb25zIFxyXG4gICAgICAgICBiZWxvdy4gT25seSBvbmUgbGVnZW5kYXJ5IGFjdGlvbiBvcHRpb24gY2FuIGJlIHVzZWQgYXQgYSB0aW1lIGFuZCBvbmx5IFxyXG4gICAgICAgICBhdCB0aGUgZW5kIG9mIGFub3RoZXIgY3JlYXR1cmUncyB0dXJuLiBFcGhyZW1pcyByZWdhaW5zIHNwZW50IGxlZ2VuZGFyeVxyXG4gICAgICAgICBhY3Rpb25zIGF0IHRoZSBzdGFydCBvZiBpdHMgdHVybi48L3A+YCkpO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uTGVnZW5kYXJ5QWN0aW9uLCBgPHA+PGVtPjxzdHJvbmc+U2xhc2guPC9zdHJvbmc+PC9lbT4gRXBocmVtaXMgbWFrZXMgb25lIHNsYXNoIGF0dGFjay48L3A+YCkpO1xyXG4gICAgRXBocmVtaXMuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uTGVnZW5kYXJ5QWN0aW9uLCBgPHA+PGVtPjxzdHJvbmc+TW92ZS48L3N0cm9uZz48L2VtPiBFcGhyZW1pcyBtb3ZlcyB1cCB0byBoYWxmIGl0cyBzcGVlZC4gXHJcbiAgICAgICAgIEFmdGVyIHRoZSBNaWdyYXRpb24gdHJhaXQgaXMgdW5sb2NrZWQgaXQgY2FuIG1vdmUgaXRzIGZ1bGwgc3BlZWQgb3IgdXNlXHJcbiAgICAgICAgIE5ldGhlcnNlYSBzdGVwLjwvcD5gKSk7XHJcbiAgICBFcGhyZW1pcy5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5MZWdlbmRhcnlBY3Rpb24sIGA8cD48c3Ryb25nPjxlbT5OZXRoZXJzZWEgR3Jvd3RoIChDb3N0cyAyIEFjdGlvbnMpLjwvZW0+IFxyXG4gICAgICAgICBbUmVxdWlyZXMgdGhlIFN1cnZpdmFsIFRyYWl0XTwvc3Ryb25nPiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmZWV0IG9mXHJcbiAgICAgICAgIEVwaHJlbWlzIG11c3QgbWFrZSBhIERDICR7RXBocmVtaXMuZGMoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKX0gRGV4dGVyaXR5IHNhdmluZyBcclxuICAgICAgICAgdGhyb3csIHRha2luZyAkeygwLCBXcmFwXzEud3JhcFJvbGwpKFszLCBEaWNlXzEuRDhdKX0gc2xhc2hpbmcgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yXHJcbiAgICAgICAgIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS4gVW50aWwgdGhlIHN0YXJ0IG9mIGl0cyBuZXh0IFxyXG4gICAgICAgICB0dXJuLCBFcGhyZW1pcyBnYWlucyBhICsyIGJvbnVzIHRvIEFDLiBUaGUgcm9vbSBlbnRlcnMgdGhlIGJsZW1pc2hlZCBcclxuICAgICAgICAgc3RhZ2UsIGlmIGl0IGlzbid0IGFscmVhZHkgYmxlbWlzaGVkLCBpbmZlY3RlZCwgY29ycnVwdGVkIG9yIFxyXG4gICAgICAgICBzdW5rZW4uPC9wPmApKTtcclxuICAgIEVwaHJlbWlzLnNoZWV0LmNyID0gbmV3IGNvbnN0YW50c18xLkNSVmFsdWUoMjUpO1xyXG4gICAgLy8gdG9kbzogcmVtb3ZlIHJlZHVuZGFuY3kuXHJcbiAgICBFcGhyZW1pcy5zaGVldC5zaXplID0gY29uc3RhbnRzXzEuQ3JlYXR1cmVTaXplLkxhcmdlO1xyXG4gICAgRXBocmVtaXMuc2hlZXQuc3VidGl0bGUgPSBcIiBTZWFib3JuLCBOZXV0cmFsIEV2aWxcIjtcclxuICAgIEVwaHJlbWlzLnNoZWV0LmFjRGVzYyA9IFwiIChDb24vRGV4KVwiO1xyXG4gICAgLy8gRXBocmVtaXMuc2hlZXQuY2F0ZWdvcnkgPSBcInNlYWJvcm5cIjtcclxuICAgIC8vIEVwaHJlbWlzLmZpbmFsaXplKCk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cEVwaHJlbWlzID0gc2V0dXBFcGhyZW1pcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXBocmVtaXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cEhhcnBvb25lciA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgRGljZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL3JvbGxpbmcvRGljZVwiKTtcclxuY29uc3QgQWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vYWN0aW9uL0FjdGlvblwiKTtcclxuY29uc3QgV3JhcF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9XcmFwXCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwSGFycG9vbmVyKCkge1xyXG4gICAgY29uc3QgaGFycG9vbmVyID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELkhhcnBvb25lcik7XHJcbiAgICBoYXJwb29uZXIuY29yZS5uYW1lID0gXCJIYXJwb29uZXJcIjtcclxuICAgIGhhcnBvb25lci5jb3JlLmltZ1BhdGggPSBcIm1vYl90b2tlbnMvc2VhYm9ybi9IYXJwb29uZXIucG5nXCI7XHJcbiAgICBoYXJwb29uZXIuZFN0YXRzLmluaXRpYWxpemVTdGF0cygyMCwgMTQsIDEyLCAxMywgMTAsIDExKTtcclxuICAgIGhhcnBvb25lci5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCgzKTtcclxuICAgIGhhcnBvb25lci5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkF0aGxldGljcywgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICBoYXJwb29uZXIuZFNLaWxscy5maW5hbGl6ZVNraWxscygpO1xyXG4gICAgaGFycG9vbmVyLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxuICAgIGhhcnBvb25lci5jb21iYXQuYWRkQmlvSHBEaWNlKERpY2VfMS5EOC5jb3VudEhhdmluZ0UoOTAsIGhhcnBvb25lci5DT04pLCBEaWNlXzEuRDgpO1xyXG4gICAgaGFycG9vbmVyLmNvbWJhdC5jb21wdXRlSFAoKTtcclxuICAgIGhhcnBvb25lci5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5JbnQsIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZik7XHJcbiAgICBoYXJwb29uZXIuY29tYmF0LnNldFNwZWVkKGNvbnN0YW50c18xLlNwZWVkLldhbGtpbmcsIDI1KTtcclxuICAgIGhhcnBvb25lci5jb21iYXQuc2V0U3BlZWQoY29uc3RhbnRzXzEuU3BlZWQuU3dpbW1pbmcsIDM1KTtcclxuICAgIGhhcnBvb25lci5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuSGVsbGZpcmUsIC0xMDApO1xyXG4gICAgaGFycG9vbmVyLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5MaWdodG5pbmcsIC0xMDApO1xyXG4gICAgaGFycG9vbmVyLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5GaXJlLCAtMTAwKTtcclxuICAgIGhhcnBvb25lci5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpYywgNTApO1xyXG4gICAgaGFycG9vbmVyLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5QaHlzaWNhbCwgNTApO1xyXG4gICAgaGFycG9vbmVyLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Db2xkLCA1MCk7XHJcbiAgICBoYXJwb29uZXIuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkFjaWQsIDEwMCk7XHJcbiAgICBoYXJwb29uZXIuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBvaXNvbiwgMTAwKTtcclxuICAgIGhhcnBvb25lci5jb21iYXQuc2V0U2Vuc2UoY29uc3RhbnRzXzEuU2Vuc2UuQmxpbmRTaWdodCwgMjApO1xyXG4gICAgaGFycG9vbmVyLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsIGA8cD48ZW0+PHN0cm9uZz5JbnZlc3RpdHVyZSBSYWRhci48L3N0cm9uZz48L2VtPiBUaGUgaGFycG9vbmVyIGRvZXNuJ3QgXHJcbiAgICAgICAgaGF2ZSByZWd1bGFyIHNpZ2h0IGJ1dCBjYW4gZGV0ZWN0IHRoZSBhbW91bnRzIG9mIGludmVzdGl0dXJlKEhQKSBjcmVhdHVyZXNcclxuICAgICAgICB3aXRoaW4gMzAwIGZ0IG9mIGl0IGhhdmUuIEl0IHdpbGwgdHJ5IHRvIHRhcmdldCB0aGUgY3JlYXR1cmUgd2l0aCB0aGUgXHJcbiAgICAgICAgbGVhc3QgSFAgd2l0aGluIHJhbmdlLCB1bmxlc3MgdGhlcmUgaXMgYW55IG1hZ2ljYWwgYmFycmllciBiZXR3ZWVuIHRoZW0gXHJcbiAgICAgICAgKGUuZy4gV2FsbCBvZiBGb3JjZSwgU2hpZWxkIHNwZWxsKSBvciBhIHBoeXNpY2FsIG9ic3RhY2xlIHdpdGhpbiB0aGUgXHJcbiAgICAgICAgaGFycG9vbmVyJ3MgYmxpbmRzaWdodCByYW5nZSBvciB0aGUgaGFycG9vbmVyIGZlZWxzIHRoZSBhdHRhY2sgd2lsbCBcclxuICAgICAgICBmYWlsIChlLmcuIHRoZSBsYXN0IGF0dGFjayBkaWRuJ3QgcmVkdWNlIHRoZSB0YXJnZXQncyBIUCBhbmQgbmVpdGhlciBcclxuICAgICAgICBoYXZlIG1vdmVkIHNpbmNlIHRoZW4pLjwvcD5gKSk7XHJcbiAgICBoYXJwb29uZXIuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQWN0aW9uLCBgPHA+PGVtPjxzdHJvbmc+SGFycG9vbiEhLjwvc3Ryb25nPjwvZW0+IFRoZSBoYXJwb29uZXIgbGF1bmNoZXMgaXRzIFxyXG4gICAgICAgIGhhcnBvb24gaW4gYSBzdHJhaWdodCBsaW5lIHRvd2FyZHMgdGhlIHRhcmdldCB3aXRoIGdyZWF0IGZvcmNlLiBBbGwgXHJcbiAgICAgICAgY3JlYXR1cmVzIGluIGEgMzAwIGZ0IGxpbmUgbXVzdCBtYWtlIGEgREMgJHtoYXJwb29uZXIuZGMoY29uc3RhbnRzXzEuRFN0YXQuU3RyKX0gREVYIFxyXG4gICAgICAgIHNhdmUuIE9uIGZhaWx1cmUsIHRoZXkgdGFrZSAkeygwLCBXcmFwXzEud3JhcFJvbGwpKFtbNSwgRGljZV8xLkQxMl0sIFtoYXJwb29uZXIuU1RSLCBEaWNlXzEuRDFdXSl9IFxyXG4gICAgICAgICR7KDAsIFdyYXBfMS53cmFwRGFtYWdlVHlwZSkoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5QaWVyY2luZyl9IGRhbWFnZS4gVGhlIGhhcnBvb24gaXMgYmxvY2tlZCBpZlxyXG4gICAgICAgIGl0IGVuY291bnRlcnMgYW4gb2JzdGFjbGUgaW1tdW5lIHRvIHBpZXJjaW5nIGRhbWFnZS4gXHJcbiAgICAgICAgIDwvcD5gKSk7XHJcbiAgICBoYXJwb29uZXIuY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uQm9udXNBY3Rpb24sIGA8cD48ZW0+PHN0cm9uZz5IYXJwb29uLi4uPC9zdHJvbmc+PC9lbT4gVGhlIGhhcnBvb25lciBsYXVuY2hlcyBpdHMgXHJcbiAgICAgICAgaGFycG9vbiBpbiBhIHN0cmFpZ2h0IGxpbmUgdG93YXJkcyB0aGUgdGFyZ2V0IHdpdGggbW9kZXJhdGUgZm9yY2UuIEFsbCBcclxuICAgICAgICBjcmVhdHVyZXMgaW4gYSAxMjAgZnQgbGluZSBtdXN0IG1ha2UgYSBEQyAke2hhcnBvb25lci5kYyhjb25zdGFudHNfMS5EU3RhdC5TdHIpIC0gMn0gREVYIFxyXG4gICAgICAgIHNhdmUuIE9uIGZhaWx1cmUsIHRoZXkgdGFrZSAkeygwLCBXcmFwXzEud3JhcFJvbGwpKFtbNSwgRGljZV8xLkQ4XSwgW2hhcnBvb25lci5TVFIsIERpY2VfMS5EMV1dKX0gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBpZXJjaW5nKX0gZGFtYWdlLiBUaGUgaGFycG9vbiBpcyBibG9ja2VkIGlmXHJcbiAgICAgICAgaXQgZW5jb3VudGVycyBhbiBvYnN0YWNsZSBpbW11bmUgdG8gcGllcmNpbmcgZGFtYWdlLiBcclxuICAgICAgICAgPC9wPmApKTtcclxuICAgIGhhcnBvb25lci5zaGVldC5jciA9IG5ldyBjb25zdGFudHNfMS5DUlZhbHVlKDUpO1xyXG4gICAgaGFycG9vbmVyLnNoZWV0LnNpemUgPSBjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuTWVkaXVtO1xyXG4gICAgaGFycG9vbmVyLnNoZWV0LnN1YnRpdGxlID0gXCIgU2VhYm9ybiwgTmV1dHJhbCBFdmlsXCI7XHJcbiAgICBoYXJwb29uZXIuc2hlZXQuYWNEZXNjID0gXCIgKE5hdHVyYWwgQXJtb3IpXCI7XHJcbiAgICBoYXJwb29uZXIuc2hlZXQuY2F0ZWdvcnkgPSBcInNlYWJvcm5cIjtcclxuICAgIGhhcnBvb25lci5maW5hbGl6ZSgpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBIYXJwb29uZXIgPSBzZXR1cEhhcnBvb25lcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SGFycG9vbmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBOZXRoZXJzZWFCcmFuZCA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IG5wY0luZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vZGF0YS9ucGNJbmRleFwiKTtcclxuY29uc3QgRGljZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL3JvbGxpbmcvRGljZVwiKTtcclxuY29uc3QgQWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vYWN0aW9uL0FjdGlvblwiKTtcclxuY29uc3QgV3JhcF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9XcmFwXCIpO1xyXG5jb25zdCBDaGFyYWN0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9DaGFyYWN0ZXJcIik7XHJcbmZ1bmN0aW9uIHNldHVwTmV0aGVyc2VhQnJhbmQoKSB7XHJcbiAgICBjb25zdCBuc0JyYW5kID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELk5TQnJhbmQpO1xyXG4gICAgbnNCcmFuZC5jb3JlLm5hbWUgPSBcIk5ldGhlcnNlYSBCcmFuZFwiO1xyXG4gICAgbnNCcmFuZC5jb3JlLmltZ1BhdGggPSBcIm1vYl90b2tlbnMvc2VhYm9ybi9OZXRoZXJzZWFCcmFuZC5wbmdcIjtcclxuICAgIG5zQnJhbmQuZFN0YXRzLmluaXRpYWxpemVTdGF0cygzMCwgMSwgMzAsIDMwLCAzMCwgMzApO1xyXG4gICAgbnNCcmFuZC5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCgxMCk7XHJcbiAgICBuc0JyYW5kLmRTS2lsbHMuZmluYWxpemVTa2lsbHMoKTtcclxuICAgIG5zQnJhbmQub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG4gICAgbnNCcmFuZC5jb21iYXQuYWRkQmlvSHBEaWNlKERpY2VfMS5EMTAwLmNvdW50SGF2aW5nRSgxMDAwMDAwLCBuc0JyYW5kLkNPTiksIERpY2VfMS5EMTAwKTtcclxuICAgIG5zQnJhbmQuY29tYmF0LmNvbXB1dGVIUCgpO1xyXG4gICAgbnNCcmFuZC5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5TdHIsIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIG5zQnJhbmQuY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICBuc0JyYW5kLmNvbWJhdC5zZXRTYXZlKGNvbnN0YW50c18xLkRTdGF0LkludCwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgbnNCcmFuZC5jb21iYXQuc2V0U2F2ZShjb25zdGFudHNfMS5EU3RhdC5XaXMsIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIG5zQnJhbmQuY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuQ2hhLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICBuc0JyYW5kLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5BbGwsIDEwMCk7XHJcbiAgICBuc0JyYW5kLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsIGA8cD48ZW0+PHN0cm9uZz5Eb21haW4gb2YgdGhlIFNlYS48L3N0cm9uZz48L2VtPiA8c3Ryb25nPltMYW5kIFNwZWNpZmljIEFiaWxpdHldPC9zdHJvbmc+IFxyXG4gICAgICAgIEFscmVhZHkgb2NjcHlpbmcgYWxtb3N0IHRoZSBlbnRpcmUgb2NlYW4tZmxvb3Igb2YgdGhlIHBsYW5lIG9mIHdhdGVyIGFuZCBleHRlbmRpbmcgaW4gdmFzdFxyXG4gICAgICAgIHBhdGNoZXMgb3ZlciBudW1lcm91cyBvdGhlciBwbGFuZXMsIHRoZSBuZXRoZXJzZWEgYnJhbmQgbWFya3NcclxuICAgICAgICBhbiBhcmVhIGFzIGJlbG9uZ2luZyB0byB0aGUgc2VhLCBhbmQgdG8gYWxsIHRoZSB0ZXJyb3JzIHRoYXQgYXJpc2UgZnJvbSBpdC5cclxuICAgICAgICBXaGF0IHNlYWJvcm4gaW52YWRlLCB0aGUgbmV0aGVyc2VhIGJyYW5kIG9jY3VwaWVzLiBXaGVyZSB0aGUgbmV0aGVyc2VhIGJyYW5kXHJcbiAgICAgICAgc3ByZWFkcywgdGhlIG9jZWFuLCBldmVyLXJpc2luZywgZm9sbG93cy48YnIvPlxyXG4gICAgICAgIFdoaWxlIG9uIGxhbmQsIGFueSBzZWFib3JuIHN0YW5kaW5nIG9uIHRoZSBicmFuZCBiYXNrcyBpbiBpdHMgcmVmdWdlIGFzIGl0XHJcbiAgICAgICAgZHJhd3Mgbm91cmlzaG1lbnQgZnJvbSBpdC4gQW55IHNlYWJvcm4gZ2V0cyBhdCBsZWFzdCwgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbMywgRGljZV8xLkQ4XSl9IHJlZ2VuZXJhdGlvbiAvIHJvdW5kLCArMTUgZnRcclxuICAgICAgICBtb3ZlbWVudCBhbmQgNjAwIGZ0IHRyZW1vcnNlbnNlIChvbmx5IHdpdGhpbiB0aGUgYnJhbmQpLiBNb3JlIHBvd2VyZnVsIFxyXG4gICAgICAgIHNlYWJvcm4gbWF5IGdhaW4gb3RoZXIgYWJpbGl0aWVzLjwvcD5gKSk7XHJcbiAgICBuc0JyYW5kLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsIGA8cD48ZW0+PHN0cm9uZz5OZWFyIEludnVsbmVyYWJpbGl0eS48L3N0cm9uZz48L2VtPiBXaGlsZSBpdCBkb2VzIG9jY2FzaW9uYWxseVxyXG4gICAgICAgIHdpdGhlciBhbmQgcmV0cmVhdCBieSBpdHNlbGYgYXQgdGltZXMgKHBhcnRpY3VsYXJseSBmb2xsb3dpbmcgZmFpbGVkIGludmFzaW9ucykuXHJcbiAgICAgICAgRm9yY2luZyBpdCB0byByZXRyZWF0IGlzIG5lYXJseSBpbXBvc3NpYmxlLiBBbmQgZGVzdHJveWluZyBpdCBlbnRpcmVseSBtaWdodCBldmVuXHJcbiAgICAgICAgbm90IGJlIHBvc3NpYmxlIGZvciBSdWluLiBJdCBpcyBpbnZ1bG5lcmFibGUgdG8gYWxsIGRhbWFnZSBcclxuICAgICAgICBleGNlcHQgQWxtaWdodHkgKFJhZGlhbnQrKSBkYW1hZ2UgYW5kIHdoaWxlIHRha2luZyB0aGF0IGRhbWFnZSB3aWxsIGNhdXNlIGxvY2FsIFxyXG4gICAgICAgIHBhdGNoZXMgdG8gYnVybiBvciByZXRyZWF0LCB0aGUgd2hvbGUgcmVnZW5lcmF0ZXMgSFAgaW5maW5pdGVseSBmYXN0IChldmVuIGxvY2FsIFxyXG4gICAgICAgIHBhdGNoZXMgYXJlIGRlc3Ryb3llZCBvbmx5IGJlY2F1c2UgaXQgdGFrZXMgdGltZSBmb3IgdGhlIGludmVzdGl0dXJlIHRvIHJlYWNoIFxyXG4gICAgICAgIHRoZW0pLjwvcD5gKSk7XHJcbiAgICBuc0JyYW5kLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLkxhaXJBY3Rpb24sIGA8cD48ZW0+PHN0cm9uZz5QcmVkYXRvcnkgRXhwYW5zaW9uLjwvc3Ryb25nPjwvZW0+IDxzdHJvbmc+W0xhbmQgU3BlY2lmaWMgQWJpbGl0eV08L3N0cm9uZz4gV2hpbGUgb24gbGFuZCwgZXZlcnkgcm91bmQgYXRcclxuICAgICAgICBpbml0aWF0aXZlIGNvdW50IDIwLCB0aGUgbmV0aGVyc2VhIGJyYW5kIG1heSBhdHRlbXB0IHRvIGV4cGFuZCBpbiBhbGwgbmVpZ2hib3VyaW5nIGhvcml6b250YWwgdGlsZXMgXHJcbiAgICAgICAgaXQgcHJlZmVycy4gSWYgdGhlcmUgYXJlIG5vIHN1Y2ggdGlsZXMsIGl0IG1heSBhdHRlbXB0IHRvIGV4cGFuZCBpbiBhbGwgbmVpZ2hib3VyaW5nXHJcbiAgICAgICAgc2xvcGVkIC8gdmVydGljYWwgdGlsZXMuIEl0IGNhbiBub3QgZXhwYW5kIGZyb20gaW4gYW4gYXJlYSBpZiBzb21lb25lIGlzIHN0YW5kaW5nIFxyXG4gICAgICAgIHVwb24gaXQgdGhlcmUsIGluc3RlYWQgaXQgYXR0ZW1wdHMgdG8gc3VjayBpbnZlc3RpdHVyZSBvdXQgb2YgdGhlbSwgdGlsbCB0aGV5IGRpZSAtIGRlYWxpbmcgdGhlbSBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcFJvbGwpKERpY2VfMS5EMTIpfSBuZWNyb3RpYyAodm9pZCkgZGFtYWdlIGFuZCAkeygwLCBXcmFwXzEud3JhcFJvbGwpKERpY2VfMS5EMTIpfSAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTmV1cmFsKX0gXHJcbiAgICAgICAgZGFtYWdlIGV2ZXJ5IHJvdW5kIHRoZXkgcmVtYWluIHN0YW5kaW5nLjwvcD5gKSk7XHJcbiAgICBuc0JyYW5kLnNoZWV0LmNyID0gbmV3IGNvbnN0YW50c18xLkNSVmFsdWUoMzApO1xyXG4gICAgbnNCcmFuZC5jb21iYXQuYWRkQWNCb251cygzNSk7XHJcbiAgICBuc0JyYW5kLnNoZWV0LnNpemUgPSBjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuQ29zbWljO1xyXG4gICAgbnNCcmFuZC5zaGVldC5zdWJ0aXRsZSA9IFwiIFNlYWJvcm4sIFVuYWxpZ25lZFwiO1xyXG4gICAgbnNCcmFuZC5zaGVldC5hY0Rlc2MgPSBcIlwiO1xyXG4gICAgbnNCcmFuZC5zaGVldC5jYXRlZ29yeSA9IFwic2VhYm9yblwiO1xyXG4gICAgbnNCcmFuZC5maW5hbGl6ZSgpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBOZXRoZXJzZWFCcmFuZCA9IHNldHVwTmV0aGVyc2VhQnJhbmQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5ldGhlcnNlYUJyYW5kLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBTaHJpZWtlck4gPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IEFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9BY3Rpb25cIik7XHJcbmNvbnN0IFdyYXBfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9hY3Rpb24vV3JhcFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFNocmlla2VyTigpIHtcclxuICAgIGNvbnN0IHNocmlla2VyTiA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5TaHJpZWtlck4pO1xyXG4gICAgc2hyaWVrZXJOLmNvcmUubmFtZSA9IFwiTm91cmlzaGVkIFNocmlla2VyXCI7XHJcbiAgICBzaHJpZWtlck4uY29yZS5pbWdQYXRoID0gXCJtb2JfdG9rZW5zL3NlYWJvcm4vU2hyaWVrZXJOLnBuZ1wiO1xyXG4gICAgc2hyaWVrZXJOLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMjMsIDE2LCAyNCwgMTEsIDE3LCAyMSk7XHJcbiAgICBzaHJpZWtlck4uZFN0YXRzLnBiID0gY29uc3RhbnRzXzEuUHJvZi5nZXQoNSk7XHJcbiAgICBzaHJpZWtlck4uZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5BdGhsZXRpY3MsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgc2hyaWVrZXJOLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuUGVyZm9ybWFuY2UsIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgc2hyaWVrZXJOLmRTS2lsbHMuZmluYWxpemVTa2lsbHMoKTtcclxuICAgIHNocmlla2VyTi5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbiAgICBzaHJpZWtlck4uY29tYmF0LmFkZEJpb0hwRGljZShEaWNlXzEuRDguY291bnRIYXZpbmdFKDI1MCwgc2hyaWVrZXJOLkNPTiksIERpY2VfMS5EOCk7XHJcbiAgICBzaHJpZWtlck4uY29tYmF0LmNvbXB1dGVIUCgpO1xyXG4gICAgc2hyaWVrZXJOLmNvbWJhdC5zZXRTYXZlKGNvbnN0YW50c18xLkRTdGF0Lldpcyk7XHJcbiAgICBzaHJpZWtlck4uY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKTtcclxuICAgIHNocmlla2VyTi5jb21iYXQuc2V0U3BlZWQoY29uc3RhbnRzXzEuU3BlZWQuV2Fsa2luZywgNDApO1xyXG4gICAgc2hyaWVrZXJOLmNvbWJhdC5zZXRTcGVlZChjb25zdGFudHNfMS5TcGVlZC5Td2ltbWluZywgNjApO1xyXG4gICAgc2hyaWVrZXJOLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5IZWxsZmlyZSwgLTEwMCk7XHJcbiAgICBzaHJpZWtlck4uY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZywgLTEwMCk7XHJcbiAgICBzaHJpZWtlck4uY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWMsIDUwKTtcclxuICAgIHNocmlla2VyTi5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQ29sZCwgNTApO1xyXG4gICAgc2hyaWVrZXJOLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5QaHlzaWNhbCwgNTApO1xyXG4gICAgc2hyaWVrZXJOLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5BY2lkLCAxMDApO1xyXG4gICAgc2hyaWVrZXJOLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb24sIDEwMCk7XHJcbiAgICBzaHJpZWtlck4uY29tYmF0LnNldFNlbnNlKGNvbnN0YW50c18xLlNlbnNlLkJsaW5kU2lnaHQsIDMwMCk7XHJcbiAgICBzaHJpZWtlck4uY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYDxwPjxlbT48c3Ryb25nPlNhdGVkIEh1bW1pbmcuPC9zdHJvbmc+PC9lbT4gVGhlIHNocmlla2VyIHJvYW1zIGFyb3VuZCwgXHJcbiAgICAgICAgYXBwYXJlbnRseSBhaW1sZXNzIChidXQgd2l0aCBhIHRlbmRlbmN5IHRvIG1vdmUgdG93YXJkcyBvdGhlciBzZWFib3JuKSwgYXQgYSBcclxuICAgICAgICB3YWxraW5nL3N3aW1taW5nIHNwZWVkIG9mIDIwIGZ0LCB1bnRpbCBpdCB0YWtlcyBkYW1hZ2UuLi48YnIvPlxyXG4gICAgICAgIFdoaWxlIGluIHRoaXMgc3RhdGUsIGl0IHJlc3RvcmVzICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoW3Nocmlla2VyTi5DT04sIERpY2VfMS5EMTJdKX0gSFAgcGVyIFxyXG4gICAgICAgIHJvdW5kIHRvIGFsbCBzZWFib3JuIHRoYXQgZ2V0IHdpdGhpbiAyMCBmdCBvZiBpdCBhdCBhbnkgcG9pbnQgb2YgdGltZS48L3A+YCkpO1xyXG4gICAgc2hyaWVrZXJOLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsIGA8cD48ZW0+PHN0cm9uZz5GcmVuemllZCBTaHJpZWtpbmcuPC9zdHJvbmc+PC9lbT4gVGhlIHNocmlla2VyIGRhc2hlcyBcclxuICAgICAgICAoYXBwYXJhbnRseSkgcmFuZG9tbHkgKGJ1dCB3aXRoIGEgdGVuZGFuY3kgdG8gbW92ZSB0b3dhcmRzIHRoZSBoaWdoZXN0IFxyXG4gICAgICAgIGNvbmNlbnRyYXRpb24gb2Ygbm9uLXNlYWJvcm4gaXQgY2FuIGRldGVjdCkuIFdoaWxlIGluIFxyXG4gICAgICAgIHRoaXMgc3RhdGUgaXQgZGVhbHMgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbWzIgKiBzaHJpZWtlck4uQ09OLCBEaWNlXzEuRDEyXSwgW3Nocmlla2VyTi5DT04sIERpY2VfMS5EMV1dKX0gXHJcbiAgICAgICAgJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLk5ldXJhbCl9IGRhbWFnZSBwZXIgcm91bmQgKGhhbHZlZCBvbiBhIERDIFxyXG4gICAgICAgICR7c2hyaWVrZXJOLmRjKGNvbnN0YW50c18xLkRTdGF0LkNoYSkgKyBzaHJpZWtlck4uUHJvZn0gV0lTIHNhdmUpIHRvIGFsbCBub24tc2VhYm9yblxyXG4gICAgICAgIHRoYXQgZ2V0IHdpdGhpbiA2MCBmdCBvZiBpdCBhdCBhbnkgcG9pbnQgb2YgdGltZS4gQXQgdGhlIGVuZCBvZiBlYWNoIG9mIFxyXG4gICAgICAgIGl0cyB0dXJucyBpdCB0YWtlcyA1MCB0cnVlIGRhbWFnZS48L3A+YCkpO1xyXG4gICAgc2hyaWVrZXJOLnNoZWV0LmNyID0gbmV3IGNvbnN0YW50c18xLkNSVmFsdWUoMTMpO1xyXG4gICAgc2hyaWVrZXJOLnNoZWV0LnNpemUgPSBjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuTWVkaXVtO1xyXG4gICAgc2hyaWVrZXJOLnNoZWV0LnN1YnRpdGxlID0gXCIgU2VhYm9ybiwgQ2hhb3RpYyBFdmlsXCI7XHJcbiAgICBzaHJpZWtlck4uc2hlZXQuYWNEZXNjID0gXCIgKE5hdHVyYWwgQXJtb3IpXCI7XHJcbiAgICBzaHJpZWtlck4uc2hlZXQuY2F0ZWdvcnkgPSBcInNlYWJvcm5cIjtcclxuICAgIHNocmlla2VyTi5maW5hbGl6ZSgpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBTaHJpZWtlck4gPSBzZXR1cFNocmlla2VyTjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2hyaWVrZXJOLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBTbGlkZXIgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IEFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9BY3Rpb25cIik7XHJcbmNvbnN0IFdyYXBfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9hY3Rpb24vV3JhcFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFNsaWRlcigpIHtcclxuICAgIGNvbnN0IHNsaWRlciA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5TbGlkZXIpO1xyXG4gICAgc2xpZGVyLmNvcmUubmFtZSA9IFwiU2xpZGVyXCI7XHJcbiAgICBzbGlkZXIuY29yZS5pbWdQYXRoID0gXCJtb2JfdG9rZW5zL3NlYWJvcm4vU2xpZGVyLnBuZ1wiO1xyXG4gICAgc2xpZGVyLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMTYsIDE2LCAxMywgOSwgMTEsIDEwKTtcclxuICAgIHNsaWRlci5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCgyKTtcclxuICAgIHNsaWRlci5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcmZvcm1hbmNlLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIHNsaWRlci5kU0tpbGxzLmZpbmFsaXplU2tpbGxzKCk7XHJcbiAgICBzbGlkZXIub3BpbmlvbnMuaXNPcGluaW9uYXRlZCA9IGZhbHNlO1xyXG4gICAgc2xpZGVyLmNvbWJhdC5hZGRCaW9IcERpY2UoRGljZV8xLkQ4LmNvdW50SGF2aW5nRSgyOCwgc2xpZGVyLkNPTiksIERpY2VfMS5EOCk7XHJcbiAgICBzbGlkZXIuY29tYmF0LmNvbXB1dGVIUCgpO1xyXG4gICAgc2xpZGVyLmNvbWJhdC5zZXRTYXZlKGNvbnN0YW50c18xLkRTdGF0Lldpcyk7XHJcbiAgICBzbGlkZXIuY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuQ2hhKTtcclxuICAgIHNsaWRlci5jb21iYXQuc2V0U3BlZWQoY29uc3RhbnRzXzEuU3BlZWQuV2Fsa2luZywgNDApO1xyXG4gICAgc2xpZGVyLmNvbWJhdC5zZXRTcGVlZChjb25zdGFudHNfMS5TcGVlZC5Td2ltbWluZywgNDApO1xyXG4gICAgc2xpZGVyLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5IZWxsZmlyZSwgLTEwMCk7XHJcbiAgICBzbGlkZXIuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZywgLTEwMCk7XHJcbiAgICBzbGlkZXIuY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlBzeWNoaWMsIDUwKTtcclxuICAgIHNsaWRlci5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQ29sZCwgNTApO1xyXG4gICAgc2xpZGVyLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5QaHlzaWNhbCwgNTApO1xyXG4gICAgc2xpZGVyLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5BY2lkLCAxMDApO1xyXG4gICAgc2xpZGVyLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb24sIDEwMCk7XHJcbiAgICBzbGlkZXIuY29tYmF0LnNldFNlbnNlKGNvbnN0YW50c18xLlNlbnNlLkRhcmt2aXNpb24sIDkwKTtcclxuICAgIHNsaWRlci5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5BY3Rpb24sIGA8cD48ZW0+PHN0cm9uZz5UZW50YWNsZSB3cmFwLjwvc3Ryb25nPjwvZW0+IFRoZSBzbGlkZXIgYXR0ZW1wdHMgdG8gd3JhcFxyXG4gICAgICAgIG9uZSBvZiBpdHMgYXBwZW5kYWdlcyBhcm91bmQgYSB0YXJnZXQgdXB0byB0d28gdGltZXMuIEZvciBlYWNoIHRpbWUsIHRoZSB0YXJnZXQgbXVzdCBcclxuICAgICAgICBtYWtlIGEgREMgJHtzbGlkZXIuZGMoY29uc3RhbnRzXzEuRFN0YXQuRGV4KX0gREVYIHNhdmUuIElmIGFsbCByb2xscyBzdWNjZWVkLFxyXG4gICAgICAgIHRoZSBzbGlkZXIgaGFzIG1pc3NlZCBhbmQgbm90aGluZyBoYXBwZW5zLiBJZiBhbnkgZmFpbHMsIHRoZSB0YXJnZXQgXHJcbiAgICAgICAgbXVzdCB0aGVuIG1ha2UgYSBEQyAke3NsaWRlci5kYyhjb25zdGFudHNfMS5EU3RhdC5Db24pfSBDT04gc2F2ZSB0byBhdHRlbXB0IHRvIFxyXG4gICAgICAgIHJlc2lzdCB0aGUgbmV1cm90b3hpbiBpdCBpbmplY3RzLiBPbiBmYWlsdXJlLCB0aGUgdGFyZ2V0IHRha2VzICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoWzgsIERpY2VfMS5ENl0pfSBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTmV1cmFsKX0gZGFtYWdlLiBPbiBzdWNjZXNzLCB0aGV5IHRha2UgaGFsZiBkYW1hZ2UuPC9wPmApKTtcclxuICAgIHNsaWRlci5zaGVldC5jciA9IG5ldyBjb25zdGFudHNfMS5DUlZhbHVlKDIpO1xyXG4gICAgc2xpZGVyLnNoZWV0LnNpemUgPSBjb25zdGFudHNfMS5DcmVhdHVyZVNpemUuTWVkaXVtO1xyXG4gICAgc2xpZGVyLnNoZWV0LnN1YnRpdGxlID0gXCIgU2VhYm9ybiwgQ2hhb3RpYyBFdmlsXCI7XHJcbiAgICBzbGlkZXIuc2hlZXQuYWNEZXNjID0gXCIgKE5hdHVyYWwgQXJtb3IpXCI7XHJcbiAgICBzbGlkZXIuc2hlZXQuY2F0ZWdvcnkgPSBcInNlYWJvcm5cIjtcclxuICAgIHNsaWRlci5maW5hbGl6ZSgpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBTbGlkZXIgPSBzZXR1cFNsaWRlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2xpZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBVcmNoaW4gPSB2b2lkIDA7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBucGNJbmRleF8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2RhdGEvbnBjSW5kZXhcIik7XHJcbmNvbnN0IERpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9yb2xsaW5nL0RpY2VcIik7XHJcbmNvbnN0IEFjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2FjdGlvbi9BY3Rpb25cIik7XHJcbmNvbnN0IFdyYXBfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9hY3Rpb24vV3JhcFwiKTtcclxuY29uc3QgQ2hhcmFjdGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vQ2hhcmFjdGVyXCIpO1xyXG5mdW5jdGlvbiBzZXR1cFVyY2hpbigpIHtcclxuICAgIGNvbnN0IHVyY2hpbiA9IG5ldyBDaGFyYWN0ZXJfMS5DaGFyYWN0ZXIobnBjSW5kZXhfMS5OcGNJRC5VcmNoaW4pO1xyXG4gICAgdXJjaGluLmNvcmUubmFtZSA9IFwiVXJjaGluXCI7XHJcbiAgICB1cmNoaW4uY29yZS5pbWdQYXRoID0gXCJtb2JfdG9rZW5zL3NlYWJvcm4vVXJjaGluLnBuZ1wiO1xyXG4gICAgdXJjaGluLmRTdGF0cy5pbml0aWFsaXplU3RhdHMoMjAsIDEsIDI0LCAxLCAxLCAxKTtcclxuICAgIHVyY2hpbi5kU3RhdHMucGIgPSBjb25zdGFudHNfMS5Qcm9mLmdldCgzKTtcclxuICAgIHVyY2hpbi5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLkF0aGxldGljcywgY29uc3RhbnRzXzEuSGlkZGVuLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICB1cmNoaW4uZFNLaWxscy5zZXRTa2lsbFByb2ZpY2llbmN5KGNvbnN0YW50c18xLkRTa2lsbC5QZXJjZXB0aW9uLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuUHJvZik7XHJcbiAgICB1cmNoaW4uZFNLaWxscy5maW5hbGl6ZVNraWxscygpO1xyXG4gICAgdXJjaGluLm9waW5pb25zLmlzT3BpbmlvbmF0ZWQgPSBmYWxzZTtcclxuICAgIHVyY2hpbi5jb21iYXQuYWRkQmlvSHBEaWNlKERpY2VfMS5EOC5jb3VudEhhdmluZ0UoMjUwLCB1cmNoaW4uQ09OKSwgRGljZV8xLkQ4KTtcclxuICAgIHVyY2hpbi5jb21iYXQuY29tcHV0ZUhQKCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuU3RyLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LnNldFNhdmUoY29uc3RhbnRzXzEuRFN0YXQuQ29uLCBjb25zdGFudHNfMS5Qcm9maWNpZW5jeUxldmVsLkV4cGVydCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LnNldFNwZWVkKGNvbnN0YW50c18xLlNwZWVkLldhbGtpbmcsIDUpO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRTcGVlZChjb25zdGFudHNfMS5TcGVlZC5Td2ltbWluZywgMTApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5IZWxsZmlyZSwgLTEwMCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkxpZ2h0bmluZywgLTEwMCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlRodW5kZXIsIC0xMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5QaWVyY2luZywgLTEwMCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkZpcmUsIC0xMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qc3ljaGljLCA1MCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlNsYXNoaW5nLCAxMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5CbHVkZ2VvbmluZywgMTAwKTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQWNpZCwgMTAwKTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuQ29sZCwgMTAwKTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUG9pc29uLCAxMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5hZGRDb25kaXRpb25JbW11bml0eShjb25zdGFudHNfMS5Db25kaXRpb24uQ2hhcm1lZCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LmFkZENvbmRpdGlvbkltbXVuaXR5KGNvbnN0YW50c18xLkNvbmRpdGlvbi5GcmlnaHRlbmVkKTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0U2Vuc2UoY29uc3RhbnRzXzEuU2Vuc2UuVHJlbW9yU2Vuc2UsIDEyMCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYDxwPjxlbT48c3Ryb25nPkZvc3NpbGl6ZWQgRXhpc3RlbmNlLjwvc3Ryb25nPjwvZW0+IFRoZSBzZWEgdXJjaGluIHdpbGwgXHJcbiAgICAgICAgbmV2ZXIgdGFrZSBkYW1hZ2UgZHVlIHRvIHdhdGVyIHByZXNzdXJlIGFuZCBtb3ZlcyBleGNlZWRpbmdseSBzbG93bHkgb25cclxuICAgICAgICBodW5kcmVkcyBvZiB0aW55IHR1YmUgZmVldC4gVGhlIHNlYSB1cmNoaW4gbWF5IG5ldmVyIGRhc2gsIGFuZCBpdHMgXHJcbiAgICAgICAgbW92ZW1lbnQgc3BlZWQgb25seSBpbmNyZWFzZXMgYnkgNWZ0IG9uIHRoZSBOZXRoZXJzZWEgYnJhbmQsIGluc3RlYWQgb2YgdGhlIHVzdWFsIDE1ZnQuPC9wPmApKTtcclxuICAgIHVyY2hpbi5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PGVtPjxzdHJvbmc+RGVuc2UgdG94aW5zLjwvc3Ryb25nPjwvZW0+IFRoZSBzZWEgdXJjaGluIGhhcyBhIHRyYW5zcGFyZW50XHJcbiAgICAgICAgb3V0ZXIgc2hlbGwgZXhwb3NpbmcgaXRzIHZpc2NlcmEgYW5kIGEgZGVuc2UgYm9keSBmaWxsZWQgd2l0aCBpbXB1cml0aWVzXHJcbiAgICAgICAgdGhhdCB0aGV5IHJlbGVhc2UgaW4gc2VsZi1kZWZlbnNlLiBXaGVuZXZlciB0aGUgdXJjaGluJ3MgSFAgZmFsbHMgYmVsb3dcclxuICAgICAgICBhIG11bHRpcGxlIG9mIDUwLCBpdCByZWxlYXNlcyB0b3hpbnMgdGhhdCBkZWFscyBcclxuICAgICAgICAkeygwLCBXcmFwXzEud3JhcFJvbGwpKFt1cmNoaW4uQ09OLCBEaWNlXzEuRDIwXSl9ICR7KDAsIFdyYXBfMS53cmFwRGFtYWdlVHlwZSkoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Db3Jyb3Npb24pfSBkYW1hZ2UgdG8gYWxsXHJcbiAgICAgICAgbm9uLXNlYWJvcm4gY3JlYXR1cmVzIHdpdGhpbiAyMCBmdC4gSWYgaXQncyBIUCBmYWxscyB0aHJvdWdoIG1vcmUgXHJcbiAgICAgICAgdGhhbiBvbmUgbXVsdGlwbGUgaW4gYSBzaW5nbGUgaGl0IHRoZSBkYW1hZ2UgZG9lcyBub3QgY29tcG91bmQuIFxyXG4gICAgICAgICA8L3A+YCkpO1xyXG4gICAgdXJjaGluLnNoZWV0LmNyID0gbmV3IGNvbnN0YW50c18xLkNSVmFsdWUoNSk7XHJcbiAgICB1cmNoaW4uc2hlZXQuc2l6ZSA9IGNvbnN0YW50c18xLkNyZWF0dXJlU2l6ZS5NZWRpdW07XHJcbiAgICB1cmNoaW4uc2hlZXQuc3VidGl0bGUgPSBcIiBTZWFib3JuLCBOZXV0cmFsXCI7XHJcbiAgICB1cmNoaW4uc2hlZXQuYWNEZXNjID0gXCIgKE5hdHVyYWwgQXJtb3IpXCI7XHJcbiAgICB1cmNoaW4uc2hlZXQuY2F0ZWdvcnkgPSBcInNlYWJvcm5cIjtcclxuICAgIHVyY2hpbi5maW5hbGl6ZSgpO1xyXG59XHJcbmV4cG9ydHMuc2V0dXBVcmNoaW4gPSBzZXR1cFVyY2hpbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXJjaGluLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXBVcmNoaW5OID0gdm9pZCAwO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL2NvbnN0YW50c1wiKTtcclxuY29uc3QgbnBjSW5kZXhfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9kYXRhL25wY0luZGV4XCIpO1xyXG5jb25zdCBEaWNlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vcm9sbGluZy9EaWNlXCIpO1xyXG5jb25zdCBBY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9hY3Rpb24vQWN0aW9uXCIpO1xyXG5jb25zdCBXcmFwXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vYWN0aW9uL1dyYXBcIik7XHJcbmNvbnN0IENoYXJhY3Rlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL0NoYXJhY3RlclwiKTtcclxuZnVuY3Rpb24gc2V0dXBVcmNoaW5OKCkge1xyXG4gICAgY29uc3QgdXJjaGluID0gbmV3IENoYXJhY3Rlcl8xLkNoYXJhY3RlcihucGNJbmRleF8xLk5wY0lELlVyY2hpbk4pO1xyXG4gICAgdXJjaGluLmNvcmUubmFtZSA9IFwiTm91cmlzaGVkIFVyY2hpblwiO1xyXG4gICAgdXJjaGluLmNvcmUuaW1nUGF0aCA9IFwibW9iX3Rva2Vucy9zZWFib3JuL1VyY2hpbk4ucG5nXCI7XHJcbiAgICB1cmNoaW4uZFN0YXRzLmluaXRpYWxpemVTdGF0cygyNSwgMSwgMzAsIDEsIDEsIDEpO1xyXG4gICAgdXJjaGluLmRTdGF0cy5wYiA9IGNvbnN0YW50c18xLlByb2YuZ2V0KDUpO1xyXG4gICAgdXJjaGluLmRTS2lsbHMuc2V0U2tpbGxQcm9maWNpZW5jeShjb25zdGFudHNfMS5EU2tpbGwuQXRobGV0aWNzLCBjb25zdGFudHNfMS5IaWRkZW4sIGNvbnN0YW50c18xLlByb2ZpY2llbmN5TGV2ZWwuRXhwZXJ0KTtcclxuICAgIHVyY2hpbi5kU0tpbGxzLnNldFNraWxsUHJvZmljaWVuY3koY29uc3RhbnRzXzEuRFNraWxsLlBlcmNlcHRpb24sIGNvbnN0YW50c18xLkhpZGRlbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgdXJjaGluLmRTS2lsbHMuZmluYWxpemVTa2lsbHMoKTtcclxuICAgIHVyY2hpbi5vcGluaW9ucy5pc09waW5pb25hdGVkID0gZmFsc2U7XHJcbiAgICB1cmNoaW4uY29tYmF0LmFkZEJpb0hwRGljZShEaWNlXzEuRDguY291bnRIYXZpbmdFKDQwMCwgdXJjaGluLkNPTiksIERpY2VfMS5EOCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LmNvbXB1dGVIUCgpO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRTYXZlKGNvbnN0YW50c18xLkRTdGF0LlN0ciwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRTYXZlKGNvbnN0YW50c18xLkRTdGF0LkNvbiwgY29uc3RhbnRzXzEuUHJvZmljaWVuY3lMZXZlbC5FeHBlcnQpO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRTcGVlZChjb25zdGFudHNfMS5TcGVlZC5XYWxraW5nLCA1KTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0U3BlZWQoY29uc3RhbnRzXzEuU3BlZWQuU3dpbW1pbmcsIDEwKTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuSGVsbGZpcmUsIC0xMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5MaWdodG5pbmcsIC0xMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5UaHVuZGVyLCAtMTAwKTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuRmlyZSwgMTAwKTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUHN5Y2hpYywgMTAwKTtcclxuICAgIHVyY2hpbi5jb21iYXQuc2V0UmVzKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuU2xhc2hpbmcsIDEwMCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LnNldFJlcyhjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkJsdWRnZW9uaW5nLCAxMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5BY2lkLCAxMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Db2xkLCAxMDApO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRSZXMoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5Qb2lzb24sIDEwMCk7XHJcbiAgICB1cmNoaW4uY29tYmF0LmFkZENvbmRpdGlvbkltbXVuaXR5KGNvbnN0YW50c18xLkNvbmRpdGlvbi5DaGFybWVkKTtcclxuICAgIHVyY2hpbi5jb21iYXQuYWRkQ29uZGl0aW9uSW1tdW5pdHkoY29uc3RhbnRzXzEuQ29uZGl0aW9uLkZyaWdodGVuZWQpO1xyXG4gICAgdXJjaGluLmNvbWJhdC5zZXRTZW5zZShjb25zdGFudHNfMS5TZW5zZS5UcmVtb3JTZW5zZSwgMTIwKTtcclxuICAgIHVyY2hpbi5jb21iYXQuYWRkQWN0aW9uKG5ldyBBY3Rpb25fMS5BY3Rpb24oY29uc3RhbnRzXzEuQWN0aXZhdGlvbi5TcGVjaWFsLCBgPHA+PGVtPjxzdHJvbmc+Rm9zc2lsaXplZCBFeGlzdGVuY2UuPC9zdHJvbmc+PC9lbT4gVGhlIHNlYSB1cmNoaW4gd2lsbCBcclxuICAgICAgICBuZXZlciB0YWtlIGRhbWFnZSBkdWUgdG8gd2F0ZXIgcHJlc3N1cmUgYW5kIG1vdmVzIGV4Y2VlZGluZ2x5IHNsb3dseSBvblxyXG4gICAgICAgIGh1bmRyZWRzIG9mIHRpbnkgdHViZSBmZWV0LiBUaGUgc2VhIHVyY2hpbiBtYXkgbmV2ZXIgZGFzaCwgYW5kIGl0cyBcclxuICAgICAgICBtb3ZlbWVudCBzcGVlZCBvbmx5IGluY3JlYXNlcyBieSA1ZnQgb24gdGhlIE5ldGhlcnNlYSBicmFuZCwgaW5zdGVhZCBvZiB0aGUgdXN1YWwgMTVmdC48L3A+YCkpO1xyXG4gICAgdXJjaGluLmNvbWJhdC5hZGRBY3Rpb24obmV3IEFjdGlvbl8xLkFjdGlvbihjb25zdGFudHNfMS5BY3RpdmF0aW9uLlNwZWNpYWwsIGA8cD48ZW0+PHN0cm9uZz5EZW5zZSB0b3hpbnMuPC9zdHJvbmc+PC9lbT4gVGhlIG5vdXJpc2hlZCBzZWEgdXJjaGluIGhhcyBcclxuICAgICAgICBhIHRyYW5zcGFyZW50IG91dGVyIHNoZWxsIGV4cG9zaW5nIGl0cyB2aXNjZXJhIGFuZCBhIGRlbnNlIGJvZHkgZmlsbGVkIFxyXG4gICAgICAgIHdpdGggaW1wdXJpdGllcyB0aGF0IHRoZXkgcmVsZWFzZSBpbiBzZWxmLWRlZmVuc2UuIFdoZW5ldmVyIHRoZSB1cmNoaW4nc1xyXG4gICAgICAgIEhQIGZhbGxzIGJlbG93IGEgbXVsdGlwbGUgb2YgNDAsIGl0IHJlbGVhc2VzIHRveGlucyB0aGF0IGRlYWxzIFxyXG4gICAgICAgICR7KDAsIFdyYXBfMS53cmFwUm9sbCkoW3VyY2hpbi5DT04sIERpY2VfMS5EMTJdKX0gJHsoMCwgV3JhcF8xLndyYXBEYW1hZ2VUeXBlKShjb25zdGFudHNfMS5EYW1hZ2VUeXBlLkNvcnJvc2lvbil9IFxyXG4gICAgICAgIGRhbWFnZSBhbmQgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShbdXJjaGluLkNPTiwgRGljZV8xLkQxMl0pfSAkeygwLCBXcmFwXzEud3JhcERhbWFnZVR5cGUpKGNvbnN0YW50c18xLkRhbWFnZVR5cGUuTmV1cmFsKX1cclxuICAgICAgICB0byBhbGwgbm9uLXNlYWJvcm4gY3JlYXR1cmVzIHdpdGhpbiA2MCBmdC4gSWYgaXQncyBIUCBmYWxscyB0aHJvdWdoIG1vcmUgXHJcbiAgICAgICAgdGhhbiBvbmUgbXVsdGlwbGUgaW4gYSBzaW5nbGUgaGl0IHRoZSBkYW1hZ2UgZG9lcyBub3QgY29tcG91bmQuXHJcbiAgICAgICAgIDwvcD5gKSk7XHJcbiAgICB1cmNoaW4uY29tYmF0LmFkZEFjdGlvbihuZXcgQWN0aW9uXzEuQWN0aW9uKGNvbnN0YW50c18xLkFjdGl2YXRpb24uU3BlY2lhbCwgYDxwPjxlbT48c3Ryb25nPlNwaWt5IENhcHJpY2UuPC9zdHJvbmc+PC9lbT4gQSBjcmVhdHVyZSB0aGF0IGF0dGVtcHRzIHRvIFxyXG4gICAgICAgIGF0dGFjayB0aGUgdXJjaGluIGZyb20gYSA1ZnQgcmFuZ2UgdGFrZXMgJHsoMCwgV3JhcF8xLndyYXBSb2xsKShEaWNlXzEuRDEwKX0gcGllcmNpbmcgZGFtYWdlLlxyXG4gICAgICAgIFRoaXMgZGFtYWdlIGlzIGlnbm9yZWQgaWYgdGhlIGhpdCB3YXMgYSBjcml0aWNhbCBoaXQuXHJcbiAgICAgICAgIDwvcD5gKSk7XHJcbiAgICB1cmNoaW4uc2hlZXQuY3IgPSBuZXcgY29uc3RhbnRzXzEuQ1JWYWx1ZSg5KTtcclxuICAgIHVyY2hpbi5zaGVldC5zaXplID0gY29uc3RhbnRzXzEuQ3JlYXR1cmVTaXplLk1lZGl1bTtcclxuICAgIHVyY2hpbi5zaGVldC5zdWJ0aXRsZSA9IFwiIFNlYWJvcm4sIE5ldXRyYWxcIjtcclxuICAgIHVyY2hpbi5zaGVldC5hY0Rlc2MgPSBcIiAoTmF0dXJhbCBBcm1vcilcIjtcclxuICAgIHVyY2hpbi5zaGVldC5jYXRlZ29yeSA9IFwic2VhYm9yblwiO1xyXG4gICAgdXJjaGluLmZpbmFsaXplKCk7XHJcbn1cclxuZXhwb3J0cy5zZXR1cFVyY2hpbk4gPSBzZXR1cFVyY2hpbk47XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVyY2hpbk4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy50ZXN0RGFtYWdlVHJlZSA9IGV4cG9ydHMuRGFtYWdlVHJlZSA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vZGF0YS9jb25zdGFudHNcIik7XHJcbmNvbnN0IERhbWFnZVRyZWVMZWFmTm9kZUJ1ZmZfMSA9IHJlcXVpcmUoXCIuL0RhbWFnZVRyZWVMZWFmTm9kZUJ1ZmZcIik7XHJcbmNvbnN0IERhbWFnZVRyZWVOb2RlXzEgPSByZXF1aXJlKFwiLi9EYW1hZ2VUcmVlTm9kZVwiKTtcclxuY29uc3QgRGFtYWdlVHJlZU5vZGVUYWdfMSA9IHJlcXVpcmUoXCIuL0RhbWFnZVRyZWVOb2RlVGFnXCIpO1xyXG5jb25zdCBEYW1hZ2VUcmVlTm9kZVR5cGVfMSA9IHJlcXVpcmUoXCIuL0RhbWFnZVRyZWVOb2RlVHlwZVwiKTtcclxuY2xhc3MgRGFtYWdlVHJlZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihyb290KSB7XHJcbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcclxuICAgIH1cclxuICAgIGFwcGx5QnVmZihidWZmKSB7XHJcbiAgICAgICAgdGhpcy5yb290LmFwcGx5QnVmZihidWZmKTtcclxuICAgIH1cclxuICAgIHJlc2V0QnVmZnMoKSB7XHJcbiAgICAgICAgdGhpcy5yb290LnJlc2V0QnVmZnMoKTtcclxuICAgIH1cclxuICAgIGNvbXB1dGVEUFIoZXhwZWN0ZWREZWYgPSAxNSwgZXhwZWN0ZWRSZXMgPSBuZXcgTWFwKCkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290LmNvbXB1dGVEUFIoZXhwZWN0ZWREZWYsIGV4cGVjdGVkUmVzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRhbWFnZVRyZWUgPSBEYW1hZ2VUcmVlO1xyXG5mdW5jdGlvbiB0ZXN0RGFtYWdlVHJlZSgpIHtcclxuICAgIGNvbnN0IGRhbWFnZVRyZWUgPSBuZXcgRGFtYWdlVHJlZShuZXcgRGFtYWdlVHJlZU5vZGVfMS5EYW1hZ2VUcmVlTm9kZShEYW1hZ2VUcmVlTm9kZVR5cGVfMS5EYW1hZ2VUcmVlTm9kZVR5cGUuQW5kLCBbXHJcbiAgICAgICAgLy8gQWN0aW9uc1xyXG4gICAgICAgIG5ldyBEYW1hZ2VUcmVlTm9kZV8xLkRhbWFnZVRyZWVOb2RlKERhbWFnZVRyZWVOb2RlVHlwZV8xLkRhbWFnZVRyZWVOb2RlVHlwZS5PciwgW1xyXG4gICAgICAgICAgICBuZXcgRGFtYWdlVHJlZU5vZGVfMS5EYW1hZ2VUcmVlTm9kZShEYW1hZ2VUcmVlTm9kZVR5cGVfMS5EYW1hZ2VUcmVlTm9kZVR5cGUuQW5kLCBbXHJcbiAgICAgICAgICAgICAgICBuZXcgRGFtYWdlVHJlZU5vZGVfMS5EYW1hZ2VUcmVlTm9kZShEYW1hZ2VUcmVlTm9kZVR5cGVfMS5EYW1hZ2VUcmVlTm9kZVR5cGUuTGVhZiwgW10sIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgICAgIFtjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlNsYXNoaW5nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VQZXJBdHRhY2s6IDEwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2tzUGVyUm91bmQ6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N1cmFjeVJhdGluZzogOVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgXSksIG5ldyBTZXQoW0RhbWFnZVRyZWVOb2RlVGFnXzEuRGFtYWdlVHJlZU5vZGVUYWcuV2VhcG9uQXR0YWNrLFxyXG4gICAgICAgICAgICAgICAgICAgIERhbWFnZVRyZWVOb2RlVGFnXzEuRGFtYWdlVHJlZU5vZGVUYWcuTWVsZWVBdHRhY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgRGFtYWdlVHJlZU5vZGVUYWdfMS5EYW1hZ2VUcmVlTm9kZVRhZy5PbkFjdGlvbl0pLCBcIkxvbmdzd29yZFwiKSxcclxuICAgICAgICAgICAgICAgIG5ldyBEYW1hZ2VUcmVlTm9kZV8xLkRhbWFnZVRyZWVOb2RlKERhbWFnZVRyZWVOb2RlVHlwZV8xLkRhbWFnZVRyZWVOb2RlVHlwZS5MZWFmLCBbXSwgbmV3IE1hcChbXHJcbiAgICAgICAgICAgICAgICAgICAgW2NvbnN0YW50c18xLkRhbWFnZVR5cGUuUmFkaWFudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlUGVyQXR0YWNrOiA5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNrc1BlclJvdW5kOiAwLjI1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdXJhY3lSYXRpbmc6IDlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIF0pLCBuZXcgU2V0KFtEYW1hZ2VUcmVlTm9kZVRhZ18xLkRhbWFnZVRyZWVOb2RlVGFnLldlYXBvbkF0dGFjayxcclxuICAgICAgICAgICAgICAgICAgICBEYW1hZ2VUcmVlTm9kZVRhZ18xLkRhbWFnZVRyZWVOb2RlVGFnLlNwZWxsQXR0YWNrXSksIFwiRGl2aW5lIFNtaXRlXCIpXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBuZXcgRGFtYWdlVHJlZU5vZGVfMS5EYW1hZ2VUcmVlTm9kZShEYW1hZ2VUcmVlTm9kZVR5cGVfMS5EYW1hZ2VUcmVlTm9kZVR5cGUuTGVhZiwgW10sIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgW2NvbnN0YW50c18xLkRhbWFnZVR5cGUuUmFkaWFudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VQZXJBdHRhY2s6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2tzUGVyUm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VyYWN5UmF0aW5nOiA5XHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgXSksIG5ldyBTZXQoW0RhbWFnZVRyZWVOb2RlVGFnXzEuRGFtYWdlVHJlZU5vZGVUYWcuUmFuZ2VkQXR0YWNrLFxyXG4gICAgICAgICAgICAgICAgRGFtYWdlVHJlZU5vZGVUYWdfMS5EYW1hZ2VUcmVlTm9kZVRhZy5TcGVsbEF0dGFjayxcclxuICAgICAgICAgICAgICAgIERhbWFnZVRyZWVOb2RlVGFnXzEuRGFtYWdlVHJlZU5vZGVUYWcuT25BY3Rpb25dKSwgXCJDYW50cmlwIFtSYW5nZToxMjBdXCIpXHJcbiAgICAgICAgXSksXHJcbiAgICAgICAgLy8gQm9udXMgQWN0aW9uc1xyXG4gICAgICAgIG5ldyBEYW1hZ2VUcmVlTm9kZV8xLkRhbWFnZVRyZWVOb2RlKERhbWFnZVRyZWVOb2RlVHlwZV8xLkRhbWFnZVRyZWVOb2RlVHlwZS5PciwgW1xyXG4gICAgICAgICAgICBuZXcgRGFtYWdlVHJlZU5vZGVfMS5EYW1hZ2VUcmVlTm9kZShEYW1hZ2VUcmVlTm9kZVR5cGVfMS5EYW1hZ2VUcmVlTm9kZVR5cGUuQW5kLCBbXHJcbiAgICAgICAgICAgICAgICBuZXcgRGFtYWdlVHJlZU5vZGVfMS5EYW1hZ2VUcmVlTm9kZShEYW1hZ2VUcmVlTm9kZVR5cGVfMS5EYW1hZ2VUcmVlTm9kZVR5cGUuTGVhZiwgW10sIG5ldyBNYXAoW1xyXG4gICAgICAgICAgICAgICAgICAgIFtjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlNsYXNoaW5nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VQZXJBdHRhY2s6IDEwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2tzUGVyUm91bmQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N1cmFjeVJhdGluZzogOVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgXSksIG5ldyBTZXQoW0RhbWFnZVRyZWVOb2RlVGFnXzEuRGFtYWdlVHJlZU5vZGVUYWcuV2VhcG9uQXR0YWNrLFxyXG4gICAgICAgICAgICAgICAgICAgIERhbWFnZVRyZWVOb2RlVGFnXzEuRGFtYWdlVHJlZU5vZGVUYWcuTWVsZWVBdHRhY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgRGFtYWdlVHJlZU5vZGVUYWdfMS5EYW1hZ2VUcmVlTm9kZVRhZy5PbkJvbnVzQWN0aW9uXSksIFwiTG9uZ3N3b3JkXCIpLFxyXG4gICAgICAgICAgICAgICAgbmV3IERhbWFnZVRyZWVOb2RlXzEuRGFtYWdlVHJlZU5vZGUoRGFtYWdlVHJlZU5vZGVUeXBlXzEuRGFtYWdlVHJlZU5vZGVUeXBlLkxlYWYsIFtdLCBuZXcgTWFwKFtcclxuICAgICAgICAgICAgICAgICAgICBbY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5SYWRpYW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2VQZXJBdHRhY2s6IDksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2tzUGVyUm91bmQ6IDAuMTI1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdXJhY3lSYXRpbmc6IDlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIF0pLCBuZXcgU2V0KFtEYW1hZ2VUcmVlTm9kZVRhZ18xLkRhbWFnZVRyZWVOb2RlVGFnLldlYXBvbkF0dGFjayxcclxuICAgICAgICAgICAgICAgICAgICBEYW1hZ2VUcmVlTm9kZVRhZ18xLkRhbWFnZVRyZWVOb2RlVGFnLlNwZWxsQXR0YWNrXSksIFwiRGl2aW5lIFNtaXRlXCIpXHJcbiAgICAgICAgICAgIF0pLFxyXG4gICAgICAgIF0pXHJcbiAgICBdKSk7XHJcbiAgICBsZXQgZHByID0gZGFtYWdlVHJlZS5jb21wdXRlRFBSKDE1KTtcclxuICAgIGNvbnNvbGUuYXNzZXJ0KGRwci5nZXQoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5TbGFzaGluZykgPT0gMjMuNjI1LCBgRXhwZWN0ZWQgc2xhc2hpbmcgZGFtYWdlOiAwLCBgICtcclxuICAgICAgICBgQWN0dWFsIHNsYXNoaW5nIGRhbWFnZSAke2Rwci5nZXQoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5TbGFzaGluZyl9YCk7XHJcbiAgICBjb25zb2xlLmFzc2VydChkcHIuZ2V0KGNvbnN0YW50c18xLkRhbWFnZVR5cGUuUmFkaWFudCkgPT0gMi41MzEyNSwgYEV4cGVjdGVkIHJhZGlhbnQgZGFtYWdlOiAwLGAgK1xyXG4gICAgICAgIGBBY3R1YWwgcmFkaWFudCBkYW1hZ2U6ICR7ZHByLmdldChjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlJhZGlhbnQpfWApO1xyXG4gICAgZHByID0gZGFtYWdlVHJlZS5jb21wdXRlRFBSKDE1LCBuZXcgTWFwKFtcclxuICAgICAgICBbY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5TbGFzaGluZywgMC43NV0sXHJcbiAgICAgICAgW2NvbnN0YW50c18xLkRhbWFnZVR5cGUuUmFkaWFudCwgMF1cclxuICAgIF0pKTtcclxuICAgIGNvbnNvbGUuYXNzZXJ0KGRwci5nZXQoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5TbGFzaGluZykgPT0gMS45Njg3NSwgYEV4cGVjdGVkIHNsYXNoaW5nIGRhbWFnZTogMCwgYCArXHJcbiAgICAgICAgYEFjdHVhbCBzbGFzaGluZyBkYW1hZ2UgJHtkcHIuZ2V0KGNvbnN0YW50c18xLkRhbWFnZVR5cGUuU2xhc2hpbmcpfWApO1xyXG4gICAgY29uc29sZS5hc3NlcnQoZHByLmdldChjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlJhZGlhbnQpID09IDguMzQzNzUsIGBFeHBlY3RlZCByYWRpYW50IGRhbWFnZTogMCxgICtcclxuICAgICAgICBgQWN0dWFsIHJhZGlhbnQgZGFtYWdlOiAke2Rwci5nZXQoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5SYWRpYW50KX1gKTtcclxuICAgIGRhbWFnZVRyZWUuYXBwbHlCdWZmKG5ldyBEYW1hZ2VUcmVlTGVhZk5vZGVCdWZmXzEuRGFtYWdlVHJlZUxlYWZOb2RlQnVmZigobm9kZSkgPT4gbm9kZS50YWdzLmhhcyhEYW1hZ2VUcmVlTm9kZVRhZ18xLkRhbWFnZVRyZWVOb2RlVGFnLldlYXBvbkF0dGFjaykgJiZcclxuICAgICAgICBub2RlLnRhZ3MuaGFzKERhbWFnZVRyZWVOb2RlVGFnXzEuRGFtYWdlVHJlZU5vZGVUYWcuT25BY3Rpb24pLCAoYmFzZVBhcmFtcykgPT4ge1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZQYXJhbXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBbZGFtYWdlVHlwZSwgcGFyYW1zXSBvZiBiYXNlUGFyYW1zLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBidWZmUGFyYW1zLnNldChkYW1hZ2VUeXBlLCB7XHJcbiAgICAgICAgICAgICAgICBhY2N1cmFjeVJhdGluZzogcGFyYW1zLmFjY3VyYWN5UmF0aW5nLFxyXG4gICAgICAgICAgICAgICAgYXR0YWNrc1BlclJvdW5kOiBwYXJhbXMuYXR0YWNrc1BlclJvdW5kICsgMSxcclxuICAgICAgICAgICAgICAgIGRhbWFnZVBlckF0dGFjazogcGFyYW1zLmRhbWFnZVBlckF0dGFja1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ1ZmZQYXJhbXM7XHJcbiAgICB9KSk7XHJcbiAgICBkcHIgPSBkYW1hZ2VUcmVlLmNvbXB1dGVEUFIoMTUsIG5ldyBNYXAoW1xyXG4gICAgICAgIFtjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlNsYXNoaW5nLCAwLjc1XSxcclxuICAgICAgICBbY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5SYWRpYW50LCAwXVxyXG4gICAgXSkpO1xyXG4gICAgY29uc29sZS5hc3NlcnQoZHByLmdldChjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlNsYXNoaW5nKSA9PSA3Ljg3NSwgYEV4cGVjdGVkIHNsYXNoaW5nIGRhbWFnZTogMCwgYCArXHJcbiAgICAgICAgYEFjdHVhbCBzbGFzaGluZyBkYW1hZ2UgJHtkcHIuZ2V0KGNvbnN0YW50c18xLkRhbWFnZVR5cGUuU2xhc2hpbmcpfWApO1xyXG4gICAgY29uc29sZS5hc3NlcnQoZHByLmdldChjb25zdGFudHNfMS5EYW1hZ2VUeXBlLlJhZGlhbnQpID09IDIuNTMxMjUsIGBFeHBlY3RlZCByYWRpYW50IGRhbWFnZTogMCxgICtcclxuICAgICAgICBgQWN0dWFsIHJhZGlhbnQgZGFtYWdlOiAke2Rwci5nZXQoY29uc3RhbnRzXzEuRGFtYWdlVHlwZS5SYWRpYW50KX1gKTtcclxuICAgIGRhbWFnZVRyZWUucmVzZXRCdWZmcygpO1xyXG4gICAgY29uc29sZS5sb2coXCJEYW1hZ2UgQ29tcHV0YXRpb24gVGVzdHMgcGVyZm9ybWVkLlwiKTtcclxufVxyXG5leHBvcnRzLnRlc3REYW1hZ2VUcmVlID0gdGVzdERhbWFnZVRyZWU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURhbWFnZVRyZWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5EYW1hZ2VUcmVlTGVhZk5vZGVCdWZmID0gdm9pZCAwO1xyXG5jbGFzcyBEYW1hZ2VUcmVlTGVhZk5vZGVCdWZmIHtcclxuICAgIGNvbnN0cnVjdG9yKHNob3VsZEFwcGx5LCBhcHBseSkge1xyXG4gICAgICAgIHRoaXMuc2hvdWxkQXBwbHkgPSBzaG91bGRBcHBseTtcclxuICAgICAgICB0aGlzLmFwcGx5ID0gYXBwbHk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EYW1hZ2VUcmVlTGVhZk5vZGVCdWZmID0gRGFtYWdlVHJlZUxlYWZOb2RlQnVmZjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGFtYWdlVHJlZUxlYWZOb2RlQnVmZi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkRhbWFnZVRyZWVOb2RlID0gdm9pZCAwO1xyXG5jb25zdCBEYW1hZ2VUcmVlTm9kZVR5cGVfMSA9IHJlcXVpcmUoXCIuL0RhbWFnZVRyZWVOb2RlVHlwZVwiKTtcclxuY2xhc3MgRGFtYWdlVHJlZU5vZGUge1xyXG4gICAgY29uc3RydWN0b3IoX25vZGVUeXBlLCBfY2hpbGRyZW4sIF9zZWxmRGFtYWdlID0gbnVsbCwgX3RhZ3MgPSBudWxsLCBjb21tZW50ID0gXCJcIikge1xyXG4gICAgICAgIHRoaXMuX25vZGVUeXBlID0gX25vZGVUeXBlO1xyXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuID0gX2NoaWxkcmVuO1xyXG4gICAgICAgIHRoaXMuX3NlbGZEYW1hZ2UgPSBfc2VsZkRhbWFnZTtcclxuICAgICAgICB0aGlzLl90YWdzID0gX3RhZ3M7XHJcbiAgICAgICAgdGhpcy5jb21tZW50ID0gY29tbWVudDtcclxuICAgICAgICBpZiAodGhpcy5fbm9kZVR5cGUgPT0gRGFtYWdlVHJlZU5vZGVUeXBlXzEuRGFtYWdlVHJlZU5vZGVUeXBlLkxlYWYpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGhhdmUgY2hpbGRyZW4gb24gYSBsZWFmIG5vZGUuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VsZkRhbWFnZSAhPSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWdzICE9IG51bGwgfHxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tbWVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IGxlYWYgbm9kZXMgY2FuIGhhdmUgdGhlc2UsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2J1ZmZzID0gbmV3IFNldCgpO1xyXG4gICAgfVxyXG4gICAgY29tcHV0ZURQUihleHBlY3RlZERlZiwgZXhwZWN0ZWRSZXMpIHtcclxuICAgICAgICBpZiAodGhpcy5fbm9kZVR5cGUgPT0gRGFtYWdlVHJlZU5vZGVUeXBlXzEuRGFtYWdlVHJlZU5vZGVUeXBlLkxlYWYpIHtcclxuICAgICAgICAgICAgY29uc3QgZGFtYWdlTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBsZXQgYnVmZmVkRGFtYWdlID0gdGhpcy5fc2VsZkRhbWFnZTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBidWZmIG9mIHRoaXMuX2J1ZmZzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVmZi5zaG91bGRBcHBseSh0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlZERhbWFnZSA9IGJ1ZmYuYXBwbHkoYnVmZmVkRGFtYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtkYW1hZ2VUeXBlLCBwYXJhbXNdIG9mIGJ1ZmZlZERhbWFnZS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGRhbWFnZU1hcC5zZXQoZGFtYWdlVHlwZSwgcGFyYW1zLmRhbWFnZVBlckF0dGFjayAqXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmF0dGFja3NQZXJSb3VuZCAqXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oMC45NSwgTWF0aC5tYXgoMC4wNSwgKDIxICsgcGFyYW1zLmFjY3VyYWN5UmF0aW5nIC0gZXhwZWN0ZWREZWYpIC8gMjApKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhwZWN0ZWRSZXMuaGFzKGRhbWFnZVR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlTWFwLnNldChkYW1hZ2VUeXBlLCBkYW1hZ2VNYXAuZ2V0KGRhbWFnZVR5cGUpICogKDEgLSBleHBlY3RlZFJlcy5nZXQoZGFtYWdlVHlwZSkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZGFtYWdlTWFwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbm9kZVR5cGUgPT0gRGFtYWdlVHJlZU5vZGVUeXBlXzEuRGFtYWdlVHJlZU5vZGVUeXBlLk9yKSB7XHJcbiAgICAgICAgICAgIGxldCBtYXhEUFIgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIGxldCBtYXhEUFJWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkRFBSID0gY2hpbGQuY29tcHV0ZURQUihleHBlY3RlZERlZiwgZXhwZWN0ZWRSZXMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkRFBSVmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIGNoaWxkRFBSLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGREUFJWYWx1ZSArPSB2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkRFBSVmFsdWUgPiBtYXhEUFJWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heERQUlZhbHVlID0gY2hpbGREUFJWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBtYXhEUFIgPSBjaGlsZERQUjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbWF4RFBSO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLl9ub2RlVHlwZSA9PSBEYW1hZ2VUcmVlTm9kZVR5cGVfMS5EYW1hZ2VUcmVlTm9kZVR5cGUuQW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjY3VtdWxhdG9yID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuX2NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZERQUiA9IGNoaWxkLmNvbXB1dGVEUFIoZXhwZWN0ZWREZWYsIGV4cGVjdGVkUmVzKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2RhbWFnZVR5cGUsIGRwcl0gb2YgY2hpbGREUFIuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWNjVmFsdWUgPSBhY2N1bXVsYXRvci5oYXMoZGFtYWdlVHlwZSkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvci5nZXQoZGFtYWdlVHlwZSkgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yLnNldChkYW1hZ2VUeXBlLCBhY2NWYWx1ZSArIGRwcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIG5vZGUgdHlwZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXBwbHlCdWZmKGJ1ZmYpIHtcclxuICAgICAgICBpZiAodGhpcy5fbm9kZVR5cGUgIT0gRGFtYWdlVHJlZU5vZGVUeXBlXzEuRGFtYWdlVHJlZU5vZGVUeXBlLkxlYWYpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQuYXBwbHlCdWZmKGJ1ZmYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYnVmZnMuYWRkKGJ1ZmYpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlQnVmZihidWZmKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25vZGVUeXBlICE9IERhbWFnZVRyZWVOb2RlVHlwZV8xLkRhbWFnZVRyZWVOb2RlVHlwZS5MZWFmKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLnJlbW92ZUJ1ZmYoYnVmZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9idWZmcy5kZWxldGUoYnVmZik7XHJcbiAgICB9XHJcbiAgICByZXNldEJ1ZmZzKCkge1xyXG4gICAgICAgIHRoaXMuX2J1ZmZzLmNsZWFyKCk7XHJcbiAgICB9XHJcbiAgICBnZXQgdGFncygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGFncztcclxuICAgIH1cclxuICAgIGdldCBjaGlsZHJlbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW47XHJcbiAgICB9XHJcbiAgICBnZXQgbm9kZVR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVUeXBlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHNlbGZEYW1hZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGZEYW1hZ2U7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5EYW1hZ2VUcmVlTm9kZSA9IERhbWFnZVRyZWVOb2RlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EYW1hZ2VUcmVlTm9kZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkRhbWFnZVRyZWVOb2RlVGFnID0gdm9pZCAwO1xyXG52YXIgRGFtYWdlVHJlZU5vZGVUYWc7XHJcbihmdW5jdGlvbiAoRGFtYWdlVHJlZU5vZGVUYWcpIHtcclxuICAgIERhbWFnZVRyZWVOb2RlVGFnW0RhbWFnZVRyZWVOb2RlVGFnW1wiV2VhcG9uQXR0YWNrXCJdID0gMF0gPSBcIldlYXBvbkF0dGFja1wiO1xyXG4gICAgRGFtYWdlVHJlZU5vZGVUYWdbRGFtYWdlVHJlZU5vZGVUYWdbXCJTcGVsbEF0dGFja1wiXSA9IDFdID0gXCJTcGVsbEF0dGFja1wiO1xyXG4gICAgRGFtYWdlVHJlZU5vZGVUYWdbRGFtYWdlVHJlZU5vZGVUYWdbXCJNZWxlZUF0dGFja1wiXSA9IDJdID0gXCJNZWxlZUF0dGFja1wiO1xyXG4gICAgRGFtYWdlVHJlZU5vZGVUYWdbRGFtYWdlVHJlZU5vZGVUYWdbXCJSYW5nZWRBdHRhY2tcIl0gPSAzXSA9IFwiUmFuZ2VkQXR0YWNrXCI7XHJcbiAgICBEYW1hZ2VUcmVlTm9kZVRhZ1tEYW1hZ2VUcmVlTm9kZVRhZ1tcIk9uQWN0aW9uXCJdID0gNF0gPSBcIk9uQWN0aW9uXCI7XHJcbiAgICBEYW1hZ2VUcmVlTm9kZVRhZ1tEYW1hZ2VUcmVlTm9kZVRhZ1tcIk9uQm9udXNBY3Rpb25cIl0gPSA1XSA9IFwiT25Cb251c0FjdGlvblwiO1xyXG59KShEYW1hZ2VUcmVlTm9kZVRhZyA9IGV4cG9ydHMuRGFtYWdlVHJlZU5vZGVUYWcgfHwgKGV4cG9ydHMuRGFtYWdlVHJlZU5vZGVUYWcgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EYW1hZ2VUcmVlTm9kZVRhZy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkRhbWFnZVRyZWVOb2RlVHlwZSA9IHZvaWQgMDtcclxudmFyIERhbWFnZVRyZWVOb2RlVHlwZTtcclxuKGZ1bmN0aW9uIChEYW1hZ2VUcmVlTm9kZVR5cGUpIHtcclxuICAgIERhbWFnZVRyZWVOb2RlVHlwZVtEYW1hZ2VUcmVlTm9kZVR5cGVbXCJMZWFmXCJdID0gMF0gPSBcIkxlYWZcIjtcclxuICAgIERhbWFnZVRyZWVOb2RlVHlwZVtEYW1hZ2VUcmVlTm9kZVR5cGVbXCJBbmRcIl0gPSAxXSA9IFwiQW5kXCI7XHJcbiAgICBEYW1hZ2VUcmVlTm9kZVR5cGVbRGFtYWdlVHJlZU5vZGVUeXBlW1wiT3JcIl0gPSAyXSA9IFwiT3JcIjtcclxufSkoRGFtYWdlVHJlZU5vZGVUeXBlID0gZXhwb3J0cy5EYW1hZ2VUcmVlTm9kZVR5cGUgfHwgKGV4cG9ydHMuRGFtYWdlVHJlZU5vZGVUeXBlID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGFtYWdlVHJlZU5vZGVUeXBlLmpzLm1hcCIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyBUZXN0IFN1aXRlcy5cclxuY29uc3QgZ3JhcGhzX25hdmlnYXRpb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9ncmFwaHNfbmF2aWdhdGlvblwiKTtcclxuY29uc3QgTnBjT3BpbmlvbnNfMSA9IHJlcXVpcmUoXCIuL2dhbWVwbGF5L29waW5pb25zL05wY09waW5pb25zXCIpO1xyXG5jb25zdCBuYXZpZ2F0aW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb24vbmF2aWdhdGlvblwiKTtcclxuY29uc3QgY2FyZF8xID0gcmVxdWlyZShcIi4vZ2FtZXBsYXkvY2FyZFwiKTtcclxuY29uc3QgY291bnRyeV8xID0gcmVxdWlyZShcIi4vZ2FtZXBsYXkvZGF0YS9jb3VudHJ5XCIpO1xyXG5jb25zdCBkZXZvdGlvbk1hcF8xID0gcmVxdWlyZShcIi4vZ2FtZXBsYXkvbWFwL2luc3RhbmNlcy9kZXZvdGlvbk1hcFwiKTtcclxuY29uc3Qgc2tpbGxNYXBfMSA9IHJlcXVpcmUoXCIuL2dhbWVwbGF5L21hcC9pbnN0YW5jZXMvc2tpbGxNYXBcIik7XHJcbmNvbnN0IE1hcEdyYXBoXzEgPSByZXF1aXJlKFwiLi9nYW1lcGxheS9tYXAvTWFwR3JhcGhcIik7XHJcbmNvbnN0IFVwZ3JhZGVHcmFwaF8xID0gcmVxdWlyZShcIi4vZ2FtZXBsYXkvbWFwL1VwZ3JhZGVHcmFwaFwiKTtcclxuY29uc3QgYWN0aXZhdGVDb21iYXRTY2VuYXJpb3NfMSA9IHJlcXVpcmUoXCIuL2dhbWVwbGF5L3NjZW5hcmlvcy9hY3RpdmF0ZUNvbWJhdFNjZW5hcmlvc1wiKTtcclxuY29uc3QgV3JhcF8xID0gcmVxdWlyZShcIi4vZ2FtZXBsYXkvc2ltdWxhdGlvbi9hY3Rpb24vV3JhcFwiKTtcclxuY29uc3QgQmFzZV8xID0gcmVxdWlyZShcIi4vZ2FtZXBsYXkvc2ltdWxhdGlvbi9iYXNlL0Jhc2VcIik7XHJcbmNvbnN0IENhcmRBc3BlY3RfMSA9IHJlcXVpcmUoXCIuL2dhbWVwbGF5L3NpbXVsYXRpb24vY2hhcmFjdGVycy9hc3BlY3RzL0NhcmRBc3BlY3RcIik7XHJcbmNvbnN0IF9pbml0XzEgPSByZXF1aXJlKFwiLi9nYW1lcGxheS9zaW11bGF0aW9uL2NoYXJhY3RlcnMvaW5zdGFuY2VzL19pbml0XCIpO1xyXG5jb25zdCBfaW5pdF8yID0gcmVxdWlyZShcIi4vZ2FtZXBsYXkvc2ltdWxhdGlvbi9jaGFyYWN0ZXJzL2luc3RhbmNlcy9tb2JzL19pbml0XCIpO1xyXG5jb25zdCBEYW1hZ2VUcmVlXzEgPSByZXF1aXJlKFwiLi9nYW1lcGxheS9zaW11bGF0aW9uL2RhbWFnZS9EYW1hZ2VUcmVlXCIpO1xyXG5jb25zdCBoaXN0b3J5XzEgPSByZXF1aXJlKFwiLi9nYW1lcGxheS9kYXRhL2hpc3RvcnlcIik7XHJcbmNvbnN0IFJvbGxhYmxlXzEgPSByZXF1aXJlKFwiLi9nYW1lcGxheS9yb2xsaW5nL1JvbGxhYmxlXCIpO1xyXG5jb25zdCBjb250cmFjdHNfMSA9IHJlcXVpcmUoXCIuL2dhbWVwbGF5L21vbnN0ZXJzL2NvbnRyYWN0c1wiKTtcclxuY29uc3QgaW5zdGFuY2VzXzEgPSByZXF1aXJlKFwiLi9nYW1lcGxheS9tb25zdGVycy9pbnN0YW5jZXNcIik7XHJcbmNvbnN0IHNoZWV0XzEgPSByZXF1aXJlKFwiLi9nYW1lcGxheS9tb25zdGVycy9zaGVldFwiKTtcclxuY29uc3Qgc2V0dXBVSV8xID0gcmVxdWlyZShcIi4vZ2FtZXBsYXkvbW9uc3RlcnMvc2V0dXBVSVwiKTtcclxuJCgoKSA9PiB7XHJcbiAgICAoMCwgUm9sbGFibGVfMS50ZXN0KSgpO1xyXG4gICAgKDAsIE5wY09waW5pb25zXzEudGVzdCkoKTtcclxuICAgICgwLCBzaGVldF8xLnRlc3QpKCk7XHJcbiAgICAoMCwgRGFtYWdlVHJlZV8xLnRlc3REYW1hZ2VUcmVlKSgpO1xyXG4gICAgKDAsIGluc3RhbmNlc18xLnNldHVwTW9uc3RlcnMpKCk7XHJcbiAgICAoMCwgX2luaXRfMS5zZXR1cENoYXJhY3RlcnMpKCk7XHJcbiAgICAoMCwgX2luaXRfMi5zZXR1cE1vYnMpKCk7XHJcbiAgICAoMCwgbmF2aWdhdGlvbl8xLnNldHVwTmF2KSgpO1xyXG4gICAgKDAsIGNhcmRfMS5zZXR1cENhcmRzKSgpO1xyXG4gICAgKDAsIGhpc3RvcnlfMS5zZXR1cEhpc3RvcnkpKCk7XHJcbiAgICAoMCwgY291bnRyeV8xLnNldHVwQ291bnRyaWVzKSgpO1xyXG4gICAgKDAsIHNldHVwVUlfMS5zZXR1cFVJKSgpO1xyXG4gICAgKDAsIFdyYXBfMS5lbmFibGVSb2xsaW5nKSgpO1xyXG4gICAgKDAsIGNvbnRyYWN0c18xLnJlbmRlckNvbnRyYWN0cykoKTtcclxuICAgICgwLCBhY3RpdmF0ZUNvbWJhdFNjZW5hcmlvc18xLmFjdGl2YXRlQ29tYmF0U2NlbmFyaW9zKSgpO1xyXG4gICAgQ2FyZEFzcGVjdF8xLkNhcmRBc3BlY3Quc2V0dXBDYXJkTG9naWMoKTtcclxuICAgICgwLCBNYXBHcmFwaF8xLnNldHVwTWFwR3JhcGgpKCQoXCIjbWFwX2dyYXBoX2FyZWFcIiksIGRldm90aW9uTWFwXzEuZGV2b3Rpb25NYXApO1xyXG4gICAgKDAsIFVwZ3JhZGVHcmFwaF8xLnNldHVwVXBncmFkZUdyYXBoKSgkKFwiI3NraWxsX2dyYXBoX2FyZWFcIiksIHNraWxsTWFwXzEuc2tpbGxNYXApO1xyXG4gICAgKDAsIGdyYXBoc19uYXZpZ2F0aW9uXzEuc2V0dXBHcmFwaE5hdikoKTtcclxuICAgICgwLCBCYXNlXzEuc2V0dXBCYXNlTG9naWMpKCk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsibWVtb2l6ZSIsImZuIiwibWVtb2l6ZWRBcmd1bWVudHMiLCJNYXAiLCJhcmdzIiwiaGFzIiwiZ2V0IiwicmVzdWx0Iiwic2V0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1cGRhdGVNYXAiLCJnZXROdW1iZXJTdWZmaXgiLCJnZXRFbnVtSXRlcmF0b3IiLCJnZXRFbnVtTGVuZ3RoIiwiRVEiLCJ3YWl0Rm9yRmluYWxFdmVudCIsInRpbWVycyIsImNhbGxiYWNrIiwibXMiLCJ1bmlxdWVJZCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJhIiwiYiIsIk1hdGgiLCJhYnMiLCJlbiIsImtleXMiLCJsZW5ndGgiLCJpdGVtIiwiaXNOYU4iLCJOdW1iZXIiLCJuIiwiRXJyb3IiLCJtIiwia2V5IiwidmFsIiwic2V0dXBHcmFwaE5hdiIsIlNpZGVQYW5lbF8xIiwiJCIsIm9uIiwidGhpcyIsImhhc0NsYXNzIiwiJHNpZGVCYW5uZXIiLCJzaWRlUGFuZWwiLCJTaWRlUGFuZWwiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiaGlkZSIsImRhdGEiLCJzaG93IiwicmVzZXQiLCJzZXR1cE5hdiIsImlkVG9OYXZJY29uIiwiJHBhZ2VOYXYiLCJlYWNoIiwiaWQiLCJhcHBlbmQiLCJmaW5kIiwidGV4dCIsIm5hdlRvIiwic2Nyb2xsSW50b1ZpZXciLCJiZWhhdmlvciIsIkJhc2VVbmlxdWVET01HZW5lcmF0b3IiLCIkbWF0Y2hlcyIsInJlZnJlc2hSZW5kZXJlZEVsZW1lbnQiLCIkZWxlbWVudCIsImRvUmVmcmVzaFJlbmRlcmVkRWxlbWVudCIsIlRfTk9XIiwiR2FtZVRpbWVzdGFtcCIsImNvbW1vbl8xIiwiY29uc3RydWN0b3IiLCJ5ZWFyIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsIm5EYXlzIiwiZ2VuZXJhdGVET01TdHJpbmciLCJmbG9vciIsImhvdXJTdHIiLCJTdHJpbmciLCJwYWRTdGFydCIsIm1pblN0ciIsIkRBWSIsInNldHVwQ2FyZHMiLCJDYXJkIiwiJGNvbW1vbkNlbnRyYWxWaWV3IiwiJHRva2VuU3BhY2UiLCIkdG9rZW5zIiwicGFyZW50Iiwic2libGluZ3MiLCJjaGlsZHJlbiIsIiRmbG9hdGluZ0NhcmQiLCIkY2FyZEdyYXZleWFyZCIsInNuYXBXaW5kb3dEaW1lbnNpb25zIiwid2luZG93IiwicmVzaXplIiwicyIsImluZGV4S2V5IiwiZGlzcGxheVRleHQiLCIkd2luZG93Iiwidmlld3BvcnRIZWlnaHRJblB4IiwiaGVpZ2h0Iiwidmlld3BvcnRXaWR0aEluUHgiLCJ3aWR0aCIsImZsb2F0aW5nQ2FyZFdpZHRoIiwiZmxvYXRpbmdDYXJkSGVpZ2h0IiwieCIsInkiLCJwb3N0WCIsInByZVgiLCJwb3N0WSIsInByZVkiLCJjc3MiLCJ0b3AiLCJsZWZ0IiwiSW5kZXgiLCJjYXJkIiwiY2FyZEluZGV4IiwiZ2V0Q2FyZEluZGV4IiwiJGV4aXN0aW5nQ2FyZCIsIiRjYXJkIiwiZ2VuZXJhdGVDYXJkIiwibG9hZEZyb21ET00iLCJlIiwiZ2V0SW5kZXhpYmxlIiwic2hvd0NhcmRGbG9hdGluZyIsInJldmVhbEZsb2F0aW5nQ2FyZCIsIm1vdmVGbG9hdGluZ0NhcmQiLCJjbGllbnRYIiwiY2xpZW50WSIsImhpZGVGbG9hdGluZ0NhcmQiLCJzaG93Q2FyZEZ1bGxTaXplIiwiJGNhcmRfbGlua3MiLCJSYXRpbmciLCJSYXJpdHkiLCJTaG93biIsIlZhZ3VlIiwiSGludGVkIiwiSGlkZGVuIiwiVmlzaWJpbGl0eUxldmVsIiwiRXJhIiwiQ1NraWxsIiwiQ1JWYWx1ZSIsIlByb2YiLCJTdGF0VmFsdWUiLCJFIiwiQWN0aXZhdGlvbiIsIkNsYXNzSGl0RGljZSIsIkNvbmRpdGlvbiIsIkRhbWFnZVR5cGUiLCJBZHZlbnR1cmVyQ2xhc3MiLCJTcGVlZCIsIlN0YXRGb3JTa2lsbCIsIkRTa2lsbCIsIlNpemVUb0RpY2UiLCJDcmVhdHVyZVNpemUiLCJzZW5zZVN0ciIsIlNlbnNlIiwiUHJvZmljaWVuY3lMZXZlbCIsIkRTdGF0IiwiRGljZV8xIiwiRGFya3Zpc2lvbiIsIkJsaW5kU2lnaHQiLCJUcmVtb3JTZW5zZSIsIlRydWVTaWdodCIsIkRldmlsU2lnaHQiLCJTdGVlbFNpZ2h0IiwiVGlueSIsIkQ0IiwiU21hbGwiLCJENiIsIk1lZGl1bSIsIkQ4IiwiTGFyZ2UiLCJEMTAiLCJIdWdlIiwiRDEyIiwiR2FyZ2FudHVhbiIsIkQyMCIsIkNvc21pYyIsIkQxMDAiLCJBY3JvYmF0aWNzIiwiRGV4IiwiQW5pbWFsSGFuZGxpbmciLCJXaXMiLCJBcmNhbmEiLCJJbnQiLCJBdGhsZXRpY3MiLCJTdHIiLCJEZWNlcHRpb24iLCJDaGEiLCJIaXN0b3J5IiwiSW5zaWdodCIsIkludGltaWRhdGlvbiIsIkludmVzdGlnYXRpb24iLCJNZWRpY2luZSIsIk5hdHVyZSIsIlBlcmNlcHRpb24iLCJQZXJmb3JtYW5jZSIsIlBlcnN1YXNpb24iLCJSZWxpZ2lvbiIsIlNsaWdodE9mSGFuZCIsIlN0ZWFsdGgiLCJTdXJ2aXZhbCIsIkhvbm9yIiwiQXJ0aWZpY2VyIiwiQmFyYmFyaWFuIiwiQmFyZCIsIkNsZXJpYyIsIkRydWlkIiwiRmlnaHRlciIsIk1vbmsiLCJQYWxhZGluIiwiUmFuZ2VyIiwiUm9ndWUiLCJTb3JjZXJlciIsIldhcmxvY2siLCJXaXphcmQiLCJkaWNlIiwiZGllIiwiY291bnQiLCJlbnRyaWVzIiwic2lkZXMiLCJyb3VuZCIsIm1pbiIsIm1heCIsImFkanVzdFN0YXQiLCJieSIsIm1vZCIsIm51bWJlciIsImluc3RhbmNlcyIsImlzSW50ZWdlciIsImluc3RhbmNlIiwibGV2ZWwiLCJOb25lIiwiSGFsZiIsIkV4cGVydCIsInByb2ZPdmVycmlkZSIsImNlaWwiLCJjb21wYXJlVG9TdGF0cyIsIkNpdHlUYWciLCJzZXR1cENvdW50cmllcyIsIkNvdW50cnkiLCIkbXlOYW1lIiwiJG15RGVzYyIsIiRjb3VudHJ5TmFtZXMiLCJwbGFuZXQiLCJuYW1lIiwiZnVsbE5hbWUiLCJjYXBpdGFsIiwibGVhZGVyIiwiZ292ZXJubWVudCIsInBvcHVsYXRpb24iLCJwcmltYXJ5Q3VsdHVyZSIsImFyZWEiLCJjYXBpdGFsUG9wdWxhdGlvbiIsImNhcGl0YWxUZW1wZXJhdHVyZSIsImNhcGl0YWxFbGV2YXRpb24iLCJyYWNlcyIsImV4b3RpY1JhY2VzIiwiZXhjbHVzaXZlUmFjZXMiLCJkZXNjcmlwdGlvbiIsInRhZ3MiLCJjYXBpdGFsVGFncyIsImNhcGl0YWxTdW1tYXJ5IiwibGVhZGVyRGVzY3JpcHRpb24iLCJpbmRleCIsImNvdW50cmllc0luZGV4IiwiYXBwZW5kVG8iLCJnZW5lcmF0ZURPTSIsIiRjb3VudHJ5RGVzYyIsInNob3dDb3VudHJ5IiwibWFwIiwiam9pbiIsIkFycmF5IiwiZnJvbSIsInRhZyIsInNpemUiLCJwZXJjZW50IiwiaXNBcnJheSIsImxvYWRTdGF0aWNFbGVtZW50cyIsIk9yZ2FuaXplZCIsIlNwcmF3bGluZyIsIldhbGxlZCIsIkltcHJlZ25hYmxlIiwiRm9ydGlmaWVkIiwiT3BlbiIsIkNsdXR0ZXJlZCIsIlVuZGVmZW5kZWQiLCJCcmVhdGh0YWtpbmciLCJHcmVlbnMiLCJSdWlucyIsIkhhcmJvciIsIlVuZGVyZ3JvdW5kIiwic2V0dXBIaXN0b3J5IiwiZXJhcyIsImN1bW1IZWlnaHRzIiwidG90YWxIZWlnaHQiLCJyZXZlcnNlIiwiZXZlbnRzIiwiZXJhIiwicmVsX3QiLCJsYW5lIiwiJGhpc3Rvcnlab25lcyIsIiRsYW5lIiwic3RhcnQiLCJlcG9jaCIsImRldGFpbHMiLCJkaXN0RnJvbVRvcCIsIk5wY0lEIiwiUGNJbmRleCIsIlBBUlRZX0lOU0lHSFQiLCJQY0NoYXJpc21hTW9kcyIsIlBjVG9rZW5OYW1lcyIsIklEX0FVUkVMSUEiLCJJRF9DWVJJT04iLCJJRF9IRUxJT1MiLCJFZGdlIiwiQmFzZVVuaXF1ZURPTUdlbmVyYXRvcl8xIiwidjEiLCJ2MiIsInN1cGVyIiwiYWRkTmVpZ2hib3VyIiwiZGVsdGFYIiwiZGVsdGFZIiwic3FydCIsIlBJIiwiYXRhbiIsIkdyYXBoIiwidmVydGljZXMiLCJlZGdlcyIsIm5laWdoYm91cnMiLCJ4TWluIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJ5TWluIiwieE1heCIsIk5FR0FUSVZFX0lORklOSVRZIiwieU1heCIsInNvcnRlZFZlcnRpY2VzIiwidmVydGV4IiwidmFsdWVzIiwicHVzaCIsInNvcnQiLCJ2ZXJ0ZXhTdHJpbmdzIiwiZWRnZVN0cmluZ3MiLCJlZGdlc1Blckxlc3NlclZlcnRleCIsImVkZ2UiLCJTdHlsZVN1YmNsYXNzIiwiQWRkaXRpb25hbEVsZW1lbnRDbGFzc2VzIiwieFNwYW4iLCJ5U3BhbiIsImFkZFZlcnRleCIsInYiLCJncmFwaElEIiwicmVtb3ZlVmVydGV4IiwiZGVsZXRlIiwiYWRkRWRnZSIsImxlc3Nlck51bUlkIiwibnVtSWQiLCJoaWdoZXJOdW1JZCIsImNvbnNvbGUiLCJsb2ciLCJTZXQiLCJhZGQiLCJyZW1vdmVFZGdlIiwibGVzc2VyVklkIiwiaGlnaGVyVklkIiwiYXNzZXJ0IiwiYXJlTmVpZ2hib3VycyIsIm1hcExvY2FsQ29vcmRpbmF0ZXNUb1NjcmVlblBvc2l0aW9uIiwib3JpZ2luIiwibG9va3VwVmVydGV4QnlJZCIsIlBBRERJTkciLCJNYXBFZGdlIiwiRWRnZV8xIiwiZ3JhcGgiLCJlbmQiLCJfd29ybGRMZW5ndGhNdWx0aXBsaWVyIiwiY2VudGVyIiwicm90YXRpb24iLCJzZXR1cE1hcEdyYXBoIiwiTWFwR3JhcGgiLCJCYXNlXzEiLCJHcmFwaF8xIiwid29ybGREaXN0YW5jZVBlclBpeGVsIiwiZ2V0U3BhY2lhbERpc3RhbmNlIiwieiIsImdldEVkZ2VEaXN0YW5jZSIsImxlc3NlcklkeCIsImhpZ2hlcklkeCIsIndvcmxkTGVuZ3RoIiwiJGFyZWEiLCIkbWFwR3JhcGgiLCJhY3RpdmVWZXJ0ZXgiLCJkb21SZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidmlkIiwiYXR0ciIsInYyaWQiLCJ2ZXJ0ZXgyIiwiZGlzdGFuY2UiLCJkaXN0YW5jZVRleHQiLCJ0b0xvY2FsZVN0cmluZyIsImVkZ2VEaXN0YW5jZVRleHQiLCJlZGdlRGlzdGFuY2UiLCJzd2FwQ29udGVudEFuZFJlc2hvdyIsImlubmVyV2lkdGgiLCJnZW5lcmF0ZVNpdGVET01TdHJpbmciLCJzdG9wUHJvcGFnYXRpb24iLCJ0b2dnbGVGdWxsU3BhbiIsImdlbmVyYXRlQmFzZURPTSIsInNldHVwTWFwR3JhcGhMb2dpYyIsIk1hcFRyYW5zcG9ydGF0aW9uIiwiVHJhbnNwb3J0YXRpb25Ub0RPTVN0cmluZyIsIkZvb3QiLCJIb3JzZSIsIkF1dG9tb2JpbGUiLCJKZXQiLCJTcGFjZSIsIkNvZ25pdGlvbiIsIk1hcFZlcnRleCIsIkNoYXJhY3Rlcl8xIiwiTWFwVHJhbnNwb3J0YXRpb25fMSIsIk1hcFZlcnRleFN0YXR1c18xIiwiVmVydGV4XzEiLCJWZXJ0ZXgiLCJzdGF0dXMiLCJpbnRlcmVzdCIsInZlcnRleENvdW50Iiwic3RhdHVzRGVzY092ZXJyaWRlIiwiaW50ZWwiLCJfc2l0ZXNPZkludGVyZXN0IiwiX2NoYXJhY3RlclBhdGhzIiwiaXNCYXNlIiwibG93ZXJDYXNlVHlwZU5hbWUiLCJNYXBWZXJ0ZXhTdGF0dXMiLCJ0b0xvd2VyQ2FzZSIsInN0YXR1c0Rlc2MiLCJNYXBWZXJ0ZXhTdGF0dXNEZXNjcmlwdGlvbnMiLCJtYXJrQXNCYXNlIiwiYWRkU2l0ZU9mSW50ZXJlc3QiLCJ0eXBlIiwiZGVzYyIsImluZm8iLCJjb25uZWN0aW9ucyIsInRhYmxlRW50cmllcyIsIm5hdmlnYXRpb25FbnRyaWVzIiwidHJhbnNwb3J0YXRpb24iLCJ0aW1lIiwiYWRkQ2hhcmFjdGVyVG9rZW4iLCJjaGFyYWN0ZXIiLCJ0b2tlbkRPTSIsInNvaURPTSIsInRva2VuRE9NcyIsInBhdGgiLCJDaGFyYWN0ZXIiLCJpbWdQYXRoIiwiYmFzZURPTSIsIk1hcFZlcnRleFN0YXR1c0ljb25zIiwiVW5rbm93biIsIk5ldXRyYWwiLCJGcmllbmRseSIsIlNhZmUiLCJDb21iYXQiLCJFbWVyZ2VuY3kiLCJEZWFkbHkiLCJCbGFjayIsIiRwYW5lbCIsIiRjb250ZW50IiwiQ09OVEVOVF9FTEVNRU5UX0NMQVNTX05BTUUiLCJlbXB0eSIsIkZVTExfU1BBTiIsInRvZ2dsZSIsImlzVmlzaWJsZSIsInN3YXBDb250ZW50IiwibmV3Q29udGVudCIsImhpZGVUaGVuU2hvdyIsInRvZ2dsZUNsYXNzIiwiU0xJREVfVElNRSIsIkxFRlRfUEFORUxfQ0xBU1NfTkFNRSIsIlJJR0hUX1BBTkVMX0NMQVNTX05BTUUiLCJhbGlnbkNsYXNzTmFtZSIsInZpc2libGVBbGlnbkNsYXNzTmFtZSIsIlZJU0lCTEVfTEVGVF9QQU5FTF9DTEFTU19OQU1FIiwiVklTSUJMRV9SSUdIVF9QQU5FTF9DTEFTU19OQU1FIiwid2hlbkhpZGRlbiIsInRpbWVUb0hpZGUiLCJQQU5FTF9DTEFTU19OQU1FIiwiTU9EX0xFRlQiLCJNT0RfUklHSFQiLCJNT0RfVklTSUJMRSIsIlNVQl9FTEVNRU5UX1NVRkZJWF9DT05URU5UIiwiVXBncmFkZUVkZ2UiLCJ2YyIsInNxRGlzdGFuY2VGcm9tIiwiekluZGV4IiwiaXNBY3RpdmUiLCJpc0Nvbm5lY3RlZCIsImRpYW1ldGVyIiwidmMxX3giLCJkaXNwbGFjZW1lbnRBbmdsZVdpdGhYIiwidmMyX3giLCJ0aGV0YTEiLCJ0aGV0YTIiLCJncmFkU3RvcHMiLCJ2MVRvdWNoZWQiLCJyZW5kZXJhYmxlIiwiaXNUb3VjaGVkIiwidjJUb3VjaGVkIiwic2V0dXBVcGdyYWRlR3JhcGgiLCJVcGdyYWRlR3JhcGgiLCJVcGdyYWRlVmVydGV4Q29uZmlnXzEiLCJyZXNldEdyYXBoIiwicmVzZXRBY3RpdmF0aW9uIiwic3RhcnRWVG9FZGdlIiwiZ2VuZXJhdGVBY3RpdmVWZXJ0ZXhFZmZlY3RzRE9NU3RyaW5nIiwibmV0RWZmZWN0cyIsImF0b21pY1R5cGUiLCJBdG9taWNVcGdyYWRlVmVydGV4VHlwZSIsImFjdGl2ZU5vZGVzIiwidG90YWxOb2RlcyIsImFjdGl2YXRpb25zIiwidG90YWxBY3RpdmF0aW9uIiwiYWN0aXZhdGlvbiIsIm1heEFjdGl2YXRpb24iLCJVcGdyYWRlVG9BdG9taWMiLCJVcGdyYWRlUmFyaXR5TGV2ZWxzIiwicmFyaXR5IiwiZWZmZWN0U3RyaW5ncyIsIkF0b21pY1VwZ3JhZGVEZXNjR2VuZXJhdG9ycyIsIiR1cGdyYWRlR3JhcGhBcmVhIiwiZG9jdW1lbnQiLCJpcyIsImluY3JlYXNlQWN0aXZhdGlvbiIsInNldHVwVXBncmFkZUdyYXBoTG9naWMiLCJVcGdyYWRlVmVydGV4IiwiUmFyaXR5XzEiLCJzdGFydEFjdGl2YXRpb24iLCJSYXJpdHlUb01heEFjdE1hcCIsIl9hY3RpdmF0aW9uIiwiY292ZXJlZEFuZ2xlIiwiUmFyaXR5VG9Db2xvck1hcCIsImljb24iLCJVcGdyYWRlSWNvbnMiLCJleHRyYUNsYXNzZXMiLCJzcG9rZXMiLCJpIiwiYW5nbGUiLCJVcGdyYWRlTmFtZXMiLCJVcGdyYWRlRGVzY0dlbmVyYXRvcnMiLCJDb21tb24iLCJVbmNvbW1vbiIsIlJhcmUiLCJFcGljIiwiTGVnZW5kYXJ5IiwiQXJ0ZWZhY3QiLCJVcGdyYWRlVmVydGV4VHlwZSIsIlN5bmMiLCJMYW5kTW92ZW1lbnQiLCJTZWFNb3ZlbWVudCIsIlN0ZXBNb3ZlbWVudCIsIkRlYXRoU2F2ZXMiLCJBQyIsIkhQIiwiQWNjdXJhY3kiLCJEYW1hZ2UiLCJQcm9mQm9udXMiLCJJbml0aWF0aXZlIiwiU2F2ZXNBbGwiLCJTYXZlc1N0ckRleENvbiIsIlNhdmVzSW50V2lzQ2hhIiwiU2tpbGxzQWxsIiwiU2tpbGxzTmluanV0c3UiLCJTa2lsbHNXaWxkSGVhcnQiLCJTa2lsbHNJbmRvY3RyaW5hdGlvbiIsIlNraWxsc0JyaWxsaWFuY2UiLCJTa2lsbHNQcm9kaWd5IiwiU3RhdHNTdHIiLCJTdGF0c0RleCIsIlN0YXRzQ29uIiwiU3RhdHNJbnQiLCJTdGF0c1dpcyIsIlN0YXRzQ2hhIiwiU3RhdHNJbnREZXgiLCJTdGF0c1dpc0NvbiIsIlN0YXRzQ2hhU3RyIiwiU3RhdHNTdHJEZXhDb24iLCJTdGF0c0ludFdpc0NoYSIsIk5VTEwiLCJTa2lsbFN0ZWFsdGgiLCJTa2lsbFBlcmNlcHRpb24iLCJTa2lsbEluc2lnaHQiLCJTa2lsbEFyY2FuYSIsIlNraWxsUGVyc3Vhc2lvbiIsIlNraWxsc0ludmVzdGlnYXRpb25BY3JvYmF0aWNzQXRobGV0aWNzIiwiU2tpbGxNZWRpY2luZU5hdHVyZVN1cnZpdmFsIiwiU2tpbGxEZWNlcHRpb25JbnRpbWlkYXRpb25SZWxpZ2lvbiIsIlNraWxsU2xpZ2h0SGlzdG9yeVBlcmZvcm1hbmNlIiwiU2tpbGxPdGhlciIsInJhZGlhbCIsIl9uZWlnaGJvdXJzIiwic2V0UmFkaWFsbHlXcnQiLCJyIiwidGhldGEiLCJ2eCIsInZ5IiwiX2NhcnRlc2lhbiIsImNhcnRlc2lhbiIsImNvcyIsInNpbiIsInNldExpbmVhcmx5V3J0IiwiZGVsdGFfeCIsImRlbHRhX3kiLCJ2ZWN0b3JBbmdsZVdpdGhYIiwiX3JhZGlhbCIsInNpZ24iLCJkZXZvdGlvbk1hcCIsIm5wY0luZGV4XzEiLCJNYXBFZGdlXzEiLCJNYXBHcmFwaF8xIiwiTWFwVmVydGV4XzEiLCJnIiwicmVmIiwidjAwIiwidjAxIiwidjAyIiwidjAzIiwidjA0IiwidjA1IiwidjA2IiwidjA3IiwidjA4IiwidjA5IiwidjEwIiwidjExIiwidjEyIiwidjEzIiwidjE0IiwidjE1IiwidjE2IiwidjE3IiwidjE4IiwidjE5IiwidjIwIiwidjIxIiwidjIyIiwidjIzIiwidjI0IiwidjI1IiwidjI2IiwidjI3IiwidjI4IiwidjI5IiwidjMwIiwidjMxIiwidjMyIiwidjMzIiwidjM0IiwidjM1IiwidjM2IiwidjM3IiwidjM4IiwidjM5IiwidjQwIiwidjQxIiwidjQyIiwidjQzIiwidjQ0IiwidjQ1IiwidjQ2IiwidjQ3IiwidjQ4IiwidjQ5IiwidjUwIiwidjUxIiwidjUyIiwidjUzIiwidjU0IiwidjU1IiwidjU2IiwidjU3IiwidjU4IiwidjU5IiwidjYwIiwidjYxIiwidjYyIiwidjYzIiwiZGlzdE11bCIsIndvcmxkTGVuZ3RoTXVsdGlwbGllciIsIkdub3NpcyIsInNraWxsTWFwIiwiVXBncmFkZUVkZ2VfMSIsIlVwZ3JhZGVHcmFwaF8xIiwiVXBncmFkZVZlcnRleF8xIiwiZGlzcGxheSIsInYwIiwicjEyIiwicjEzIiwicjE0IiwicjE1IiwicjIyIiwicjIzIiwicjMyIiwicjQyIiwidjY0IiwidjY1IiwidjY2IiwidjY3IiwidjY4IiwidjY5IiwidjcwIiwidjcxIiwiQnVmZmVkSW50ZXJuYWxBdHRhY2siLCJBdHRhY2tDb250cmFjdHMiLCJJbnRlcm5hbEF0dGFjayIsIldyYXBfMSIsImNvbnN0YW50c18xIiwicGFyYW1zIiwiX2EiLCJfYiIsIl9jIiwic3ViVGl0bGUiLCJzdWJ0aXRsZSIsInRpdGxlIiwiaGl0Qm9udXMiLCJkY0JvbnVzIiwibWFpblN0YXQiLCJjb250ZW50R2VuZXJhdG9yIiwicmVzb2x2ZWREYW1hZ2VzIiwiZXhwZWN0ZWREYW1hZ2UiLCJhc3NpZ25lZERhbWFnZXMiLCJnZXRUb0hpdFJvbGxhYmxlU3RyIiwic3RhdCIsInByb2YiLCJ1bmRlZmluZWQiLCJnZXRNb2QiLCJzaGVldCIsInBiIiwiZG9HZXRUb0hpdFJvbGxhYmxlU3RyIiwiZ2V0RGFtYWdlUm9sbGFibGVTdHIiLCJkb0dldERhbWFnZVJvbGxhYmxlU3RyIiwic3RhdHMiLCJnZXREYyIsImJpbmREYW1hZ2VzIiwiZGFtYWdlUGFyYW1zIiwiZGFtYWdlVHlwZXMiLCJ1bmFzc2lnbmVkRGFtYWdlUmF0aW9zIiwiYmluZFN0YXRzIiwiY3JlYXRlQ29udGVudCIsInJlc29sdmVEYW1hZ2VzIiwiY29udGVudCIsInN1YnN0cmluZyIsImlzRGFtYWdpbmciLCJ0b3RhbEFzc2lnbmVkRGFtYWdlIiwiZGFtYWdlRGljZSIsImRhbWFnZUxlZnRUb0Fzc2lnbiIsInRvdGFsUmF0aW8iLCJwZXJEaWNlUmF0aW9zIiwicmF0aW8iLCJkYW1hZ2VNYXAiLCJuRGljZSIsImRhbWFnZXR5cGUiLCJkYW1hZ2V0eXBlU3RyaW5nIiwid3JhcFJvbGwiLCJ0b0hpdE1vZCIsIkF0dGFja0NvbnRyYWN0Iiwic2hvdWxkQXBwbHkiLCJtb2RpZnkiLCJfIiwiYXR0YWNrIiwiZGFtYWdlcyIsImN1cnJlbnRseVJlc29sdmVkRGFtYWdlcyIsIkQxIiwicHJvcHMiLCJjb250cmFjdHMiLCJhY3RpdmF0ZUNvbnRyYWN0IiwiY29udHJhY3QiLCJnZXRDb250cmFjdHMiLCJkZWFjdGl2YXRlQ29udHJhY3QiLCJnZXREYW1hZ2VUeXBlcyIsInNldERhbWFnZVR5cGVzIiwic2V0Q29udGVudEdlbmVyYXRvciIsIm1vbnN0ZXJfaWQiLCJDb250cmFjdHMiLCJyZW5kZXJDb250cmFjdHMiLCJHRU5FUkFURURfSURTIiwiYXR0YWNrXzEiLCJzaGVldF8xIiwiUmlza0N1dG9mZnMiLCJyZXNldFNoZWV0cyIsIiRjdXJyZW50U2hlZXQiLCIkcmlza0VmZmVjdHMiLCJ0b3RhbFJpc2siLCJjb250cmFjdEluZGV4IiwiaXNDb250cmFjdFNlbGVjdGVkIiwicmlzayIsImRpc3BsYXlHcmFkZSIsImN1dG9mZiIsImdyYWRlIiwiaHRtbCIsInJlbW92ZSIsImNsZWFyIiwiY3JlYXR1cmVJZCIsIklEX1RPX1NIRUVUX0dFTkVSQVRPUiIsInJlbmRlciIsImNvbnRyYWN0R3JvdXBzIiwiY0xpc3QiLCJTaGVldENvbnRyYWN0IiwiaHBEaWNlIiwiYXR0YWNrcyIsImFjIiwiQm9udXNBY3Rpb24iLCJSYWRpYW50IiwicmVzIiwiRmlyZSIsIkFjdGlvbiIsIkNvcnJvc2lvbiIsInNhdmVzIiwiQ29uIiwiTGVnZW5kYXJ5QWN0aW9uIiwiUG9pc29uIiwiUHN5Y2hpYyIsImluY2x1ZGVzIiwibmEiLCJTcGVjaWFsIiwiayIsInNwZWVkcyIsIkZvcmNlIiwiY3JlYXRlRnJlZWRvbSIsImNyZWF0ZUlua2xpbmdUYW5rIiwiY3JlYXRlSW5rbGluZ0R5bmFtaXRlIiwiY3JlYXRlSW5rbGluZ1dhbm5hYmVCb3NzIiwiY3JlYXRlSW5rbGluZ0FiZXJyYW50IiwiY3JlYXRlSW5rbGluZ0RvZyIsImNyZWF0ZUlua2xpbmciLCJpbmtTcHJheSIsImJpdGUiLCJQaWVyY2luZyIsIk5ldXJhbCIsIkJ1ZmZlZFN0YXRTaGVldCIsImFjRGVzYyIsImJpb2xvZ2ljYWxIcCIsImNyVmFsdWUiLCJzYXZlUHJvZmljaWVuY2llcyIsInNraWxsUHJvZmljaWVuY2llcyIsIldhbGtpbmciLCJ2dWxuZXJhYmlsaXRpZXMiLCJDb2xkIiwiTGlnaHRuaW5nIiwiQmx1ZGdlb25pbmciLCJyZXNpc3RhbmNlcyIsIkFjaWQiLCJUaHVuZGVyIiwiaW1tdW5pdGllcyIsImNvbmRpdGlvbkltbXVuaXRpZXMiLCJCbGluZGVkIiwiRGVhZmVuZWQiLCJFeGhhdXN0aW9uIiwibXVsdGlhdHRhY2siLCJpbmtTcGl0IiwiY2hhcmdlZCIsImNoYXJnaW5nIiwiRmx5aW5nIiwiUHJvbmUiLCJzbGFtVGV4dCIsImp1bXBUZXh0IiwicmVhY3RUZXh0IiwiUmVhY3Rpb24iLCJib29tVGV4dCIsImhhbGZMaWZlVGV4dCIsIkZyaWdodGVuZWQiLCJDaGFybWVkIiwiR3JhcHBsZWQiLCJ0YXVudFRleHQiLCJOZWNyb3RpYyIsIlNsYXNoaW5nIiwiUG9pc29uZWQiLCJhbXBoaWJpb3VzIiwibGVnZW5kYXJ5UmVzaXN0YW5jZSIsImR1YWxMaWZlIiwiZnJlZUZsb3dpbmdJbmsiLCJpbmtTd2lybCIsImxlZ2VuZGFyeUFjdGlvbnMiLCJCaW9jaGVtaWNhbCIsImJpdGVBIiwiYnJlYWtUaGVDaGFpbnMiLCJSZXN0cmFpbmVkIiwiU3R1bm5lZCIsImlzVG91Z2giLCJTd2ltbWluZyIsInNldHVwTW9uc3RlcnMiLCJzZXR1cFN0YXRTaGVldCIsImNvbnRyYWN0c18xIiwiaW5rbGluZ3NfMSIsImNhdGVnb3J5IiwiaW1hZ2VGaWxlTmFtZSIsInNoZWV0T2JqZWN0R2V0dGVyIiwiZnVsbEltZ1BhdGgiLCJpY29uQ3JlYXRlZCIsImlwIiwiJHNoZWV0IiwiJGJlYXN0aWFyeSIsImdyb3VwSWQiLCJzZXR1cFVJIiwiJGVuY2xvc2luZ0RpdiIsIiR0aGlzIiwiZmFkZUluIiwidGVzdCIsIlN0YXRTaGVldCIsIkhwQmxvY2siLCJhZHZlbnR1cmVyTGV2ZWxzIiwiZ2V0QWR2ZW50dXJlckhwIiwiaHAiLCJrbGFzcyIsImNvbkhwUGVyRGljZSIsInRvdGFsSHAiLCJocFBlckRpY2UiLCJjb250cmFjdElkIiwiX2FjIiwiX2F0dGFja3MiLCJocEJsb2NrIiwiX2hwRGljZSIsImhwRGljZUNvdW50IiwidmlzaWJpbGl0eSIsInNwZWVkTGlzdCIsInNwZWVkIiwic3RhdExpc3QiLCJzdGF0VmFsIiwic2F2ZUxpc3QiLCJzYXZlIiwiY29tcHV0ZVNhdmVzIiwic2tpbGxMaXN0Iiwic2tpbGwiLCJjb21wdXRlU2tpbGxzIiwiY29udGVudExpc3QiLCJNeXRoaWNBY3Rpb24iLCJnZXRBdHRhY2tzV2l0aEFjdGl2YXRpb24iLCJ2dWxTdHIiLCJyZXNTdHIiLCJpbW0iLCJpbW1TdHIiLCJjaW1tIiwiY2ltbVN0ciIsImNyIiwic2F2ZVByb2YiLCJzYXZlQm9udXMiLCJkaXNwbGF5TmFtZSIsIkF0dGl0dWRlSGFuZGxlciIsIkdhbWVUaW1lc3RhbXBfMSIsIlN0YW5kYXJkQnVmZmVyZWRBdHRpdHVkZUxpc3RfMSIsImJ1ZmZlcmVkQXR0aXR1ZGUiLCJTdGFuZGFyZEJ1ZmZlcmVkQXR0aXR1ZGVMaXN0IiwiY3VycmVudFRpbWUiLCJhbWJpZW50SW50ZXJhY3Rpb24iLCJ0ZXN0UmVzZXQiLCJyZXNldFJhdGluZ3MiLCJpbmNyZW1lbnRUaW1lVG8iLCJmaW5hbFRpbWUiLCJ0b3RhbE1pbGxpcyIsImZvcmdldGZ1bG5lc3MiLCJhbWJpZW50IiwiZGVjYXkiLCJuYXR1cmFsRGVjYXkiLCJhZGp1c3RWYWx1ZSIsInRvdGFsRGF5cyIsImFkZEV2ZW50IiwiZXZlbnRWYWx1ZURlbHRhIiwiZXZlbnRUaW1lIiwicmF0aW5nIiwiQnVmZmVyZWRBdHRpdHVkZUxpc3RCYXNlIiwiRHluYW1pY0J1ZmZlclNsb3RfMSIsIkZpeGVkU2l6ZVNsb3RfMSIsInBvc1Nsb3RzIiwibmVnU2xvdHMiLCJkeW5hbWljQnVmZmVyIiwiRHluYW1pY0J1ZmZlclNsb3QiLCJwb3NTbG90IiwibmVnU2xvdCIsIm5leHRab25lSW5kZXgiLCJtYXhSYXRpbmciLCJyYXRpbmdTbG90U2l6ZSIsImdldFZhbHVlQ2FwYWNpdHlPZlJhdGluZyIsInpvbmVEZWx0YU9mZnNldCIsImdldFpvbmVEZWx0YU9mZnNldCIsIkZpeGVkU2l6ZVNsb3QiLCJ6b25lQ3V0b2ZmcyIsInpvbmVCdWZmZXJTbG90U2l6ZSIsImdldEJ1ZmZlckNhcGFjaXR5T2Zab25lIiwiZGVsdGEiLCJpc05hdHVhbERlY2F5IiwiZGF5cyIsImV4aXN0aW5nRGlyZWN0aW9uIiwiZGVsdGFEaXJlY3Rpb24iLCJpc0luY3JlYXNpbmciLCJmb3J3YXJkU2xvdHMiLCJyZXZlcnNlU2xvdHMiLCJhZGp1c3QiLCJzbG90SWR4IiwiaXNGaWxsZWQiLCJmaWxsZWRTb21ldGhpbmciLCJnZXREeW5hbWljQnVmZmVyU2l6ZUZvclJhdGluZyIsImlzRW1wdHkiLCJpc0J1ZmZlcmVkIiwiaGF2ZVBvc1ZhbHVlcyIsImhhdmVOZWdWYWx1ZXMiLCJzbG90cyIsInNnbiIsImZpbGxlZCIsInJhdGluZ1ZhbHVlIiwidG90YWwiLCJyYXRpbmdNYWciLCJyYXRpbmdTZ24iLCJ6b25lQ3V0b2ZmIiwiU2xvdEJhc2VfMSIsIlNsb3RCYXNlIiwiX3NpemUiLCJfdmFsdWUiLCJ0ZXN0U2xvdCIsImRlbHRhTW9kaWZpZXIiLCJzbG90IiwicmV2U2xvdCIsInRlc3RBc3NlcnQiLCJhZGp1c3RtZW50IiwiZXhwZWN0ZWRMZWZ0b3ZlciIsImxlZnRvdmVyIiwiTnBjSW50ZXJhY3Rpb25FdmVudCIsInBjSW5kZXhfMSIsIlBvc2l0aXZlRW1vdGlvbl8xIiwidGltZXN0YW1wIiwiZWZmZWN0cyIsImluc2lnaHRHYXRlIiwicmVuZGVyUmV2ZXJzZSIsImluc2lnaHRMb2NrIiwiZWZmZWN0VGFncyIsImVtb3Rpb24iLCJ6b25lIiwiZ2V0Wm9uZSIsImVmZmVjdCIsImVtb3Rpb25TdHIiLCJyZXBlYXQiLCJOZWdhdGl2ZUVtb3Rpb24iLCJQb3NpdGl2ZUVtb3Rpb24iLCJlbW90aW9uQ29sb3IiLCJOcGNPcGluaW9uIiwiY29tbW9uXzIiLCJOcGNJbnRlcmFjdGlvbkV2ZW50XzEiLCJTdGFuZGFyZEF0dGl0dWRlSGFuZGxlcl8xIiwiVGltZXNraXBFdmVudF8xIiwibnBjIiwicGMiLCJhdHRpdHVkZUhhbmRsZXJzIiwiU3RhbmRhcmRBdHRpdHVkZUhhbmRsZXIiLCJldmVudCIsInN0YXJ0VGltZSIsIndhcm4iLCJSZXNwZWN0IiwiVGltZXNraXBFdmVudCIsImFtYiIsImFoIiwiZW5kVGltZSIsInQiLCJnZXRFbW90aW9uIiwiVHJ1c3QiLCIkdHJ1c3RCb3JkZXIiLCJHcmF0aXR1ZGUiLCIkZ3JhdGl0dWRlQm9yZGVyIiwiJHJlc3BlY3RCb3JkZXIiLCJ0b3RhbEFmZmVjdGlvblJhdGluZyIsImdlbmVyYXRlVGltZWxpbmVET01TdHJpbmciLCJldmVudHNEZXNjIiwibnBjSW50ZXJhY3Rpb25FdmVudCIsIm9waW5pb25UYWdzIiwiZ2VuZXJhdGVPcGluaW9uVGFnIiwidFRleHQiLCJ0ZXN0QnVmZmVyZWRBdHRpdHVkZSIsInRlc3RBdHRpdHVkZUhhbmRsZXIiLCJBZmZlY3Rpb24iLCJjcm9zc2VkQmVmb3JlIiwic2hvdWxkQXV0b2ZpbGxPbkZpcnN0Q3Jvc3MiLCJieVNpZ24iLCJvbGRWYWx1ZSIsImxlZnRvdmVyQnkiLCJBdHRpdHVkZUhhbmRsZXJfMSIsInpNYWciLCJ6U2duIiwiZnJvbURheXMiLCJCdWZmZXJlZEF0dGl0dWRlTGlzdEJhc2VfMSIsImJhIiwiZXhwZWN0ZWRWYWx1ZSIsImV4cGVjdGVkUmF0aW5nIiwiZXhwZWN0ZWRCdWZmZXIiLCJidWZmZXJlZFZhbHVlIiwiJGludGVyYWN0aW9ucyIsImVtb3Rpb25TdHJpbmciLCJ0ZXh0SHRtbCIsImFyYzIxT3BpbmlvbkV2ZW50cyIsInM5XzEiLCJoaW5hRGVjZXB0aW9uIiwiSGluYSIsInBhc3NpdmVEZWNlcHRpb24iLCJhZGRJbnRlcmFjdGlvbkV2ZW50IiwiYXJjMjJPcGluaW9uRXZlbnRzIiwiRGF3biIsIkVseXNpdW0iLCJFemVsbCIsIlJvYmVydGEiLCJzZXNzaW9uT3BpbmlvbkV2ZW50czEwIiwiUGV0cmEiLCJ0aW1lU2tpcHMiLCJEdXNrIiwiQW5kcmkiLCJBdGhsb24iLCJDZWNlbGlhIiwiQ29yb3RvIiwiRXJpY2EiLCJHZW5lZmUiLCJIYXYiLCJJbmdyaWQiLCJJb25hIiwiSmF5ZSIsIkpvcmRpIiwiS2FzdG9yIiwiU2FzaGEiLCJTeWJpbGxhIiwiVG9tYXNhIiwiVmVybmEiLCJWaXRhY2lhIiwiWXVraSIsIklyZW5lIiwiYWRkVGltZVNraXBFdmVudCIsInBjcyIsInNlc3Npb25PcGluaW9uRXZlbnRzMTEiLCJucGNSZWFjdGlvbnMiLCJhZnRlcm1hdGhUaW1lIiwicmVhY3Rpb25NYXAiLCJzZXNzaW9uT3BpbmlvbkV2ZW50czAyIiwic2Vzc2lvbk9waW5pb25FdmVudHMwMyIsInNlc3Npb25PcGluaW9uRXZlbnRzMDQiLCJjb21iYXRNZW1vcmllcyIsInNlc3Npb25PcGluaW9uRXZlbnRzMDUiLCJtZW1vcmllc0VyYXNlZCIsImFwcGxpY2FibGVUaW1lc3RhbXAiLCJleGNsdXNpb25MaXN0SCIsIkJqb3JuIiwiZXhjbHVzaW9uTGlzdEMiLCJleGNsdXNpb25MaXN0QSIsIm5wY0luZGV4IiwiaXNPcGluaW9uYXRlZCIsIm9yaWdpbmFsVGltZXN0YW1wIiwic2Vzc2lvbk9waW5pb25FdmVudHMwNiIsInNlc3Npb25PcGluaW9uRXZlbnRzMDciLCJzZXNzaW9uT3BpbmlvbkV2ZW50czA4Iiwic2Vzc2lvbk9waW5pb25FdmVudHMwOSIsInJldmVyc2VFbW90aW9ucyIsImMiLCJvcGluaW9ucyIsInRpbWVzdGFtcDEiLCJ0aW1lc3RhbXAyIiwiYWRkVGltZXNraXBFdmVudCIsIlJvbGxWYXJpYW50IiwiRGljZSIsImNvdW50SGF2aW5nRSIsIm1vZGlmaWVyIiwicm9sbCIsInJuZyIsInJhbmRvbSIsIkRhbWFnZVJvbGxhYmxlIiwiTmF0Um9sbGFibGUiLCJSb2xsYWJsZSIsIlJvbGxBcmd1bWVudEVycm9yIiwibXNnIiwicm9sbHMiLCJtb2RlIiwiX3BhcnRzIiwiX21vZGUiLCJOb3JtYWwiLCJOQVRfUk9MTEFCTEVfQ0FDSEUiLCJyb2xsYWJsZSIsIkNyaXRpY2FsIiwicGFydHMiLCJkMjBzIiwiQWR2YW50YWdlIiwiRGlzYWR2YW50YWdlIiwiU3VwZXJBZHZhbnRhZ2UiLCJTdXBlckRpc2FkdmFudGFnZSIsImJhc2VEaWNlIiwiY3JpdERpY2UiLCJzaG93blJvbGxzIiwic2VlZCIsImVhc3lSYW5kb20iLCJwcjEiLCJwcjIiLCJwcjMiLCJucjEiLCJnZW5lcmF0ZSIsImVycm9yIiwicjEiLCJyMiIsImFjdGl2YXRlQ29tYmF0U2NlbmFyaW9zIiwiX2NvbnRlbnQiLCJtZWFzdXJlSW1wYWN0IiwiZ2l2ZW4iLCJBY3Rpb25Db250ZXh0IiwiaGl0IiwiZGMiLCJlbmFibGVSb2xsaW5nIiwid3JhcEFjdGl2YXRpb24iLCJ3cmFwQ3JlYXR1cmVTaXplIiwid3JhcFNlbnNlIiwid3JhcFNwZWVkIiwid3JhcFJhdGluZyIsIndyYXBDU2tpbGxWYWx1ZSIsIndyYXBDU2tpbGwiLCJ3cmFwRFNraWxsIiwid3JhcENvbmRpdGlvbiIsIndyYXBEYW1hZ2VUeXBlIiwicmVnaXN0ZXJSb2xsYWJsZSIsIlJvbGxhYmxlXzEiLCJfUm9sbGFibGVJbmRleCIsIl9SZXZlcnNlUm9sbGFibGVJbmRleCIsIl9sYXN0Um9sbGFibGVVSUQiLCJ1aWQiLCJhcmciLCJwYXJzZWRBcmciLCJyb2xsUGFydHMiLCJkaWNlU3RyIiwiZHQiLCJfTm9uU3RhbmRhcmQiLCJwbHVyYWwiLCJwbHVyYWxTdWZmaXgiLCIkdG9hc3Rab25lIiwicm9sbFZhcmlhbnQiLCJzaGlmdEtleSIsImFsdEtleSIsImN0cmxLZXkiLCJidWlsZHVwUGFydHMiLCIkdG9hc3QiLCJmYWRlT3V0IiwiZ2VuZXJhdGVBY2hpZXZlbWVudHNQYW5lbCIsIlN0ZEFjaGlldmVtZW50IiwibWF4RXhwIiwiY29tcGxldGUiLCJOZXN0ZWRBY2hpZXZlbWVudCIsImJhc2VFeHAiLCJkb25lIiwiX2N1ckV4cCIsInJvdXRlRE9NcyIsImFkZFJvdXRlIiwieHAiLCJ0YWtlbiIsIkFjaGlldmVtZW50cyIsImVsZW1lbnRzIiwiY1hQIiwiYWNoaWV2ZW1lbnRzIiwiYWNoaWV2ZW1lbnQiLCJjdXJFeHAiLCJzZXR1cEJhc2VMb2dpYyIsIkFjaGlldmVtZW50c18xIiwiYnVpbGRpbmdJbnN0YW5jZXNfMSIsIk9wZXJhdG9yXzEiLCJnZW5lcmF0ZUJ1aWxkaW5nc1BhbmVsIiwiZ2VuZXJhdGVPcGVyYXRvclByb2ZpbGVTZWxlY3Rpb24iLCJzZXR1cEJhc2VPcGVyYXRvckxvZ2ljIiwiZ2VuZXJhdGVPcGVyYXRvclByb2ZpbGUiLCJPcGVyYXRvclByb2ZpbGVzIiwib3BlcmF0b3JQcm9maWxlQnV0dG9ucyIsIm5wY0lEIiwiJG9wZXJhdG9yU2VjdGlvbiIsImJ1aWxkaW5nSW5zdGFuY2VzIiwiYnVpbGRpbmdET01zIiwiYnVpbGRpbmdJbnN0YW5jZSIsIkFzcGVjdE5vdFNldHVwRXhjZXB0aW9uXzEiLCJDYXJkQXNwZWN0XzEiLCJDb21iYXRBc3BlY3RfMSIsIkNvcmVBc3BlY3RfMSIsIkNTa2lsbHNBc3BlY3RfMSIsIkRTa2lsbHNBc3BlY3RfMSIsIkRTdGF0c0FzcGVjdF8xIiwiT3BlcmF0b3JBc3BlY3RfMSIsIk9waW5pb25Bc3BlY3RfMSIsIlNoZWV0QXNwZWN0XzEiLCJfSW5kZXgiLCJfY29yZUFzcGVjdCIsIl9kU3RhdHNBc3BlY3QiLCJfZFNraWxsc0FzcGVjdCIsIl9jYXJkQXNwZWN0IiwiX29waW5pb25Bc3BlY3QiLCJfY29tYmF0QXNwZWN0IiwiX3NoZWV0QXNwZWN0IiwiX2NTa2lsbHNBc3BlY3QiLCJfb3BlcmF0b3JBc3BlY3QiLCJucGNJZCIsImdldFNraWxsTW9kIiwidGVudGF0aXZlIiwiZFNraWxsc0FzcGVjdCIsImNhcmRBc3BlY3QiLCJnZW5lcmF0ZVByaW1hcnlUb2tlbiIsImNyZWF0ZUxpbmsiLCJmbG9hdGluZyIsImRTdGF0c0FzcGVjdCIsImdldFNraWxsVmFsIiwiY1NraWxsc0FzcGVjdCIsImZpbmFsaXplIiwiYXNwZWN0IiwiZ2VuZXJhdGVPcGVyYXRvckRPTSIsIm9wZXJhdG9yQXNwZWN0IiwiZ2VuZXJhdGVPcGluaW9uRE9NIiwib3BpbmlvbkFzcGVjdCIsImdlbmVyYXRlT3BpbmlvblRpbWVsaW5lRE9NIiwidXBncmFkZWRTa2lsbHMiLCJjb21iYXRBc3BlY3QiLCJzZW5zZXMiLCJwYXNzaXZlUGVyY2VwdGlvbiIsImRhbWFnZVJlcyIsImFjdGlvbnMiLCJhY3Rpb25Db250ZW50QVBJIiwiY29yZUFzcGVjdCIsImNTa2lsbFJhdGluZ3MiLCJDb3JlQXNwZWN0IiwiRFN0YXRzQXNwZWN0IiwiRFNraWxsc0FzcGVjdCIsIk9waW5pb25Bc3BlY3QiLCJDYXJkQXNwZWN0IiwiQ29tYmF0QXNwZWN0IiwiU2hlZXRBc3BlY3QiLCJDU2tpbGxzQXNwZWN0IiwiT3BlcmF0b3JBc3BlY3QiLCJmYXRpZ3VlIiwibW9yYWxlIiwibm90YWJsZUNTa2lsbHMiLCJub3RhYmxlRFNraWxscyIsIm5vdGFibGVTdHVmZiIsInJhdGluZ3MiLCJvcGVyYXRvciIsInByb2Zlc3Npb25zIiwiZFNraWxsUmF0aW5ncyIsIkFzcGVjdE5vdFNldHVwRXhjZXB0aW9uIiwiTnBjTW9yYWxlRWZmZWN0cyIsIk1vcmFsZSIsIk1vcmFsZUZsYXZvclRleHQiLCJNb3JhbGVFZmZlY3RzIiwiQWJ5c21hbCIsIlhQR2FpblJhdGlvIiwiTGF0ZW50RXhoYXVzdGlvbiIsIlByb2ZpY2llbmN5Qm9udXNNb2RpZmllciIsIkluaXRpYXRpdmVNb2RpZmllck5BVCIsIlNraWxsTW9kaWZpZXIiLCJDb21iYXRSb2xsTW9kIiwiRGVwcmVzc2VkIiwiRGlzbWFsIiwiTG93IiwiQXZlcmFnZSIsIkNvbWZvcnRhYmxlIiwiT3B0aW1pc3RpYyIsIlNhbmd1aW5lIiwiRWNzdGF0aWMiLCJBc3BlY3RGYWN0b3J5RmxhZyIsIkJhc2VBc3BlY3QiLCJBc3BlY3RGYWN0b3J5RmxhZ18xIiwiRHVwbGljYXRlU2V0dXBFeGNlcHRpb25fMSIsImZsYWdzIiwic2V0dXBTZW50aW5lbCIsImZsYWciLCJEdXBsaWNhdGVTZXR1cEV4Y2VwdGlvbiIsImJ1aWxkU2VudGluZWwiLCJidWlsZEZsYWciLCJmaW5hbEZsYWciLCJlbnN1cmUiLCJjcmFzaCIsIkJhc2VBc3BlY3RfMSIsInNraWxscyIsImZpbmFsaXplU2tpbGxzIiwiQ1NraWxsc1NraWxsc0ZpbmFsaXplZCIsInNldFNraWxsVmFsdWUiLCJCQVNFX1ZBTFVFUyIsIkNTa2lsbHNTa2lsbHNEZWNsYXJlZCIsImdldFJhdGluZ0ZvclNraWxsTW9kaWZpZXIiLCJzZXRTa2lsbFZhbHVlcyIsImRhdHVtIiwiRiIsIkQiLCJDIiwiQiIsIkEiLCJTIiwiU1MiLCJTU1MiLCJBY2NvdW50aW5nIiwiQW50aHJvcG9sb2d5IiwiQXBwcmFpc2UiLCJBcmNoYWVvbG9neSIsIkFydGlsbGVyeSIsIkNoYXJtIiwiQ29tcHV0ZXJVc2UiLCJEZW1vbGl0aW9ucyIsIkRpc2d1aXNlIiwiRGl2aW5nIiwiRHJpdmVBdXRvIiwiRWxlY3RyaWNhbFJlcGFpciIsIkVsZWN0cm9uaWNzIiwiRmlyc3RBaWQiLCJIeXBub3NpcyIsIkxhdyIsIkxpYnJhcnlVc2UiLCJMb2Nrc21pdGgiLCJNZWNoYW5pY2FsUmVwYWlyIiwiTW9kZXJuTWVkaWNpbmUiLCJOYXR1cmFsV29ybGQiLCJOYXZpZ2F0ZSIsIk9jY3VsdCIsIk9wZXJhdGVIZWF2eU1hY2hpbmVyeSIsIlBzeWNob2FuYWx5c2lzIiwiUmVhZExpcHMiLCJSaWRlIiwiVGhyb3ciLCJBY3RpbmciLCJDYWxsaWdyYXBoeSIsIkNhcnBlbnRyeSIsIkNvb2tpbmciLCJEYW5jaW5nIiwiRmluZUFydCIsIkZvcmdlcnkiLCJXcml0aW5nIiwiU2luZ2luZyIsIlBhaW50aW5nIiwiUGhvdG9ncmFwaHkiLCJTY3VscHRpbmciLCJDaGFpbnNhdyIsIkhlYXZ5V2VhcG9ucyIsIkZsYW1ldGhyb3dlciIsIk1hY2hpbmVHdW4iLCJTdWJtYWNoaW5lR3VuIiwiQWlyY3JhZnQiLCJCb2F0IiwiQXN0cm9ub215IiwiQmlvbG9neSIsIkJvdGFueSIsIkNoZW1pc3RyeSIsIkNyeXB0b2dyYXBoeSIsIkVuZ2luZWVyaW5nIiwiRm9yZW5zaWNzIiwiR2VvbG9neSIsIk1hdGhlbWF0aWNzIiwiTWV0ZW9yb2xvZ3kiLCJQaGFybWFjeSIsIlBoeXNpY3MiLCJab29sb2d5IiwiY2FyZF8xIiwiY2hhcmFjdGVyQ29yZSIsIl9zdW1tYXJ5IiwiX3N0b3J5IiwiaW1hZ2VzIiwicHJpbWFyeUltYWdlTmFtZSIsImRlZmF1bHRQcmltYXJ5SW1hZ2VOYW1lIiwidG9rZW5zSFRNTCIsInRva2VuSW1hZ2VzSFRNTCIsInRva2VuVGFnc0hUTUwiLCJmaXJzdEltYWdlIiwibWV0YVRhZ3NIVE1MIiwiYWRkQWx0ZXJuYXRlSW1hZ2UiLCJhZGRDYXJkVGFnIiwiQ2FyZENhbXBhaWduU2V0IiwiY2FtcGFpZ24iLCJhcmMiLCJyZWdpc3RlciIsInNldENhbXBhaWduQXJjIiwidG9rZW4iLCJzdGF0c0FzcGVjdCIsInNraWxsc0FzcGVjdCIsImJhc2VBQ1NvdXJjZXMiLCJhY0JvbnVzZXMiLCJjbGFzc2VzIiwiX2JvbnVzSFAiLCJfc3BlZWRzIiwiX3NlbnNlcyIsIl9yZXMiLCJfc2F2ZXMiLCJfY29uZGl0aW9uSW1tdW5pdGllcyIsIl9hY3Rpb25zIiwiYmlvSHBEaWNlIiwiYWRkQmlvSHBEaWNlIiwic2V0TWFnaWNhbEFybW9yIiwiYXJtb3JBQyIsInNldExpZ2h0QXJtb3IiLCJzZXRNZWRpdW1Bcm1vciIsInNldEhlYXZ5QXJtb3IiLCJhZGRBY0JvbnVzIiwiYm9udXMiLCJhZGRDbGFzc0xldmVscyIsImxldmVscyIsImNvbXB1dGVIUCIsImNvbnN0UGVyRGljZSIsInRvdGFsRGljZSIsIl9ocCIsInNldFNhdmUiLCJwcm9maWNpZW5jeSIsInNldFNwZWVkIiwic3BlZWRUeXBlIiwic2V0U2Vuc2UiLCJzZW5zZVR5cGUiLCJzZXRSZXMiLCJkYW1hZ2VUeXBlIiwiYWRkQ29uZGl0aW9uSW1tdW5pdHkiLCJhZGRBY3Rpb24iLCJiZXN0QmFzZUFDIiwidG90YWxBQyIsImFjQm9udXMiLCJDb3JlTmFtZVNldHVwIiwiX25hbWUiLCJDb3JlSW1nUGF0aFNldHVwIiwiX2ltZ1BhdGgiLCJkU3RhdHMiLCJzZXRTa2lsbFByb2ZpY2llbmN5IiwiRFNraWxsc1NraWxsc0RlY2xhcmVkIiwiRFNraWxsc1NraWxsc0ZpbmFsaXplZCIsInZpcyIsInN0YXRNb2QiLCJfQUxMIiwibWluUHJvZiIsIm1pbk1vZCIsImFsbFZpcyIsIkFjdGlvbkNvbnRleHRfMSIsIl9zdGF0cyIsIl9zdGF0VmlzaWJpbGl0aWVzIiwiX3BiIiwiaW5pdGlhbGl6ZVN0YXRzIiwic3RyIiwiZGV4IiwiY29uIiwiaW50Iiwid2lzIiwiY2hhIiwiRFN0YXRzU3RhdHNTZXR1cCIsInNldFZpc2liaWxpdHlMZXZlbCIsIkRTdGF0c1Byb2ZpY2llbmN5RGVjbGFyZWQiLCJEU3RhdHNQcm9maWNpZW5jeUZpbmFsaXplZCIsIk1vcmFsZV8xIiwiY29yZSIsImRTa2lsbHMiLCJjU2tpbGxzIiwiX2FmZmxpY3Rpb25zIiwiX2l0ZW1zIiwiX2NoZW1pc3RyeSIsInN0YXR1c2VzIiwiYWZmbGljdGlvbiIsImNoZW1pc3RyeSIsImRlc2NTdHIiLCJkU2tpbGxzQnlSYXRpbmciLCJjU2tpbGxzQnlSYXRpbmciLCJyYXRpbmdUb1N0cmluZ3MiLCJza2lsbEJsb2NrRE9NcyIsIml0ZW1zIiwiZGFtYWdlIiwiY29udHJvbCIsInN1cnZpdmFsIiwicHJvIiwiYWRkTm90YWJsZVN0dWZmIiwiYWRkQWZmbGljdGlvbiIsInNldENoZW1pc3RyeVdpdGgiLCJhZGRJbnZlbnRvcnlJdGVtIiwiX21vcmFsZSIsIm51bSIsImRTS2lsbHMiLCJOcGNPcGluaW9uc18xIiwiYXJjXzIxXzEiLCJhcmNfMjJfMSIsInMyXzEiLCJzM18xIiwiczRfMSIsInM1XzEiLCJzNl8xIiwiczdfMSIsInM4XzEiLCJzMTBfMSIsInMxMV8xIiwiJGluZGl2aWR1YWxBc3QiLCIkdGFibGVfYXJlYSIsInBjQ2VsbHMiLCJucGNSb3dzIiwicGNJZCIsIm9waW5pb25TdHJpbmdzIiwibnBjT3BpbmlvbiIsInJlTWFwIiwiX29waW5pb25hdGVkIiwiaW5zdGFuY2VzXzEiLCJza2lsbEFzcGVjdCIsIl9zdWJ0aXRsZSIsIl9hY0Rlc2MiLCJfY3IiLCJzZW5zZUxpc3QiLCJzZW5zZSIsInZ1bCIsImNpIiwiY2lTdHIiLCJhY3Rpb24iLCJjb250ZW50cyIsImFjdGlvblN0cmluZ3MiLCJhY3Rpb25TdHIiLCJzZXR1cENoYXJhY3RlcnMiLCJfaW5pdF8xIiwiX2luaXRfMiIsIl9pbml0XzMiLCJfaW5pdF80Iiwic2V0dXBDMUExIiwic2V0dXBDMUEyIiwic2V0dXBDMkExIiwic2V0dXBDMkEyIiwic2V0dXBPcGluaW9uVGFibGUiLCJjYWVseW5uXzEiLCJkYXZlXzEiLCJlYmVuZXphcl8xIiwiaXJlbmVfMSIsImxlc2xleV8xIiwibGlhXzEiLCJsaW5nXzEiLCJsdWNpYW5fMSIsIm1hc3Rlcl8xIiwidWxyaWNoXzEiLCJ2YWhhcmV0aF8xIiwic2V0dXBMdWNpYW4iLCJzZXR1cEViZW5lemFyIiwic2V0dXBDYWVseW5uIiwic2V0dXBMZXNsZXkiLCJzZXR1cElyZW5lIiwic2V0dXBMaW5nIiwic2V0dXBEYXZlIiwic2V0dXBVbHJpY2giLCJzZXR1cExpYSIsInNldHVwVmFoYXJldGgiLCJzZXR1cE1hc3RlciIsImNhZSIsIkNhZWx5bm4iLCJzdW1tYXJ5IiwiVHJhaXRvck90aGVsbG8iLCJzdG9yeSIsIlZhaGFyZXRoIiwiTGVzbGV5IiwiRGF2ZVJ1aGwiLCJMaWEiLCJVbHJpY2giLCJFYmVuZXphciIsIkx1Y2lhbiIsIkxvZ29zUGxheXdyaWdodCIsIlNhbmd1aW5hcmNoIiwiZGF2ZSIsImJlbiIsIkFjdGlvbl8xIiwiaXJlbmUiLCJLamVycmEiLCJUaW1lbGVzcyIsImNvbWJhdCIsImJvbnVzSFAiLCJQYXJhbHl6ZWQiLCJDSEEiLCJERVgiLCJsZXMiLCJNb3N0aW1hIiwibGlhIiwibGluZyIsIkxpbmciLCJwcmltYXJ5SW1hZ2VUaXRsZSIsImx1Y2lhbiIsIk1vdXRocGllY2UiLCJtYXMiLCJUaGVNYXN0ZXIiLCJ1bHIiLCJ2YWgiLCJhbWFpYV8xIiwiYmFwaG9tZXRfMSIsImRlY3JvYV8xIiwiZmllc3RfMSIsImdkZWZfMSIsImdlbl8xIiwia2plcmFfMSIsImxlbXVlbl8xIiwibG9nb3NfMSIsIm1hbmRyYWdvcmFfMSIsIm1vc3RpbWFfMSIsIm1vdXRocGllY2VfMSIsIm11ZWxzeXNlXzEiLCJvdGhlbGxvXzEiLCJzYW5ndWluZUFyY2hfMSIsInNoYW1hcmVfMSIsInNoaW1ha2VuXzEiLCJzaGltYXJpbl8xIiwidmVycmFkZXJfMSIsInNldHVwTG9nb3MiLCJzZXR1cE1vc3RpbWEiLCJzZXR1cFNoaW1ha2VuIiwic2V0dXBTaGltYXJpbiIsInNldHVwVmVycmFkZXIiLCJzZXR1cEZpZXN0Iiwic2V0dXBNb3V0aHBpZWNlIiwic2V0dXBTQXJjaCIsInNldHVwRGVjcm9hIiwic2V0dXBCYXBob21ldCIsInNldHVwS2plcnJhIiwic2V0dXBHRGVmIiwic2V0dXBPdGhlbGxvIiwic2V0dXBNYW5kcmFnb3JhIiwic2V0dXBHZW4iLCJzZXR1cE11ZWxzeXNlIiwic2V0dXBTaGFtYXJlIiwic2V0dXBMZW11ZW4iLCJzZXR1cEFtYWlhIiwiQW1haWEiLCJCYXBob21ldCIsIkRlY3JvYVNhbCIsIkZpZXN0IiwiU2hpbWFrZW4iLCJMZW11ZW4iLCJHRGVmIiwiR2VuIiwiTWFuZHkiLCJTaGltYXJpbiIsIlZlcnJhZGVyIiwiTXVtdSIsIlNoYW1hcmUiLCJhbmRvYWluXzEiLCJhbmRyaV8xIiwiYXRobG9uXzEiLCJiam9ybl8xIiwiY2VjaWxpYV8xIiwiY29yb3RvXzEiLCJkYXduXzEiLCJkdXNrXzEiLCJlbHlzaXVtXzEiLCJlcmljYV8xIiwiZXplbGxfMSIsImdlbmVmZV8xIiwiaGF2XzEiLCJoaW5hXzEiLCJpbmdyaWRfMSIsImlvbmFfMSIsImpheWVfMSIsImpvcmRpXzEiLCJrYXN0b3JfMSIsInJvYmVydGFfMSIsInNhc2hhXzEiLCJzeWJpbGxhXzEiLCJ0b21hc2FfMSIsInZlcm5hXzEiLCJ2aXRhY2lhXzEiLCJ5dWtpXzEiLCJzZXR1cEFuZG9haW4iLCJzZXR1cEFuZHJpIiwic2V0dXBBdGhsb24iLCJzZXR1cEJqcm9uIiwic2V0dXBDZWNpbGlhIiwic2V0dXBDb3JvdG8iLCJzZXR1cERhd24iLCJzZXR1cER1c2siLCJzZXR1cEVseXNpdW0iLCJzZXR1cEVyaWNhIiwic2V0dXBFemVsbCIsInNldHVwR2VuZWZlIiwic2V0dXBIYXYiLCJzZXR1cEhpbmEiLCJzZXR1cEluZ3JpZCIsInNldHVwSW9uYSIsInNldHVwSmF5ZSIsInNldHVwSm9yZGkiLCJzZXR1cEthc3RvciIsInNldHVwUm9iZXJ0YSIsInNldHVwU2FzaGEiLCJzZXR1cFN5YmlsbGEiLCJzZXR1cFRvbWFzYSIsInNldHVwVmVybmEiLCJzZXR1cFZpdGFjaWEiLCJzZXR1cFl1a2kiLCJBbmRvYWluIiwiYXRobG9uIiwiY2VjaWxpYSIsImNvcm90byIsImRhd24iLCJkdXNrIiwiZWx5c2l1bSIsIkluZm9ybWF0aW9uIiwiZXJpY2EiLCJlemVsbCIsImhpbmEiLCJGdXR1cmUiLCJDT04iLCJQaHlzaWNhbCIsImlvbmEiLCJqYXllIiwiU2lsZW5jZWQiLCJFeHBlcnRpc2UiLCJqb3JkaSIsImthc3RvciIsInJvYmVydGEiLCJ0b21hc2EiLCJ2ZXJuYSIsInZpdGFjaWEiLCJ5dWtpIiwiZWxsaW90XzEiLCJnbm9zaXNfMSIsInJ1emFraV8xIiwic2h1b18xIiwidGVpYWlfMSIsInlvZXJpY18xIiwic2V0dXBSdXpha2kiLCJzZXR1cEVsbGlvdCIsInNldHVwWW9lcmljIiwic2V0dXBUZWlhaSIsInNldHVwU2h1byIsInNldHVwR25vc2lzIiwiRWxsaW90IiwiUnV6YWtpIiwiU2h1byIsIlRlaWFpIiwiWW9lcmljIiwic2V0dXBNb2JzIiwiRXBocmVtaXNfMSIsIkhhcnBvb25lcl8xIiwiTmV0aGVyc2VhQnJhbmRfMSIsIlNocmlla2VyTl8xIiwiU2xpZGVyXzEiLCJVcmNoaW5fMSIsIlVyY2hpbk5fMSIsInNldHVwTmV0aGVyc2VhQnJhbmQiLCJzZXR1cEVwaHJlbWlzIiwic2V0dXBTbGlkZXIiLCJzZXR1cFVyY2hpbiIsInNldHVwVXJjaGluTiIsInNldHVwSGFycG9vbmVyIiwic2V0dXBTaHJpZWtlck4iLCJFcGhyZW1pcyIsIkhlbGxmaXJlIiwiU1RSIiwiSU5UIiwiaGFycG9vbmVyIiwiSGFycG9vbmVyIiwibnNCcmFuZCIsIk5TQnJhbmQiLCJBbGwiLCJMYWlyQWN0aW9uIiwic2hyaWVrZXJOIiwiU2hyaWVrZXJOIiwic2xpZGVyIiwiU2xpZGVyIiwidXJjaGluIiwiVXJjaGluIiwiVXJjaGluTiIsInRlc3REYW1hZ2VUcmVlIiwiRGFtYWdlVHJlZSIsIkRhbWFnZVRyZWVMZWFmTm9kZUJ1ZmZfMSIsIkRhbWFnZVRyZWVOb2RlXzEiLCJEYW1hZ2VUcmVlTm9kZVRhZ18xIiwiRGFtYWdlVHJlZU5vZGVUeXBlXzEiLCJyb290IiwiYXBwbHlCdWZmIiwiYnVmZiIsInJlc2V0QnVmZnMiLCJjb21wdXRlRFBSIiwiZXhwZWN0ZWREZWYiLCJleHBlY3RlZFJlcyIsImRhbWFnZVRyZWUiLCJEYW1hZ2VUcmVlTm9kZSIsIkRhbWFnZVRyZWVOb2RlVHlwZSIsIkFuZCIsIk9yIiwiTGVhZiIsImRhbWFnZVBlckF0dGFjayIsImF0dGFja3NQZXJSb3VuZCIsImFjY3VyYWN5UmF0aW5nIiwiRGFtYWdlVHJlZU5vZGVUYWciLCJXZWFwb25BdHRhY2siLCJNZWxlZUF0dGFjayIsIk9uQWN0aW9uIiwiU3BlbGxBdHRhY2siLCJSYW5nZWRBdHRhY2siLCJPbkJvbnVzQWN0aW9uIiwiZHByIiwiRGFtYWdlVHJlZUxlYWZOb2RlQnVmZiIsIm5vZGUiLCJiYXNlUGFyYW1zIiwiYnVmZlBhcmFtcyIsImFwcGx5IiwiX25vZGVUeXBlIiwiX2NoaWxkcmVuIiwiX3NlbGZEYW1hZ2UiLCJfdGFncyIsImNvbW1lbnQiLCJfYnVmZnMiLCJidWZmZWREYW1hZ2UiLCJtYXhEUFIiLCJtYXhEUFJWYWx1ZSIsImNoaWxkIiwiY2hpbGREUFIiLCJjaGlsZERQUlZhbHVlIiwiYWNjdW11bGF0b3IiLCJhY2NWYWx1ZSIsInJlbW92ZUJ1ZmYiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ3JhcGhzX25hdmlnYXRpb25fMSIsIm5hdmlnYXRpb25fMSIsImNvdW50cnlfMSIsImRldm90aW9uTWFwXzEiLCJza2lsbE1hcF8xIiwiYWN0aXZhdGVDb21iYXRTY2VuYXJpb3NfMSIsIkRhbWFnZVRyZWVfMSIsImhpc3RvcnlfMSIsInNldHVwVUlfMSIsInNldHVwQ2FyZExvZ2ljIl0sInNvdXJjZVJvb3QiOiIifQ==