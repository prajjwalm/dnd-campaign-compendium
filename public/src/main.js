(()=>{"use strict";var e={8993:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.T_NOW=t.GameTimestamp=void 0;const n=a(190);class i{constructor(e=0,t=0,a=0,n=0,i=0,s=0){this.year=e,this.day=t,this.hour=a,this.minute=n,this.second=i,this.ms=s}static fromDays(e){return new i(0,e)}get totalMillis(){return this.ms+1e3*(this.second+60*(this.minute+60*(this.hour+24*(this.day+100*this.year))))}get totalDays(){return this.day+100*this.year}toString(){const e=this.year+Math.floor(this.day/100),t=this.day%100+Math.floor(this.hour/24),a=this.hour%24+Math.floor(this.minute/60),i=this.minute%60+Math.floor(this.second/60),s=String(a).padStart(2,"0"),o=String(i).padStart(2,"0");return`${t}<sup>${(0,n.getNumberSuffix)(t)}</sup> of Year ${e}, ${s}:${o}`}}t.GameTimestamp=i,i.DAY=864e5,t.T_NOW=new i(0,6,12,15)},3497:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.NpcOpinionV2=t.TimeskipEvent=t.NpcInteractionEvent=t.NegativeEmotion=t.PositiveEmotion=void 0;const n=a(190),i=a(302),s=a(8993);var o;!function(e){e[e.Affection=0]="Affection",e[e.Gratitude=1]="Gratitude",e[e.Trust=2]="Trust",e[e.Respect=3]="Respect"}(o=t.PositiveEmotion||(t.PositiveEmotion={})),t.NegativeEmotion=new Map([[o.Affection,"Hatred"],[o.Gratitude,"Envy"],[o.Trust,"Paranoia"],[o.Respect,"Contempt"]]);class r{constructor(e,t,a,n=10,i=null){this.timestamp=e,this.displayText=t,this.effects=a,this.insightGate=n,this.renderReverse=i}get eventDesc(){let e;if(e=this.insightGate<=10?"":this.insightGate<=i.PARTY_INSIGHT?`<div class='insight_lock--unlocked'><i class="fa-solid fa-unlock"></i>${this.insightGate}</div>`:`<div class='insight_lock--locked'><i class="fa-solid fa-lock"></i>${this.insightGate}</div>`,this.insightGate>i.PARTY_INSIGHT)return`<div class='event_li'>\n                    <div class="timestamp"><span>${this.timestamp.toString()}</span></div>\n                    <div class="effect_tags">${e}</div>\n                  </div>`;const a=[];for(const[e,n]of this.effects.entries()){if(0==n)continue;const i=d(n);let s,r;null==this.renderReverse||1!=this.renderReverse.get(e)?(s=-1==i?"-":"+".repeat(Math.abs(i)),r=i<-1?t.NegativeEmotion.get(e):o[e]):(s=-1==i?"+":"-".repeat(Math.abs(i)),r=i>=-1?t.NegativeEmotion.get(e):o[e]);const l=i<0?t.NegativeEmotion.get(e):o[e];a.push(`<div class="effect_tag" data-emo="${l}">${r}${s}</div>`)}return`<div class='event_li'>\n                    <div class="timestamp"><span>${this.timestamp.toString()}</span></div>\n                    <div class="display_text">${this.displayText}</div>\n                    <div class="effect_tags">${e} ${a.join("")}</div>\n                  </div>`}get startTime(){return this.timestamp}}t.NpcInteractionEvent=r;class l{constructor(e,t,a,n){this.startTime=e,this.endTime=t,this.ambientInteraction=a,this.text=n}get eventDesc(){if(0==this.ambientInteraction.size)return`<div class="timeskip_li">\n                        The time between <span class="timeskip_li__time">${this.startTime.toString()}</span> and \n                        <span class="timeskip_li__time">${this.endTime.toString()}</span> passed with negligible\n                        interaction.\n                    </div>`;const e=[];for(let[a,n]of this.ambientInteraction.entries()){if(h(n,0))continue;const i=n<-.05?t.NegativeEmotion.get(a):o[a];n<-.05&&(n=-n),n<0?e.push(`<li class="timeskip__emotion_desc">\n                        <span class="emotion_string--${i.toLowerCase()}--neg">${i}</span> eroded slightly.\n                    </li>`):n<.35?e.push(`<li class="timeskip__emotion_desc">\n                        <span class="emotion_string--${i.toLowerCase()}">${i}</span> increased slightly.\n                    </li>`):n<.75?e.push(`<li class="timeskip__emotion_desc">\n                        <span class="emotion_string--${i.toLowerCase()}">${i}</span> increased moderately.\n                    </li>`):e.push(`<li class="timeskip__emotion_desc">\n                        <span class="emotion_string--${i.toLowerCase()}">${i}</span> increased significantly.\n                    </li>`)}const a=this.text.length>0?`<p class="timeskip_li__description">${this.text}</p>`:"";return`<div class="interactions_list__item timeskip_li">\n                    The time between \n                    <span class="timeskip_li__time">${this.startTime.toString()}</span> and \n                    <span class="timeskip_li__time">${this.endTime.toString()}</span> passed with the following notable \n                    ambient interaction for each day of the duration -\n                    <ul>\n                        ${e.join("")}\n                    </ul>\n                    ${a}\n                </div>`}}function d(e){return Math.sign(e)*Math.floor((Math.abs(e)+2)/3)}t.TimeskipEvent=l;class c{constructor(e){this.emotion=e,this._timestamp=new s.GameTimestamp,this._value=0,this._bufferValue=0}static getCutoffValueForRating(e){const t=Math.abs(e);return Math.sign(e)*(t*(c.C+(t-1)/2))}incrementTimeTo(e){if(e.totalMillis<this.timestamp.totalMillis)throw new Error("Cannot go backwards in time.");const t=Math.sign(this._value),a=e.totalDays-this._timestamp.totalDays,n=c.getCutoffValueForRating(c.ZONE_CUTOFF_RATINGS[Math.abs(d(this.rating))]);this._value-=t*this.getDailyDecay()*a,t*this._value<=n&&(this._value=n*t),this.bufferValue+=t*a,this._timestamp=e}testReset(){this._bufferValue=0,this._value=0,this._timestamp=new s.GameTimestamp}addEvent(e,t){this.incrementTimeTo(t);const a=Math.sign(e);for(;a*e>0;){const t=Math.abs(d(this.rating)),n=this.rating;let i=e-Math.sign(this._value)*c.ZONE_BUFFER_MODIFIERS[t];i*a<0&&(i=0);const s=this.bufferValue;this.bufferValue+=i;let o,r=(e-=this.bufferValue-s)-Math.sign(this._value)*c.ZONE_VALUE_MODIFIERS[t];if(r*a<0&&(r=0),Math.sign(e)==Math.sign(this._value)&&Math.abs(this._value)>c.VALUE_AT_RATINGS[c.MAX_RATING])o=1e6;else{const t=Math.abs(this.rating),a=Math.abs(this._value);o=Math.sign(e)==Math.sign(this._value)?c.VALUE_AT_RATINGS[t+1]-a:a==c.VALUE_AT_RATINGS[t]?0==this._value?c.VALUE_AT_RATINGS[1]:a-c.VALUE_AT_RATINGS[t-1]:a-c.VALUE_AT_RATINGS[t]}const l=Math.sign(r)*Math.min(o,Math.abs(r));if(e-=l,this._value+=l,this.rating!=n&&(this._bufferValue=this.getBufferSize()),0==l)break}}getBufferSize(){const e=this.rating;return 0==e?0:e+Math.sign(e)*c.C}getDailyDecay(){return c.ZONE_DECAY_RATES[Math.abs(d(this.rating))]}get timestamp(){return this._timestamp}get value(){return this._value}get bufferValue(){return this._bufferValue}set bufferValue(e){this._bufferValue=e;const t=this.getBufferSize();Math.sign(t)*e<0&&(this._bufferValue=0),Math.abs(this._bufferValue)>Math.abs(t)&&(this._bufferValue=t)}get rating(){const e=2*c.C-1,t=Math.abs(this._value);return Math.sign(this._value)*Math.min(10,Math.floor((Math.sqrt(e*e+8*t)-e)/2))}}function h(e,t){return Math.abs(e-t)<1e-5}c.C=3,c.MAX_RATING=10,c.VALUE_AT_RATINGS=[...Array(11).keys()].map((e=>c.getCutoffValueForRating(e))),c.ZONE_CUTOFF_RATINGS=[0,1,4,7],c.ZONE_VALUE_MODIFIERS=[0,0,1,3],c.ZONE_BUFFER_MODIFIERS=[0,0,0,0],c.ZONE_DECAY_RATES=[1,.5,.25,.125];class p{constructor(e,t){if(e&&0!=t)throw new Error("A buffer shouldn't have a delta modifier.");this.isBuffered=e,this.deltaModifier=t,this._value=0,this.crossedBefore=!1}adjust(e){if(this.shouldAutofillOnFirstCross&&!this.crossedBefore)return this.crossedBefore=!0,this._value=this.size,e;const t=Math.sign(e);if(e+=this.deltaModifier,t!=Math.sign(e))return 0;const a=this._value;this._value+=e,Math.sign(this.size)*this._value<0?this._value=0:Math.abs(this._value)>Math.abs(this.size)&&(this._value=this.size);const n=e-(this._value-a);return h(0,n)?0:n-this.deltaModifier}reset(){this._value=0,this.crossedBefore=!1}get shouldAutofillOnFirstCross(){return this.isBuffered}get value(){return this._value}get isFilled(){return h(this.value,this.size)}get isEmpty(){return h(this.value,0)}}class m extends p{constructor(e,t,a){super(t,a),this.size=e}}class u extends p{constructor(){super(!0,0),this._size=0}get shouldAutofillOnFirstCross(){return!1}reset(){super.reset(),this._size=0}get size(){return this._size}set size(e){if((e-this.value)*this.value<0)throw new Error("New size set cannot fit the current value");this._size=e,this._value=this._size}}class g extends class{constructor(){this.posSlots=[],this.negSlots=[],this.dynamicBuffer=new u}resetRatings(){if(this.dynamicBuffer.reset(),this.posSlots.length>0){for(const e of this.posSlots)e.reset();for(const e of this.negSlots)e.reset();return}let e=0;for(let t=1;t<=this.maxRating;t++){const a=this.getValueCapacityOfRating(t),n=this.getZoneDeltaOffset(e);if(this.posSlots.push(new m(a,!1,-n)),this.negSlots.push(new m(-a,!1,n)),e<this.zoneCutoffs.length&&t>=this.zoneCutoffs[e]){const t=this.getBufferCapacityOfZone(this.zoneCutoffs[e]);this.posSlots.push(new m(t,!0,0)),this.negSlots.push(new m(-t,!0,0)),e++}}this.posSlots.push(new m(16777215,!1,0)),this.negSlots.push(new m(-16777215,!1,0))}adjustValue(e,t=!1,a){if(console.assert(this.posSlots[0].value*this.negSlots[0].value==0),0==e)return;const n=Math.sign(this.posSlots[0].value+this.negSlots[0].value),i=Math.sign(e),s=n*i>=0;let o,r;if(n>0?(o=this.posSlots,r=this.negSlots):n<0?(o=this.negSlots,r=this.posSlots):(o=i>0?this.posSlots:this.negSlots,r=i>0?this.negSlots:this.posSlots),t?a&&this.dynamicBuffer.adjust(Math.sign(this.dynamicBuffer.size)*a*.1):e=this.dynamicBuffer.adjust(e),0!=e)if(s){let t;for(t=0;t<o.length&&o[t].isFilled;t++);let a=!1;for(let n=0;n<100&&(e=o[t].adjust(e),o[t].isFilled);n++)a=!0,this.dynamicBuffer.size=this.getDynamicBufferSizeForRating(this.rating),t++;a&&(this.dynamicBuffer.size=this.getDynamicBufferSizeForRating(this.rating))}else{let a;for(a=0;a<o.length;a++)if(o[a].isEmpty){a--;break}for(let n=0;n<100&&!(a<0);n++){if(t&&o[a].isBuffered)return;if(e=o[a].adjust(e),!o[a].isEmpty)break;a--}if(h(e,0))return;if(console.assert(o[0].isEmpty,"My logic failed badly."),t)return;let n=!1;a=0;for(let t=0;t<100&&(e=r[a].adjust(e),r[a].isFilled);t++)a++,n=!0;n&&(this.dynamicBuffer.size=this.getDynamicBufferSizeForRating(this.rating))}}get rating(){const e=this.posSlots[0].value>0,t=this.negSlots[0].value<0;if(t&&e)throw new Error("both positive and negative buffers filled");if(!t&&!e)return 0;const a=e?this.posSlots:this.negSlots;let n=e?1:-1,i=0;for(const e of a){if(!e.isFilled)break;e.isBuffered||i++}return n*i}get value(){let e=0;for(const t of this.posSlots)if(!t.isBuffered&&(e+=t.value,t.value<t.size))break;for(const t of this.negSlots)if(!t.isBuffered&&(e+=t.value,t.value>t.size))break;return e}get bufferedValue(){let e=this.dynamicBuffer.value;for(const t of this.posSlots)t.isBuffered&&(e+=t.value);for(const t of this.negSlots)t.isBuffered&&(e+=t.value);return e}get zone(){const e=this.rating,t=Math.abs(e),a=Math.sign(e);let n=0;for(const e of this.zoneCutoffs){if(e>t)break;n++}return n*a}}{constructor(){super(),this.resetRatings()}getBufferCapacityOfZone(e){return Math.abs(e)}getDynamicBufferSizeForRating(e){return e}getValueCapacityOfRating(e){return Math.abs(e)+2}getZoneDeltaOffset(e){return[0,0,1,2][e]}get zoneCutoffs(){return[1,4,7]}get maxRating(){return 10}}class f extends class{constructor(){this.bufferedAttitude=new g,this.currentTime=new s.GameTimestamp,this.ambientInteraction=0}testReset(){this.bufferedAttitude.resetRatings()}incrementTimeTo(e){if(e.totalMillis<this.currentTime.totalMillis)throw new Error("Cannot move backwards in time.");const t=this.forgetfulness,a=this.ambientInteraction,n=t+a,i=Math.sign(a)!=Math.sign(t)&&Math.abs(a)<Math.abs(t);this.bufferedAttitude.adjustValue(n*(e.totalDays-this.currentTime.totalDays),i,e.totalDays-this.currentTime.totalDays),this.currentTime=e}addEvent(e,t){this.bufferedAttitude.adjustValue(e)}get value(){return this.bufferedAttitude.value}get rating(){return this.bufferedAttitude.rating}get timestamp(){return this.currentTime}}{constructor(){super()}get forgetfulness(){const e=this.bufferedAttitude.zone,t=Math.abs(e),a=Math.sign(e);return[.2,.1,.05,.02][t]*-a}}t.NpcOpinionV2=class{constructor(e,t){this.npc=e,this.pc=t,this.attitudeHandlers=new Map,this.events=[],this.currentTime=null;for(const e of(0,n.getEnumIterator)(o))this.attitudeHandlers.set(e,new f)}addEvent(e){if(null!=this.currentTime){if(e.startTime.totalDays>this.currentTime.totalDays+2&&console.warn(`Gap between events ${e.startTime.totalDays} -> ${this.currentTime.totalDays} not covered by timeskip.`),e.startTime.totalMillis<this.currentTime.totalMillis)throw new Error(`Cannot move backward in time, current time ${this.currentTime.toString()} event start time ${e.startTime.toString()}.`)}else this.currentTime=e.startTime,this.addEvent(new r(e.startTime,"Base Charisma.",new Map([[o.Respect,i.PcCharismaMods.get(this.pc)]])));if(this.events.push(e),e instanceof l){for(const t of(0,n.getEnumIterator)(o)){const a=e.ambientInteraction.has(t)?e.ambientInteraction.get(t):0,n=this.attitudeHandlers.get(t);n.ambientInteraction=a,n.incrementTimeTo(e.endTime)}this.currentTime=e.endTime}else if(e instanceof r){for(const[t,a]of e.effects.entries())this.attitudeHandlers.get(t).addEvent(a);this.currentTime=e.timestamp}}generateSummaryTableCellContents(){const e=d(this.getEmotion(o.Trust)),t=e>=0?`<div class="trust_border value_${e}"></div>`:`<div class="paranoia_border value_${-e}"></div>`,a=d(this.getEmotion(o.Gratitude)),i=a>=0?`<div class="gratitude_border value_${a}"></div>`:`<div class="envy_border value_${-a}"></div>`,s=d(this.getEmotion(o.Respect)),r=s>=0?`<div class="respect_border value_${s}"></div>`:`<div class="contempt_border value_${-s}"></div>`;let l=0;for(const e of(0,n.getEnumIterator)(o))l+=this.getEmotion(e);return`\n            <div class="cell">\n                <div class="npc_opinion" \n                     data-npc-id="${this.npc}" \n                     data-pc-id="${this.pc}">\n                    ${l}\n                </div>\n                ${t}${i}${r}\n                <div class="backdrop"></div>\n            </div>`}generateTimeline(){const e=[];for(const t of this.events)e.push(t.eventDesc);const t=[];for(const e of(0,n.getEnumIterator)(o))t.push(this.generateOpinionTag(e));return`\n                <h4>Interaction Details</h4>\n                <div class="opinion_tags">${t.join("")}</div>\n                <div class="events_list">${e.join("")}</div>\n            `}generateOpinionTag(e){const a=this.getEmotion(e);if(0==a)return"";const n=a>0?o[e]:t.NegativeEmotion.get(e);return`<div class="effect_tag" data-emo="${n}">${n}: ${Math.abs(a)}</div>`}getEmotion(e){return this.attitudeHandlers.get(e).rating}},t.test=function(){!function(){const e=new m(7,!1,-2),t=new m(-7,!1,2);function a(e,t,a,n){const i=e.adjust(t);console.assert(e.value==a,`(Adju ${t}) Expected value ${a}, Got ${e.value}`),console.assert(i==n,`(Adju ${t}) Expected leftover ${n}, Got ${i}`)}a(e,0,0,0),a(e,-1,0,-1),a(e,1,0,0),a(e,5,3,0),a(e,-1,0,0),a(e,7,5,0),a(e,7,7,5),a(e,-6,0,1),a(t,0,0,0),a(t,1,0,1),a(t,-1,0,0),a(t,-5,-3,0),a(t,1,0,0),a(t,-7,-5,0),a(t,-7,-7,-5),a(t,6,0,-1)}(),function(){const e=new g;function t(e,t,a,n){console.assert(e.value==t&&e.rating==a&&e.bufferedValue==n,`Expected (V, R, B): (${t}, ${a}, ${n}). Got (${e.value}, ${e.rating}, ${e.bufferedValue}).`)}e.adjustValue(1),t(e,1,0,0),e.adjustValue(-3),t(e,-2,0,0),e.adjustValue(5),t(e,3,1,2),e.adjustValue(-8),t(e,-3,-1,-2),e.resetRatings(),e.adjustValue(8),t(e,8,2,3),e.adjustValue(18),t(e,25,5,10),e.adjustValue(-1),t(e,25,5,9),e.adjustValue(-5),t(e,23,4,5),e.adjustValue(-5),t(e,18,4,5),e.adjustValue(-2),t(e,18,4,3),e.adjustValue(-2),t(e,18,4,1),e.adjustValue(-2),t(e,16,3,1),e.adjustValue(-2),t(e,14,3,1),e.adjustValue(2),t(e,14,3,3),e.resetRatings(),e.adjustValue(7),e.adjustValue(-.1,!0),t(e,6.9,1,3)}(),function(){const e=new f;console.assert(0==e.rating),e.incrementTimeTo(s.GameTimestamp.fromDays(1)),console.assert(0==e.rating),e.addEvent(2.5),e.incrementTimeTo(s.GameTimestamp.fromDays(2e3)),console.assert(0==e.rating),e.testReset(),e.addEvent(7),console.assert(2==e.rating),e.incrementTimeTo(s.GameTimestamp.fromDays(2002)),console.assert(1==e.rating),e.incrementTimeTo(s.GameTimestamp.fromDays(4e3)),console.assert(1==e.rating),console.assert(h(e.value,3),e.value),e.ambientInteraction=-.1,e.incrementTimeTo(s.GameTimestamp.fromDays(4021)),console.assert(h(e.value,1.8),e.value)}()}},8143:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupNpcOpinions=t.renderNpcOpinionTable=void 0;const n=a(190),i=a(302),s=a(4492),o=a(2228),r=a(3497),l=a(4011),d=a(4715),c=a(3537),h=a(4763),p=a(8831),m=a(5317),u=a(7873),g=a(772),f=a(3186),v=a(6318);function w(e,t){const a=$("<div class='opinion_summary_table'></div>"),r=$("<div class='row header'><div class='cell'></div></div>");for(const e of(0,n.getEnumIterator)(i.PcIndex)){const t=`./assets/images/character_tokens/C2/pcs/${i.PcTokenNames.get(e)}.png`;$(`<div class="cell character_token"><img src="${t}" alt="[Img not found]"></div>`).appendTo(r)}r.appendTo(a);const l=$("<div class='table_body'></div>");for(const e of(0,n.getEnumIterator)(o.NpcId)){const a=s.Character.get(e);if(!a||!a.isOpinionated)continue;const o=$("<div class='row'></div>");$(`<div class='cell character_token'><img src="./assets/images/${a.imgPath}" alt="[Img not found]"></div>`).appendTo(o);for(const a of(0,n.getEnumIterator)(i.PcIndex)){const n=t.get(e).get(a);o.append(n.generateSummaryTableCellContents())}o.appendTo(l)}l.appendTo(a),a.appendTo(e)}t.renderNpcOpinionTable=w,t.setupNpcOpinions=function(){const e=new Map;for(const t of(0,n.getEnumIterator)(o.NpcId)){const a=s.Character.get(t);if(!a||!a.isOpinionated)continue;const o=new Map;for(const e of(0,n.getEnumIterator)(i.PcIndex))o.set(e,new r.NpcOpinionV2(t,e));e.set(t,o)}(0,c.session2NpcInteractions)(e),(0,h.session3NpcInteractions)(e),(0,p.session4NpcInteractions)(e),(0,m.session5NpcInteractions)(e),(0,u.session6NpcInteractions)(e),(0,g.session7NpcInteractions)(e),(0,f.session8NpcInteractions)(e),(0,v.session9NpcInteractions)(e),(0,l.session10NpcInteractions)(e),(0,d.session11NpcInteractions)(e);const t=$("#individual_ast"),a=$("#attitude_summary_table_area");w(a,e),a.on("click",".npc_opinion",(function(){const a=$(this).data("npcId"),n=$(this).data("pcId");t.html(e.get(a).get(n).generateTimeline()),t.show()}))}},4011:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session10NpcInteractions=void 0;const n=a(302),i=a(4492),s=a(2228),o=a(8993),r=a(3497),l=a(6318);t.session10NpcInteractions=function(e){(0,l.addInteractionEvent)(e,s.NpcId.Petra,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,45),"Prodded me to confront the past. About what happened to... to... \n        AARGH!",new Map([[r.PositiveEmotion.Gratitude,3],[r.PositiveEmotion.Affection,-2]]),10,new Set([r.PositiveEmotion.Affection])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,14,30),"So many people waiting outside my door? OH! Got it. I'm popular now.",new Map([[r.PositiveEmotion.Gratitude,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,14,40),"Didn't get any idea of what I just did. Thank God.",new Map([[r.PositiveEmotion.Respect,-1],[r.PositiveEmotion.Gratitude,1]]),i.Character.get(s.NpcId.Hina).passiveDeception),(0,l.addInteractionEvent)(e,s.NpcId.Elysium,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,21,20),"Well, that was an expensive investment. Still, it's rare for Hina to \n        recommend someone, and the local Goddess also picked them for the fight\n        to decide the fate of this village. Maybe this will pay off handsomely?",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Trust,-3]]),i.Character.get(s.NpcId.Elysium).passiveDeception,new Set([r.PositiveEmotion.Trust]));const t=new Map([[s.NpcId.Dusk,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA]],[s.NpcId.Dawn,[]],[s.NpcId.Andri,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Athlon,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Cecelia,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcId.Coroto,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Elysium,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Erica,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcId.Genefe,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Hav,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Hina,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcId.Ingrid,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Iona,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcId.Jaye,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Jordi,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Kastor,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Petra,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Roberta,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA]],[s.NpcId.Sasha,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION]],[s.NpcId.Sybilla,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Tomasa,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Verna,[n.PcIndex.ID_CYRION]],[s.NpcId.Vitacia,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Yuki,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Ezell,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]],[s.NpcId.Irene,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION]]]);(0,l.addTimeSkipEvent)(e,s.NpcId.Roberta,[n.PcIndex.ID_CYRION],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Hmm... it was pretty fun interacting with a good ol' backwaters hippy druid \n         (real druid). Makes quite a difference from my usual clientele. Sigh,\n         though he refused to become my client after all - but that's all right \n         - people are usually shy before they get a taste of my services. Not to\n         mention he also managed to pick up bits of my 100% organic natural \n         herbal recipe... <br/>",new Map([[r.PositiveEmotion.Respect,.7],[r.PositiveEmotion.Trust,.2],[r.PositiveEmotion.Gratitude,.3]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"She's putting in so much effort (a penance?), yet these kids... sigh. With them \n        being useless like that, I suppose I can't do my usual of utilizing class hours for catching up \n        on jet lag. While I hate to be the responsible student,\n        I must admit... something about this classroom is... different...\n        <br/>\n        ...<br/>\n        Fuck. I think I'm actually enjoying this.",new Map([[r.PositiveEmotion.Respect,.5],[r.PositiveEmotion.Trust,.2],[r.PositiveEmotion.Affection,.1]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Iona,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Wow, a year ago, I'd never have imagined this. That I'll be going to a \n         regular school with a proper teacher and true friends. The others \n         probably don't appreciate this, having grown up in a sheltered environment.\n         But I'm really, truly grateful for this. I'll do my best, I swear.",new Map([[r.PositiveEmotion.Gratitude,.8],[r.PositiveEmotion.Respect,.25],[r.PositiveEmotion.Trust,.1]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Verna,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Her classes for the kids are actually pretty decent, and God knows this\n         is something Iona needed for proper growth.",new Map([[r.PositiveEmotion.Gratitude,.4],[r.PositiveEmotion.Respect,.2]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Cecelia,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Damn it. It hurts watching her try so hard, and yet I can't reciprocate...\n         But I can't! I just can't... I've got barely a year to live, the fuck \n         am I studying for anyway?<br/>\n         Just leave me alone. Don't look at me. Don't expect things of me.<br/>\n         Please...<br/>\n         But of course you won't. And I suppose this classroom does have its \n         cool moments. Sigh... it does help to take my mind of ig...",new Map([[r.PositiveEmotion.Gratitude,.5],[r.PositiveEmotion.Affection,-.1]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Sasha,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Another physics lesson??? Oh, we're going to the beach today?",new Map([[r.PositiveEmotion.Respect,.3],[r.PositiveEmotion.Affection,-.05]])),(0,l.addInteractionEvent)(e,s.NpcId.Roberta,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,27,20,30),"You mean you grew all the herbs I'd mentioned in a secret grove to \n        which I'll have privileged access too?! Cool!<br/>\n        Also, this means I won't have to keep beggin Bjorn always to remember to\n        get those herbs for me, and won't have to depend on his whims? Woohooo!!\n        (Wonder where he's disappeared off to anyway...)",new Map([[r.PositiveEmotion.Gratitude,8],[r.PositiveEmotion.Respect,3]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Verna,[n.PcIndex.ID_HELIOS],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"",new Map([[r.PositiveEmotion.Respect,.1]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Jaye,[n.PcIndex.ID_HELIOS],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"Ah it seems I got myself a routine customer (even if they don't pay). \n        Strange tho, never would've guessed him as a seafood lover...",new Map([[r.PositiveEmotion.Respect,.1],[r.PositiveEmotion.Gratitude,.1]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Athlon,[n.PcIndex.ID_HELIOS],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(17),"",new Map),(0,l.addInteractionEvent)(e,s.NpcId.Athlon,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,17,9,30),"Negated the drink and forced me to face a world I can't bear to face.",new Map([[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Affection,-3]]),10,new Set([r.PositiveEmotion.Affection])),(0,l.addTimeSkipEvent)(e,s.NpcId.Athlon,[n.PcIndex.ID_HELIOS],o.GameTimestamp.fromDays(18),o.GameTimestamp.fromDays(27),"",new Map),(0,l.addTimeSkipEvent)(e,s.NpcId.Dusk,[n.PcIndex.ID_CYRION,n.PcIndex.ID_JULIUS],o.GameTimestamp.fromDays(2),o.GameTimestamp.fromDays(27),"",new Map),(0,l.addTimeSkipEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"",new Map([[r.PositiveEmotion.Trust,.1]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Erica,[n.PcIndex.ID_AURELIA],o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"",new Map([[r.PositiveEmotion.Trust,.35],[r.PositiveEmotion.Gratitude,.2]]));for(const[a,n]of t.entries())(0,l.addTimeSkipEvent)(e,a,n,o.GameTimestamp.fromDays(7),o.GameTimestamp.fromDays(27),"",new Map);const a=new o.GameTimestamp(0,27,21,0);(0,l.addInteractionEvent)(e,s.NpcId.Dusk,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_JULIUS],a,"Amusing.<br/>But let me interject-",new Map([[r.PositiveEmotion.Gratitude,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_JULIUS],a,"I don't think I like this tension.... <br/>Oh Shi- They've started fighting. Please sto-<br/>Hold on. Ms. Dusk has something to say.",new Map([[r.PositiveEmotion.Respect,-1],[r.PositiveEmotion.Trust,-1]])),(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_JULIUS],a,"Huh? What did Ms. Dusk mean when she said you're on her side? She has a side??",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Respect,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_JULIUS],a,"Wow, they're really brothers-in-arms now? Yeah, adventurers do be strange.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_JULIUS],a,"You really need to get better at lying, old man. Won't get anywhere in the world of adults this way (smug).",new Map([[r.PositiveEmotion.Respect,-1],[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Elysium,[n.PcIndex.ID_JULIUS],a,"Wow-ho-ho, relax guys, this one's a fraudster yea, but not dangerous. But the card Hina had-? Hmm... I think the database might be incomplete on this one. But the Goddess vouched for him - Wait is that signature Atium??<br/> Need to tread carefully here.",new Map([[r.PositiveEmotion.Respect,5],[r.PositiveEmotion.Trust,-3]])),(0,l.addInteractionEvent)(e,s.NpcId.Ezell,[n.PcIndex.ID_JULIUS],a,"Elysium looks anxious, but he's not asked me to shoot... Not often he looks shaken.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,-1]])),(0,l.addInteractionEvent)(e,s.NpcId.Cecelia,[n.PcIndex.ID_JULIUS],a,"Oh no! The way Helios reacted, and Mr. Elysium and Sir Enforcer are tense too. Is he a bad man?",new Map([[r.PositiveEmotion.Trust,-2]])),(0,l.addInteractionEvent)(e,s.NpcId.Cecelia,[n.PcIndex.ID_JULIUS],a,"But they're friends now, so there must've been a confusion. Thank God.",new Map([[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_JULIUS,n.PcIndex.ID_HELIOS],a,"Yes this politicking is what nobility does best. And that sharp retort with the elegant handling by the elderly gentleman? Yes very good.",new Map([[r.PositiveEmotion.Respect,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Irene,[n.PcIndex.ID_JULIUS,n.PcIndex.ID_HELIOS],a,"Oh dear-",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Verna,[n.PcIndex.ID_JULIUS],a,"Do we have trouble? Wait... that scent... Dangerous",new Map([[r.PositiveEmotion.Respect,1],[r.PositiveEmotion.Trust,-4]])),(0,l.addInteractionEvent)(e,s.NpcId.Verna,[n.PcIndex.ID_JULIUS,n.PcIndex.ID_HELIOS],a,"I suppose if they're fighting side-by-side... I should take it easy... the scent wasn't that strong anyway.",new Map([[r.PositiveEmotion.Respect,1],[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Roberta,[n.PcIndex.ID_JULIUS],a,"Well that appearance is carefully managed... But he could use the services of a pro anyway.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,-1]]))}},4715:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session11NpcInteractions=void 0;const n=a(302),i=a(4492),s=a(2228),o=a(8993),r=a(3497),l=a(6318);t.session11NpcInteractions=function(e){(0,l.addInteractionEvent)(e,s.NpcId.Jaye,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,27,21,0),"What was that about? You both looked like you'd skin each other and now you're sharing soup? Ok. And you want me to help you in this fight against these fearsome beasts of... ink? Ok.",new Map([[r.PositiveEmotion.Trust,-1]])),(0,l.addInteractionEvent)(e,s.NpcId.Jaye,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,27,21,0),"You know boss, you got one hell of a silver tongue. Ok, I'm convinced, but you owe me <em>big</em> time now.",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Trust,-1],[r.PositiveEmotion.Gratitude,-1]]));const t=new Map([[s.NpcId.Andri,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Athlon,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Cecelia,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,-1],[r.PositiveEmotion.Trust,1],[r.PositiveEmotion.Affection,-1]])],[s.NpcId.Coroto,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Elysium,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,3]])],[s.NpcId.Erica,new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Genefe,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Hav,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Hina,new Map([[r.PositiveEmotion.Respect,0],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,3]])],[s.NpcId.Ingrid,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Iona,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Jordi,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Kastor,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,-4],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Petra,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Roberta,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Sasha,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,1]])],[s.NpcId.Sybilla,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Tomasa,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Verna,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Vitacia,new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,4],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Yuki,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,0],[r.PositiveEmotion.Trust,2]])],[s.NpcId.Ezell,new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,3]])],[s.NpcId.Irene,new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,2]])]]),a=new o.GameTimestamp(0,28,11,0);for(const[i,s]of t.entries())(0,l.addInteractionEvent)(e,i,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_JULIUS],a,"<em>(On Dawn explaining the entire situation and the combat.)</em>",s);(0,l.addInteractionEvent)(e,s.NpcId.Jaye,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_JULIUS],a,"Well, despite everything, I gotta say - didn't experience this adrenaline in a long time, Boss(es?). You fight like polar bears. Also, I daresay I'll get more customers now. Gotta, get back to the chopping board asap!<br/>Oh also knighthood's cool, I don't know much 'bout it, but should make the stallboard more inviting. (Sir Jaye's Sandwitches?)",new Map([[r.PositiveEmotion.Respect,8],[r.PositiveEmotion.Gratitude,9],[r.PositiveEmotion.Trust,6]])),(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_JULIUS],a,"I suppose... it is over? 400 years. But I don't want to -",new Map([[r.PositiveEmotion.Gratitude,-3],[r.PositiveEmotion.Affection,-2]]),i.Character.get(s.NpcId.Dawn).passiveDeception-5),(0,l.addInteractionEvent)(e,s.NpcId.Verna,[n.PcIndex.ID_HELIOS],a,"So that's what the sparring was about. (Sad smile) Pricks just a bit...",new Map([[r.PositiveEmotion.Gratitude,-1]]),i.Character.get(s.NpcId.Verna).passiveDeception,new Set([r.PositiveEmotion.Gratitude])),(0,l.addInteractionEvent)(e,s.NpcId.Dusk,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,28,9,0),"Oh? He's hot.<br/><p style='font-size: 11px'>And could be called cool too, now that I think of it... hmm, Sun and wind...<br/>And just like that, an artist, slumbering for way too long, gets inspiration again. And going all in? in that state? Huh, coming from a champion of Ruin, that's... dangerous.<br/>Logically, I should draw the sword, but whimsy compels me to the brush instead.</p>",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Gratitude,7]])),(0,l.addInteractionEvent)(e,s.NpcId.Dusk,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,28,9,0),"Stands back, out of the limelight. But without him, Mr. Shash would've been dead two times over. Boring as a primary subject, but the reliability makes the backdrop oh so much better...",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Dusk,[n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,28,9,0),"Ah the quintessential fraudster. Even in combat he retains his style... Those proses could qualify as works of art. Hmm makes for an interesting contrast with the others. Where is your place on the canvas, though, I wonder?",new Map([[r.PositiveEmotion.Respect,5]]))}},3537:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session2NpcInteractions=void 0;const n=a(302),i=a(4492),s=a(2228),o=a(8993),r=a(3497),l=a(6318);t.session2NpcInteractions=function(e){(0,l.addInteractionEvent)(e,s.NpcId.Dusk,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,1,12,0),"Why are Champions of Ruin here? I do not remember doing anything to provoke him. Anyway...",new Map([[r.PositiveEmotion.Trust,-1]]),10,new Set([r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(e,s.NpcId.Dusk,[n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,1,13,0),"Oh. I get to see the coronation of a champion?",new Map([[r.PositiveEmotion.Respect,2]]),i.Character.get(s.NpcId.Dusk).passiveDeception),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,1,13,0),"He connected to my cognitive shadow! HELP!",new Map([[r.PositiveEmotion.Trust,-4]]),i.Character.get(s.NpcId.Hina).passiveDeception),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,1,13,0),"This card... why's a member of the troupe here?",new Map([[r.PositiveEmotion.Trust,-7]]),i.Character.get(s.NpcId.Hina).passiveDeception),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,1,13,10),"Though he doesn't look like one of them...",new Map([[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,1,13,15),"Wait.. What?! This guy's on our side???",new Map([[r.PositiveEmotion.Trust,6]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,1,13,15),"Heeehhh... not many people get a recommendation by the God of death itself.",new Map([[r.PositiveEmotion.Respect,7]]),i.Character.get(s.NpcId.Hina).passiveDeception),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_JULIUS],new o.GameTimestamp(0,2,8,0),"How come he doesn't need medical attention? Well it's probably not that surprising considering everything, and at least I get to slack off... (I think I'll just leave him here till he wakes - don't want Ms Dawn to get all tensed up)",new Map([[r.PositiveEmotion.Respect,1],[r.PositiveEmotion.Trust,-1],[r.PositiveEmotion.Gratitude,1]])),(0,l.addTimeSkipEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_JULIUS],o.GameTimestamp.fromDays(3),o.GameTimestamp.fromDays(27),"",new Map([[r.PositiveEmotion.Trust,.1]])),(0,l.addInteractionEvent)(e,s.NpcId.Dusk,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,1,13,0),"So these guys being here is probably not related to me too..",new Map([[r.PositiveEmotion.Trust,1]]),10);for(const t of[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA])(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[t],new o.GameTimestamp(0,5,9,0),"A polite bunch it seems.",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Tomasa,[t],new o.GameTimestamp(0,5,9,0),"Liked the soup I made.",new Map([[r.PositiveEmotion.Gratitude,1]]));(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,10,0),"Cooler than I expected aasimar/paladins to be.",new Map([[r.PositiveEmotion.Respect,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,10,30),"A friend of my brother. Seems to be as noble and kind as I'd expect.",new Map([[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Trust,4]]))}},4763:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session3NpcInteractions=void 0;const n=a(302),i=a(2228),s=a(8993),o=a(3497),r=a(6318);t.session3NpcInteractions=function(e){(0,r.addInteractionEvent)(e,i.NpcId.Cecelia,[n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,5,11,0),"Bearer of an awful truth about Mostima/Andoain.",new Map([[o.PositiveEmotion.Affection,-2],[o.PositiveEmotion.Trust,1],[o.PositiveEmotion.Gratitude,2]])),(0,r.addInteractionEvent)(e,i.NpcId.Cecelia,[n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,5,11,15),"Seemed concerned about my state.",new Map([[o.PositiveEmotion.Gratitude,1]])),(0,r.addInteractionEvent)(e,i.NpcId.Cecelia,[n.PcIndex.ID_HELIOS],new s.GameTimestamp(0,5,11,30),"Seemed interested in helping out Andoain and myself.",new Map([[o.PositiveEmotion.Gratitude,1],[o.PositiveEmotion.Respect,1],[o.PositiveEmotion.Trust,1]])),(0,r.addInteractionEvent)(e,i.NpcId.Cecelia,[n.PcIndex.ID_AURELIA],new s.GameTimestamp(0,5,12,0),"Took an interest in my health and offered words of comfort.",new Map([[o.PositiveEmotion.Gratitude,2]])),(0,r.addInteractionEvent)(e,i.NpcId.Genefe,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,11,45),"Prying into how I look after these kids, like I were guilty of something.",new Map([[o.PositiveEmotion.Respect,-1],[o.PositiveEmotion.Trust,-1]]),17),(0,r.addInteractionEvent)(e,i.NpcId.Sasha,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,11,45),"Thinks I'm mentally unstable.",new Map([[o.PositiveEmotion.Respect,-1],[o.PositiveEmotion.Trust,-1]])),(0,r.addInteractionEvent)(e,i.NpcId.Genefe,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,12,0),"Acknowledges how hard I work for these kids.",new Map([[o.PositiveEmotion.Trust,2],[o.PositiveEmotion.Respect,2],[o.PositiveEmotion.Gratitude,2]])),(0,r.addInteractionEvent)(e,i.NpcId.Sasha,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,12,0),"Praising that hag.",new Map([[o.PositiveEmotion.Respect,-1]])),(0,r.addInteractionEvent)(e,i.NpcId.Cecelia,[n.PcIndex.ID_CYRION],new s.GameTimestamp(0,5,12,30),"Hehe, puked in his first flight despite being healthy.",new Map([[o.PositiveEmotion.Gratitude,1],[o.PositiveEmotion.Respect,-2]])),(0,r.addInteractionEvent)(e,i.NpcId.Erica,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA],new s.GameTimestamp(0,5,13,30),"Seem like a well-mannered bunch. Asked for permission to enter our garden instead of jumping over the bush.",new Map([[o.PositiveEmotion.Respect,2],[o.PositiveEmotion.Trust,1]]))}},8831:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session4NpcInteractions=void 0;const n=a(302),i=a(4492),s=a(2228),o=a(8993),r=a(3497),l=a(6318);t.session4NpcInteractions=function(e){(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,5,13,30),"Didn't seem to hold respect for my position.",new Map([[r.PositiveEmotion.Respect,-2]])),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,0),"Acknowledged my honor for the fatherland.",new Map([[r.PositiveEmotion.Respect,1],[r.PositiveEmotion.Gratitude,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,0),"Comes from a weak country and a feminine race.",new Map([[r.PositiveEmotion.Respect,-2],[r.PositiveEmotion.Trust,-1]])),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,0),"Appears to have respect for our fatherland.",new Map([[r.PositiveEmotion.Gratitude,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,0),"Comes from a powerful country and a noble race.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,0),"Was worried about our safety.",new Map([[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Trust,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,0),"Promised with honor to defend us should the need arise.",new Map([[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Respect,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,30),"Was gallivanting with my wife.",new Map([[r.PositiveEmotion.Respect,-1],[r.PositiveEmotion.Trust,-1],[r.PositiveEmotion.Gratitude,-1]]),i.Character.get(s.NpcId.Coroto).passiveDeception+5),(0,l.addInteractionEvent)(e,s.NpcId.Erica,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,25),"Reminded me of happier times in my father's estate and Ivangrad.",new Map([[r.PositiveEmotion.Gratitude,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Erica,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,14,25),"Were polite to me when when, in my failing memory, I couldn't help them much",new Map([[r.PositiveEmotion.Gratitude,1],[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Erica,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,30),"Their coming here will shake things up.",new Map([[r.PositiveEmotion.Trust,-2]]),i.Character.get(s.NpcId.Erica).passiveDeception+5),(0,l.addInteractionEvent)(e,s.NpcId.Coroto,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,14,30),"Their coming here can cause much trouble.",new Map([[r.PositiveEmotion.Trust,-2]]),i.Character.get(s.NpcId.Coroto).passiveDeception+5),(0,l.addInteractionEvent)(e,s.NpcId.Jordi,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,15,30),"As a first impression, they seem to be kind and humble people.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Jordi,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,15,30),"Gazed at the sea wistfully. Does he too belong there?",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Jordi,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,15,45),"Was concerned about the disaster that struck our land and my harsh experience in it.",new Map([[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Jordi,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,15,45),"Was curious about the spearhead stone and of my uncle's travels.",new Map([[r.PositiveEmotion.Gratitude,2],[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Jordi,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,0),"Noted the value of fishing in enriching the local diet.",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Petra,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,30),"I'm sure they're all good youths and am happy to have them with us.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,3],[r.PositiveEmotion.Gratitude,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Petra,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,30),"I'm glad they partook in the meal we made and gave us company.",new Map([[r.PositiveEmotion.Gratitude,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Petra,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,45),"I'm surprised and happy that they are willing to hear out the story of an old nobody like myself.",new Map([[r.PositiveEmotion.Gratitude,4],[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,30),"Starry-dude's not too fond of gaming, it seems.",new Map),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,16,45),"Heh, his holiness would also go down the path of the gaming addict...",new Map([[r.PositiveEmotion.Respect,1],[r.PositiveEmotion.Trust,2]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,16,45),"Wait, the investiture changed... that intent... hmm...",new Map([[r.PositiveEmotion.Trust,-3],[r.PositiveEmotion.Respect,2]]),i.Character.get(s.NpcId.Hina).passiveDeception,new Set([r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,16,45),"He actually beat the boss, guy's got a bright future. (even if...)",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,5,16,45),"Starry-dude speaks fondly to gran.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,1],[r.PositiveEmotion.Gratitude,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Petra,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,5,16,45),"He's having fun with Hina.",new Map([[r.PositiveEmotion.Gratitude,1]]))}},5317:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combatMemories=t.session5NpcInteractions=void 0;const n=a(190),i=a(302),s=a(4492),o=a(2228),r=a(8993),l=a(3497),d=a(6318);function c(e,t,a){const r=[o.NpcId.Elysium,o.NpcId.Bjorn,o.NpcId.Hav,o.NpcId.Sasha,o.NpcId.Cecelia,o.NpcId.Irene,o.NpcId.Dusk,o.NpcId.Dawn,o.NpcId.Hina,o.NpcId.Ezell],c=[o.NpcId.Elysium,o.NpcId.Bjorn,o.NpcId.Hav,o.NpcId.Sasha,o.NpcId.Cecelia,o.NpcId.Irene,o.NpcId.Dusk,o.NpcId.Dawn,o.NpcId.Hina,o.NpcId.Ezell],h=[o.NpcId.Elysium,o.NpcId.Bjorn,o.NpcId.Hav,o.NpcId.Sasha,o.NpcId.Cecelia,o.NpcId.Irene,o.NpcId.Dusk,o.NpcId.Dawn,o.NpcId.Hina,o.NpcId.Ezell];if(!t){(0,d.addInteractionEvent)(e,o.NpcId.Yuki,[i.PcIndex.ID_HELIOS],a,"He shines so bright... ugh, it burns. Also the way <em>that man</em> looks at me - cringe.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,-4],[l.PositiveEmotion.Respect,4]]),s.Character.get(o.NpcId.Yuki).passiveDeception),r.push(o.NpcId.Yuki),(0,d.addInteractionEvent)(e,o.NpcId.Iona,[i.PcIndex.ID_HELIOS],a,"Saved me!! Gods below, I didn't see that coming... Rusts, that thing would've... would've...",new Map([[l.PositiveEmotion.Trust,4],[l.PositiveEmotion.Gratitude,4],[l.PositiveEmotion.Respect,2]]),s.Character.get(o.NpcId.Iona).passiveDeception-5),r.push(o.NpcId.Iona),(0,d.addInteractionEvent)(e,o.NpcId.Cecelia,[i.PcIndex.ID_HELIOS],a,"Chosen by a Ryshadium! A ryshadium who came to our aid during this fearsome storm with all the demons that emerged from it.",new Map([[l.PositiveEmotion.Trust,2],[l.PositiveEmotion.Gratitude,4],[l.PositiveEmotion.Respect,5]])),(0,d.addInteractionEvent)(e,o.NpcId.Sasha,[i.PcIndex.ID_HELIOS],a,"Sent his mount to protect Cecilia and me.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,5],[l.PositiveEmotion.Respect,3]])),(0,d.addInteractionEvent)(e,o.NpcId.Kastor,[i.PcIndex.ID_HELIOS],a,"The way he was so completely in command... I wish that was me instead.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,-2],[l.PositiveEmotion.Respect,4]]),10,new Set([l.PositiveEmotion.Gratitude])),(0,d.addInteractionEvent)(e,o.NpcId.Kastor,[i.PcIndex.ID_HELIOS],a,"Did he not consider me worthy of assisting him in combat? And he considered <em>Yuki</em> worthy enough instead? Heh, and the coward didn't even pick up the weapon.",new Map([[l.PositiveEmotion.Trust,-1],[l.PositiveEmotion.Gratitude,-2],[l.PositiveEmotion.Respect,-1]]),10,new Set([l.PositiveEmotion.Gratitude])),r.push(o.NpcId.Kastor),(0,d.addInteractionEvent)(e,o.NpcId.Jaye,[i.PcIndex.ID_HELIOS],a,"Now, why did he throw the spear towards me?",new Map([])),(0,d.addInteractionEvent)(e,o.NpcId.Verna,[i.PcIndex.ID_HELIOS],a,"Was more comfortable when the attack started compared to the dinner. It's been so long since I met someone like that. And in handing me the javelin, he also immediately noted me as a warrior. That... regrettably... makes me proud.",new Map([[l.PositiveEmotion.Trust,3],[l.PositiveEmotion.Gratitude,1],[l.PositiveEmotion.Respect,7]])),(0,d.addInteractionEvent)(e,o.NpcId.Verna,[i.PcIndex.ID_HELIOS],a,"Saved Iona in the nick of time from that monster.",new Map([[l.PositiveEmotion.Gratitude,7]])),r.push(o.NpcId.Verna),(0,d.addInteractionEvent)(e,o.NpcId.Coroto,[i.PcIndex.ID_HELIOS],a,"Just as he warned, <em>the monsters from the north</em> came. How did he know? But he stood up for us, nobly and bravely like I'd expect. Did the Tsar send him? If so, for what purpose?",new Map([[l.PositiveEmotion.Trust,-2],[l.PositiveEmotion.Gratitude,2],[l.PositiveEmotion.Respect,4]]),10,new Set([l.PositiveEmotion.Trust])),r.push(o.NpcId.Coroto),(0,d.addInteractionEvent)(e,o.NpcId.Coroto,[i.PcIndex.ID_CYRION],a,"Was in good command of the powers of nature as he covered our escape. Well, would suck if a druid from that weak nation couldn't even do that. But... I suppose there is a reason why the other strong folk keep him around...",new Map([[l.PositiveEmotion.Trust,4],[l.PositiveEmotion.Gratitude,-1],[l.PositiveEmotion.Respect,4]]),10,new Set([l.PositiveEmotion.Gratitude])),c.push(o.NpcId.Coroto),(0,d.addInteractionEvent)(e,o.NpcId.Jordi,[i.PcIndex.ID_CYRION],a,"Amazing! I was considering him to be like myself, but there's no way I could stand against such odds and protect such a large group at the same time.",new Map([[l.PositiveEmotion.Trust,4],[l.PositiveEmotion.Gratitude,2],[l.PositiveEmotion.Respect,5]])),c.push(o.NpcId.Jordi),(0,d.addInteractionEvent)(e,o.NpcId.Yuki,[i.PcIndex.ID_CYRION],a,"Well, ig he doesn't want us dead at least. Too easy to feign weakness in this crisis and let the monsters do the rest.",new Map([[l.PositiveEmotion.Trust,3]])),c.push(o.NpcId.Jordi),(0,d.addInteractionEvent)(e,o.NpcId.Erica,[i.PcIndex.ID_AURELIA],a,"I suspected she was a powerful spellcaster, but damn, I don't think I, as an Ursine noble, met more than a handful of mages who could conjure fireballs! And with such frequency! Father would be so proud to meet her... but why would she care about someone like me?",new Map([[l.PositiveEmotion.Respect,5],[l.PositiveEmotion.Gratitude,3]])),h.push(o.NpcId.Erica);for(const t of(0,n.getEnumIterator)(o.NpcId)){const n=s.Character.get(t);n&&n.isOpinionated&&(r.includes(t)||(0,d.addInteractionEvent)(e,t,[i.PcIndex.ID_HELIOS],a,"Was completely in control during the fearsome blizzard and took charge when the monsters arrived.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,1],[l.PositiveEmotion.Respect,4]])),c.includes(t)||(0,d.addInteractionEvent)(e,t,[i.PcIndex.ID_CYRION],a,"Organized our retreat while stalling the monsters nearby.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,4],[l.PositiveEmotion.Respect,1]])),h.includes(t)||(0,d.addInteractionEvent)(e,t,[i.PcIndex.ID_AURELIA],a,"Stood tall in the fearsome blizzard and granted us cover from the aerial roof.",new Map([[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Gratitude,4],[l.PositiveEmotion.Respect,1]])))}}}t.session5NpcInteractions=function(e){(0,d.addInteractionEvent)(e,o.NpcId.Dawn,[i.PcIndex.ID_HELIOS,i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,17,30),"It seems they're wreaking havoc on the paintbrushes.",new Map([[l.PositiveEmotion.Affection,1]]));for(const t of[o.NpcId.Dawn,o.NpcId.Tomasa])(0,d.addInteractionEvent)(e,t,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,17,30),"Oh, poor guy, apologizing for his friends. They must've got him into trouble so many times...",new Map([[l.PositiveEmotion.Respect,1]]));(0,d.addInteractionEvent)(e,o.NpcId.Dawn,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,17,35),"Got assaulted by my innocent canvas. So cute.",new Map([[l.PositiveEmotion.Affection,2]])),(0,d.addInteractionEvent)(e,o.NpcId.Dawn,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,17,35),"Has a good imagination and a poetic painting in mind.",new Map([[l.PositiveEmotion.Respect,2]])),(0,d.addTimeSkipEvent)(e,o.NpcId.Dusk,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_HELIOS],r.GameTimestamp.fromDays(2),r.GameTimestamp.fromDays(5),"",new Map),(0,d.addInteractionEvent)(e,o.NpcId.Dusk,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,40),"Go ahead. Your intent did rouse me before. Now humour me ...",new Map([[l.PositiveEmotion.Respect,1]]),10),(0,d.addInteractionEvent)(e,o.NpcId.Dusk,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,17,40),"Know your place. It is not you the canvas beckons.",new Map([[l.PositiveEmotion.Respect,-1]]),10,new Set([l.PositiveEmotion.Respect])),(0,d.addInteractionEvent)(e,o.NpcId.Dawn,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,35),"Ms. Dusk Herself chose to give him a chance. And requested that he paint for Her.",new Map([[l.PositiveEmotion.Respect,5],[l.PositiveEmotion.Trust,2]]),s.Character.get(o.NpcId.Dawn).passiveDeception),(0,d.addInteractionEvent)(e,o.NpcId.Dawn,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,40),"The painting comes out rather nice. He is clearly not a painter by profession. Yet his spirit longs to express itself. Was that why he was chosen?",new Map([[l.PositiveEmotion.Trust,1]])),(0,d.addInteractionEvent)(e,o.NpcId.Dawn,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,17,40),"Helped stabilize his friend's hand by guiding it with the powers of nature.",new Map([[l.PositiveEmotion.Respect,2],[l.PositiveEmotion.Gratitude,1]])),(0,d.addInteractionEvent)(e,o.NpcId.Dawn,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,45),"The painting turned out so... inspired. <em>Honor holding back the Wrath of Devotion.</em> Beautiful. And... it seems She agrees.",new Map([[l.PositiveEmotion.Respect,7],[l.PositiveEmotion.Trust,4]])),(0,d.addInteractionEvent)(e,o.NpcId.Dusk,[i.PcIndex.ID_HELIOS],new r.GameTimestamp(0,5,17,45),"I am humoured. Nothing holds interest forever, but this work does merit a moment of contemplation.",new Map([[l.PositiveEmotion.Respect,3],[l.PositiveEmotion.Gratitude,4]]),10),(0,d.addInteractionEvent)(e,o.NpcId.Dawn,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,17,50),"<span style='font-size: 10px;'>I'm not the person they seem to think me to be.</span> <span style='font-size: 9px;'>I cannot give an answer to their problems, or even some of their questions.I'm feeling a bit...  </span> <span style='font-size: 8px;'>overwhelmed... particularly when they ask me what I was before. </span> <span style='font-size: 7px;'> It isn't...</span> Thanks for letting me get back.",new Map([[l.PositiveEmotion.Respect,1],[l.PositiveEmotion.Gratitude,4]]),s.Character.get(o.NpcId.Dawn).passiveDeception);for(const t of[o.NpcId.Dawn,o.NpcId.Tomasa])(0,d.addInteractionEvent)(e,t,[i.PcIndex.ID_AURELIA,i.PcIndex.ID_HELIOS,i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,0),"They helped us out with cooking for the community dinner. They weren't quite particularly skilled, but that makes it good to see that they didn't consider good, honest labour like cooking beneath them.",new Map([[l.PositiveEmotion.Respect,1],[l.PositiveEmotion.Gratitude,1],[l.PositiveEmotion.Trust,1]]));(0,d.addInteractionEvent)(e,o.NpcId.Erica,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,19,25),"Seemed to be interested in books and literature in all forms.",new Map([[l.PositiveEmotion.Respect,1]])),(0,d.addInteractionEvent)(e,o.NpcId.Erica,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,19,30),"Nudged me to write. Was being genuine when she mentioned she would love to read something I came up with.",new Map([[l.PositiveEmotion.Gratitude,7],[l.PositiveEmotion.Respect,3],[l.PositiveEmotion.Trust,4]])),(0,d.addInteractionEvent)(e,o.NpcId.Dusk,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,19,30),"<em style='font-size: 11px'>(Musing) Books belong to the same world as works of art. Like paintings, the ones worth mentioning all have a unique strength of character, form, and carry decent meaning. None of that can ever come out of the shallow of heart. By no means shallow, Erica might just break the mould.</em><br/>For encouraging her, you, Aurelia, have my respect.",new Map([[l.PositiveEmotion.Respect,9]])),(0,d.addInteractionEvent)(e,o.NpcId.Coroto,[i.PcIndex.ID_AURELIA],new r.GameTimestamp(0,5,19,30),"What's her game here? Why's this strange elf woman encouraging my wife so? Just another fan of literature? Or is there some ulterior motive I'm missing...",new Map([[l.PositiveEmotion.Trust,-2],[l.PositiveEmotion.Respect,1]]),s.Character.get(o.NpcId.Coroto).passiveDeception-5,new Set([l.PositiveEmotion.Trust])),(0,d.addInteractionEvent)(e,o.NpcId.Jordi,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,30),"Seemed to be even more interested in my tales from the seas.",new Map([[l.PositiveEmotion.Gratitude,1]])),(0,d.addInteractionEvent)(e,o.NpcId.Yuki,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,30),"Why's he suddenly so interested in Hav? This druid's clearly not a seafarer. In fact, I won't be surprised to know he's never sailed before. Jordi's too naive for his own good, but this seems a touch too blatant. I'll have to keep an eye out...",new Map([[l.PositiveEmotion.Trust,-3]]),s.Character.get(o.NpcId.Yuki).passiveDeception,new Set([l.PositiveEmotion.Trust])),(0,d.addInteractionEvent)(e,o.NpcId.Kastor,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,30),"Ugh.. the way he socializes with those two losers. It's nauseating... Just look at Jordi blabbering and that emo acting all cool like he doesn't care...",new Map([[l.PositiveEmotion.Respect,-2]])),(0,d.addInteractionEvent)(e,o.NpcId.Petra,[i.PcIndex.ID_CYRION],new r.GameTimestamp(0,5,19,30),"It's good to see how the kid can bring Jordi out of his shell again. He's been brooding a lot lately...",new Map([[l.PositiveEmotion.Respect,2]]));const t=new r.GameTimestamp(0,5,19,45);(0,d.addInteractionEvent)(e,o.NpcId.Hina,[i.PcIndex.ID_HELIOS],t,"Kept his cutlery back slowly and primly before standing and drawing his weapon. Touché. Yep, dude's definitely a seasoned warrior...<br/>and a killer through-and-through.",new Map([[l.PositiveEmotion.Trust,-2],[l.PositiveEmotion.Respect,5]]),10,new Set([l.PositiveEmotion.Trust])),(0,d.addInteractionEvent)(e,o.NpcId.Hina,[i.PcIndex.ID_CYRION],t,"The others didn't seem to notice, but was a large part responsible for us not getting ambushed right outside the door. Doesn't seem addicted to violence.",new Map([[l.PositiveEmotion.Gratitude,2],[l.PositiveEmotion.Trust,1],[l.PositiveEmotion.Respect,3]])),e.get(o.NpcId.Hina).get(i.PcIndex.ID_AURELIA).addEvent(new l.NpcInteractionEvent(t,"Hmm... a spellcaster... they always find their throats to be the first to be slit. But fireballs are cool anyway.",new Map([[l.PositiveEmotion.Respect,4]]))),e.get(o.NpcId.Dawn).get(i.PcIndex.ID_HELIOS).addEvent(new l.NpcInteractionEvent(t,"Acted as a beacon of hope and helped keep the villagers calm when <em>they</em> came...",new Map([[l.PositiveEmotion.Gratitude,3],[l.PositiveEmotion.Trust,1]]))),e.get(o.NpcId.Dawn).get(i.PcIndex.ID_CYRION).addEvent(new l.NpcInteractionEvent(t,"Helped in organizing the villagers and keeping the inklings at bay as he led us to Mr. Elysium's.",new Map([[l.PositiveEmotion.Gratitude,3],[l.PositiveEmotion.Respect,1]]))),e.get(o.NpcId.Dawn).get(i.PcIndex.ID_AURELIA).addEvent(new l.NpcInteractionEvent(t,"Fireball after fireball. Teleporting roof-to-roof in the shadows. All for these poor inklings. Hehe, aren't we dramatic?",new Map([[l.PositiveEmotion.Respect,2]]))),c(e,!1,t)},t.combatMemories=c},7873:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session6NpcInteractions=void 0;const n=a(302),i=a(4492),s=a(2228),o=a(8993),r=a(3497),l=a(6318);t.session6NpcInteractions=function(e){(0,l.addInteractionEvent)(e,s.NpcId.Erica,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,6,0),"Huh that was quite a shove. But given how polite they were in asking if they could visit our garden yesterday, I can only assume something has happened...",new Map([])),(0,l.addInteractionEvent)(e,s.NpcId.Erica,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,6,30),"<span style='font-size: 11px'>The way Aurelia's owl was staring after me, hiding in the bush until I saw it, then flying off - I'm sure of it. Probably one of her spellcasting powers. I hope I'm mistaken, but... sigh, I doubt it. That's how those with power act, and I was a fool to expect otherwise. </span><span style='font-size: 9px'>Even after telling her to leave me alone as clearly as I could, won't take no for an answer. Let alone respect any measure of my privacy, I'm seen as an object and downright forbidden to keep my secrets to myself. Can't live with their own paranoia and would downright descend to <em>spying</em> to find out whatever tf they suspect me of hiding from their highnesses.</span><br/>Wait, the owl being there was probably a coincidence. I hope I'm overthinking stuff.",new Map([[r.PositiveEmotion.Trust,-4],[r.PositiveEmotion.Gratitude,-1],[r.PositiveEmotion.Respect,-3]]),i.Character.get(s.NpcId.Erica).passiveDeception+5),(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,7,30),"Channeled his investiture to heal me. God knows I needed that, phew... <em>What the hell just happened?</em>&nbsp; What was this sudden touch of death that almost snuffed all our souls out?",new Map([[r.PositiveEmotion.Gratitude,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Tomasa,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,7,30),"Healed me, probably saving me from the verge of death... but... what does it matter, now that... why... Taihe...",new Map([[r.PositiveEmotion.Gratitude,2]]))}},772:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session7NpcInteractions=void 0;const n=a(302),i=a(4492),s=a(2228),o=a(8993),r=a(3497),l=a(6318);t.session7NpcInteractions=function(e){(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,8,0),"Remained business-like in investigating last night even in the face of Taihe's death. But I suppose it's to be expected, they'd have seen death in their profession, but what happened last night was bizarre and deserving of explanation.",new Map),(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_HELIOS,n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,30),"So they were around the garden statue, huh. I did suspect they were somehow involved in Taihe's death, given the coincidence. But why would they do that? Must've been an accident, right?",new Map([[r.PositiveEmotion.Trust,-2]]),i.Character.get(s.NpcId.Dawn).passiveDeception,new Set([r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(e,s.NpcId.Tomasa,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,0),"Tried to examine Taihe's body and analyze what happened.",new Map),(0,l.addInteractionEvent)(e,s.NpcId.Roberta,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,8,0),"Seems to have some passing knowledge of alchemy.",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Vitacia,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_CYRION,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,8,15),"Their arrival brought doom!! They killed him. THEY KILLED HIM! I know they did this. They made poor Taihe suffer so much. And now... I must... live the rest of... no, no... I can't. ",new Map([[r.PositiveEmotion.Respect,-1],[r.PositiveEmotion.Trust,-1],[r.PositiveEmotion.Affection,-2]]),10,new Set([r.PositiveEmotion.Respect,r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(e,s.NpcId.Vitacia,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,15),"His face betrays his crime. The way he avoids my gaze. The weird way his powers work. And the way he seems to know what happened to Taihe's body. He must have done it! I know he did!",new Map([[r.PositiveEmotion.Respect,-3],[r.PositiveEmotion.Trust,-2],[r.PositiveEmotion.Affection,-4]]),10,new Set([r.PositiveEmotion.Respect,r.PositiveEmotion.Trust]));for(const t of[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA])(0,l.addInteractionEvent)(e,s.NpcId.Vitacia,[t],new o.GameTimestamp(0,6,8,18),"Oh Saints above! What was wrong with me? How did I just blame them with no reasons whatever? My pain absolutely doesn't excuse this unfairness! Yet... they don't seem to hate me for it.",new Map([[r.PositiveEmotion.Respect,t==n.PcIndex.ID_CYRION?6:1],[r.PositiveEmotion.Trust,t==n.PcIndex.ID_CYRION?5:1],[r.PositiveEmotion.Affection,t==n.PcIndex.ID_CYRION?8:2]]),10,new Set([t==n.PcIndex.ID_CYRION?r.PositiveEmotion.Respect:r.PositiveEmotion.Affection,r.PositiveEmotion.Respect,r.PositiveEmotion.Trust]));(0,l.addInteractionEvent)(e,s.NpcId.Vitacia,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,30),"Even though I don't blame him for Taihe's death anymore, he seems to have begun to hate himself for it. Just great, you've done it now, you terrible, awful person. And even then he tries his best to console me.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,8,30),"Fell under a powerful wave of guilt. But that clearly was his vulnerable mind. Its signature is that of a false guilt complex. Conscience strong with this guy. Fairly certain he's not the killer.",new Map([[r.PositiveEmotion.Trust,4]]),i.Character.get(s.NpcId.Hina).passiveDeception+10),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,8,30),"Heh, decently suppressed, and I was distracted by the starry guy overreacting... but it's clear. You're the killer, aren't you? That's some fresh guilt quashed in there. You're not absolute scum, but it's too less for - ahem - <em>culpable homicide not amounting to murder</em>...<br/>Anyway, far be it from me to cast the first stone...",new Map([[r.PositiveEmotion.Trust,-3]]),i.Character.get(s.NpcId.Hina).passiveDeception+10),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,8,30),"Hmm, actually mitigated the guilt of his friend to some degree, and didn't feel any of his own. Not now, and very little in the past. Is it because he didn't focus on me enough, because he is a hero? Or is it because he is a psychopath?",new Map([[r.PositiveEmotion.Trust,2],[r.PositiveEmotion.Respect,2]]),i.Character.get(s.NpcId.Hina).passiveDeception+10),(0,l.addInteractionEvent)(e,s.NpcId.Yuki,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,0),"A soul sheared. A paladin. A druid digging up the pasts of people here. Coincidences? I think not. Poor Taihe, you had no chance did you... I shudder at the last sight those eyes of your saw. The pure horror of inescapable death before they burnt. That bastard!slaughtering a kid like that...",new Map([[r.PositiveEmotion.Affection,-4],[r.PositiveEmotion.Respect,-2]]),i.Character.get(s.NpcId.Yuki).passiveDeception+5),(0,l.addInteractionEvent)(e,s.NpcId.Erica,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,9,30),"So it was spying after all... sigh. I'd hoped I was wrong. Apologizing after being caught still leaves a bad aftertaste, but at least it makes her a much better person than one who wouldn't. I'm not sure how far I can trust those words, but she did sound genuinely remorseful, and not as arrogant as I feared. Maybe I'll give it another try and see how it goes.",new Map([[r.PositiveEmotion.Trust,2],[r.PositiveEmotion.Respect,4]]),i.Character.get(s.NpcId.Erica).passiveDeception-5,new Set([r.PositiveEmotion.Trust])),(0,l.addInteractionEvent)(e,s.NpcId.Genefe,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,30),"Hey! um... well.. yeah you may hold her wheelchair I suppose.",new Map([[r.PositiveEmotion.Respect,-1]])),(0,l.addInteractionEvent)(e,s.NpcId.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,30),"Seems to know something is wrong here. Also gave off weird vibes like Hina once did.",new Map([[r.PositiveEmotion.Respect,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,30),"Claims he would try to search for a way to save me. I wish I could believe that. Those probably aren't empty words, but I don't think he could succeed, or if there even is a way to. But... if someone's trying... dare I hope? ",new Map([[r.PositiveEmotion.Gratitude,5]])),(0,l.addInteractionEvent)(e,s.NpcId.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,9,30),"No, no, no. Don't do that. Don't give me hope. Being alive and powerful like yourself, it's easy to believe everything is possible. But I am already a corpse. Please don't...",new Map([[r.PositiveEmotion.Gratitude,-3]]),i.Character.get(s.NpcId.Cecelia).passiveDeception+5,new Set([r.PositiveEmotion.Affection])),(0,l.addInteractionEvent)(e,s.NpcId.Cecelia,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,10,30),"It's clear how much mutual trust and joviality lies in their friendship. Ahh... I wish I had someone like that.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,-1]]),i.Character.get(s.NpcId.Cecelia).passiveDeception+5,new Set([r.PositiveEmotion.Gratitude])),(0,l.addInteractionEvent)(e,s.NpcId.Yuki,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,11,30),"Wait an alias attestable by the brat's father himself? And now that I notice... his oath's clearly not that advanced yet. I was barking up the wrong tree. I don't know how that makes me feel. But I can't help seeing him as a misguided junior. Oh, you poor boy, if only you knew... there's no point. After all, <em>Honor is dead</em>.",new Map([[r.PositiveEmotion.Affection,6],[r.PositiveEmotion.Respect,2]]),i.Character.get(s.NpcId.Yuki).passiveDeception+5,new Set([r.PositiveEmotion.Affection])),(0,l.addInteractionEvent)(e,s.NpcId.Yuki,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,11,30),"All that said, the way he glows. That radiance is blinding. Maybe... in another reality...",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,-4]]),i.Character.get(s.NpcId.Yuki).passiveDeception),(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,11,30),"Made a superficial attempt to console me, changing to her topics of interest real quick at the slightest word from me. But then she really didn't have a reason to care either.",new Map([[r.PositiveEmotion.Trust,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,11,45),"Took the initiative to teach the kids! I... that's... Thank you! Thank you so much! With this, there may be some future for them yet.",new Map([[r.PositiveEmotion.Respect,7],[r.PositiveEmotion.Gratitude,7],[r.PositiveEmotion.Trust,3]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,11,30),"Oh you poor boy, here we go. You did nothing wrong.",new Map([[r.PositiveEmotion.Trust,1]]),i.Character.get(s.NpcId.Hina).passiveDeception+10);for(const t of[n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION,n.PcIndex.ID_AURELIA])(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[t],new o.GameTimestamp(0,6,12,0),"Finally, after all these years... people I could open up to...",new Map([[r.PositiveEmotion.Respect,t==n.PcIndex.ID_HELIOS?8:4],[r.PositiveEmotion.Gratitude,t==n.PcIndex.ID_HELIOS?9:5],[r.PositiveEmotion.Trust,t==n.PcIndex.ID_HELIOS?6:3]]));(0,l.addInteractionEvent)(e,s.NpcId.Dawn,[n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,0),"Feels sorry for my state. But if only he knew... just how little I deserve that.",new Map([[r.PositiveEmotion.Gratitude,4],[r.PositiveEmotion.Affection,2]]),i.Character.get(s.NpcId.Dawn).passiveDeception)}},3186:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session8NpcInteractions=void 0;const n=a(302),i=a(4492),s=a(2228),o=a(8993),r=a(3497),l=a(6318);t.session8NpcInteractions=function(e){(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,15),"Oh, an Honorspren-bound. Well he at least won't massacre us,  but... I'll probably need to keep a vigil for incoming bits of wisdom... sigh.",new Map([[r.PositiveEmotion.Trust,12],[r.PositiveEmotion.Respect,-1]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,15),"Wait, is that honorspren bound to the both of them? And are two spren bound to Helios? What... sort of an orgy is happening here?",new Map([[r.PositiveEmotion.Respect,1]])),(0,l.addInteractionEvent)(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,15),"Hmm... he's clearly never met another Windrunner, yet it's strange how they all turn out according to prototype. Would easily suffer the pain of death to help secure his friend's freedom.<br/>He'll never betray, huh... Maybe, just maybe... for once... I could rely on - NO!!",new Map([[r.PositiveEmotion.Trust,9],[r.PositiveEmotion.Respect,4],[r.PositiveEmotion.Affection,3]]),i.Character.get(s.NpcId.Hina).passiveDeception)}},6318:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.session9NpcInteractions=t.addTimeSkipEvent=t.addInteractionEvent=void 0;const n=a(302),i=a(4492),s=a(2228),o=a(8993),r=a(3497);function l(e,t,a,n,s,o,l=10,d=new Set){const c=i.Character.get(t);if(!c||!c.isOpinionated)return;let h=null;if(d){h=new Map;for(const e of d)h.set(e,!0)}for(const i of a)e.get(t).get(i).addEvent(new r.NpcInteractionEvent(n,s,o,l,h))}t.addInteractionEvent=l,t.addTimeSkipEvent=function(e,t,a,n,s,o,l){const d=i.Character.get(t);if(d&&d.isOpinionated)for(const i of a)e.get(t).get(i).addEvent(new r.TimeskipEvent(n,s,l,o))},t.session9NpcInteractions=function(e){l(e,s.NpcId.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"Ahh, so it was her tinkering that led to Taihe's death... Ms. Dusk says \n        it wasn't deliberate but... Who the fuck asked her to mess with things \n        that she doesn't understand? Are our lives mere-",new Map([[r.PositiveEmotion.Affection,-5],[r.PositiveEmotion.Respect,-2]]),i.Character.get(s.NpcId.Dawn).passiveDeception+5),l(e,s.NpcId.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"STOP. She didn't know what she was doing, and it's a scholar's duty to \n        be inquisitive. Who am I kidding? This was happening sooner or later \n        anyway... if anything its my fault for not sharing everything with them\n        sooner... In fact my crimes date far back...",new Map([[r.PositiveEmotion.Affection,5]]),i.Character.get(s.NpcId.Dawn).passiveDeception+5,new Set([r.PositiveEmotion.Affection])),l(e,s.NpcId.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"I see, sent by Ruin, huh. Well, in that case nothing to do but to face\n        the punishment that comes without inconveniencing the others. Sigh, I \n        should be happy that it happened...",new Map([[r.PositiveEmotion.Affection,-1]]),i.Character.get(s.NpcId.Dawn).passiveDeception+5,new Set([r.PositiveEmotion.Affection])),l(e,s.NpcId.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"Wait, she is coming. Stop thinking. Help her help the villagers, that's\n         all that matters now. If the end is coming, might as well do it right. \n         Now smile.",new Map([[r.PositiveEmotion.Affection,-1]]),i.Character.get(s.NpcId.Dawn).passiveDeception),l(e,s.NpcId.Dawn,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,20),"Was concerned about how Ms Dusk treats us. Despite everything, it \n        feels... rather good, to have someone finally voice the apprehensions\n        I've been clamping up for all these ages... Gods I am such a hypocrite.",new Map([[r.PositiveEmotion.Affection,3],[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,1]]),i.Character.get(s.NpcId.Dawn).passiveDeception),l(e,s.NpcId.Ezell,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,20),"It's always a pleasure to meet a fellow aasimar. From Terra no less, \n        Heh, looks like he was following Andoain all this while with no idea \n        of who he was. And got here by the aid of Mostima herself, though ofc\n        she slipped away. <br/><em>(note to self: must file a report on this)</em>",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Trust,1]])),l(e,s.NpcId.Ezell,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,20),"Bound to an Honorspren, and the bond is strong enough for her to lead \n        him into the spiritual realm.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Trust,7]])),l(e,s.NpcId.Hina,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,25),"I was hungry. He gave me good food... ... want more...",new Map([[r.PositiveEmotion.Affection,2],[r.PositiveEmotion.Gratitude,5]])),l(e,s.NpcId.Elysium,[n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,20),"Windrunner? Good News.",new Map([[r.PositiveEmotion.Trust,5]])),l(e,s.NpcId.Ezell,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,30),"While their primary concern is probably to escape out of this curse, \n        it does seem like they're trying to help the people here without any \n        ulterior motivations.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Gratitude,3]])),l(e,s.NpcId.Elysium,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,30),"While their primary concern is probably to escape out of this curse, \n        it does seem like they're trying to help the people here without any \n        ulterior motivations.",new Map([[r.PositiveEmotion.Respect,3],[r.PositiveEmotion.Gratitude,2]])),l(e,s.NpcId.Elysium,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS,n.PcIndex.ID_CYRION],new o.GameTimestamp(0,6,12,30),"Even though they just got here and are way out of their depths, \n         they're already willing to deep dive into the problems of the \n         multiverse. I must say I like their hunger for lore.",new Map([[r.PositiveEmotion.Respect,2]])),l(e,s.NpcId.Elysium,[n.PcIndex.ID_AURELIA],new o.GameTimestamp(0,6,12,35),"Not afraid to wade into the myriads of prosaic official journals I \n         keep.",new Map([[r.PositiveEmotion.Respect,4]])),l(e,s.NpcId.Ezell,[n.PcIndex.ID_AURELIA,n.PcIndex.ID_HELIOS],new o.GameTimestamp(0,6,12,35),"So they've heard of the Order of St. Lataranus. Oh? As a shady criminal \n        cult? lmao.",new Map([[r.PositiveEmotion.Respect,2],[r.PositiveEmotion.Affection,1]]))}},190:(e,t)=>{function a(e){const t=new Map;return function(...a){if(t.has(a))return t.get(a);const n=e(a);return t.set(a,n),n}}Object.defineProperty(t,"__esModule",{value:!0}),t.updateMap=t.getNumberSuffix=t.getEnumIterator=t.getEnumLength=t.memoize=t.setupNav=t.waitForFinalEvent=void 0,t.waitForFinalEvent=function(){const e={};return function(t,a,n){n||(n="Don't call this twice without a uniqueId"),e[n]&&clearTimeout(e[n]),e[n]=setTimeout(t,a)}}(),t.setupNav=function(){const e=$("#page_nav");$(".page_header").each((function(){$(`<div class="page_nav_link" data-nav-to="${$(this).data("navId")}">${$(this).text()}</div>`).appendTo(e)})),e.on("click",".page_nav_link",(function(){const e=$(this).data("navTo");$(`.page_header[data-nav-id='${e}']`)[0].scrollIntoView({behavior:"smooth"})}))},t.memoize=a,t.getEnumLength=a((function(e){return Object.keys(e).length/2})),t.getEnumIterator=a((function*(e){for(let t in e[0])isNaN(Number(t))||(yield Number(t))})),t.getNumberSuffix=function(e){if(e<0)throw new Error("Suffixes not supported for negative numbers");return e%10==1?11==e?"th":"st":e%10==2?12==e?"th":"nd":e%10==3?13==e?"th":"rd":"th"},t.updateMap=function(e,t,a){e.set(t,(e.has(t)?e.get(t):0)+a)}},447:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCards=t.Card=void 0;const n=a(190);class i{constructor(){}static loadFromDOM(){i.$commonCentralView=$("#character_idx .central_view"),i.$tokenSpace=$("#tokens"),i.$commonCentralView.on("click",".token_selector",(function(){const e=$(this).parent().siblings(".tokens");e.children().hide(),e.children(`[data-token='${$(this).data("token")}']`).show()})),this.$floatingCard=$("#floating_card"),this.$cardGraveyard=$("#card_graveyard"),this.snapWindowDimensions(),$(window).resize((()=>{(0,n.waitForFinalEvent)((()=>{this.snapWindowDimensions()}),500,"Indexible.loadFromDOM")}))}static verbose(e){return`<span class="verbose">${e}</span>`}static link(e,t){return`<span class="card_link" data-index-key="${e}">${t}</span>`}static snapWindowDimensions(){const e=$(window);this.viewportHeightInPx=e.height(),this.viewportWidthInPx=e.width()}static revealFloatingCard(){this.$floatingCard.show(),this.floatingCardWidth=this.$floatingCard.width(),this.floatingCardHeight=this.$floatingCard.height()}static hideFloatingCard(){this.$floatingCard.hide()}static moveFloatingCard(e,t){const a=e+this.floatingCardWidth+24<this.viewportWidthInPx,n=e>this.floatingCardWidth+24,i=t+this.floatingCardHeight+24<this.viewportHeightInPx,s=t>this.floatingCardHeight+24;a?i?this.$floatingCard.css({top:t+12,left:e+12}):s?this.$floatingCard.css({top:t-12-this.floatingCardHeight,left:e+12}):this.$floatingCard.hide():n?i?this.$floatingCard.css({top:t+12,left:e-12-this.floatingCardWidth}):s?this.$floatingCard.css({top:t-12-this.floatingCardHeight,left:e-12-this.floatingCardWidth}):this.$floatingCard.hide():this.$floatingCard.hide()}static getIndexible(e){return this.Index.get(e)}static showCardFullSize(e){i.$commonCentralView.children().hide();const t=e.getCardIndex(),a=i.$commonCentralView.children(`[data-index-key='${t}']`);if(a.length>0)a.show();else{const t=$(e.generateCard(!1));i.$commonCentralView.append(t),t.show()}}static showCardFloating(e){i.$floatingCard.children().hide();const t=e.getCardIndex(),a=i.$floatingCard.children(`[data-index-key='${t}']`);if(a.length>0)a.show();else{const t=$(e.generateCard(!0));t.addClass("floating"),i.$floatingCard.append(t),t.show()}}static register(e){i.Index.set(e.getCardIndex(),e)}getCardIndex(){return this.indexKey}generatePrimaryToken(){throw new Error("Not implemented")}createLink(e){throw new Error("Not implemented")}}t.Card=i,i.$commonCentralView=null,i.$tokenSpace=null,i.Index=new Map,t.setupCards=function(){i.loadFromDOM();const e=$("#tokens");e.on("mouseenter",".token",(function(e){const t=$(this).data("indexKey"),a=i.getIndexible(t);i.showCardFloating(a),i.revealFloatingCard(),i.moveFloatingCard(e.clientX,e.clientY)})),e.on("mouseleave",".token",(function(){i.hideFloatingCard()})),e.on("mousemove",".token",(function(e){i.moveFloatingCard(e.clientX,e.clientY)})),e.on("click",".token",(function(){i.hideFloatingCard();const e=$(this).data("indexKey"),t=i.getIndexible(e);i.showCardFullSize(t)}));const t=$(".page");t.on("mouseenter",".card_link",(function(e){const t=$(this).data("indexKey"),a=i.getIndexible(t);i.showCardFloating(a),i.revealFloatingCard(),i.moveFloatingCard(e.clientX,e.clientY)})),t.on("mouseleave",".card_link",(function(){i.hideFloatingCard()})),t.on("mousemove",".card_link",(function(e){i.moveFloatingCard(e.clientX,e.clientY)})),t.on("click",".card_link",(function(){i.hideFloatingCard();const e=$(this).data("indexKey"),t=i.getIndexible(e);i.showCardFullSize(t)}))}},498:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCharacterCards=t.CharacterCard=void 0;const n=a(2228),i=a(447);var s;!function(e){e[e.Outdoorsman=0]="Outdoorsman",e[e.Homebody=1]="Homebody",e[e.Recluse=2]="Recluse",e[e.Introvert=3]="Introvert",e[e.Social=4]="Social",e[e.Extrovert=5]="Extrovert",e[e["Early Bird"]=6]="Early Bird",e[e["Night owl"]=7]="Night owl",e[e.Masochist=8]="Masochist",e[e.Bloodlust=9]="Bloodlust",e[e["Abhors Violence"]=10]="Abhors Violence",e[e.Gourmand=11]="Gourmand",e[e.Ascetic=12]="Ascetic",e[e.Paranoid=13]="Paranoid",e[e.Trusting=14]="Trusting",e[e.Naive=15]="Naive",e[e.Greedy=16]="Greedy",e[e.Jealous=17]="Jealous",e[e.Psychopath=18]="Psychopath",e[e["Guilt-ridden"]=19]="Guilt-ridden",e[e.Kind=20]="Kind",e[e.Misandrist=21]="Misandrist",e[e.Misogynist=22]="Misogynist",e[e.Abrasive=23]="Abrasive",e[e.Asexual=24]="Asexual",e[e.Homosexual=25]="Homosexual",e[e.Bisexual=26]="Bisexual",e[e.Addict=27]="Addict",e[e["Recovering Addict"]=28]="Recovering Addict",e[e.Teetotaler=29]="Teetotaler",e[e.Stern=30]="Stern",e[e.Judging=31]="Judging",e[e.Accepting=32]="Accepting",e[e.Industrious=33]="Industrious",e[e["Hard worker"]=34]="Hard worker",e[e.Lazy=35]="Lazy",e[e.Slothful=36]="Slothful",e[e.Sanguine=37]="Sanguine",e[e.Optimist=38]="Optimist",e[e.Pessimist=39]="Pessimist",e[e.Depressive=40]="Depressive",e[e.Arrogant=41]="Arrogant",e[e.Modest=42]="Modest",e[e.Confident=43]="Confident",e[e.Vain=44]="Vain",e[e.Confrontational=45]="Confrontational",e[e.Conciliatory=46]="Conciliatory",e[e.Insecure=47]="Insecure",e[e.Nervous=48]="Nervous",e[e.Volatile=49]="Volatile",e[e.Neurotic=50]="Neurotic",e[e.Quiet=51]="Quiet",e[e.Verbose=52]="Verbose",e[e.Distant=53]="Distant",e[e["Full of Life"]=54]="Full of Life",e[e.Introspective=55]="Introspective",e[e["Unwitting Hypocrite"]=56]="Unwitting Hypocrite",e[e.Hypocrite=57]="Hypocrite",e[e.Abusive=58]="Abusive",e[e["Suck-up"]=59]="Suck-up",e[e.Bibliophile=60]="Bibliophile"}(s||(s={}));class o extends i.Card{constructor(e){if(super(),null==i.Card.$commonCentralView)throw new Error("Premature instantiation of class. The page isn't loaded yet.");this.name=e.name,this.id=e.id,this.campaign=e.campaign,this.arc=e.arc,this.imgPath=`./assets/images/character_tokens/C${e.campaign}/Arc${e.arc}/${e.tokenName}.png`,this.indexKey=o.getIndex(this.id),i.Card.$tokenSpace.find(`.token_space[data-campaign='${this.campaign}'][data-arc='${this.arc}']`).append($(`\n            <img src=${this.imgPath} class="token" alt="[Img Not Found]" data-index-key="${this.indexKey}">\n        `)),e.tags.push(`Campaign ${this.campaign} ${i.Card.verbose(`Arc ${this.arc}`)}`),e.tags.push(`${e.gender}${e.age}`),this.tags=e.tags,this.summary=e.summary,this.description=e.description,this.altImagePaths=e.altImagePaths,this.personalityTags=e.personalityTags,i.Card.register(this)}static getIndex(e){return`[character|${e}]`}static linkNpc(e,t){return i.Card.link(o.getIndex(e),t)}generateCard(e){let t,a;return t=!e&&this.altImagePaths?`<div class="tokens">\n                ${Array.from(this.altImagePaths,(([e,t],a)=>`<img src="./assets/images/character_tokens/C${this.campaign}/Arc${this.arc}/${t}.png"\n                          class="token" \n                          data-token="${t}"\n                          alt="[${e} Img not found]"\n                          ${0==a?"":'style="display: none;"'}>`)).join("")}\n                </div>\n                <div>\n                    ${Array.from(this.altImagePaths,(([e,t])=>`<span class="token_selector tag" data-token="${t}">${e}</span>`)).join("")}\n                </div>`:`<img src=${this.imgPath} class="token" alt="[Img Not Found]">`,a=this.personalityTags?`<div class="personality_tags">${Array.from(this.personalityTags,(([e,t])=>`<span class="tag leveled t${t}">${s[e]}</span>`)).join("")}</div>`:"",`\n        <div class="character_card" data-index-key="${this.indexKey}">\n            <div class="token_space">\n                ${t}\n                ${this.altImagePaths?"<div></div>":""}                        \n            </div>\n            <div class="content">\n                <h5 class="name">${this.name}</h5>\n                <div class="tags">${this.tags.map((e=>`<span class="tag">${e}</span>`)).join("")}</div>\n                <div class="details">${this.description}</div>\n                ${a}\n                <div class="summary">${this.summary}</div>\n            </div>\n        </div>`}get isVillageNpc(){return[n.NpcId.Irene,n.NpcId.Dusk,n.NpcId.Dawn,n.NpcId.Andri,n.NpcId.Athlon,n.NpcId.Bjorn,n.NpcId.Cecelia,n.NpcId.Coroto,n.NpcId.Elysium,n.NpcId.Erica,n.NpcId.Genefe,n.NpcId.Hav,n.NpcId.Hina,n.NpcId.Ingrid,n.NpcId.Iona,n.NpcId.Jaye,n.NpcId.Jordi,n.NpcId.Kastor,n.NpcId.Petra,n.NpcId.Roberta,n.NpcId.Sasha,n.NpcId.Sybilla,n.NpcId.Tomasa,n.NpcId.Verna,n.NpcId.Vitacia,n.NpcId.Yuki,n.NpcId.Ezell].includes(this.id)}}t.CharacterCard=o;const r=new Map([["Lucian",`"This darkness is a refuge, a throne, and paradise. The spirits of the dead have never left, and I’ve cursed \n     the world from atop their bones... Seeing me as I am now, do you still want to hear my song? Do you still \n     dare... to stand before me?"<br/>\n     Calamity of The Troupe - an unfinished masterpiece of their leader. Was once raised as their rising star in \n     response to the threat that was ${o.linkNpc(n.NpcId.Ebenezar,"the Lich")}. But turned against them only \n     as he slaughtered all the troupe's senior members in one night and escaped into Materia - sealing his \n     memories and powers. He returned to the outer planes by accident and sought out the troupe when he did. \n     Descended into insanity after killing ${o.linkNpc(n.NpcId.Mouthpiece,"The Mouthpiece")} and inheriting \n     his curse. Following which he stealthily assassinated ${o.linkNpc(n.NpcId.TraitorOthello,"The Traitor")}, who was \n     preoccupied in fighting 'Agents of the Fifth', thus freeing the Primordial nightmares.`],["Ebenezar",`A human kid born in the the classical era. Accidentally entered a perpendicularity inside a \n     subterranean lake into the Gardens. Lived there for a few centuries and trained fanatically as a mage under his\n     then-girlfriend ${o.linkNpc(n.NpcId.Lesley,"Lesley")}'s tutelage and soon surpassed her. Became a Lich\n     and would often roam in shady alleys of Materia, appearing helpless - then feeding on the souls of any who \n     assaulted him. Stabilized the perpendicularity between the lake he once drowned in - making it his 'lair' - and \n     the Mistflame in the Gardens near Bunker#371. Went to the castle to 'fight death', but failed and died, his \n     last days and whereabouts remain unknown.`],["Caelynn",`Born in the last years of the heroic age, fled into The Gardens due to an accidental encounter with the Fifth\n      Nightmare. Being extremely gifted, she received guidance from various orders - often from Guardians themselves.\n      Was once close to ${o.linkNpc(n.NpcId.TraitorOthello,"The Traitor")}. Currently leads the people of the Garden\n      as the Guardian of Life. Now an Atium savant.`],["Lesley",`A rich higher vampire mage with powerful time control powers. Came to The Gardens after a failed attempt to\n      kill ${o.linkNpc(n.NpcId.Caelynn,"Caelynn")}. Now her best friend  / advisor. Detests her\n       family and curbs her bloodlust. Was depressed until recently.`],["Irene",`An air genasi who was a junior member of the inquisition of the gardens. All her bunker-mates were killed in \n      an attack by The Troupe around 300 years ago, but the ${o.linkNpc(n.NpcId.Kjerra,"Guardian of Magic")}\n      took pity on her and replaced them all with physically intractable and sentient illusions. Despite them being \n      near-perfect replicas, Irene eventually figured out their true nature, but being grateful for the concern, she \n      kept the pretense of believing in them. Even so, ${o.linkNpc(n.NpcId.Lesley,"Lesley")} took a personal \n      interest in her and made sure to invite her every now and then to make sure she got to interact with real people.\n      During the Hour of Loss, she displayed unexpected skill (leading others to suspect she had specifically been \n      trained for such situations), resolve, and fanaticism in fighting a deep-ocean aberration but went missing in\n       the fight.`],["Ling",`One of the fragments of an outer primordial. Moved into the Gardens long ago along with \n     ${o.linkNpc(n.NpcId.Kjerra,"Kjera")} and worked as a lighthouse keeper there so as to be best placed to\n      respond to the revival of her 'parent' or any other outsiders. Was chosen to be the Guardian of Diplomacy after\n      the inquisitors' betrayal. Agreed but went missing during the expedition inside the Castle of the Night \n      following Preservation's death and the Survivor's Ascension.`],["Dave",`A warforged automaton that was purchased by ${o.linkNpc(n.NpcId.Caelynn,"Caelynn")}'s \n      batch-mates at a heavy price upon her graduation, to serve and protect her. His modules were heavily operated \n      upon by Lesley who practiced her coding skills on him. Failed to defend Caelynn at one point long ago, and \n      gave his life holding out against a deep-sea aberration to atone for it.`],["Ulrich","A human that lived in the last years of the Archaic era and had shown remarkable skill in making heavy armors \n      for those of his clerical order. Upon his death in war, Preservation gave him a second chance at sentient life\n      in the Gardens, as a reward for saving the lives of so many thanks to his meticulous work at their armors. \n      Since then he's been honing his skills and is now regarded as one of the finest smiths in the multiverse."],["Lia",`An elven archer who roamed freely the Feywild until by cruel circumstance she fell prey to the second \n      nightmare. Survived the encounter thanks to ${o.linkNpc(n.NpcId.Caelynn,"Caelynn")}'s \n      intervention, who remained on the lookout for primordial incursions. Caelynn then offered her asylum with \n      herself promising to keep her safe from the primordial as far as possible, an offer she readily took. \n      Rescued ${o.linkNpc(n.NpcId.Ulrich,"Ulrich")} when he showed up a few centuries later and subsequently \n      married him on his insistence. While not the ideal marriage, the two manage fine nowadays.`],["Conley",`A fire genasi rebel who was given refuge by Preservation after he sacrificed his life to save the lives of \n      quite a few of his friends. Served as cook/housekeeper at Bunker#371 where he was everyone's favourite \n      junior. Used to respect ${o.linkNpc(n.NpcId.Ebenezar,"Ben")} before he ditched them all.`],["Vahareth",`${o.linkNpc(n.NpcId.Caelynn,"Caelynn")}'s predecessor as the Guardian of Life as well as a \n      father figure to her. Scouted her out in Materia, then got her to the gardens and personally trained her. \n      Known and feared throughout all the outer planes for his unbreakable will and eyes that could delve into the \n      deepest nature of a person's soul with just a glance. 'Retired' after Leras' death.`],["GOrder",`Known across all the realms simply as 'The Master' - the Guardian of Order was an expert at diplomacy, the \n      forceful arm-twisting kind, who always got his way. Unlike most others who took it easy in the garden, he spent\n      his whole life scheming and ruthlessly executing ever-more-complex Machiavellian schemes. So complex that even\n      his own loyalties were at times doubted, particularly when some links were found between him and\n      ${o.linkNpc(n.NpcId.TraitorOthello,"The Traitor")}. He was also a very strong warrior, rumoured to be a \n      radiant as well as have hemalurgic powers equivalent of Mistborn of old derived from an inordinate \n      number of spikes. A number equivalent to some of his seniormost counterparts within the castle itself, so many that \n      even Aluminium couldn't negate them in time. Committed suicide when Ruin attempted to assert his will via the\n      hemalurgic spikes instead of letting his knowledge fall into the enemies hands. A pity too, for he was \n      literally the personification of one of the ideals of the new Preservation, "There's always another secret."`],["Logos","The enigmatic 'scriptwriter' of the Troupe, who dictates every move they will make. From the 'Troupe Leader'\n      gained an uncanny ability to write reality to his whim, anything he writes <i>will exactly occur</i> as he wrote it. \n      However this works better for futures far off and with a lot of possibilities. Is functionally immortal\n      since he wrote his own ending in the far future. <br/>\n      Before he became the Playwright, he was also a greater demon lord. Banshees being male is extremely rare, and \n      all are very dangerous, and one among them becoming Lord was unheard of before him. Even back then he could \n      cast reality-bending magic simply by speaking (or chanting) aloud or writing his commands in the air."],["Mostima","A fallen angel who can move through planes without relying on perpendicularities. Has a tendency of talking to\n      someone one minute and disappearing the next. Suffers from an advanced case of Nightblood but doesn't seem to \n      suffer from psychosis or neurosis. Carries two staves that appear powerful and seem to be the manifestation of\n       an ancient, or rather timeless, soul."],["Shimaken",`An orphan in the Castle of the Night who was adopted and raised by ${o.linkNpc(n.NpcId.Lemuen,"Lemuen")} along \n      with ${o.linkNpc(n.NpcId.Shimarin,"his sister")}. Wasn't the\n      best at fighting but maintained an unshakable, and contagious, aura of hope and optimism despite having seen \n      his fair share of atrocities and horrors. Organized a 'resistance' aimed at making leaving the castle possible.`],["Shimarin",`An orphan adopted and raised by ${o.linkNpc(n.NpcId.Lemuen,"Lemuen")} who taught her sniping. Took it up as a job after \n      Lemuen got crippled. Worked in a team until ${o.linkNpc(n.NpcId.Verrader,"Verrader")} sold them out, \n      then worked solo. Was there, past midnight, when Ruin almost got complete - she made it back with \n      ${o.linkNpc(n.NpcId.LogosPlaywright,"The Playwright")}'s aid.`],["Verrader",`An influential fixer in Night Castle. Made it big thanks to his incredible charisma and deception skills. \n      Gained Nightblood in an accident - a result of his first betrayal - during his\n      early years spent on the field in a forge which submerged his whole team, except \n      ${o.linkNpc(n.NpcId.Shimarin,"Shimarin")}, in magma. Died at the hands of the Steel Inquisitors, \n      his soul burnt to power Rin's hemalurgy.`],["Fiest",`While he rarely stepped on to the field himself, ${o.linkNpc(n.NpcId.Shimaken,"Shimaken")} and the \n      others owed a lot to his technical genius. Since he rarely even left the confines of his lab, his life was\n      rather sheltered and happy. ${o.linkNpc(n.NpcId.Lemuen,"Lemuen")}'s boyfriend before she died.`],["Mouthpiece",`Was somehow related to the Witch King of lore. The most loyal member of the troupe, he took it upon himself\n      to be the host/announcer of the Troupe's 'shows'. Responsible for their most grotesque creations which often \n      were looked down upon by ${o.linkNpc(n.NpcId.LogosPlaywright,"The Playwright")} as being crude and tasteless. \n      Was killed by a group of adventurers and ${o.linkNpc(n.NpcId.Lucian,"Solitare")} but he had already \n      accomplished what his master needed...`],["SanguineArch","Little is known (so far) about the first, and primordial, vampire and the de facto Lord of the entire dimension\n      of the Shadowfell except that they are extremely dangerous to all but other higher vampires, most of whom regard \n      them with utmost respect. Fear, yes, but respect..."],["Decroa",`A higher vampire who had been captured by the Troupe Long ago and used both as a trap against unwanted \n      intruders and for their 'plays' and research. Prolonged torture and withdrawal symptoms had made her a little \n      unhinged, and <i>very</i> thristy. Was finally freed by a group of adventurers and thereafter protected by \n      ${o.linkNpc(n.NpcId.Sanguinarch,"The SanguineArch")} until she could escape the \n      castle. Revealed herself to be a childhood friend of ${o.linkNpc(n.NpcId.Lesley,"Lesley")}'s.`],["Baphomet","The Demon Lord in command of the 'lowest level' of the Castle who often was summoned to other realms to fight\n      on the front lines, and so had inherited the traits of lesser demons - namely ferocity in battle without regard\n      to self-preservation, an irrational hatred of devils, and a slight dearth of brain cells. Regardless, the mere\n      mention of his name brought terror in the hearts of many - particularly in the lower levels of the castle..."],["Kjera","Very little is known (so far) about the Guardian of Magic. Except that she keeps her consciousness distributed\n      across various forms and bodies, not all humanoid, across several reams. And so she is pretty much immortal even\n      before her primordial origins are taken into account. Since each body has its own reservoir of mana, she \n      herself has near unlimited mana and can cast all non-proprietary spells, and most proprietary ones, known in \n      all the dimensions. She personally maintains the entire internal financial infrastructure of the Gardens."],["Othello",`Once the apprentice guardian of defense, he betrayed the people in Preservation to kill everyone in the bunker\n      with the help of the troupe and escaped into the castle. The only person, other than himself, who would've \n      known all the details was ${o.linkNpc(n.NpcId.GOrder,"The Guardian of Order")} before he passed away.\n      <br/>\n      By the time he was found again by a group of adventurers, he was imprisoned by the troupe next to a rather \n      large explosive, and had completely lost his mind - as he kept babbling some gibberish. As they were escaping\n      with him, however, the mists touched him causing him to fully become himself again. Unfortunately, this was but\n      for a moment since soon after he was assassinated by ${o.linkNpc(n.NpcId.Lucian,"Solitaire")}.`],["Mandy",`A criminal and gang/cult leader, she was well known and feared throughout the lower levels of the castle for \n      being a very advanced case of nightblood. It gave her powers to manipulate stone, something which also made \n      her near impossible to kill, while completely sapping her of human emotions like empathy, making her a \n      psychopathic killing machine. Seemed to be researching some clues regarding the plane of the earth a \n      ${o.linkNpc(n.NpcId.Ebenezar,"particularly adept spellcaster")} had left behind but was thwarted by a \n      group of adventurers who handed her research to ${o.linkNpc(n.NpcId.Verrader,"Verrader")}.`],["Gen",`Little is known (so far) of ${o.linkNpc(n.NpcId.Mandy,"Mandragora")}'s brother except that he was\n      a regular studious boy in Terra Prima until he was kidnapped by a \n      ${o.linkNpc(n.NpcId.Mostima,"bored wandering spacetime-traveller")} and brought into the Castle of \n      Death to be used as a bargaining chip by a group of adventurers, since he was supposedly the only family, and \n      only weakness of his sister.`],["Muelsyse",`A well known research specialist from Innovation who specialized in nanomachines and fluid automation. Had \n      come to the castle of Ruin for reasons unknown and there happened to meet, and protect from imminent \n      destruction, ${o.linkNpc(n.NpcId.Fiest,"one of the fans of her research")} and also helped out his group of adventurer \n      friends. However, being in a rush they couldn't really get to know her better then.`],["Shamare",`A child who'd been forced into a harsher life someone of her age deserved, the death of her sister caused her\n      to inherit her nightblood and learn of her 'arts'. These 'arts' involved weaving the souls of people, and \n      others, into inanimate objects - twisting their identity and spiritual energy to perform certain tasks. The\n      first soul she weaved was that of her own sister's, who had been shot - as she was trying to go incognito - by \n      ${o.linkNpc(n.NpcId.Shimarin,"a sniper")} at the behest of her \n      ${o.linkNpc(n.NpcId.Mouthpiece,"last employer")} after she had completed a certain contract supposedly\n      involving a lock. Shamare finally gave up her quest for vengeance when she realized she was being manipulated \n      and at the behest of a very persuasive barbarian.`],["Lemuen",`${o.linkNpc(n.NpcId.Mostima,"Mostima")}'s half-sister and ${o.linkNpc(n.NpcId.Shimarin,"Rin")}'s\n      teacher - she was reputed to be a sniper without compare. While her life had a great deal of ups and downs,\n      very few individuals would know her full life story - probably only Mostima. And yet, one adventurer did begin\n      to bond with a part of her left behind after she died, inheriting her skills and small pieces of her memories.`],["Eugrud",`An orc who served as bodyguard to ${o.linkNpc(n.NpcId.Verrader,"Verrader")} and probably shared one \n      braincell with his co-bodyguard, the bugbear gunslinger Roth (and probably received the smaller half of that \n      braincell). While he liked to boast and think he'd seen everything the castle had to offer while working \n      under Verrader, only after his death - after failed attempts to assassinate ${o.linkNpc(n.NpcId.Shimarin,"Shimarin")}\n      and then ${o.linkNpc(n.NpcId.Shimaken,"Shimaken")} did he realize just how insignificant his life so far had been...`],["Andoain",`An aasimar with a halo and glowing wings like reflected glass who mysteriously appeared in Veteres in around \n      1580 AR. Seemed to be supernaturally gifted in the use of firearms and preferred them to swords. Known by all \n      to be an extremely generous and kind soul, but seemed to be haunted by demons of his own, and was always \n      begging God for forgiveness. Was randomly assaulted by a \n      ${o.linkNpc(n.NpcId.Mostima,"mysterious half-blood fallen aasimar")} while peacefully exploring the\n      coast of Aegir.<br/>\n      <div class="effect_tag">Incomplete</div>`],["",""]]),l=`\n<h5>Early life</h5>\nCaelynn Nailo was born in ? during the years that marked the end of the Heroic Age, and the onset of the Silent Age. \nBorn in a university to a family of accomplished and well renowned scholars, young Caelynn had led a protected - \nalmost pampered - life. A life that, along with her natural gifts, had allowed her to dream, to reach for the stars,\nto set out near impossible goals and achieve them. Unfortunately, this self-confidence and ambition were dormant \nseeds of tragedy that finally bore fruit in the years that heralded the Silent Age.<br/>\nAnd so it was, that one day she found everyone she knew - her family, her friends, her professors - all massacred. \nAs she stared into the essence of The fifth, a horror she could not yet fully \ncomprehend, she <i>knew</i> it would be her next - and welcomed it, for even in her broken mind she knew she had\ncaused all their deaths. But the powers that be had decided it was not time for her to die yet.<br/>\nIn this case 'the powers' took the form of a single man who had escaped the slaughter and fought back the horror to\nprotect her. A man she knew as the HoD of botany, someone she'd never really felt bold enough to interact with. A \nman who, as she would learn soon, couldn't dream. Another thing she would learn soon was that he came from a \ndifferent universe - a garden - and went by the title of 'Guardian of Life' there...\n<h5>In the Garden</h5>\nWhen she entered the garden, she was a different person. Fate had broken her, but she had stood up again and filled \nthe cracks with something stronger. Gone was the childish optimism, the vanity. It was replaced by singular purpose -\nto ensure that none would suffer at the hands of those from without as she did. To ensure that she could, would \nprotect as she had been protected by ${o.linkNpc(n.NpcId.Vahareth,"Vahareth")}. Before long, she was \nregarded as a prodigy there too - with the different orders of Watchers, Inquisitors and Scholars training her and \nvying for her to join them. Yet there was little surprise when she chose to join the Watchers - after all she was\nvirtually Vahareth's daughter - lived in his bunker, trained under him personally, and had the same cold steel gaze\nthat could unnerve the most confident of men.<br/>\nBeing so close to power and being the center of attention of so many orders meant that she met a fair share of \nimportant people from different orders. One among them was the apprentice of the Guardian of Defense, \n${o.linkNpc(n.NpcId.TraitorOthello,"Othello Titanborn")}. The gardens, because of their extremely low but <i>very</i>\nhighly skilled population, would typically send out squads of two people for most operations - and Caelynn and \nOthello were often together because of their complementary skills but aligning personalities. The two began courting\nand were a happy couple for quite a few decades. However, that was not to last, and the forces that had broken \nCaelynn before would soon break her again...\n<h5>The Betrayal and Bunker#371</h5>  \nOne day, Preveservation was ablaze with the news that everyone in Bunker#17 had died. When it reached her ears, she \nwas terrified, for that was where Othello lived. Upon reaching there, however, she recieved even worse news from the\nGuardians of Order and Life who were inspecting the site. He was not dead, he was the one who had killed them all, \nwith the assistance of a mysterious group of assassins from the Castle of Ruin known as 'The Troupe' and escaped there\nwith them following the slaughter. His motives were unknown, but the evidence was irrefutable. This evidence included\na prisoner, whom Caelynn, under the superivision and command of the Guardian of Order, tortured and 'practiced' \nhemalurgy upon.<br/>\nThe shock of betrayal, overwhelming sense of abandonment and trauma of hemalurgy sent Caelynn into a downward spiral.\nShe would do all future operations alone, with Machiavellian maneuvers executed with utter ruthlessness. And so she\nspent almost two millenia in the service of Preservation. Until during one of her last operations, she came face-to-face \nagainst a higher vampire in the streets of Ortus, a major capital of a planet in Materia. While they were antagonistic\nat first, in her eyes Caelynn saw the same look as herself - to be more precise, the same look following both the \ntimes life had broken her. This girl, she knew, had seen abandonment, loss and regret, and little else, as she too \nslid downwards in a spiral of her own demons. Despite herself, Caelynn did keep a close eye on her anyway, and so was there to see \nwhen finally the vampire resisted against the spiral, resisted against instincts Caelynn knew were more powerful, \nmore primal than she had ever faced.<br/>\nThat moment had moved her to a degree much more than she could anticipate. Buried regrets deep inside came out at \nlast, and so she, for the first time after Othello, reached out to someone. And so she returned to the Gardens with\n${o.linkNpc(n.NpcId.Lesley,"Lesley")} in tow. The two soon grew very close, also starting to work together on\noperations. A few decades later, as her date of graduation from field service arrived, her collegues gifted her an\n${o.linkNpc(n.NpcId.DaveRuhl,"automaton")} to help defend her in close range. And so the three of them started \nBunker#371, and remained its sole members for one and a half millenia. Until finally Caelynn was there for someone\nthe way Vahareth had been for her - an elven girl, ${o.linkNpc(n.NpcId.Lia,"Lia Mistcloak")}, who\nwas 'taken' by the second. A few centuries after, Lia was to get married and\n${o.linkNpc(n.NpcId.Ulrich,"her husband")} too moved in. Again after a few centruries Lesley decided\nto 'adopt' ${o.linkNpc(n.NpcId.Ebenezar,"a human boy")} whose soul seemed burdened in the same way that hers and \nCaelynn's once had. As Caelynn approved, it finally struck her that her lone wolf days were a thing of the long \npast - and once again she felt warmth in the company of others. It was when this happened that Vahareth finally \ndecided to name her his apprentice formally, meant to succeed him as guardian. Since then there were a few ups and \ndowns - like ${o.linkNpc(n.NpcId.Conley,"Conley")} joining and Ebenezar abandoning Lesley - an act of remarkable\nparallel with the way Othello once had her, but with each other for support, they weathered all that came.\n<h5>The hour of Loss</h5>\nA few days before the hour of loss, Caelynn got notified of a threat that required at least the attention of a \nGuardian apprentice. On arriving the scene, she found a group of adventurers, of whom \n${o.linkNpc(n.NpcId.Lucian,"all but one")} were peacefully slumbering around a mistflame. The one not \nslumbering seemed to be raving, and on his neck, she could see a Nightblood inhibitor. She knew what that meant -\nand the people who could venture outside the castle were typically very dangerous - the \nonly ones she'd heard of were members of the troupe, steel inquisitors or the demon lords. The mist clung to him, so \nhe wasn't hemalurgically enhanced. A demon lord wouldn't ever wear an inhibitor, so that left...<br/>\nShe was about to raise the alarm, when the inhibitor suddenly broke - and the person starting laughing in a \nparticularly insane way. He then summoned some... aberrations(?), gave them some directions, made some preperations \nfor the others, then... slit the throats of the aberrations until the mists tore apart from him, and then he slipped\nthrough the realms, giving her - who was wildshaped into a sparrow - a knowing grin as he faded. There would be \nlittle point in chasing him, and while she wanted to get a hold of the knife with which he could 'kill' even in here,\nsomething about his grin unnerved her, and she wanted to learn the motiviations of the others still asleep.<br/>\nWhich turned out to be a good idea, since their motivations were as noble as they come. As they willingly gave her \nthe dagger, she allowed them to stay as guests in the bunker. They certainly did make their presence felt out there. \nThey helped them in an odd variety of tasks, but what left her the most grateful for having them was that they\nhelped Lesley shed some of her demons. Yet something unnerved her, events were moving too fast for \nthis realm. Circumstances which would have come in years came in days, and they would absolutely not consider the \nidea of not going to the castle, despite all her warnings.<br/>\nSo when the hour of loss finally came, she found herself anticipating it. Preservation was getting weaker since eons,\nand of course <i>they</i> would take advantage of the imbalance between shardic powers. After helping her new guests\nmake it into the castle, she focused on rooting out the corruption that spread, yet this incursion was way more than\nhad ever been before. They did keep it at bay though, and while no more than half a dozen died in the Garden, the \nGardens themselves were completely ravaged. Vahareth too decided to 'retire' to seek out the cause of this, leaving \nher as the Guardian of Life. Soon after she took power, her guests established contact from within the castle, a \nfeat that required a great deal of magical power and skill. While she did wonder about it, as she did worry about \nthem, this was not the time. The intel they provided strongly suggested that the cause of the rift was somewhere \nwithin Ruin's domain. And so all the Guardians set out to deal with it.<br/>          \nUnfortunately, they were too late - by the time they had taken control, and crossed the midnight boundary to find \nthemselves face to face with ${o.linkNpc(n.NpcId.LogosPlaywright,"The Playwright")} and \n${o.linkNpc(n.NpcId.Sanguinarch,"The SanguineArch")}, the primoridal nightmares were already free. \nThankfully, all of them being in one place meant that a greater disaster was prevented. Even with all his inquisitors,\nRuin could not take on the five of them together. That meant he couldn't get the Atium, couldn't complete himself and\nwas evenly matched against the new Preservation, 'The Survivor'. But leaving the Atium stash intact was too much of a\nrisk, so they offered the adventurers to burn it all if they would like to, an honour for helping protect the entire \nmultiverse from utter and imminent destruction. However, the adventures refused as they felt the Guardians were \nbetter suited for the power. They just wanted to have peace and quiet and leave the castle behind finally.<br/>\nHowever, that was not to be. For one of them had been marked by The second, and the\nPlaywright's powers had bound their souls in their skirmish. And so, she once again lost a group of good people, \npeople important to her, people who'd given her hope. There were already plans of war in motion. Of vengence, of\nsurvival. Until now, they had tried to play nice, it had resulted in the death of friends, in the death of God. \nNo more...`,d=`\n<h5>Early life</h5>\nAll higher vampires are aristocrats, served upon - should they require it - by their thralls and other creatures of \nthe shadowfell. However, even among them, the Aeternus family - one of the oldest - was highly feared and regarded,\nsince their blood granted them command over the flow of time itself. As such, as their youngest child, Lesley \ncommanded fear and respect before she was even old enough to know what the words meant. It would be long before she\nwould learn what respect meant, but unfortunately what fear was became clear to her very early in life.<br/>\nFor most higher vampires also share a particular trait - while their bodies are ageless, and can only ever grow \nstronger - old age is marked as their mind begins to slip. Not in terms of stupidity, loss of wisdom or weakness\nof will - no, a higher vampire could <i>never</i> be weak. It slips in terms of balance and stability. Elder vampires\nof aged minds are extremely paranoid and easy annoyed. They become desperate for solitude, and suffer in every word\nthey speak - as if every single word would bring them one step closer to insanity. They also turn into extreme \npsychopaths - it is said in the shadowfell that should any creature save another higher vampire even approach within\na mile of them, even unwittingly, they would instantly kill them for offending them with their existence. Ultimately,\nthis is what keeps the population in check, for only another higher vampire - or another titan - can truly kill a \nhigher vampire.<br/>\nUnfortunately, for child Lesley this meant she had to bear witness to mind-numbing amounts of domestic violence as\nshe grew into her teenage years (i.e., was a century old), to the point where one of the parents ripping out the \nhead of another would just draw a vacant dead glance from her, before she went back to reading her books. Her sole \ncomfort was in her elder brother, who taught her to use the powers of the bloodline - who stood by her - taking the\nbrunt of the shit - as her parents seperated, each cocooning up in their subdomains, never to be disturbed again. \nHowever, that strain was too much for him too, and on one - only one - occasion, he snapped violently at her. \nThat once was enough, she fled from the realm, never to look back again.\n<h5>Meeting Caelynn</h5>\nIn Materia, Lesley took shelter in the vast city of Ortus of Terra Prima. While the rest of the material plane was \nstill using bronze, and in some cases, stone tools. Veteres had already moved on to iron, cement and even niter. \nOrtus was quickly regaining the glories of times past, Lesley was certain they would learn steel-craft soon too. \nThat glorious, densely populated city was the perfect dream. Books that were a rarity in Shadowfell were present in \nthousands in the many libraries here. Poets and scholars blossomed in great numbers. Conversation with any stranger \nwas a pleasure. Lesley finally relaxed herself, took the persona of an author and set herself free...<br/>\n Sadly, with all the pent-up darkness within, setting herself free was the most dangerous thing she could do. Soon\nshe began to develop a taste for blood, something she'd never had before she came here, which before she knew it \nwas a crippling addiction. But unlike her ilk, she avoided violence, avoided killing, making thralls. It reminded her\nof her family, her kind way too much. The very thought disgusted her. For that matter, so did her addiction, but try as\nshe would, she couldn't let go - her darkness returned stronger than ever every time she tried to step away, and what\nwas a thing of pleasure soon became a necessity for being able to function.<br/>\nIt was at this time that she made friends with a rather nice guy, Nohadon, a person who would one day be regarded as one of \nthe greatest thinkers of the early classical era. To Lesley however, a person who would have been a God-sent company \nonce was now just an object of depraved anticipation. As she softly smiled and discussed ideas with him, she would \ninternally be picturing the oh-so-satisfying look of horror as she turned to feast upon him. However, there was just\none snag - a random noblewoman, who seemed too smart for her own good, seemed to have caught on to something and was\ntime and again thwarting Lesley's attempts to isolate the guy. Finally, Lesley had had enough, for the first time \nshe felt too pissed off to care about her heritage. She would get rid of this meddling arrogant bitch who had no idea\nwhat she was facing.<br/> \nUnfortunately, as she lay - a decapitated and bloody mess - tangled in a bunch of thorny vines, she found out \nthe situation was reverse, and it was her who had been utterly deluded. It was at this time that reality of what\nshe was trying to do finally dawned on her - she was turning into the same people as those she had detested the \nmost. And so, instead of fleeing and disappearing like the noblewoman advised, she went back to resume her life,\ndrawing an angry glare from her more than once. As time passed, she learnt to function, to curtail her bloodlust \nand just... function. Gradually, her time spent with Nohadon turned \nconsiderably more honest, pure and, strangely, fun. The noblewoman too, Lesley learnt her true name was \n${o.linkNpc(n.NpcId.Caelynn,"Caelynn")}, began to warm up to her. Her nightmare was again turning \ninto a dream... until her brother came.<br/>\nEverything shattered, utterly broken and traumatized by what proceeded, that very night Lesley assaulted Nohadon and fed\non his lifeblood. As her suppressed addiction returned with a vengeance, she sucked out more and more - further than \nshe'd ever gone before - to the point where she could've killed him at any point. But thrilled, anxious, she wanted \nto pleasure herself more before she did that finale - she wanted to forget everything... but found she couldn't. From\nwhere she couldn't fathom, but the awful grace of God seemed to have fell on her. She couldn't lose herself, couldn't \npretend she enjoyed this - as she finally opened her eyes and faced what she was doing. Aghast, guilt seized her, \nchoked her. He wasn't dead yet - but there was nothing she could do to help him at this stage. Yet she tried, weeping\nand broken, she tried - but could only watch as the life left him...<br/>\nUntil a single word forced the life back into him, a single word from Caelynn, more pleasant than any she'd heard her \nwhole life. A word that carried mana considerably stronger than she could ever summon. That was when Caelynn told her \neverything - including about the place where even <i>her</i> family could never reach her again, a place where a group of \neight could well take on a higher vampire, a place where the leaders were evenly matched against \n${o.linkNpc(n.NpcId.Sanguinarch,"The SanguineArch")} themself...\n<h5>Ebenezar</h5>  \nLesley's time in Bunker#371 was satisfying, not entirely perfect - but as happy as a penance could be. Happier than \nshe felt she deserved anyway. And while the blacksmith and his wife pissed her off, subtly reminding her of her \nfamily, Caelynn was a pure pleasure. Plus even ${o.linkNpc(n.NpcId.Irene,"an inquisitor")}, who had been \nso adamant that Lesley was a criminal, that there was something off about her - until Lesley had revealed\nher heritage, was becoming a great friend. And so she was sure she wasn't lacking in any way - until she met \n${o.linkNpc(n.NpcId.Ebenezar,"Ben")}. A human \nboy who'd stumbled into a perpendicularity by accident (well he'd drowned in there), the teenager was solemn far beyond \nhis age. And his eyes seemed so <i>tired</i>, eyes that had seen way too much. Seeing a boy that dead inside reminded \nLesley of times long past, times before she'd tasted human blood, times when she still looked up to her brother... \nshe pleaded Caelynn to allow her to take him in. After her approval, as Ben came to live with them, Lesley found out\nthat there was one thing which still excited him, one thing that made his eyes shine like a child's again - magic.<br/>\nHe'd watch wide-eyed with wonder at every experiment Lesley did, ask about every potion she concocted, be amazed by\nevery spell she cast. Flattered by being the subject of such innocent, genuine praise, she offered to teach the kid \nher ways. He readily agreed, and Lesley watched with pride as this new purpose brought life back into him. His mood \nimproved considerably, he turned to cooking and painting as hobbies, became the best friend of everyone in the \nbunker, and before long was the glue that held them all together. A slight voice deep inside Lesley made her worry a\nbit on how <i>passionate</i> the boy was about learning, every day in a land where all were immortal, and so \npreferred to maintain a very healthy work-life balance (often bit a bit more emphasis on the latter), the kid would \neasily be studying for over 13 hours a day. What was her ward studying that hard for, Lesley couldn't help but wonder, \nbut helped him the best she could anyway.<br/>\nLess than two centuries later, her teaching and his studying turned into both of them researching together, as the\nboy's skills began to rival hers. She also became aware, partly from the teasing of others, that the boy seemed to be\ndeveloping feelings for her - feelings she felt she could, probably did reciprocate. Yet despite being over two \ncenturies old by experience, his body was still that of someone in their late teens. So, his request of being allowed\ntime to roam Materia, more specifically, his home planet terra - was met with approval by all. Caelynn did warn her \nhowever that something felt wrong in the kid's eyes as she had approved, so Lesley secretly spiked one of his drinks\nwith a pinch of her blood - it would let her know if he ever died.<br/>\nHe went out more than two dozen times over three centuries, and Lesley was sure her fears were unwarranted, when \nsuddenly her blood froze - Ben was dead! As she immediately prepared herself to project, the connection was \nre-established, and so she had no idea what happened. If she had trained her vampiric abilities better, instead of \nleaving them sealed and forgotten until the rare occasions that required them arose - she might've known he'd turned\nto Lichdom. But as it happened, she merely assumed there was some disruption and relaxed herself. Afterwards, he did\nreturn to the bunker, but continued to go out steadily back into the material plane. As his skills surpassed hers, \nhe also began to become distant, and would at times rebuke her for being too clinging - something very unfair, and \nsomething he'd never say before, but also something that struck a deep insecurity within her from her childhood days, \nand shook her to the core.<br/>\nWhile their relationship wasn't quite perfect, they still were happy - or at least so Lesley felt. So when she was \ndevastated when he declared he needed to go into the castle. Though he promised he'd return, she knew it was over \nbetween them. Maybe she should've stopped him, but old instincts took over that would not allow her to 'look' weak. \nSo instead she, perhaps a bit coldly, said she was ok - but insisted he take a very particular 'watch' with her. With \nhim gone, Lesley finally broke - and old habits returned. However, this time she was wise enough to not drink wantonly, \nbut only from someone who could overpower her if she lost control - someone who was also close to her. While the \nothers always kept encouraging her that he would return - he had learnt magic strong enough to open perpendicularities\n- her blood already had told her he was dead for good. So she drank. Hating herself, she continued to drink, and \ndrink, and drink (becoming the reason for Caelynn to appear even paler than her natural complexion).\n<h5>Forgiveness</h5>\nThe first break from her relapse into darkness was when people said a \n${o.linkNpc(n.NpcId.Mostima,"mysterious girl with temporal control")} had shown up and wanted to be her ward.\nThough she was in no mood to, Caelynn forced her to take her as a student, something Lesley thanked her for later.\nBut the final reprieve came when, a few decades later, Caelynn brought home a group of guests - one of them an aasimar paladin,\nof an oath high enough to be a full knight radiant. From the first day, he could feel something was off in the \nbunker. He would find her, she knew, and while she could kill him, she found herself unwilling to. Her past had \nfinally caught up, judgement was here, and with her addiction resurfacing, she couldn't find it in herself to try to \nhinder it. She didn't want to die, though and tried hiding her true nature until hiding it was virtually equivalent \nto killing him. For he'd conjoined two powerful relics, one from the castle and another from the Guardian of magic, the \nlatter sealing the essence of the Primordials and being watched by Ruin himself. He was taken by surprise and \ncouldn't resist it. He would die before the split-second was over. No one else had noticed yet - and wouldn't before\nit was too late, but even the best of them didn't have the reflexes of a higher vampire - nor the strength.<br/>\nSo betraying her true nature, to the shock of many, she broke the conjunction and pulled him out to safety. It was \nnot a plea to spare her life because she'd saved his. No, this was no bargain, no trade deal. After preparing herself\nand wrapping on restraints to suppress her vampiric powers, she stood before him. With the secret out, she answered\nall his questions honestly, and closed her eyes, bracing for the end. Yet he wouldn't strike. While he made it clear\nhe didn't fully trust her, she had to be sure he <i>meant</i> it when he chose to spare her. So she asked him to \nbreak the restraints she had on - and stand before her in her unrestrained vampiric powers, which he did. Bless the\nman, he did! And so, knowing that they would be heading into the castle - she gave him her vampiric sigil - a token \nof trust beyond what most mortals could comprehend. It gave him powers like her own which would surface if, and only \nif, needed. It also lent the authority of her family to him, and gave him the power to truly kill her for good. Such\na need didn't arise, however. But the group did contact her to confirm Ben was gone (via a device he'd left \nbehind), but she knew that already. Still, when Caelynn told her all the Guardians were heading there, and were \nlikely to run into them, she was all too glad to be a part of that group, even if it meant running into the \nSanguineArch themself...`,c=`\n<h5>Early Life and Capture</h5>\nIt is hardly unusual for a child to lose their parents at a very young age in the Castle of the Night, and so when her\nparents went missing, eight-year-old Rin found a plenitude of odd jobs, not all very ethical, to support herself and \nher four-year-old brother ${o.linkNpc(n.NpcId.Shimaken,"Ken")}. Not all her employers were the most scrupulous,\nhowever - and on one occasion, now 14 yrs of age, she found herself in the service of a sadistic, hateful and dangerous\n(at least, so it seemed to her then) thug. For his amusement, he forced her to suffer from a round of 'Russian \nRoulette', and experience that deeply terrified and traumatized her. He then told her that he'd found the trail of a \nvery dangerous assassin that had sniped one of his right-hand men. She was to go and sabotage their rifle with an \nexplosive he gave.<br/>\nThis mission lead her to sneak into a remote alley which she learnt had been dubbed 'Saints Row'. Unfortunately, or\nperhaps fortunately, she was woefully under-prepared - while she was quite adept in stealth, she didn't know a very \nimportant fact, all 'Saints' were bonded to their firearms. The minute she touched the gun, her target knew. Alarms \nwent off everywhere, and she was surrounded in moments. As she was being apprehended, she couldn't help but notice \nhow all of them were aasimar who looked noble-to-a-fault and had halos and wings hovering around them that appeared\nlike light reflected on a crystalline surface. ${o.linkNpc(n.NpcId.Mostima,"One of them")} however, also\nseemed to have the black horns and tails of a fiend. She seemed a lot less noble, and so to Rin a lot more unnerving,\nmore like a street thug she was used to instead of a divine being like the others.<br/>\nWhen her blindfolds were removed, she found herself in a cell. Sitting next to her, with her gun on her lap, was the\n${o.linkNpc(n.NpcId.Lemuen,"famed sniper")} she'd heard so much off. Her kindly - almost jovial - demeanour\ncompletely shocked Rin. She seemed not a bit mad, merely amused and curious. The stark contrast between her target,\nsupposedly her enemy, and her employer cracked something deep inside of her. She completely broke down, after half a \ndecade of keeping it together while living through hell, she - in the midst of hyperventilation and sobbing - unloaded\nall that her soul had been burdened with at that point. Lemuen heard her whole tale soberly - Rin couldn't help but \nnotice how Lemuen's face hardened when she got to her latest employer. When she was done, with a very comforting hug, \nLemuen said she and a few others would leave this colony to diffuse the trail on her. She asked Rin to come along \nwith them for now. Lemuen herself would train Rin to make her strong enough to go back and retrieve her brother. Rin\ngratefully agreed, though she was sure she hadn't been offered a choice (which made her more happy than \nit should have).<br/>\nLemuen said the ones coming with her would be her half-sister and \n${o.linkNpc(n.NpcId.Fiest,"her boyfriend")} - a human guy they'd met here who \nused to work on making and maintaining their firearms and other equipment. Also, it turned out the 'half-sister' was\nnone other than the half-fiend Rin had noticed earlier. Her earlier assessment was spot on, she was way rougher than\nLemuen - at least superficially. Though with Lemuen, Mostima too completely let down her guard and was cheerful and\nrelaxed. The four of them moved into a very secure, and quite cozy, bunker-like place where the two sisters trained\nher with firearms - Lemuen with rifles and Mostima with handguns. Despite their light-hearted natures, Rin couldn't\nhelp but notice the two were <i>very</i> good with weapons and infiltration. These were not skills someone acquired\nwith experience on the street, but the result of a careful training regimen drilled into elite squads of the \nstrongest militaries.\n<h5>Becoming a Sniper</h5>\nA year later, while she was getting anxious to rescue her brother already - the lingering fear that she wasn't yet \nprepared to take on the monster that was her former employer continued to haunt her. Unfortunately, fate wouldn't \nleave her a choice. In their year together, she found out a lot about them - at least about stuff they were willing \nto share. The two had come from the material plane. Their father had turned away Mostima who'd sought him out, \ndenying that she was his child, and Lemuen had left him to live with her. The two of them had then begun to manifest\nthe powers of 'Saints', which had lead a certain organization to seek them out. The others they were living with were\npart of their old squad. Their squad had apparantly been charged with some mission in a place deep under the surface\nof their 'planet' known as the underdark. While there, the trails of some relic of the past had unwittingly led them\nright into a perpendicularity which had led them stright into the pits underneath the castle - where, ever so rarely,\nAtium could be found. Mostima had recognized this as the place where her mother had long ago been summoned from, and\nwhen the group had learnt they could return, they had established themselves here - awaiting any orders that may come \nsomeday.<br/>\nAnd so, after a year, Rin was deeply troubled when she saw their leader arrive at the doors of their bunker. No \norder had come, but he'd finally found a trail of the relics that had lead them in this castle in the first place. \nWhile the mention of the relics didn't really give the sisters a great deal of happiness - for they were the reason \nall of them were struggling within the Castle of Death himself instead of chilling in Terra Prima - they would not \ndisobey orders, even if it was uncertain if the chain of command still applied. Plus even they knew the supposed power\nof those relics, and the importance of recovering them. And so the three of them set out, leaving Rin alone in the bunker.<br/>\nA few days later, a familiar - though tired - knock on the door of their bunker was heard. Nervous with excitement, \nbut a bit apprehensive, Rin opened the door... and was shocked to find an abosolutely worn down Mostima, covered \nwith blood, halo and wings turned dark black, carrying an unconcious Lemuen inside. Fiest followed her with a haunted, \nhorrified look. Neither would explain any details, except that Lemuen would survive - though probably had lost the \nuse of her legs - and that Mostima would stay away from guns henceforth, and they would never see the other aasimars\nagain. And so the full reality sank into Rin, the only \nway to survive now was for Rin to take up Lemuen's job. She was not particularly skilled in anything else, save \nstealth and theivery, but that would never earn enough for the five of them, and none of the others could work. But \nbefore that, she needed to sort out her own demons, her own moral quandries. She had seen much, true, had been \nhardened by life, true, but living with the sisters had made her aware that she couldn't just close her mind and \nkill. If she went down this path, there was no looking back - and so she had to be absolutely certain that not an \niota of doubt or regret survived within her. She had to 'kill' her heart completely.<br/>\nSo after forcing Fiest to make some 'special preparations', she set off to rescue her brother. As she reached the \ndoors and corridors of her former employer, she noticed so many weaknesses in his defenses - stuff she'd never \nnoticed before. Security that seemed impregnable before seemed trivial now. One year of training had put her on a \nlevel far beyond this. In fact, she probably could've stormed in here even after two months of training. She realized that \nthe person she had feared as a 'monster' before was no more than a petty criminal. Of course the mission he'd sent \nher on was doomed to fail, a mission far beyond his means, a mission against true 'monsters'. A lucky break had put \nhim on their trail, and he was too low-level to even fathom how foolish pursuing that trail was. Well he'd know now,\nshe thought savagely as she finally walked into his room - the wretched man called out for help, but none would come. \nNone could come. She took out her revolver, made sure it was full, then took out one bullet as she headed to him, \nspinning the chamber.<br/>\nIn his defense, he found some backbone somewhere, and flat out declared - despite being terrified - he would not \nplay any games, she could just shoot him and get it over with. But she'd not come here to kill him, she'd come here \nto die. The others would manage somehow. But if she survived this night, a lot of people would die - some innocent, \nsome undeserving of death. If God didn't want that, now was the time to stop her. She put the muzzle to her own \nmouth and, as her former-boss looked on - stunned and aghast, she pulled the trigger.... and was still alive. \nDeep down, at that moment, she swore she could hear reality around her itself chuckle softly. Well, if \nthat's what God desired, who was she to deny Him. She would do what she did best, and would mourn every single time, \nbut then do it again. After the resolve sank in, she turned to her former boss, still crouched in a corner - eyes \nbetraying pure terror - as she emptied the other five bullets in his brain.<br/>\nWith that done, she went to find her brother, her iron mask cracking as she tried to imagine the look of horror\nthat would paint his face from living a year in this hell alone. But she was wrong. Her brother, while a bit wiser \nand hardened now, looked as pure and optimistic as the day she'd left him. That moment she realized her brother held\non to something she'd just killed in herself a few moments ago. Hope. Hope for a better future even while standing \nin utter darkness. And the courage to act for it, despite all odds. Standing there she could feel him shine so bright\nthat she actually squinted her eyes. And that's where she found her purpose, she would stalk the darkness and deal \nwith threats and obstacles there while her brother sought the light.\n<h5>Against the troupe</h5>\nThe years that followed did see life change for them all. Lemuen who'd been paralyzed below her waist was recovering \nunder the patient care of Fiest and continued to train Shimarin in the art of sniping. Shimarin chose to become part\nof a crew to persue bigger contracts, however that ended when \n${o.linkNpc(n.NpcId.Verrader,"one member of the crew")} betrayed the others for personal gain,\nonly to find he himself had been deluded by their 'fixer' - what resulted, therefore, was all of them drowing in \nmagma, except Shimarin, who was covering them from a distance. Of the rest of the crew, only the traitor survived, \ngaining nightblood at exactly that point. This was something Shimarin learnt much later though, however she never \nagain would work in a crew. During this time Mostima had started to go missing for large amounts of time, and only \nto her sister would she confide the details of her 'journeys'. Shimarin couldn't help but notice that her mood had \nstablised and improved considerably, and she seemed to have gained expertise in time magic after her frequent \ntravels - though she didn't pry into more details. A few years later, Lemuen to passed away from her nightblood \nleading to great loss of morale in the bunker. Yet Mostima had done something before the death, and Rin \ncould feel something was off, the death 'felt' unlike the others she'd seen. A few years after her \ndeath, they were joined by a tiefling, who remained in hiding from the demons in the castle. The kindest person \nthey'd ever met, he had taken a liking to her, despite herself. As life looked a bit better, in the years to come, \nshe took many high profile contracts - and didn't ask questions. Some even came from almost mythic figures - like\nonce when the troupe ${o.linkNpc(n.NpcId.Mouthpiece,"Mouthpiece")} himself asked her to kill a certain Vulpine soul weaver. <br/>   \nIn all her missions\nshe always followed one unsaid rule - after killing the target, she could also kill any one person near them of her \nchoice. That prevented her from being a mere pawn, a mere tool - and drove away a lot of petty schemers from her who\nregarded her as too much of a wildcard while attracting clients who wanted people dead for personal reasons but\nweren't strong enough to challenge them. For around such people, it was unlikely she'd want to kill a passer-by. \nThese were the clients she favoured, for their targets were almost always people the world was better off without.\nUnfortunately, this tradition of hers backfired badly one day - she was told by the mouthpiece that a group of people might \nbe coming from the gardens, and may be accompanied by some members of the troupe. If a drow priestess was among them,\nshe was to die. She did die, yet Rin found another drow - probably still a teenager, with them. A member of the \ntroupe, having failed a mission - Rin didn't envy her and wasn't surprised when she asked her captors to kill her. \nOf course, they refused, but then they didn't know the castle, didn't know the troupe, the mouthpiece. Better by her \nbullet then at their hands, better in Preservation than in Ruin, she thought, as she fired again. And so, her last \nthoughts were of peace, of being re-assured by the hulking barbarian. She didn't even know when she died. Enviable, \nRin thought coldly, as she packed up and went back home. What she didn't know was that she had disrupted one of the \nmajor schemes of the troupe and triggered of a cycle of vendetta's and mutual destruction.<br/>\nThe next day, the demons had captured the tiefling - and planned to burn him in a pyre of hellfire for some made up\ncrimes. Given how stupid demons at this level were, Rin had no doubt they had been assisted, and little doubt as to \nby whom. Well, she was not stupid enough to go into an execution ground, but she wouldn't let him suffer in hellfire. \nStrangely enough, and almost as a mockery, she'd also got another assassination contract from the troupe - a junior\nhad delivered it this time - that she was to assassinate the executioner. But then something changed all the plans \n- the same group of adventurers (she'd helped them earlier that day), had taken it upon themselves to resuce the guy.\nShe was excited, and for once in a very long time dared to hope as she covered them as they escaped. Sadly, the \ncastle was not a place where hope can live, and with a deep horror, she realized that the party was cornered - and \nby none other than ${o.linkNpc(n.NpcId.Baphomet,"Baphomet")} himself. There was no way out of this, and so she did what she had planned before, and\nput a bullet into her friend. Something which, by the tears in his eyes, he knew was coming.<br/>\nAfter that, she decided to bite back at the troupe by taking out their most valuable piece, someone she knew they \nhad big plans for - ${o.linkNpc(n.NpcId.Lucian,"The Solitaire")}. Things didn't go as planned however,\nand instead she ended up in the fortress of the inquisitors, gaining an Atium spike and a Steel spike powered by \nVerrader's soul followed by heading right past midnight into a showdown that involved more myths and legends than \nshe could even dream of - all the Guardians with Preservation himself in the mists, eight senior inquisitors moved\nby Ruin himself (who was also moving her - despite her best efforts), \n${o.linkNpc(n.NpcId.LogosPlaywright,"The Playwright")} and the Mouthpiece and lastly \n${o.linkNpc(n.NpcId.Sanguinarch,"The SanguineArch")} along with two other higher vampires. Finally, \nthere was one other - a single Honorspren who stood next to her, waiting, and had gone unnoticed by all...  \n`;t.setupCharacterCards=function(){var e,t,a,h,p,m,u,g,f,v,w,y,I,S,b,_,k,D,P,E,A,C,T,M,N,R,x,$,L,H,O,G,B,V,F,U,W,z,j,K,Y,J,q,X,Z,Q,ee,te,ae,ne,ie,se,oe,re,le;new o({id:n.NpcId.Lucian,name:"Lucian",tokenName:"lucian_norm",arc:1,campaign:1,age:210,gender:"M",tags:["From | Ruin","Allegiance | Ruin / ???","Race | Feline",`Class | ${i.Card.verbose("Echo Knight")} Fighter`,`Class | ${i.Card.verbose("Assassin")} Rogue`,`Class | ${i.Card.verbose("Hexblade")} Warlock`,"Nightblood | Ominous Melody",`Aberrant-Fused ${i.Card.verbose("(Tragodia)")}`,"<i>He who quiets</i>","CR | 19"],summary:null!==(e=r.get("Lucian"))&&void 0!==e?e:"???",description:"",altImagePaths:new Map([["Phantom","lucian_norm"],["Solitaire","lucian_mad"]])}),new o({id:n.NpcId.Ebenezar,name:"Ebenezar",tokenName:"ebenezar",campaign:1,arc:1,age:750,gender:"M",tags:["From | Materia / Preservation / Ruin","Race | Human",`Class | ${i.Card.verbose("Divination")} Wizard`,"Lich","Deceased","Scholar","CR | 22"],summary:null!==(t=r.get("Ebenezar"))&&void 0!==t?t:"???",description:""}),new o({id:n.NpcId.Caelynn,name:"Caelynn Nightbreeze",tokenName:"caelynn",arc:1,campaign:1,age:4560,gender:"F",tags:["From | Materia / Preservation","Allegiance | Preservation","Race | Half-Elf",`Class | Druid ${i.Card.verbose("(Circle of Dreams)")}`,"Guardian of Life","Watcher","Atium Savant","CR | 25"],summary:null!==(a=r.get("Caelynn"))&&void 0!==a?a:"???",description:l,personalityTags:new Map([[s.Industrious,4],[s.Confident,3],[s.Outdoorsman,3],[s.Kind,2],[s.Optimist,2],[s.Ascetic,2],[s.Stern,1],[s.Abrasive,1],[s.Bisexual,1]])}),new o({name:"Lesley Aeternus",id:n.NpcId.Lesley,tokenName:"lesley",campaign:1,arc:1,age:2860,gender:"F",tags:["From | Shadowfell / Materia / Preservation","Allegiance | Preservation","Race | Higher Vampire","Time Command",`Class | ${i.Card.verbose("Chronurgy")} Wizard`,`Class | ${i.Card.verbose("Knowledge")} Cleric`,"Projector","CR | 18 / 24"],summary:null!==(h=r.get("Lesley"))&&void 0!==h?h:"???",description:d,personalityTags:new Map([[s["Recovering Addict"],5],[s.Bibliophile,3],[s.Recluse,3],[s.Lazy,2],[s.Depressive,1],[s["Guilt-ridden"],1],[s.Introvert,1]])}),new o({id:n.NpcId.Irene,name:"Irene",tokenName:"irene",campaign:1,arc:1,age:1390,gender:"F",tags:["From | Air / Water / Preservation","Allegiance | Preservation","Race | Air Genasi",`Class | ${i.Card.verbose("Gunslinger")} Fighter`,`Class | ${i.Card.verbose("Storm")} Sorcerer`,`Class | ${i.Card.verbose("Tempest")} Cleric`,"Inquisitor","CR | 14"],summary:null!==(p=r.get("Irene"))&&void 0!==p?p:"???",description:""}),new o({id:n.NpcId.Ling,name:"Ling",tokenName:"ling_garden",campaign:1,arc:1,age:"",gender:"F",tags:["From | ??? / Preservation",`Race | Titan ${i.Card.verbose("&times; Blue Dragon")}`,`Class | ${i.Card.verbose("Draconic")} Sorcerer`,`<span>Primordial | Outsider ${i.Card.verbose("(3<sup>rd</sup> Fragment of Sui)")}</span>`,"Guardian of Diplomacy","Lighthouse Keeper","CR | 19 / 27"],summary:null!==(m=r.get("Ling"))&&void 0!==m?m:"???",description:"",altImagePaths:new Map([["Lighthouse Keeper","ling_garden"],["Shrine Maiden","ling_sui"]])}),new o({name:"Dave Ruhl",id:n.NpcId.DaveRuhl,tokenName:"dave",campaign:1,arc:1,age:2500,gender:"M",tags:["From | Innovation / Preservation","Race | Warforged",`Class | ${i.Card.verbose("Samurai")} Fighter`,"Defender","Deceased","CR | 13"],summary:null!==(u=r.get("Dave"))&&void 0!==u?u:"???",description:""}),new o({name:"Ulrich Mistcloak",id:n.NpcId.Ulrich,tokenName:"ulrich",campaign:1,arc:1,age:1020,gender:"M",tags:["From | Materia / Preservation","Race | Human",`Class | ${i.Card.verbose("Forge")} Cleric`,"Scholar","CR | 7"],summary:null!==(g=r.get("Ulrich"))&&void 0!==g?g:"???",description:""}),new o({name:"Lia Mistcloak",id:n.NpcId.Lia,tokenName:"lia",campaign:1,arc:1,age:1280,gender:"F",tags:["From | Feywild / Preservation","Allegiance | Preservation","Race | Elf",`Class | ${i.Card.verbose("Samurai")} Fighter`,"Watcher","CR | 9"],summary:null!==(f=r.get("Lia"))&&void 0!==f?f:"???",description:""}),new o({id:n.NpcId.Conley,name:"Conley",tokenName:"conley",campaign:1,arc:1,age:210,gender:"M",tags:["From | Fire / Preservation","Race | Fire Genasi",`Class | ${i.Card.verbose("Eloquence")} Bard`,"Negotiator","CR | 7"],summary:null!==(v=r.get("Conley"))&&void 0!==v?v:"???",description:""}),new o({name:"Vahareth Tsav Anat",id:n.NpcId.Vahareth,tokenName:"g_life",campaign:1,arc:1,age:"50K+",gender:"M",tags:["From | Materia / Preservation","Allegiance | Preservation","Race | Kalashtar","Class | Druid","Guardian of Life","Inspector","'Retired'","CR | 26"],summary:null!==(w=r.get("Vahareth"))&&void 0!==w?w:"???",description:""}),new o({name:"The Guardian of Order",id:n.NpcId.GOrder,tokenName:"g_order",campaign:1,arc:1,age:"50K+",gender:"M",tags:["From | Shadowfell / Preservation","Allegiance | Preservation","Race | Shadar-Kai",`Class | ${i.Card.verbose("Hexblade")} Warlock`,`Class | ${i.Card.verbose("Devotion")} Paladin`,"Guardian of Order","Inquisitor","Deceased","CR | 26"],summary:null!==(y=r.get("GOrder"))&&void 0!==y?y:"???",description:""}),new o({name:"The Playwright",id:n.NpcId.LogosPlaywright,tokenName:"logos_normal",campaign:1,arc:2,age:"50K+",gender:"M",tags:["From | Ruin","Race | Banshee (Demon)","Greater Demon Lord","Domain | 01:40 to 01:56",`Aberrant-Fused ${i.Card.verbose("(Tragodia)")}`,"CR | 30"],summary:null!==(I=r.get("Logos"))&&void 0!==I?I:"???",description:"",altImagePaths:new Map([["Youthful Writer","logos_normal"],["Ancient Lord","logos_banshee"]])}),new o({id:n.NpcId.Mostima,name:"Mostima",tokenName:"mostima",campaign:1,arc:2,age:152,gender:"F",tags:["Plane-hopper","From | Ruin","Race | Aasimar &times; Tiefling",`Class | ${i.Card.verbose("Clockwork Soul")} Sor-lock`,`Class | ${i.Card.verbose("Chronurgy")} Wizard`,"Nightblood | Shattered Time","'Fallen Saintess'","CR | 15 / 25"],summary:null!==(S=r.get("Mostima"))&&void 0!==S?S:"???",description:"",altImagePaths:new Map([["Messenger","mostima"],["Saintess","mostima_saint"]])}),new o({id:n.NpcId.Shimaken,name:"Ken Shima",tokenName:"shimaken",campaign:1,arc:2,age:72,gender:"M",tags:["Deceased","From | Ruin","Allegiance | Preservation","Race | Human",`Class | ${i.Card.verbose("Battlemaster")} Fighter`,`Class | ${i.Card.verbose("Bondsmith")} Paladin`,"Lerasium Savant","CR | ?"],summary:null!==(b=r.get("Shimaken"))&&void 0!==b?b:"???",description:"",altImagePaths:new Map([["Rebel","shimaken"],["Radiant","shimaken_uber"]])}),new o({id:n.NpcId.Shimarin,name:"Rin Shima",tokenName:"shimarin",campaign:1,arc:2,age:81,gender:"F",tags:["Deceased","From | Ruin","Allegiance | Ruin / Preservation","Race | Human",`Class | ${i.Card.verbose("Assassin")} Rogue`,`Class | ${i.Card.verbose("Gunslinger")} Fighter`,"CR | 13"],summary:null!==(_=r.get("Shimarin"))&&void 0!==_?_:"???",description:c,personalityTags:new Map([[s.Confident,3],[s.Bloodlust,3],[s.Pessimist,2],[s.Quiet,2],[s.Ascetic,2],[s.Stern,1],[s.Kind,1]])}),new o({id:n.NpcId.Verrader,name:"Verrader",tokenName:"verrader",campaign:1,arc:2,age:31,gender:"M",tags:["Deceased","From | Ruin","Race | Human",`Class | ${i.Card.verbose("Eloquence")} Bard`,`Class | ${i.Card.verbose("Elemental Bloodline")} Sorcerer`,"Nightblood | Magma","Zinc Savant","Copper Savant","CR | 10"],summary:null!==(k=r.get("Verrader"))&&void 0!==k?k:"???",description:""}),new o({id:n.NpcId.Fiest,name:"Fiest",tokenName:"fiest",campaign:1,arc:2,age:80,gender:"M",tags:["Deceased","From | Ruin","Race | Human","Class | Artificer","CR | 9"],summary:null!==(D=r.get("Fiest"))&&void 0!==D?D:"???",description:""}),new o({id:n.NpcId.Mouthpiece,name:"Mouthpiece",tokenName:"ahrendts",campaign:1,arc:2,age:"",gender:"M",tags:["Deceased","From | Materia / Shadowfell / Ruin","Allegiance | Ruin &times; Outsiders",`Race | Titan ${i.Card.verbose("&times; Aberration")}`,`Primordial | Outsider ${i.Card.verbose("(Curse)")}`,"CR | 23"],summary:null!==(P=r.get("Mouthpiece"))&&void 0!==P?P:"???",description:""}),new o({id:n.NpcId.Sanguinarch,name:"The SanguineArch",tokenName:"sarch_m",campaign:1,arc:2,age:"",gender:"-",tags:["From | Shadowfell",`Race | Titan ${i.Card.verbose("&times; Vampire")}`,"Primordial | Shardic","The Original","Life Command","CR | 29"],summary:null!==(E=r.get("SanguineArch"))&&void 0!==E?E:"???",description:"",altImagePaths:new Map([["Male","sarch_m"],["Female","sarch_f"]])}),new o({id:n.NpcId.DecroaSal,name:"Decroa Sal",tokenName:"decroa",campaign:1,arc:2,age:"2620",gender:"F",tags:["From | Shadowfell","Race | Higher Vampire","Crystal Command","CR | 23"],summary:null!==(A=r.get("Decroa"))&&void 0!==A?A:"???",description:""}),new o({id:n.NpcId.Baphomet,name:"Baphomet",tokenName:"baphomet",campaign:1,arc:2,age:"20K+",gender:"M",tags:["From | Ruin","Race | Demon","Demon Lord","Domain | 20:00 to 21:00","CR | 23"],summary:null!==(C=r.get("Baphomet"))&&void 0!==C?C:"???",description:""}),new o({name:"Kjeragandr",id:n.NpcId.Kjerra,tokenName:"g_mag_stone",campaign:1,arc:2,age:"",gender:"F",tags:["From | Stone / Preservation",`Race | Titan ${i.Card.verbose("&times; Serpentine")}`,`Class | Spellcaster ${i.Card.verbose("(All)")}`,"Primordial | Shardic","Guardian of Magic","Atium Savant","CR | 30"],summary:null!==(T=r.get("Kjera"))&&void 0!==T?T:"???",description:"",altImagePaths:new Map([["Lithic","g_mag_stone"],["Humanoid","g_mag_human"]])}),new o({id:n.NpcId.GDef,name:"The Guardian of Defense",tokenName:"g_def",campaign:1,arc:2,age:"40K+",gender:"-",tags:["From | Innovation / Preservation","Allegiance | Preservation","Race | Warforged &times; Aasimar","Class | Fighter","Guardian of Defense","Atium Savant","'Saint'","CR | 27"],summary:null!==(M=r.get("GDef"))&&void 0!==M?M:"???",description:""}),new o({name:"Othello The Traitor",id:n.NpcId.TraitorOthello,tokenName:"othello",campaign:1,arc:2,age:"5020",gender:"M",tags:["From | Materia / Preservation / Ruin","Allegiance | Preservation (?)","Race | Human","Class | Fighter","Class | Barbarian","Class | Paladin","Apprentice Guardian of Defense","<i>Bearer of Agonies</i>","CR | 20"],summary:null!==(N=r.get("Othello"))&&void 0!==N?N:"???",description:""}),new o({id:n.NpcId.Mandy,name:"Mandragora",tokenName:"mandy",campaign:1,arc:2,age:"16",gender:"F",tags:["From | Materia / Ruin","Race | Ursine","Nightblood | Stoneward","CR | 16"],summary:null!==(R=r.get("Mandy"))&&void 0!==R?R:"???",description:""}),new o({id:n.NpcId.Gen,name:"Gen",tokenName:"gen",campaign:1,arc:2,age:"69",gender:"M",tags:["From | Materia / Ruin / Devotion","Race | Human",`Class | ${i.Card.verbose("Illusion")} Wizard`,"Class | Artificer","CR | 17"],summary:null!==(x=r.get("Gen"))&&void 0!==x?x:"???",description:"",altImagePaths:new Map([["child","gen"]])}),new o({id:n.NpcId.Mumu,name:"Muelsyse",tokenName:"muelsyse",campaign:1,arc:2,age:"343",gender:"F",tags:["From | Water / Innovation","Race | High-Elf","Class | Artificer","Director of ??? at ???","CR | 25"],summary:null!==($=r.get("Muelsyse"))&&void 0!==$?$:"???",description:""}),new o({id:n.NpcId.Shamare,name:"Shamare",tokenName:"shamare",campaign:1,arc:2,age:"71",gender:"F",tags:["From | Ruin","Race | Vulpine","Warlock","Nightblood | Voodoo","Soul Weaver","CR | 12"],summary:null!==(L=r.get("Shamare"))&&void 0!==L?L:"???",description:""}),new o({id:n.NpcId.Amaia,name:"Amaia",tokenName:"amaia",campaign:1,arc:2,age:"",gender:"-",tags:["Deceased (Merged)","From | Materia / Water","Race | Human","Aberrant-fused","Core of the Many","CR | ?"],summary:null!==(H=r.get("Amaia"))&&void 0!==H?H:"???",description:""}),new o({id:n.NpcId.Lemuen,name:"Lemuen",tokenName:"lemuen",campaign:1,arc:2,age:"124",gender:"F",tags:["Deceased","From | Ruin","Race | Aasimar",`Class | ${i.Card.verbose("Gunslinger")} Fighter`,`Class | ${i.Card.verbose("Assassin")} Rogue`,"'Saintess'","Nightblood | Neural Link","CR | 14"],summary:null!==(O=r.get("Lemuen"))&&void 0!==O?O:"???",description:""}),new o({name:"Eugrud the Vanquisher",id:n.NpcId.Eugrud,tokenName:"eugrud",campaign:1,arc:2,age:"133",gender:"M",tags:["From | Ruin","Race | Orc",`Class | ${i.Card.verbose("Champion")} Fighter`,"Class | Barbarian","Pewter Savant","CR | 8"],summary:null!==(G=r.get("Eugrud"))&&void 0!==G?G:"???",description:""}),new o({name:"Andoain 'The Martyr'",id:n.NpcId.Andoain,tokenName:"Andoain",campaign:2,arc:1,age:"221",gender:"M",tags:["From | ? / Materia","Race | Aasimar",`Class | ${i.Card.verbose("Gunslinger")} Fighter`,`Class | ${i.Card.verbose("Hexblade")} Warlock`,`Class | ${i.Card.verbose("War")} Cleric`,"'Saint'","CR | 21"],summary:null!==(B=r.get("Andoain"))&&void 0!==B?B:"???",description:""}),new o({id:n.NpcId.Andri,name:"Andri",tokenName:"Andri",campaign:2,arc:1,age:37,gender:"M",tags:[],summary:null!==(V=r.get("Andri"))&&void 0!==V?V:"???",description:""}),new o({id:n.NpcId.Athlon,name:"Athlon",tokenName:"Athlon",campaign:2,arc:1,age:58,gender:"M",tags:[],summary:null!==(F=r.get("Athlon"))&&void 0!==F?F:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Bjorn,name:"Bjorn",tokenName:"Bjorn",campaign:2,arc:1,age:35,gender:"M",tags:[],summary:null!==(U=r.get("Bjorn"))&&void 0!==U?U:"???",description:""}),new o({id:n.NpcId.Cecelia,name:"Cecilia",tokenName:"Cecilia",campaign:2,arc:1,age:11,gender:"F",tags:[],summary:null!==(W=r.get("Cecilia"))&&void 0!==W?W:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Coroto,name:"Coroto",tokenName:"Coroto",campaign:2,arc:1,age:54,gender:"M",tags:[],summary:null!==(z=r.get("Coroto"))&&void 0!==z?z:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Elysium,name:"Elysium",tokenName:"Elysium",campaign:2,arc:1,age:33,gender:"M",tags:[],summary:null!==(j=r.get("Elysium"))&&void 0!==j?j:"???",description:""}),new o({id:n.NpcId.Erica,name:"Erica",tokenName:"Erica",campaign:2,arc:1,age:50,gender:"F",tags:[],summary:null!==(K=r.get("Erica"))&&void 0!==K?K:"???",description:""}),new o({id:n.NpcId.Genefe,name:"Genefe",tokenName:"Genefe",campaign:2,arc:1,age:28,gender:"F",tags:[],summary:null!==(Y=r.get("Genefe"))&&void 0!==Y?Y:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Hav,name:"Hav",tokenName:"Hav",campaign:2,arc:1,age:47,gender:"M",tags:[],summary:null!==(J=r.get("Hav"))&&void 0!==J?J:"???",description:""}),new o({id:n.NpcId.Ingrid,name:"Ingrid",tokenName:"Ingrid",campaign:2,arc:1,age:24,gender:"F",tags:[],summary:null!==(q=r.get("Ingrid"))&&void 0!==q?q:"???",description:""}),new o({id:n.NpcId.Iona,name:"Iona",tokenName:"Iona",campaign:2,arc:1,age:13,gender:"F",tags:[],summary:null!==(X=r.get("Iona"))&&void 0!==X?X:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Jordi,name:"Jordi",tokenName:"Jordi",campaign:2,arc:1,age:23,gender:"M",tags:[],summary:null!==(Z=r.get("Jordi"))&&void 0!==Z?Z:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Kastor,name:"Kastor",tokenName:"Kastor",campaign:2,arc:1,age:26,gender:"M",tags:[],summary:null!==(Q=r.get("Kastor"))&&void 0!==Q?Q:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Petra,name:"Petra",tokenName:"Petra",campaign:2,arc:1,age:84,gender:"F",tags:[],summary:null!==(ee=r.get("Petra"))&&void 0!==ee?ee:"???",description:""}),new o({id:n.NpcId.Roberta,name:"Roberta",tokenName:"Roberta",campaign:2,arc:1,age:25,gender:"F",tags:[],summary:null!==(te=r.get("Roberta"))&&void 0!==te?te:"???",description:""}),new o({id:n.NpcId.Sasha,name:"Sasha",tokenName:"Sasha",campaign:2,arc:1,age:13,gender:"M",tags:[],summary:null!==(ae=r.get("Sasha"))&&void 0!==ae?ae:"???",description:""}),new o({id:n.NpcId.Sybilla,name:"Sybilla",tokenName:"Sybilla",campaign:2,arc:1,age:34,gender:"F",tags:[],summary:null!==(ne=r.get("Sybilla"))&&void 0!==ne?ne:"???",description:""}),new o({id:n.NpcId.Tomasa,name:"Tomasa",tokenName:"Tomasa",campaign:2,arc:1,age:27,gender:"F",tags:[],summary:null!==(ie=r.get("Tomasa"))&&void 0!==ie?ie:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Verna,name:"Verna",tokenName:"Verna",campaign:2,arc:1,age:24,gender:"F",tags:[],summary:null!==(se=r.get("Verna"))&&void 0!==se?se:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Vitacia,name:"Vitacia",tokenName:"Vitacia",campaign:2,arc:1,age:25,gender:"F",tags:[],summary:null!==(oe=r.get("Vitacia"))&&void 0!==oe?oe:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Yuki,name:"Yuki",tokenName:"Yuki",campaign:2,arc:1,age:27,gender:"M",tags:[],summary:null!==(re=r.get("Yuki"))&&void 0!==re?re:"???",description:"",personalityTags:new Map([])}),new o({id:n.NpcId.Ezell,name:"Ezell Pastore",tokenName:"Ezell",campaign:2,arc:1,age:22,gender:"M",tags:[],summary:null!==(le=r.get("Ezell"))&&void 0!==le?le:"???",description:"",personalityTags:new Map([])})}},7264:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.setupCountries=void 0,function(e){e[e["Ghost Town"]=0]="Ghost Town",e[e.Ruins=1]="Ruins",e[e.Undefended=2]="Undefended",e[e.Open=3]="Open",e[e.Walled=4]="Walled",e[e.Fortified=5]="Fortified",e[e.Impregnable=6]="Impregnable",e[e.Sprawling=7]="Sprawling",e[e.Organized=8]="Organized",e[e["Space Crunch"]=9]="Space Crunch",e[e.Cluttered=10]="Cluttered",e[e["Merchant Guilds"]=11]="Merchant Guilds",e[e["Central Market"]=12]="Central Market",e[e["Commercial Hub"]=13]="Commercial Hub",e[e["Trade Hotspot"]=14]="Trade Hotspot",e[e["Academic Focus"]=15]="Academic Focus",e[e["Research Centre"]=16]="Research Centre",e[e["Craftsman's Guilds"]=17]="Craftsman's Guilds",e[e["Industrial Zone"]=18]="Industrial Zone",e[e["Mining Ops"]=19]="Mining Ops",e[e["Mafia Control"]=20]="Mafia Control",e[e.Lawless=21]="Lawless",e[e["Efficient Police"]=22]="Efficient Police",e[e["Military Curfew"]=23]="Military Curfew",e[e.Unhygienic=24]="Unhygienic",e[e["Sewage System"]=25]="Sewage System",e[e["Fresh Water"]=26]="Fresh Water",e[e["Performing Artists"]=27]="Performing Artists",e[e["Cultural Hub"]=28]="Cultural Hub",e[e["Tourist Hotspot"]=29]="Tourist Hotspot",e[e.Slums=30]="Slums",e[e.Underground=31]="Underground",e[e.Underworld=32]="Underworld",e[e["Organized Crime"]=33]="Organized Crime",e[e.Harbor=34]="Harbor",e[e.Seaport=35]="Seaport",e[e.Greens=36]="Greens",e[e["Entertainment Infra"]=37]="Entertainment Infra",e[e["Medical Infra"]=38]="Medical Infra",e[e.Charming=39]="Charming",e[e.Breathtaking=40]="Breathtaking",e[e["Mage Presence"]=41]="Mage Presence",e[e["Holy Sites"]=42]="Holy Sites"}(a||(a={}));class n{constructor(e){if(this.$myName=null,this.$myDesc=null,null===n.$countryNames)throw new Error("Static elements not loaded");if(this.planet=e.planet,this.name=e.name,this.fullName=e.fullName,this.capital=e.capital,this.leader=e.leader,this.government=e.government,this.population=e.population,this.primaryCulture=e.primaryCulture,this.area=e.area,this.capitalPopulation=e.capitalPopulation,this.capitalTemperature=e.capitalTemperature,this.capitalElevation=e.capitalElevation,this.races=e.races,this.exoticRaces=e.exoticRaces,this.exclusiveRaces=e.exclusiveRaces,this.description=e.description,this.tags=e.tags,this.capitalTags=e.capitalTags,this.capitalSummary=e.capitalSummary,this.leaderDescription=e.leaderDescription,this.index=`${this.planet}|${this.name}`,n.countriesIndex.has(this.index))throw new Error("Duplicate country");n.countriesIndex.set(this.index,this),this.$myName=$(`<div class='country_name' data-index-key='${this.index}'>${this.name}</div>`),this.$myName.appendTo(n.$countryNames),this.$myDesc=this.generateDOM(),this.$myDesc.hide().appendTo(n.$countryDesc)}static loadStaticElements(){this.$countryNames=$(".country_names"),this.$countryDesc=$(".country_desc"),this.$countryNames.on("click",".country_name:not(.active)",(function(){const e=$(this).data("indexKey");n.countriesIndex.get(e).showCountry()}))}showCountry(){n.$countryDesc.children().hide(),n.$countryNames.children().removeClass("active"),this.$myName.addClass("active"),this.$myDesc.show()}generateDOM(){return $(`\n        <div class="country">\n            <div class="country_data country_card">\n                 <h5>Country</h5>\n                 <table>\n                    <tbody>\n                        <tr><td>Planet</td><td>${this.planet}</td></tr>\n                        <tr><td>Name</td><td>${this.fullName}</td></tr>\n                        <tr><td>Area</td><td>${this.area}K km<sup>2</sup></td></tr>\n                        <tr><td>Population</td><td>${this.population}</td></tr>\n                        <tr><td>Government</td><td>${this.government}</td></tr>\n                        <tr><td>Culture</td><td>${this.primaryCulture}</td></tr>\n                    </tbody>\n                </table>\n                <div class="tags">${this.tags.map((e=>`<span class="tag">${e}</span>`)).join("")}</div>\n            </div>\n            <div class="capital_data country_card">\n                <h5>Capital</h5>\n                <table>\n                    <tbody>\n                        <tr><td>Name</td><td>${this.capital}</td></tr>\n                        <tr><td>Population</td><td>${this.capitalPopulation}</td></tr>\n                        <tr><td>Elevation</td><td>${this.capitalElevation}</td></tr>\n                        <tr><td>Temperature</td><td>${this.capitalTemperature}</td></tr>\n                    </tbody>\n                </table>\n                <div class="tags">${Array.from(this.capitalTags,(([e,t])=>`<span class="tag leveled t${t}">${a[e]}</span>`)).join("")}\n                </div>\n            </div>\n            <div class="leader_data country_card">\n                <h5>Leader</h5>\n                <table>\n                    <tbody>\n                        <tr><td>Name</td><td>${this.leader?this.leader:"None"} \n                    </tbody>\n                </table>\n                <div class="card_info">${this.leaderDescription}</div>\n            </div>\n            <div class="desc">\n                ${this.description}\n                <h5>About the Capital</h5>\n                <div class="capital_info">${this.capitalSummary}</div>\n                <h5>Racial Spread</h5>\n                <div class="racial_info">\n                    <div>Mainly inhabited by ${this.races.size>0?Array.from(this.races,(([e,t])=>`${e} (${Math.round(100*t)/100}%)`)).join(", "):"?"}.</div>\n                    ${Array.isArray(this.exoticRaces)&&this.exoticRaces.length?`<div>${this.exoticRaces.join(", ")} can notably be found here.</div>`:""}\n                    ${Array.isArray(this.exclusiveRaces)&&this.exclusiveRaces.length?`<div>${this.exclusiveRaces.join(", ")} only come from here.</div>`:""}\n                </div>\n            </div>\n        </div>`)}}n.countriesIndex=new Map,n.$countryNames=null,n.$countryDesc=null,t.setupCountries=function(){n.loadStaticElements(),new n({planet:"Terra Prima",name:"Veteres",fullName:"Regnum Veteres",capital:"Ortus",area:106,population:"2.6M",government:"Emperor / Senate",primaryCulture:"Roma",leader:"Rex Augustus IV",tags:[],races:new Map([["Humans",60.8],["Half-Elves",30.5],["Elves",8.7]]),exoticRaces:["Aasimars","Eladrin","Vampires"],exclusiveRaces:[],capitalPopulation:"218K",capitalElevation:"4.2m",capitalTemperature:"8&#8451;",capitalTags:new Map([[a.Organized,6],[a["Sewage System"],6],[a["Tourist Hotspot"],5],[a["Entertainment Infra"],5],[a["Trade Hotspot"],4],[a.Seaport,4],[a["Fresh Water"],4],[a.Sprawling,3],[a["Efficient Police"],3],[a.Charming,3],[a["Academic Focus"],3],[a["Craftsman's Guilds"],2],[a.Walled,2],[a.Greens,2],[a["Medical Infra"],1],[a.Slums,1]]),capitalSummary:"\n                The city where modern civilization is began following the darkness. A city that has seen all. Earliest remaining \n                written records of all sentient races and cultures can be traced here. For a long time, this was the \n                capital of an empire that sprawled the world, and even now remains the single most important city of all.\n                What secrets do its archives hold?",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Rycerz",fullName:"Holy Empire of Rycerz",capital:"Kiragg",area:114,population:"6.9M",government:"Feudal Empire",primaryCulture:"Pegaz",leader:"Sir Enciodas Silverash",tags:[],races:new Map([["Humans",56],["Shifters[Equines]",25],["Half-Orcs",10],["DragonBorn",3],["Dwarves",3],["Half-Elves",2],["Elves",1]]),exoticRaces:["Orcs","Earth Genasi"],exclusiveRaces:["Centaurs"],capitalPopulation:"307K",capitalElevation:"5480m",capitalTemperature:"-24&#8451;",capitalTags:new Map([[a.Impregnable,6],[a.Breathtaking,6],[a["Holy Sites"],5],[a["Mining Ops"],4],[a.Organized,3],[a["Fresh Water"],3],[a["Sewage System"],3],[a["Industrial Zone"],3],[a["Mage Presence"],3],[a["Space Crunch"],2],[a["Tourist Hotspot"],2],[a["Research Centre"],2],[a["Organized Crime"],2],[a["Efficient Police"],1],[a["Medical Infra"],1],[a.Underground,1]]),capitalSummary:"\n                Rumoured to have been made by a Goddess, this city, 'purchased' by Rycerz in the times past, is a vast \n                cave system within one of the worlds topmost peaks. Other than rather low atmospheric pressure, the\n                caves, beyond all reason, are perfect for life. Hot springs provide fresh water and maintain temperature\n                while certain bluish crystals provide light strangely like that of the sun.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Ursus",fullName:"Eternal Tsardom of Ursus",capital:"Ivangrad",area:241,population:"3.1M",government:"Tsardom",primaryCulture:"Rus",leader:"Tsar Ivanovich Kashchey",tags:[],races:new Map([["Humans",60],["Shifters[Ursine]",36],["Dwarves",2],["Tieflings",1],["DragonBorn",1]]),exoticRaces:["Goliaths","Demons","Minotaurs","Hobgoblins","Yuan-ti"],exclusiveRaces:["Bugbears"],capitalPopulation:"121K",capitalElevation:"202m",capitalTemperature:"-3&#8451;",capitalTags:new Map([[a["Military Curfew"],6],[a["Organized Crime"],4],[a.Underworld,4],[a["Fresh Water"],3],[a["Academic Focus"],3],[a["Mage Presence"],3],[a["Cultural Hub"],3],[a.Fortified,2],[a.Organized,2],[a["Sewage System"],1],[a.Greens,1],[a.Slums,1]]),capitalSummary:"\n                A dangerous city at the centre of a dangerous country. At its very centre sits a dynasty that predates \n                the very empire, rumoured to be the soul of Ursus itself. Military forces crush dissenters and criminals \n                alike with an iron hand. Right underneath their gazes crime lords operating throughout Terra flourish. \n                And yet, this tyranny is home to many a genius incomparable...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Farando",fullName:"Farando Shogunate",capital:"Setsujoku",area:68,population:"2.9M",government:"Shogunate",primaryCulture:"Minami",leader:"Meijin Souya",tags:[],races:new Map([["Humans",79],["Halflings",8],["Half-Elves",7],["Dwarves",4],["Elves",2]]),exoticRaces:["Tritons","Air genasi","Githyanki","Kenku","Tabaxi","Sea Elves","Oni"],exclusiveRaces:[],capitalPopulation:"284K",capitalElevation:"9.7m",capitalTemperature:"0&#8451;",capitalTags:new Map([[a.Fortified,5],[a["Mage Presence"],4],[a["Industrial Zone"],4],[a["Commercial Hub"],3],[a["Cultural Hub"],3],[a["Academic Focus"],3],[a["Efficient Police"],2],[a.Organized,2],[a.Charming,2],[a["Medical Infra"],2],[a["Holy Sites"],2],[a.Greens,2],[a["Mafia Control"],1],[a["Sewage System"],1],[a["Fresh Water"],1]]),capitalSummary:"\n                A city that would not die, there was a time when this one city was all that the now-mighty empire had. \n                With the land burning, barbarians at the gates, the first Meijin took command. His will became the city's\n                will - a will of survival, of vengeance. Countless generations have passed since then and the capital has\n                thrived in more ways than one, but even now the people here view the arrival of the mists with reverence...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Sadhvastan",fullName:"Sadhvarajya",capital:"Nagasyaranya",area:62,population:"3.2M",government:"Raj",primaryCulture:"Vedic",leader:"Raja Devavrata",tags:[],races:new Map([["Humans",55],["Shifters[Serpentine]",21],["Shifters[Feline]",15],["Yuan-ti",6],["Aarakocra",2],["Elves",1]]),exoticRaces:["Aasimars","Goblins","Harengon","Githyanki","Kenku","Tortles"],exclusiveRaces:["Loxodon","Githzerai","Leonin"],capitalPopulation:"165K",capitalElevation:"56m",capitalTemperature:"9&#8451;",capitalTags:new Map([[a.Breathtaking,5],[a["Holy Sites"],5],[a.Greens,4],[a["Mage Presence"],4],[a["Craftsman's Guilds"],3],[a["Central Market"],2],[a["Cultural Hub"],2],[a.Slums,2],[a.Open,2],[a["Academic Focus"],2],[a["Medical Infra"],1],[a.Cluttered,1],[a["Fresh Water"],1]]),capitalSummary:"\n                 A city that embodies the free, untamed spirit of the forest. In a world that rapidly changes, this \n                 remains the only mega-city where not a single piece of concrete or steel has gone into the infrastructure.\n                 Buried deep within inaccessible woods, every single building is made from trees, several still alive. \n                 Rumours are that a titanic serpent unseen to man guards and provides shelter to it till this date.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Stahlern",fullName:"Stahlern Imperium",capital:"Julsburg",area:93,population:"4.1M",government:"Reich",primaryCulture:"Hexenfurst",leader:"Kaiser Alexander Siegfried Von Lohengramm",tags:[],races:new Map([["Humans",85],["Dwarves",5],["Half-Elves",7],["Elves",2],["Gnomes",1]]),exoticRaces:["Deep Gnomes","Duergar","Drow","Earth Genasi"],exclusiveRaces:["Warforged"],capitalPopulation:"120K",capitalElevation:"28m",capitalTemperature:"3&#8451;",capitalTags:new Map([[a["Industrial Zone"],6],[a["Mining Ops"],6],[a.Seaport,5],[a["Trade Hotspot"],4],[a["Efficient Police"],4],[a["Academic Focus"],4],[a.Organized,3],[a["Sewage System"],3],[a["Medical Infra"],3],[a.Walled,2]]),capitalSummary:"\n                A heart of steel that pumps a lifeblood of coal and iron throughout the Imperium and outside and the\n                one of the only two places where a ton of copper is cheaper than a ton of apples. Massive factories \n                extract resources at an unbelievable rate, with highly organized industries consuming them to produce\n                components and machines with supernatural efficiency. An uber-efficient police denies any possibility\n                of crime in this steampunk city with their uncanny amount of intel.\n            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Naiyumi",fullName:"Most Serene Republic of Naiyumi",capital:"Gugong",area:117,population:"6.0M",government:"'Republic'",primaryCulture:"Yan",leader:"Captain Yang Wenli",tags:[],races:new Map([["Humans",67],["Halflings",13],["Gnomes",12],["HalfElves",5],["DragonBorn",2],["Elves",1]]),exoticRaces:["Satyr","Owlin","Lizardfolk","Tabaxi","Shifters","Changelings"],exclusiveRaces:[],capitalPopulation:"74K",capitalElevation:"4.2m",capitalTemperature:"22&#8451;",capitalTags:new Map([[a["Military Curfew"],5],[a.Breathtaking,5],[a["Tourist Hotspot"],4],[a.Fortified,3],[a["Academic Focus"],2],[a["Holy Sites"],2],[a.Greens,2],[a["Space Crunch"],1],[a.Cluttered,1]]),capitalSummary:"\n                Rumoured to be the most serene place on Terra and easily the one with the highest per-capita assets, \n                only the most influential or the most loyal of Naiyumi are allowed into this forbidden city. Historically,\n                leaders across generations have cocooned themselves in this secure paradise to shut themselves off to the \n                disturbing realities of the world outside. Word is, that under the current regime, this won't remain \n                capital for long.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Celatum",fullName:"United Provinces of Celatum",capital:"Emberston",area:109,population:"3.2M",government:"Kingdom / Serfdom",primaryCulture:"Neo-Anglo",leader:"Queen Argela",tags:[],races:new Map([["Humans",65],["DragonBorn",15],["Halflings",13],["Half-Orcs",4],["Gnomes",3]]),exoticRaces:["Changelings","Firbolgs","Harengons","Satyrs","Orcs","Vampires"],exclusiveRaces:[],capitalPopulation:"142K",capitalElevation:"40m",capitalTemperature:"0&#8451;",capitalTags:new Map([[a["Medical Infra"],6],[a["Holy Sites"],4],[a.Charming,4],[a["Academic Focus"],4],[a["Craftsman's Guilds"],3],[a["Central Market"],3],[a.Organized,2],[a["Cultural Hub"],2],[a["Entertainment Infra"],2],[a.Open,2],[a.Lawless,1]]),capitalSummary:"\n                A newly founded city by Queen Argela herself. This city has grown to mirror her philosophy and become the\n                greatest center of medical research on Terra. Healers and doctors from here are valued worldwide, for \n                this atmosphere of freedom and comfort along with the best standards of hygiene and beauty cultivates \n                the very best of them. However, for all its happiness, such unrestrained freedom does attract the \n                unscrupulous...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Aegir",fullName:"Duchy of Aegir",capital:"Eldfjalla (pron. Uld-Fia-Tla)",area:67,population:"2.4M",government:"Aristocracy / Matriarchy",primaryCulture:"Skaldic",leader:"Jarl Gladiia",tags:[],races:new Map([["Humans",72],["Half-Elves",14],["Sea-Elves",8],["Shifters[Aquatic]",6]]),exoticRaces:["Triton","Water Genasi","Yuan-ti"],exclusiveRaces:["Seaborn"],capitalPopulation:"17K",capitalElevation:"2071m",capitalTemperature:"-2&#8451;",capitalTags:new Map([[a.Breathtaking,5],[a["Research Centre"],5],[a["Holy Sites"],3],[a.Lawless,2],[a.Undefended,1]]),capitalSummary:"\n                Built upon the warm, fertile and mineral rich lands of an old volcano, this beautiful little city is an \n                oasis in the frigid wastelands around it. Yet life in the middle of nowhere is not for everyone, and so \n                few choose to live here. Fewer still are encouraged to, for those that live here come to be aware of certain\n                secrets best left untold - and know that the scholars that propel the research here do not all come from Terra...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Calentaur",fullName:"Serene Valleys of Calentaur",capital:"Annwyn",area:57,population:"2.1M",government:"Council",primaryCulture:"Foehn",leader:"Lady Shiadhal",tags:[],races:new Map([["Elves",66],["Half-Elves",14],["Humans",10],["Halflings",6],["Gnomes",4]]),exoticRaces:["Eladrin","Satyr","Owlin","Goblins"],exclusiveRaces:["Fairies"],capitalPopulation:"59K",capitalElevation:"271m",capitalTemperature:"8&#8451;",capitalTags:new Map([[a.Breathtaking,6],[a.Impregnable,6],[a.Greens,5],[a["Mafia Control"],5],[a["Military Curfew"],4],[a["Mage Presence"],3],[a.Organized,3],[a.Sprawling,2],[a["Craftsman's Guilds"],2],[a["Cultural Hub"],2],[a["Fresh Water"],2]]),capitalSummary:"\n                A city that bridges between the material plane and the feywild, and yet belongs to neither. The only way \n                to access it is via a perpendicularity of uncertain location. The few non-elves who have been there have\n                been forever enraptured. Depictions describe it as a supernatural city of eternal youth, beauty, health \n                and abundance, of sophisticated marble architecture with lush green vines and vivid flowers. Yet some \n                who've come back do not feel particularly inclined to return there...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Vinland",fullName:"Free Territory of Vinland",capital:"Frihet",area:57,population:"2.1M",government:"Free Territory",primaryCulture:"Rus / Pegaz / Neo-Anglo",leader:"",tags:[],races:new Map([["Humans",70],["Halflings",21],["Gnomes",9]]),exoticRaces:["Firbolgs","Trolls","Goblins","Kobolds"],exclusiveRaces:[],capitalPopulation:"16K",capitalElevation:"56m",capitalTemperature:"4&#8451;",capitalTags:new Map([[a["Central Market"],3],[a["Craftsman's Guilds"],3],[a["Entertainment Infra"],3],[a["Fresh Water"],2],[a.Greens,2],[a.Charming,2],[a.Undefended,1]]),capitalSummary:"\n                Possibly the most unassuming capital of Terra Prima, the city of liberty is open to all, yet doesn't \n                make any bow underneath its grandeur. The lack of authority means no real power is gathered in the \n                capital, and so economy, and life, here is slow and relaxed. Yet the few who do live here wouldn't leave\n                behind the family like atmosphere plus the ease of availability of a capital for anything else in the \n                world.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Altava",fullName:"Wild Hinterlands of Altava",capital:"Sal Venito",area:103,population:"0.3M",government:"Anarchy",primaryCulture:"Liberi / Skaldic / Roma",leader:"",tags:[],races:new Map([["Humans",90],["DragonBorn",5],["Tieflings",4],["Air Genasi",1]]),exoticRaces:["Goblins","Hobgoblins","Tortle"],exclusiveRaces:["Vedalken"],capitalPopulation:"4K",capitalElevation:"56m",capitalTemperature:"4&#8451;",capitalTags:new Map([[a.Ruins,6],[a.Harbor,3],[a.Organized,3],[a["Mafia Control"],3],[a.Underworld,3],[a.Lawless,2],[a["Sewage System"],2],[a["Fresh Water"],1]]),capitalSummary:"\n                Not more than a century ago a city to rival Ortus, all that remains of this arrogant capital are ruins and\n                shattered dreams. They dared to take on those that must not be spoken of, and all that remained from that\n                was mere fodder for scavengers - criminals, pirates and rival states alike. Now that the corpse has been\n                picked to the bone, a few refugees and hinterland tribesmen still find shelter and comfort in the ruins,\n                still grand and intimating even in decay...\n            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Nidavellir",fullName:"Depths of Nidavellir",capital:"Idavoll",area:61,population:"2.9M",government:"Kingdom",primaryCulture:"Durinn",leader:"Queen Dagfid",tags:[],races:new Map([["Dwarves",64],["Drow",20],["Tieflings",8],["Deep Gnomes",6],["Humans",2]]),exoticRaces:["Duergar","Fire Genasi","Kenku","Orcs"],exclusiveRaces:[],capitalPopulation:"90K",capitalElevation:"-1222m",capitalTemperature:"43&#8451;",capitalTags:new Map([[a.Underground,6],[a["Mining Ops"],6],[a.Impregnable,5],[a["Space Crunch"],5],[a.Cluttered,3],[a["Industrial Zone"],3],[a["Organized Crime"],3],[a.Underworld,2],[a.Lawless,2],[a.Slums,2]]),capitalSummary:"\n                The entrance to the underdark, visitors to the city of Idavoll are greeted by its hot and acrid air, \n                followed by the angry red glare of eternally burning smelters. With its paranoid inhabitants, toiling \n                endlessly and operating ruthlessly in a city that has never seen sunlight, Idavoll is the least \n                accessible settlement on Terra - but it is accessible. Much more than can be said for anything in the \n                passages that descend beneath it... passages rumoured to be the home of great and terrible demon lords, \n                passages rumoured to be the only way into Terra Incognita.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Gaulle",fullName:"United Clans of Gaulle",capital:"Lutetia",area:52,population:"4.0M",government:"Free Tribes",primaryCulture:"Hexenfurst",leader:"Chief Vercingetorix",tags:[],races:new Map([["Humans",88],["Shifters",12]]),exoticRaces:["Aarakocra","Owlin","Tabaxi","Changeling","Kalashtar","Fire Genasi"],exclusiveRaces:["Werewolves"],capitalPopulation:"217K",capitalElevation:"18m",capitalTemperature:"12&#8451;",capitalTags:new Map([[a["Trade Hotspot"],5],[a["Space Crunch"],5],[a["Tourist Hotspot"],5],[a["Entertainment Infra"],4],[a["Academic Focus"],4],[a.Fortified,4],[a.Harbor,3],[a.Lawless,3],[a["Fresh Water"],2]]),capitalSummary:"\n                A large and bustling city of a large and bustling country, it mirrors the serious congestion and \n                overpopulation evident in the rest of the country. For those from outside, reaching from their tavern to \n                their destination can easily take hours - yet those who know their way about know this to be one of the\n                most resourceful places on Terra. There are rumours that a mass renovation is in the works...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Reindal",fullName:"Snowy realms of Reindal",capital:"Witstad",area:39,population:"0.7M",government:"Federation",primaryCulture:"Roma",leader:"Sir Lucius Artorius Castus",tags:[],races:new Map([["Humans",90],["DragonBorn",5],["Half-Elves",2],["Gnomes",1],["Halflings",1],["Elves",1]]),exoticRaces:["Aasimar","Eladrin","Goblin","Kalashtar","Changelings"],exclusiveRaces:[],capitalPopulation:"67K",capitalElevation:"918m",capitalTemperature:"-8&#8451;",capitalTags:new Map([[a.Breathtaking,6],[a["Mage Presence"],5],[a["Academic Focus"],3],[a.Greens,3],[a["Holy Sites"],2],[a["Merchant Guilds"],1],[a.Undefended,1]]),capitalSummary:"\n                Much like the lands to which it belongs, this town, enchanting in its beautiful, pure and perennial snow,\n                is a safe haven from all the conflicts in terra. Originally inhabited by refugees tired of war or slaves\n                escaping to freedom, few people now wish to come here, but those who do come find comfort and peace like\n                no where else. Despite being soft spoken and kind to a fault, the people here would work harder than all \n                others to secure the said comfort. And to secure the said peace...            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"KingsFall",fullName:"Cursed Plains of KingsFall",capital:"Necropolis",area:40,population:"0.2M",government:"Anarchy",primaryCulture:"Hexenfurst",leader:"",tags:[],races:new Map([["Humans",89],["Tieflings",11]]),exoticRaces:["Shadar-Kai","Kalashtar","Vampires","Hexbloods","Reborn"],exclusiveRaces:[],capitalPopulation:"0 ?",capitalElevation:"352m",capitalTemperature:"7&#8451;",capitalTags:new Map([[a["Ghost Town"],1]]),capitalSummary:"\n                Once long ago, these buildings used to be a flourishing city. However, like the rest of the plains - whosoever\n                held it found themselves on the loosing side of a particularly brutal war. These empty streets have\n                changed hands dozens of times - each time involving mass brutality, plunder and slaughter. Now, none \n                dare venture here and only terrible ghosts haunt this mass grave of a capital. Some madmen have reported\n                seeing the Witch King of ancient lore glide the streets even today, dancing a terrible dance along with \n                several human-puppets who they said comprise his troupe...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Terra Incognita",fullName:"Terra Incognita",capital:"?",area:75,population:"?",government:"?",primaryCulture:"?",leader:"?",tags:[],races:new Map,exoticRaces:[],exclusiveRaces:[],capitalPopulation:"?",capitalElevation:"?",capitalTemperature:"?",capitalTags:new Map,capitalSummary:"???",description:"",leaderDescription:""})}},302:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.PARTY_INSIGHT=t.PcCharismaMods=t.PcTokenNames=t.PcIndex=void 0,function(e){e[e.ID_AURELIA=0]="ID_AURELIA",e[e.ID_CYRION=1]="ID_CYRION",e[e.ID_HELIOS=2]="ID_HELIOS",e[e.ID_JULIUS=3]="ID_JULIUS",e[e.ID_KERE=4]="ID_KERE"}(a=t.PcIndex||(t.PcIndex={})),t.PcTokenNames=new Map([[a.ID_AURELIA,"Aurelia"],[a.ID_CYRION,"Cyrion"],[a.ID_HELIOS,"Helios"],[a.ID_JULIUS,"Julius"],[a.ID_KERE,"Kere"]]),t.PcCharismaMods=new Map([[a.ID_AURELIA,-1],[a.ID_CYRION,-1],[a.ID_HELIOS,5],[a.ID_JULIUS,5],[a.ID_KERE,4]]),t.PARTY_INSIGHT=19},7027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseDOMGenerator=void 0,t.BaseDOMGenerator=class{get $element(){const e=$(`#${this.id}`);return 0==e.length?null:e}refreshRenderedElement(){const e=this.$element;null!=e&&this.doRefreshRenderedElement(e)}doRefreshRenderedElement(e){}}},3294:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Edge=void 0;const n=a(7027);class i extends n.BaseDOMGenerator{constructor(e,t){if(super(),this.v1=e,this.v2=t,e==t)throw new Error;this.v1.addNeighbour(this),this.v2.addNeighbour(this)}get id(){return`${this.v1.id}___${this.v2.id}`}get center(){return[(this.v1.x+this.v2.x)/2,(this.v1.y+this.v2.y)/2]}get length(){const e=this.v1.x-this.v2.x,t=this.v1.y-this.v2.y;return Math.sqrt(e*e+t*t)}get rotation(){const e=this.v1.x-this.v2.x,t=this.v1.y-this.v2.y;return 0==t?0:Math.PI/2+Math.atan(e/t)}}t.Edge=i},9880:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Graph=void 0;const n=a(7027);class i extends n.BaseDOMGenerator{constructor(e){super(),this.id=e,this.vertices=new Map,this.edges=new Map,this.neighbours=new Map,this.xMin=Number.POSITIVE_INFINITY,this.yMin=Number.POSITIVE_INFINITY,this.xMax=Number.NEGATIVE_INFINITY,this.yMax=Number.NEGATIVE_INFINITY}get AdditionalElementClasses(){return""}generateDOMString(){const e=[];for(const t of this.vertices.values())e.push(t);e.sort(((e,t)=>t.x-e.x));const t=[];for(const a of e)t.push(a.generateDOMString());const a=[];for(const e of this.edges.values())for(const t of e.values())a.push(t.generateDOMString());return`\n        <div class="graph--${this.StyleSubclass} ${this.AdditionalElementClasses}" \n             style="width: ${this.xSpan}px; \n                    height: ${this.ySpan}px;"\n             id="${this.id}">\n            <div class="graph__edges">\n                ${a.join("")}                \n            </div>\n            <div class="graph__vertices">\n                ${t.join("")}            \n            </div>\n        </div>\n        `}addVertex(e){if(e.graphID!=this.id)throw new Error;this.xMin=Number.POSITIVE_INFINITY,this.yMin=Number.POSITIVE_INFINITY,this.xMax=Number.NEGATIVE_INFINITY,this.yMax=Number.NEGATIVE_INFINITY,this.vertices.set(e.id,e)}removeVertex(e){this.xMin=Number.POSITIVE_INFINITY,this.yMin=Number.POSITIVE_INFINITY,this.xMax=Number.NEGATIVE_INFINITY,this.yMax=Number.NEGATIVE_INFINITY,this.vertices.delete(e.id)}addEdge(e){const t=e.v1,a=e.v2;if(t==a)return null;const n=Math.min(t.numId,a.numId),i=Math.max(t.numId,a.numId);if(this.edges.has(n)||this.edges.set(n,new Map),this.edges.get(n).has(i))throw console.log(n,i),new Error;return this.edges.get(n).set(i,e),this.neighbours.has(t)||this.neighbours.set(t,new Set),this.neighbours.get(t).add(a),this.neighbours.has(a)||this.neighbours.set(a,new Set),this.neighbours.get(a).add(t),e}removeEdge(e){const t=e.v1,a=e.v2,n=Math.min(t.numId,a.numId),i=Math.max(t.numId,a.numId);console.assert(this.edges.get(n).get(i)==e),this.edges.get(n).delete(i),this.neighbours.get(t).delete(a),this.neighbours.get(a).delete(t)}areNeighbours(e,t){return this.neighbours.has(e)&&this.neighbours.get(e).has(t)}mapLocalCoordinatesToScreenPosition([e,t]){if(this.xMax<this.xMin)for(const e of this.vertices.values())this.xMin>e.x&&(this.xMin=e.x),this.xMax<e.x&&(this.xMax=e.x),this.yMin>e.y&&(this.yMin=e.y),this.yMax<e.y&&(this.yMax=e.y);if(this.xMax<this.xMin)throw new Error(`Coordinate system undefined. (${this.xMax}, ${this.xMin})`);return[this.origin[0]+e,this.origin[1]-t]}lookupVertexById(e){return this.vertices.get(e)}get vertexCount(){return this.vertices.size}get xSpan(){return Math.max(0,this.xMax-this.xMin)+2*i.PADDING[0]}get ySpan(){return Math.max(0,this.yMax-this.yMin)+2*i.PADDING[1]}get origin(){return[this.xSpan/2-(this.xMax+this.xMin)/2,this.ySpan/2+(this.yMax+this.yMin)/2]}}t.Graph=i,i.PADDING=[50,50]},3382:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MapEdge=void 0;const n=a(3294);class i extends n.Edge{constructor(e,t,a){super(t,a),this.graph=e,this.lesserVId=Math.min(t.numId,a.numId),this.higherVId=Math.max(t.numId,a.numId),this._worldLengthMultiplier=1,this.graph.addEdge(this)}generateDOMString(){const[e,t]=this.graph.mapLocalCoordinatesToScreenPosition(this.center);return`\n        <div class="map_edge" style="width: ${this.length}px;\n                                     top: ${t}px;\n                                     left: ${e}px;\n                                     rotate: ${this.rotation}rad;">\n        </div>\n        `}get worldLength(){return this.length*this._worldLengthMultiplier}set worldLengthMultiplier(e){this._worldLengthMultiplier=e}}t.MapEdge=i},6453:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMapGraph=t.MapGraph=void 0;const n=a(9880),i=a(1501);class s extends n.Graph{constructor(e){super(e),this.worldDistancePerPixel=0}get StyleSubclass(){return"map"}getSpacialDistance(e,t){if(e.graph!=this||t.graph!=this)throw new Error;return Math.sqrt((e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y)+(e.z-t.z)*(e.z-t.z))}getEdgeDistance(e,t){if(e.graph!=this||t.graph!=this)throw new Error;const a=Math.min(e.numId,t.numId),n=Math.max(e.numId,t.numId);if(!this.edges.has(a)||!this.edges.get(a).has(n))throw new Error;return this.edges.get(a).get(n).worldLength}}t.MapGraph=s,t.setupMapGraph=function(e,t){0!=e.length&&(e.append(t.generateDOMString()),function(e,t){const a=$("#side_banner"),n=$(".graph--map"),s=new i.SidePanel(a);n.on("click",".map_vertex",(function(e){if(!$(this).hasClass("inactive"))return;n.find(".map_vertex").addClass("inactive"),$(this).removeClass("inactive");const a=$(this)[0].getBoundingClientRect(),i=$(this).attr("id"),o=t.lookupVertexById(i);n.find(".map_vertex").each((function(){const e=$(this).attr("id"),a=t.lookupVertexById(e),n=t.getSpacialDistance(o,a)*t.worldDistancePerPixel,i=`~${(100*Math.round(n/100)).toLocaleString()} km`;let s;if(t.areNeighbours(o,a)){const e=t.getEdgeDistance(o,a);s=` / ~${Math.round(e).toLocaleString()} km`}else s="";$(this).find(".overhead_text").text(i+s)})),s.swapContentAndReshow(a.x+a.width/2>window.innerWidth/2,o.generateSiteDOMString()),e.stopPropagation()})),e.on("click",(function(){n.find(".map_vertex").addClass("inactive"),s.reset(),n.find(".map_vertex .overhead_text").text("")}))}(e,t))}},3542:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.TransportationToDOMString=t.MapTransportation=void 0,function(e){e[e.Foot=0]="Foot",e[e.Bike=1]="Bike",e[e.Car=2]="Car",e[e.Train=3]="Train",e[e.Helicopter=4]="Helicopter",e[e.Plane=5]="Plane",e[e.Jet=6]="Jet",e[e.Space=7]="Space",e[e.Cognition=8]="Cognition"}(a=t.MapTransportation||(t.MapTransportation={})),t.TransportationToDOMString=new Map([[a.Jet,'<i class="fa-solid fa-jet-fighter"></i>'],[a.Space,'<i class="fa-solid fa-shuttle-space"></i>'],[a.Cognition,'<i class="fa-solid fa-brain"></i>']])},1744:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MapVertex=void 0;const n=a(3542),i=a(3560),s=a(794),o=a(2001);class r extends o.Vertex{constructor(e,t,a){super(a.id,a.vertexCount),this.status=e,this.type=t,this.graph=a,this.name="???",this.statusDescOverride=null,this.typeDescOverride=null,this.z=0,this.intel="<div>No intel available.</div>",this._sitesOfInterest=[],this._characterPaths=[],this.graph.addVertex(this)}generateDOMString(){const e=i.MapVertexStatus[this.status].toLowerCase(),t=null==this.statusDescOverride?i.MapVertexStatusDescriptions.get(this.status):this.statusDescOverride,a=null==this.typeDescOverride?s.MapVertexTypeDescriptions.get(this.type):this.typeDescOverride,[n,o]=this.graph.mapLocalCoordinatesToScreenPosition([this.x,this.y]);return`\n        <div class="map_vertex map_vertex--${e} inactive"\n             id="${this.id}"\n             style="left: ${n}px; top: ${o}px;">\n            <img src="assets/images/gui/${e}/RadioBg.png" \n                 alt=""\n                 class="map_vertex__background"/>\n            <img src="assets/images/gui/${e}/Radio.png" \n                 alt=""\n                 class="map_vertex__foreground"/>   \n            <div class="map_vertex__info">\n                <div class="overhead_text"></div>\n                <div class="grunge_label">\n                    <div class="grunge_label__title">\n                        <div class="grunge_label__title__left">${t}</div>\n                        <div class="grunge_label__title__right">${a}</div>\n                    </div>\n                    <div class="grunge_label__desc"><span class="vertex_id">(${this.id})</span>${this.name}</div>                \n                </div>\n            </div>  \n        </div>\n        `}addSiteOfInterest(e,t,a,i){const s=[];for(const[e,t]of a)s.push(`\n                <div class="theme_map__row">\n                    <span class="theme_map__row__key site_of_interest__details__key">${e}</span>\n                    <span class="theme_map__row__value site_of_interest__details__value">${t}</span>\n                </div>\n            `);const o=[];for(const[e,[t,a]]of i.entries())o.push(`\n                <div class="navigation__type">\n                    <div class="navigation__type__means">${n.TransportationToDOMString.get(e)}</div>\n                    <div class="navigation__type__time">${t} days</div>\n                    <div class="navigation__type__safety">${a}%</div>\n                </div>\n            `);this._sitesOfInterest.push(`\n            <div class="theme_box site_of_interest">\n                <div class="site_of_interest__header">\n                    <div class="site_of_interest__category">${t}</div>\n                    <div class="site_of_interest__name">${e}</div>\n                </div>\n                <div class="site_of_interest__details theme_map">\n                    ${s.join("")}\n                </div>\n                <div class="site_of_interest__navigation navigation">\n                    ${o.join("")}\n                </div>\n            </div>\n        `)}addCharacterToken(e){this._characterPaths.push(e)}generateSiteDOMString(){const e=i.MapVertexStatus[this.status].toLowerCase(),t=null==this.statusDescOverride?i.MapVertexStatusDescriptions.get(this.status):this.statusDescOverride,a=[];for(const e of this._characterPaths)a.push(`<img class="token_s" src="${e}" alt="">`);return`\n        <div class="map_vertex_details theme--${e}">\n            <div class="map_vertex_details__header grunge_panel">\n                <div class="grunge_panel__icon"></div>\n                <div class="grunge_panel__subtitle">${t}</div>\n                <div class="grunge_panel__title">${this.name}</div>\n            </div>\n            <div class="map_vertex_details__desc">\n                <div class="theme_label">INTEL</div>\n                ${this.intel}\n            </div>\n            <div class="map_vertex_details__subheader theme_subheader">\n                Sites of interest\n            </div>\n            <div>\n                ${this._sitesOfInterest.join("")}\n            </div>\n            <div class="map_vertex_details__subheader theme_subheader">\n                Characters here\n            </div>\n            <div class="map_vertex_details__characters">\n                ${a.join("")}\n            </div>\n        </div>\n        `}}t.MapVertex=r},3560:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.MapVertexStatusDescriptions=t.MapVertexStatus=void 0,function(e){e[e.Unknown=0]="Unknown",e[e.Neutral=1]="Neutral",e[e.Friendly=2]="Friendly",e[e.Safe=3]="Safe",e[e.Combat=4]="Combat",e[e.Emergency=5]="Emergency",e[e.Deadly=6]="Deadly",e[e.Black=7]="Black"}(a=t.MapVertexStatus||(t.MapVertexStatus={})),t.MapVertexStatusDescriptions=new Map([[a.Unknown,"Unknown"],[a.Neutral,"Neutral"],[a.Friendly,"Friendly"],[a.Safe,"Safe Zone"],[a.Combat,"Hostile"],[a.Emergency,"High Risk Combat"],[a.Deadly,"Deadly"],[a.Black,"Black"]])},794:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.MapVertexTypeDescriptions=t.MapVertexType=void 0,function(e){e[e.Unknown=0]="Unknown",e[e.Village=1]="Village",e[e.Town=2]="Town",e[e.Fort=3]="Fort",e[e.City=4]="City",e[e.Metropolis=5]="Metropolis",e[e.Industry=6]="Industry",e[e.Trade=7]="Trade",e[e.Military=8]="Military",e[e.Capital=9]="Capital",e[e.ResearchHub=10]="ResearchHub",e[e.MiscCivilian=11]="MiscCivilian",e[e.Base=12]="Base",e[e.Resource=13]="Resource",e[e.WatchPost=14]="WatchPost",e[e.MiscSafe=15]="MiscSafe",e[e.Conflict=16]="Conflict",e[e.Dungeon=17]="Dungeon",e[e.MiscEncounter=18]="MiscEncounter",e[e.DeadlyEncounter=19]="DeadlyEncounter",e[e.UnknownEmergency=20]="UnknownEmergency",e[e.MiscEmergency=21]="MiscEmergency",e[e.MiscLegendary=22]="MiscLegendary",e[e.Perpendicularity=23]="Perpendicularity",e[e.Deity=24]="Deity",e[e.Death=25]="Death"}(a=t.MapVertexType||(t.MapVertexType={})),t.MapVertexTypeDescriptions=new Map([[a.Unknown,"???"],[a.Village,"Village"],[a.Town,"Town"],[a.Fort,"Fort"],[a.City,"City"],[a.Metropolis,"Metropolis"],[a.Industry,"Industrial Zone"],[a.Trade,"Market"],[a.Military,"Encampment"],[a.Capital,"State Capital"],[a.ResearchHub,"Research Centre"],[a.MiscCivilian,"Misc"],[a.Base,"Base"],[a.Resource,"Resource"],[a.WatchPost,"Watch Post"],[a.MiscSafe,"Misc"],[a.Conflict,"Conflict"],[a.Dungeon,"Dungeon"],[a.MiscEncounter,"Encounter"],[a.DeadlyEncounter,"Combat"],[a.UnknownEmergency,"???"],[a.MiscEmergency,"Emergency"],[a.MiscLegendary,"Legendary"],[a.Perpendicularity,"Perpendicularity"],[a.Deity,"Deity's Abode"],[a.Death,"Death"]])},1501:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SidePanel=void 0;class a{constructor(e){this.$panel=e,this.$content=e.find(`.${a.CONTENT_ELEMENT_CLASS_NAME}`)}reset(){this.hide((()=>this.empty()))}toggle(e){this.isVisible()?this.hide((()=>{})):this.show(e)}swapContent(e){this.empty(),this.$content.append(e)}swapContentAndReshow(e,t){this.hideThenShow(e,(()=>{this.swapContent(t)}))}show(e){if(this.isVisible())throw new Error("Show called on visible panel.");this.$panel.removeClass(a.LEFT_PANEL_CLASS_NAME+" "+a.RIGHT_PANEL_CLASS_NAME);const t=e?a.LEFT_PANEL_CLASS_NAME:a.RIGHT_PANEL_CLASS_NAME,n=e?a.VISIBLE_LEFT_PANEL_CLASS_NAME:a.VISIBLE_RIGHT_PANEL_CLASS_NAME;return this.$panel.addClass(t),setTimeout((()=>this.$panel.addClass(n)),10),10+a.SLIDE_TIME}hide(e){return this.isVisible()?(this.$panel.removeClass(a.VISIBLE_LEFT_PANEL_CLASS_NAME+" "+a.VISIBLE_RIGHT_PANEL_CLASS_NAME),setTimeout((()=>{this.$panel.removeClass(a.LEFT_PANEL_CLASS_NAME+" "+a.RIGHT_PANEL_CLASS_NAME),e()}),a.SLIDE_TIME+10),a.SLIDE_TIME+10):(this.$panel.removeClass(a.LEFT_PANEL_CLASS_NAME+" "+a.RIGHT_PANEL_CLASS_NAME),e(),0)}hideThenShow(e,t){const n=e?a.VISIBLE_LEFT_PANEL_CLASS_NAME:a.VISIBLE_RIGHT_PANEL_CLASS_NAME;if(this.$panel.hasClass(n))return void t();const i=this.hide(t);setTimeout((()=>{this.show(e)}),i+10)}empty(){console.log("clearing the content."),this.$content.empty()}isVisible(){return this.$panel.hasClass(a.VISIBLE_LEFT_PANEL_CLASS_NAME)||this.$panel.hasClass(a.VISIBLE_RIGHT_PANEL_CLASS_NAME)}}t.SidePanel=a,a.PANEL_CLASS_NAME="ink_side_banner",a.MOD_LEFT="--left",a.MOD_RIGHT="--right",a.MOD_VISIBLE="--visible",a.SUB_ELEMENT_SUFFIX_CONTENT="__content",a.LEFT_PANEL_CLASS_NAME=a.PANEL_CLASS_NAME+a.MOD_LEFT,a.RIGHT_PANEL_CLASS_NAME=a.PANEL_CLASS_NAME+a.MOD_RIGHT,a.VISIBLE_LEFT_PANEL_CLASS_NAME=a.LEFT_PANEL_CLASS_NAME+a.MOD_VISIBLE,a.VISIBLE_RIGHT_PANEL_CLASS_NAME=a.RIGHT_PANEL_CLASS_NAME+a.MOD_VISIBLE,a.CONTENT_ELEMENT_CLASS_NAME=a.PANEL_CLASS_NAME+a.SUB_ELEMENT_SUFFIX_CONTENT,a.SLIDE_TIME=200},8763:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UpgradeEdge=void 0;const n=a(3294);class i extends n.Edge{constructor(e,t,a,n=null){if(super(t,a),this.graph=e,this.vc=n,null!=n&&n.sqDistanceFrom(t)-n.sqDistanceFrom(a)>1)throw new Error("Center vertex isn't equidistant to edge vertices.");this.zIndex=0,e.addEdge(this)}generateDOMString(){if(null==this.vc){const[e,t]=this.graph.mapLocalCoordinatesToScreenPosition(this.center);return`\n            <div id="${this.id}"\n                 class="upgrade_edge--linear ${this.isActive?"active":""} ${this.isConnected?"connected":""}" \n                 style="width: ${this.length}px;\n                        top: ${t}px;\n                        left: ${e}px;\n                        rotate: ${this.rotation}rad;\n                        z-index: ${this.zIndex};">\n            </div>`}const e=2*Math.sqrt(this.vc.sqDistanceFrom(this.v1))+2,[t,a]=this.graph.mapLocalCoordinatesToScreenPosition(this.center),n=this.vc.displacementAngleWithX(this.v1),i=this.vc.displacementAngleWithX(this.v2),s=Math.round((90-180/Math.PI*n+360)%360),o=Math.round((90-180/Math.PI*i+360)%360),r=[];return o>s?r.push(["transparent 0deg",`transparent ${s}deg`,`#fff ${s}deg`,`#fff ${o}deg`,`transparent ${o}deg`,"transparent 360deg"]):r.push(["#fff 0deg",`#fff ${o}deg`,`transparent ${o}deg`,`transparent ${s}deg`,`#fff ${s}deg`,"#fff 360deg"]),`\n            <div id="${this.id}"\n                 class="upgrade_edge--circular ${this.isActive?"active":""} ${this.isConnected?"connected":""}"\n                 style="top: ${a}px;\n                        left: ${t}px;\n                        width: ${e}px;\n                        height: ${e}px;\n                        background: conic-gradient(${r.join(", ")});\n                        z-index: ${this.zIndex};">\n                <div class="upgrade_edge--circular__inner"></div>            \n            </div>\n        `}get isActive(){let e=!1;if(this.v1.renderable)e=this.v1.isTouched;else for(const t of this.v1.neighbours.values())if(t!=this.v2&&t.isTouched){e=!0;break}let t=!1;if(this.v2.renderable)t=this.v2.isTouched;else for(const e of this.v2.neighbours.values())if(e!=this.v1&&e.isTouched){t=!0;break}return e&&t}get isConnected(){return this.v1.renderable&&this.v1.isTouched||!this.v1.renderable&&this.v1.isConnected||this.v2.renderable&&this.v2.isTouched||!this.v2.renderable&&this.v2.isConnected}doRefreshRenderedElement(e){e.removeClass("active connected"),this.isActive?e.addClass("active"):this.isConnected&&e.addClass("connected")}get center(){return null==this.vc?super.center:[this.vc.x,this.vc.y]}}t.UpgradeEdge=i},8235:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupUpgradeGraph=t.UpgradeGraph=void 0;const n=a(190),i=a(9880),s=a(1501),o=a(3319);class r extends i.Graph{constructor(e){super(e)}resetGraph(){for(const e of this.vertices.values())e.resetActivation();this.refreshRenderedElement()}doRefreshRenderedElement(e){for(const e of this.vertices.values())e.refreshRenderedElement();for(const e of this.edges.values())for(const t of e.values())t.refreshRenderedElement()}generateActiveVertexEffectsDOMString(){const e=new Map;for(const t of(0,n.getEnumIterator)(o.AtomicUpgradeVertexType))e.set(t,0);let t=0,a=0,i=0,s=0;for(const n of this.vertices.values())if(n.renderable&&(a++,i+=n.activation,s+=n.maxActivation,n.isActive)){t++;for(const t of o.UpgradeToAtomic.get(n.type))e.set(t,e.get(t)+o.UpgradeRarityLevels.get(n.type).get(n.rarity))}const r=[];for(const[t,a]of e.entries())r.push(o.AtomicUpgradeDescGenerators.get(t)(a));return`\n            <div class="upgrade_details theme--safe">\n                <div class="grunge_panel">\n                    <div class="grunge_panel__icon"></div>\n                    <div class="grunge_panel__subtitle">Status</div>\n                    <div class="grunge_panel__title">Cognitive Resequencing</div>\n                </div>\n                <div class="theme_subheader">\n                    Progress\n                </div>\n                <div class="theme_map">\n                    <div class="theme_map__row">\n                        <div class="theme_map__row__key">Nodes activated</div>\n                        <div class="theme_map__row__value">${t} / ${a}</div>\n                    </div>                    \n                    <div class="theme_map__row">\n                        <div class="theme_map__row__key">Reclamation level</div>\n                        <div class="theme_map__row__value">${i} / ${s}</div>\n                    </div>                    \n                </div>\n                <div class="theme_subheader">\n                    Cummulative Effects\n                </div>\n                <div class="theme_map upgrade_effects">\n                    ${r.join("")}\n                </div>\n            </div>`}get StyleSubclass(){return"skill"}}t.UpgradeGraph=r,t.setupUpgradeGraph=function(e,t){0!=e.length&&(e.append(t.generateDOMString()),function(e){const t=$("#skill_graph_area"),a=new s.SidePanel($("#side_banner"));a.swapContent(e.generateActiveVertexEffectsDOMString()),$(document).on("keyup",(function(e){t.is(":hidden")||"Escape"==e.key&&a.toggle(!1)})),t.on("click",".skill_vertex.connected:not(.active)",(function(){e.lookupVertexById($(this).attr("id")).increaseActivation(),a.swapContent(e.generateActiveVertexEffectsDOMString())}))}(t))}},8425:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UpgradeVertex=void 0;const n=a(1055),i=a(3319),s=a(2001);class o extends s.Vertex{constructor(e,t=!0,a=null,n=null,i=0){if(super(e.id,e.vertexCount),this.graph=e,this.renderable=t,this.type=a,this.rarity=n,this.startActivation=i,e.addVertex(this),this.maxActivation=o.RarityToMaxActMap.get(this.rarity),this.startActivation>this.maxActivation||this.startActivation<0)throw new Error("Bad argument: start activation");this._activation=this.startActivation}doRefreshRenderedElement(e){e.removeClass("connected touched active outer"),this.isActive&&e.addClass("active"),this.isTouched&&e.addClass("touched"),this.isConnected&&e.addClass("connected");const t=this._activation/this.maxActivation*360;e.find(".skill_vertex__backdrop").css("background",`conic-gradient(${o.RarityToColorMap.get(this.rarity)} 0deg, \n                            ${o.RarityToColorMap.get(this.rarity)} ${t}deg, \n                            #777                                               ${t}deg,\n                            #777                                               360deg)`)}generateDOMString(){const[e,t]=this.graph.mapLocalCoordinatesToScreenPosition([this.x,this.y]);if(!this.renderable)return`\n                <div class="null_vertex"\n                     id="${this.id}"\n                     style="left: ${e}px; top: ${t}px;">\n                </div>\n            `;const a=null==this.type?"":i.UpgradeIcons.get(this.type),s=[];null!=this.rarity&&s.push(`rarity--${n.Rarity[this.rarity].toLowerCase()}`),this.isActive&&s.push("active"),this.isTouched&&s.push("touched"),this.isConnected&&s.push("connected");const r=[];if(this.maxActivation>1)for(let e=0;e<this.maxActivation;e++){const t=360/this.maxActivation*e;r.push(`<div class="progress_circle__spoke" style="rotate: ${t}deg;"></div>`)}const l=this._activation/this.maxActivation*360;return`\n            <div class="skill_vertex ${s.join(" ")}"\n                 id="${this.id}"\n                 style="left: ${e}px; top: ${t}px;">\n                <div class="skill_vertex__backdrop"\n                     style="background: conic-gradient(${o.RarityToColorMap.get(this.rarity)} 0deg, \n                                                       ${o.RarityToColorMap.get(this.rarity)} ${l}deg, \n                                                       #777                                               ${l}deg,\n                                                       #777                                               360deg);"></div>\n                <div class="progress_circle">\n                    ${r.join("")}                    \n                </div>\n                <div class="skill_vertex__cover" ></div>\n                <div class="skill_vertex__core">\n                    ${a}\n                </div>\n                <div class="skill_vertex__info">\n                    <div class="overhead_text"></div>\n                    <div class="grunge_label">\n                        <div class="grunge_label__title">\n                            <div class="grunge_label__title__left">${n.Rarity[this.rarity]}</div>\n                            <div class="grunge_label__title__right">${i.UpgradeNames.get(this.type)}</div>\n                        </div>\n                        <div class="grunge_label__desc">\n                            ${i.UpgradeDescGenerators.get(this.type)(i.UpgradeRarityLevels.get(this.type).get(this.rarity))}\n                        </div>                \n                    </div>\n                </div>\n            </div>\n        `}increaseActivation(){if(!(this._activation>=this.maxActivation)){if(!this.isConnected)throw new Error("Cannot activate unconnected vertex");this._activation++,1==this._activation?this.graph.refreshRenderedElement():this.refreshRenderedElement()}}resetActivation(){this._activation!=this.startActivation&&(this._activation=this.startActivation)}get isConnected(){if(this.isTouched)return!0;for(const e of this.neighbours.values())if(e.renderable&&e.isTouched||!e.renderable&&e.isConnected)return!0;return!1}get isTouched(){return!!this.renderable&&this._activation>0}get isActive(){return!!this.renderable&&this._activation==this.maxActivation}get activation(){return this._activation}}t.UpgradeVertex=o,o.RarityToMaxActMap=new Map([[n.Rarity.Black,1],[n.Rarity.Common,1],[n.Rarity.Uncommon,2],[n.Rarity.Rare,3],[n.Rarity.Epic,5],[n.Rarity.Legendary,7],[n.Rarity.Artefact,7]]),o.RarityToColorMap=new Map([[n.Rarity.Black,"#FFE"],[n.Rarity.Common,"#242528"],[n.Rarity.Uncommon,"#1FC219"],[n.Rarity.Rare,"#4990E2"],[n.Rarity.Epic,"#9810E0"],[n.Rarity.Legendary,"#FEA227"],[n.Rarity.Artefact,"#9a5c40"]])},3319:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AtomicUpgradeDescGenerators=t.UpgradeToAtomic=t.AtomicUpgradeVertexType=t.UpgradeRarityLevels=t.UpgradeIcons=t.UpgradeDescGenerators=t.UpgradeNames=t.UpgradeVertexType=void 0;const n=a(1055);var i,s;!function(e){e[e.Sync=0]="Sync",e[e.LandMovement=1]="LandMovement",e[e.SeaMovement=2]="SeaMovement",e[e.StepMovement=3]="StepMovement",e[e.DeathSaves=4]="DeathSaves",e[e.AC=5]="AC",e[e.HP=6]="HP",e[e.Accuracy=7]="Accuracy",e[e.Damage=8]="Damage",e[e.ProfBonus=9]="ProfBonus",e[e.Initiative=10]="Initiative",e[e.SavesAll=11]="SavesAll",e[e.SavesStrDexCon=12]="SavesStrDexCon",e[e.SavesIntWisCha=13]="SavesIntWisCha",e[e.SkillsAll=14]="SkillsAll",e[e.SkillsNinjutsu=15]="SkillsNinjutsu",e[e.SkillsWildHeart=16]="SkillsWildHeart",e[e.SkillsIndoctrination=17]="SkillsIndoctrination",e[e.SkillsBrilliance=18]="SkillsBrilliance",e[e.SkillsProdigy=19]="SkillsProdigy",e[e.StatsStr=20]="StatsStr",e[e.StatsDex=21]="StatsDex",e[e.StatsCon=22]="StatsCon",e[e.StatsInt=23]="StatsInt",e[e.StatsWis=24]="StatsWis",e[e.StatsCha=25]="StatsCha",e[e.StatsIntDex=26]="StatsIntDex",e[e.StatsWisCon=27]="StatsWisCon",e[e.StatsChaStr=28]="StatsChaStr",e[e.StatsStrDexCon=29]="StatsStrDexCon",e[e.StatsIntWisCha=30]="StatsIntWisCha",e[e.NULL=31]="NULL"}(i=t.UpgradeVertexType||(t.UpgradeVertexType={})),t.UpgradeNames=new Map([[i.Sync,"Synchronization"],[i.LandMovement,"Acceleration"],[i.SeaMovement,"Marine Adaptation"],[i.StepMovement,"Unfettered Mobility"],[i.DeathSaves,"Death Ward"],[i.AC,"Armor"],[i.HP,"Vitality"],[i.Accuracy,"Accuracy"],[i.Damage,"Ruin"],[i.ProfBonus,"Synaptic Evolution"],[i.Initiative,"Reflexes"],[i.SavesAll,"Assertion of Life"],[i.SavesStrDexCon,"Assertion of Body"],[i.SavesIntWisCha,"Assertion of Mind"],[i.SkillsAll,"Of All Trades"],[i.SkillsNinjutsu,"Ninjutsu"],[i.SkillsWildHeart,"Wild Heart"],[i.SkillsIndoctrination,"Indoctrination"],[i.SkillsBrilliance,"Brilliance"],[i.SkillsProdigy,"Prodigy"],[i.StatsStr,"Strength"],[i.StatsDex,"Dexterity"],[i.StatsCon,"Constitution"],[i.StatsInt,"Intelligence"],[i.StatsWis,"Wisdom"],[i.StatsCha,"Charisma"],[i.StatsIntDex,"Shrewdness"],[i.StatsWisCon,"Stability"],[i.StatsChaStr,"Authority"],[i.StatsStrDexCon,"Physique Upgrade"],[i.StatsIntWisCha,"Cognition Upgrade"]]),t.UpgradeDescGenerators=new Map([[i.Sync,e=>`Attunement slots +${e}, can be used for mass attunement.`],[i.LandMovement,e=>`Walking Speed increases by ${e}ft.`],[i.SeaMovement,e=>`Swimming Speed increases by ${e}ft. Can breathe underwater.`],[i.StepMovement,e=>`As an action, can teleport ${e} times the walking speed \n                            upto proficiency bonus times per long rest.`],[i.DeathSaves,e=>`Gain ${e} to death saves.`],[i.AC,e=>`Gain ${e} AC`],[i.HP,e=>`HP increases by ${e}.`],[i.Accuracy,e=>`To-hit rolls and save DCs increase by ${e}.`],[i.Damage,e=>`Damage of weapon attacks and cantrips increases by ${e}.`],[i.ProfBonus,e=>`Proficiency bonus increases by ${e}`],[i.Initiative,e=>`Gain ${e} to initiative rolls.`],[i.SavesAll,e=>`+${e} to all saves.`],[i.SavesStrDexCon,e=>`+${e} to STR/DEX/CON saves.`],[i.SavesIntWisCha,e=>`+${e} to INT/WIS/CHA saves.`],[i.SkillsAll,e=>`+${e} to all skill rolls.`],[i.SkillsNinjutsu,e=>`+${e} to Stealth, Investigation, Acrobatics and Athletics rolls.`],[i.SkillsWildHeart,e=>`+${e} to all Perception, Medicine, Nature and Survival rolls.`],[i.SkillsIndoctrination,e=>`+${e} to all Insight, Deception, Intimidation and Religion rolls.`],[i.SkillsBrilliance,e=>`+${e} to all Arcana, Slight-of-Hand, History and Performance rolls.`],[i.SkillsProdigy,e=>`+${e} to all Stealth, Perception, Insight, Arcana and Persuasion rolls.`],[i.StatsStr,e=>`Strength +${e}`],[i.StatsDex,e=>`Dexterity +${e}`],[i.StatsCon,e=>`Constitution +${e}`],[i.StatsInt,e=>`Intelligence +${e}`],[i.StatsWis,e=>`Wisdom +${e}`],[i.StatsCha,e=>`Charisma +${e}`],[i.StatsIntDex,e=>`Intelligence and Dexterity +${e}`],[i.StatsWisCon,e=>`Wisdom and Constitution +${e}`],[i.StatsChaStr,e=>`Charisma and Strength +${e}`],[i.StatsStrDexCon,e=>`Strength, Dexterity and Constitution +${e}`],[i.StatsIntWisCha,e=>`Intelligence, Wisdom and Charisma +${e}`]]),t.UpgradeIcons=new Map([[i.Sync,'<i class="fa-sharp fa-light fa-wreath-laurel"></i>'],[i.LandMovement,'<i class="fa-solid fa-rabbit-running"></i>'],[i.SeaMovement,'<i class="fa-solid fa-dolphin"></i>'],[i.StepMovement,'<i class="fa-duotone fa-transporter-1"></i>'],[i.DeathSaves,'<i class="fa-solid fa-skull-cow" style="transform: translate(0, 2px);"></i>'],[i.AC,'<i class="fa-sharp fa-solid fa-shield-quartered"></i>'],[i.HP,'<i class="fa-solid fa-heart-pulse"></i>'],[i.Accuracy,'<i class="fa-solid fa-crosshairs"></i>'],[i.Damage,'<i class="fa-sharp fa-solid fa-swords"></i>'],[i.ProfBonus,'<i class="fa-regular fa-dna"></i>'],[i.Initiative,'<i class="fa-sharp fa-solid fa-stopwatch"></i>'],[i.SavesAll,'<i class="fa-regular fa-star-of-life"></i>'],[i.SavesStrDexCon,'<i class="fa-sharp fa-solid fa-football-helmet"></i>'],[i.SavesIntWisCha,'<i class="fa-solid fa-spa"></i>'],[i.SkillsAll,'<i class="fa-regular fa-mandolin"></i>'],[i.SkillsNinjutsu,'<i class="fa-duotone fa-user-ninja"></i>'],[i.SkillsWildHeart,'<i class="fa-duotone fa-user-cowboy"></i>'],[i.SkillsIndoctrination,'<i class="fa-duotone fa-user-secret"></i>'],[i.SkillsBrilliance,'<i class="fa-duotone fa-user-graduate"></i>'],[i.SkillsProdigy,'<i class="fa-duotone fa-user-police-tie"></i>'],[i.StatsStr,'<i class="fa-duotone fa-dumbbell"></i>'],[i.StatsDex,'<i class="fa-solid fa-dagger" style="rotate: 45deg;"></i>'],[i.StatsCon,'<i class="fa-solid fa-heart-half-stroke"></i>'],[i.StatsInt,'<i class="fa-solid fa-brain-circuit"></i>'],[i.StatsWis,'<i class="fa-solid fa-yin-yang"></i>'],[i.StatsCha,'<i class="fa-sharp fa-solid fa-masks-theater"></i>']]),t.UpgradeIcons.set(i.StatsIntDex,`<div class="duo_icon">\n        ${t.UpgradeIcons.get(i.StatsInt)}\n        ${t.UpgradeIcons.get(i.StatsDex)}\n    </div>`),t.UpgradeIcons.set(i.StatsWisCon,`<div class="duo_icon">\n        ${t.UpgradeIcons.get(i.StatsWis)}\n        ${t.UpgradeIcons.get(i.StatsCon)}\n    </div>`),t.UpgradeIcons.set(i.StatsChaStr,`<div class="duo_icon">\n        ${t.UpgradeIcons.get(i.StatsCha)}\n        ${t.UpgradeIcons.get(i.StatsStr)}\n    </div>`),t.UpgradeIcons.set(i.StatsStrDexCon,`<div class="tri_icon">\n        ${t.UpgradeIcons.get(i.StatsStr)}\n        ${t.UpgradeIcons.get(i.StatsCon)}\n        ${t.UpgradeIcons.get(i.StatsDex)}\n    </div>`),t.UpgradeIcons.set(i.StatsIntWisCha,`<div class="tri_icon">\n        ${t.UpgradeIcons.get(i.StatsInt)}\n        ${t.UpgradeIcons.get(i.StatsWis)}\n        ${t.UpgradeIcons.get(i.StatsCha)}\n    </div>`),t.UpgradeRarityLevels=new Map([[i.Sync,new Map([[n.Rarity.Artefact,1]])],[i.LandMovement,new Map([[n.Rarity.Black,-30],[n.Rarity.Common,10],[n.Rarity.Uncommon,20]])],[i.SeaMovement,new Map([[n.Rarity.Rare,20]])],[i.StepMovement,new Map([[n.Rarity.Epic,3]])],[i.DeathSaves,new Map([[n.Rarity.Black,-2],[n.Rarity.Rare,2],[n.Rarity.Legendary,5]])],[i.AC,new Map([[n.Rarity.Black,-1],[n.Rarity.Uncommon,1],[n.Rarity.Rare,2],[n.Rarity.Legendary,3]])],[i.HP,new Map([[n.Rarity.Black,-30],[n.Rarity.Common,10],[n.Rarity.Uncommon,20],[n.Rarity.Rare,30],[n.Rarity.Epic,50],[n.Rarity.Legendary,70]])],[i.Accuracy,new Map([[n.Rarity.Black,-1],[n.Rarity.Uncommon,1],[n.Rarity.Rare,2],[n.Rarity.Epic,3]])],[i.Damage,new Map([[n.Rarity.Uncommon,1],[n.Rarity.Rare,2],[n.Rarity.Epic,3]])],[i.ProfBonus,new Map([[n.Rarity.Legendary,1]])],[i.Initiative,new Map([[n.Rarity.Uncommon,1],[n.Rarity.Rare,2],[n.Rarity.Epic,3]])],[i.SavesAll,new Map([[n.Rarity.Rare,2]])],[i.SavesStrDexCon,new Map([[n.Rarity.Uncommon,2]])],[i.SavesIntWisCha,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsAll,new Map([[n.Rarity.Epic,2]])],[i.SkillsNinjutsu,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsWildHeart,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsIndoctrination,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsBrilliance,new Map([[n.Rarity.Uncommon,2]])],[i.SkillsProdigy,new Map([[n.Rarity.Rare,3]])],[i.StatsStr,new Map([[n.Rarity.Common,1]])],[i.StatsDex,new Map([[n.Rarity.Common,1]])],[i.StatsCon,new Map([[n.Rarity.Common,1]])],[i.StatsInt,new Map([[n.Rarity.Common,1]])],[i.StatsWis,new Map([[n.Rarity.Common,1]])],[i.StatsCha,new Map([[n.Rarity.Common,1]])],[i.StatsIntDex,new Map([[n.Rarity.Epic,2]])],[i.StatsWisCon,new Map([[n.Rarity.Epic,2]])],[i.StatsChaStr,new Map([[n.Rarity.Epic,2]])],[i.StatsStrDexCon,new Map([[n.Rarity.Legendary,3]])],[i.StatsIntWisCha,new Map([[n.Rarity.Legendary,3]])],[i.NULL,new Map([])]]),function(e){e[e.Sync=0]="Sync",e[e.ProfBonus=1]="ProfBonus",e[e.AC=2]="AC",e[e.HP=3]="HP",e[e.StatsStr=4]="StatsStr",e[e.StatsDex=5]="StatsDex",e[e.StatsCon=6]="StatsCon",e[e.StatsInt=7]="StatsInt",e[e.StatsWis=8]="StatsWis",e[e.StatsCha=9]="StatsCha",e[e.Accuracy=10]="Accuracy",e[e.Damage=11]="Damage",e[e.LandMovement=12]="LandMovement",e[e.SeaMovement=13]="SeaMovement",e[e.StepMovement=14]="StepMovement",e[e.Initiative=15]="Initiative",e[e.DeathSaves=16]="DeathSaves",e[e.SavesStrDexCon=17]="SavesStrDexCon",e[e.SavesIntWisCha=18]="SavesIntWisCha",e[e.SkillStealth=19]="SkillStealth",e[e.SkillPerception=20]="SkillPerception",e[e.SkillInsight=21]="SkillInsight",e[e.SkillArcana=22]="SkillArcana",e[e.SkillPersuasion=23]="SkillPersuasion",e[e.SkillMedicineNatureSurvival=24]="SkillMedicineNatureSurvival",e[e.SkillDeceptionIntimidationReligion=25]="SkillDeceptionIntimidationReligion",e[e.SkillsInvestigationAcrobaticsAthletics=26]="SkillsInvestigationAcrobaticsAthletics",e[e.SkillSlightHistoryPerformance=27]="SkillSlightHistoryPerformance",e[e.SkillOther=28]="SkillOther"}(s=t.AtomicUpgradeVertexType||(t.AtomicUpgradeVertexType={})),t.UpgradeToAtomic=new Map([[i.Sync,new Set([s.Sync])],[i.LandMovement,new Set([s.LandMovement])],[i.SeaMovement,new Set([s.SeaMovement])],[i.StepMovement,new Set([s.StepMovement])],[i.DeathSaves,new Set([s.DeathSaves])],[i.AC,new Set([s.AC])],[i.HP,new Set([s.HP])],[i.Accuracy,new Set([s.Accuracy])],[i.Damage,new Set([s.Damage])],[i.ProfBonus,new Set([s.ProfBonus])],[i.Initiative,new Set([s.Initiative])],[i.SavesAll,new Set([s.SavesStrDexCon,s.SavesIntWisCha])],[i.SavesStrDexCon,new Set([s.SavesStrDexCon])],[i.SavesIntWisCha,new Set([s.SavesIntWisCha])],[i.SkillsAll,new Set([s.SkillStealth,s.SkillPerception,s.SkillInsight,s.SkillArcana,s.SkillPersuasion,s.SkillsInvestigationAcrobaticsAthletics,s.SkillMedicineNatureSurvival,s.SkillDeceptionIntimidationReligion,s.SkillSlightHistoryPerformance,s.SkillOther])],[i.SkillsNinjutsu,new Set([s.SkillStealth,s.SkillsInvestigationAcrobaticsAthletics])],[i.SkillsWildHeart,new Set([s.SkillPerception,s.SkillMedicineNatureSurvival])],[i.SkillsIndoctrination,new Set([s.SkillInsight,s.SkillDeceptionIntimidationReligion])],[i.SkillsBrilliance,new Set([s.SkillArcana,s.SkillSlightHistoryPerformance])],[i.SkillsProdigy,new Set([s.SkillStealth,s.SkillPerception,s.SkillInsight,s.SkillArcana,s.SkillPersuasion])],[i.StatsStr,new Set([s.StatsStr])],[i.StatsDex,new Set([s.StatsDex])],[i.StatsCon,new Set([s.StatsCon])],[i.StatsInt,new Set([s.StatsInt])],[i.StatsWis,new Set([s.StatsWis])],[i.StatsCha,new Set([s.StatsCha])],[i.StatsIntDex,new Set([s.StatsInt,s.StatsDex])],[i.StatsWisCon,new Set([s.StatsWis,s.StatsCon])],[i.StatsChaStr,new Set([s.StatsCha,s.StatsStr])],[i.StatsStrDexCon,new Set([s.StatsStr,s.StatsDex,s.StatsCon])],[i.StatsIntWisCha,new Set([s.StatsInt,s.StatsWis,s.StatsCha])],[i.NULL,new Set]]),t.AtomicUpgradeDescGenerators=new Map([[s.Sync,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Attunement Slot Count</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.LandMovement,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Walking Speed</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e} ft</div>\n                 </div>`],[s.SeaMovement,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Swimming Speed</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e} ft</div>\n                 </div>`],[s.StepMovement,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Teleportation</div>\n                     <div class="theme_map__row__value">${e>0?`${e} &times; Walking speed`:"None"}</div>\n                 </div>`],[s.DeathSaves,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Death Saves</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.AC,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Armor Class</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.HP,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Hit Points</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.Accuracy,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">To-hit Modifier</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.Damage,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Per-hit Damage Modifer</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.ProfBonus,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Proficiency Bonus</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.Initiative,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Initiative</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SavesStrDexCon,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">STR / DEX / CON saves</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SavesIntWisCha,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">INT / WIS / CHA saves</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillStealth,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Stealth</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillPerception,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Perception</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillInsight,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Insight</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillArcana,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Arcana</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillPersuasion,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Persuasion</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillMedicineNatureSurvival,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Medicine, Nature, Survival</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillDeceptionIntimidationReligion,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Deception, Intimidation, Religion</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillsInvestigationAcrobaticsAthletics,e=>`<div class="theme_map__row">\n             <div class="theme_map__row__key">Investigation, Acrobatics, Athletics</div>\n             <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n         </div>`],[s.SkillSlightHistoryPerformance,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Slight-of-Hand, History, Performance</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.SkillOther,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">All Other Skills</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsStr,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Strength Score</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsDex,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Dexterity Score</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsCon,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Constitution Score</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsInt,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Intelligence Score</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsWis,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Wisdom Score</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`],[s.StatsCha,e=>`<div class="theme_map__row">\n                     <div class="theme_map__row__key">Charisma Score</div>\n                     <div class="theme_map__row__value">${e>=0?"+":""}${e}</div>\n                 </div>`]])},2001:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Vertex=void 0;const n=a(7027);class i extends n.BaseDOMGenerator{constructor(e,t){super(),this.graphID=e,this.numId=t,this.id=`${e}${String(this.numId).padStart(3,"0")}`,this.radial=[0,0],this._neighbours=new Map}setRadiallyWrt(e,t,a){a*=Math.PI/180;const[n,i]=e._cartesian;this.cartesian=[n+t*Math.cos(a),i+t*Math.sin(a)]}setLinearlyWrt(e,t,a){const[n,i]=e._cartesian;this.cartesian=[n+t,i+a]}sqDistanceFrom(e){return(this.x-e.x)*(this.x-e.x)+(this.y-e.y)*(this.y-e.y)}displacementAngleWithX(e){return i.vectorAngleWithX(e.x-this.x,e.y-this.y)}get x(){return this._cartesian[0]}get y(){return this._cartesian[1]}get r(){return this._radial[0]}get theta(){return this._radial[1]}set radial(e){this._radial=e;const[t,a]=e;this._cartesian=[t*Math.cos(a),t*Math.sin(a)]}set cartesian(e){this._cartesian=e;const[t,a]=e;this._radial=[Math.sqrt(t*t+a*a),i.vectorAngleWithX(t,a)]}static vectorAngleWithX(e,t){return 0!=e?Math.atan(t/e)+(e>0?0:(t>=0?1:-1)*Math.PI):Math.sign(t)*Math.PI/2}addNeighbour(e){if(e.v1==this)this._neighbours.set(e,e.v2);else{if(e.v2!=this)throw new Error;this._neighbours.set(e,e.v1)}}get neighbours(){return this._neighbours}}t.Vertex=i},9086:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.devotionMap=void 0;const n=a(3382),i=a(6453),s=a(1744),o=a(3560),r=a(794),l=new i.MapGraph("Dvo");function d(e,t,a,n,i=null,d=null,c=null){null==i&&(i=o.MapVertexStatus.Unknown),null==d&&(d=r.MapVertexType.Unknown);let h=new s.MapVertex(i,d,l);return null==a?n?h.radial=[e,t]:h.cartesian=[e,t]:n?h.setRadiallyWrt(a,e,t):h.setLinearlyWrt(a,e,t),null!=c&&(h.name=c),h}l.worldDistancePerPixel=1e3;const c=d(0,0,null,!1,o.MapVertexStatus.Safe,r.MapVertexType.Base,"The village of Po'Shan"),h=d(-40,-15,c,!1,null,null,null),p=d(-50,-60,h,!1,null,null,null),m=d(40,40,c,!1,null,null,null),u=d(60,-45,c,!1,null,null,null),g=d(500,0,c,!1,o.MapVertexStatus.Safe,r.MapVertexType.Perpendicularity,"<span>Devotion's Perpendicularity</span>"),f=d(80,25,m,!1,null,null,null),v=d(-15,100,c,!1,null,null,null),w=d(-50,-135,c,!1,null,null,null),y=d(-60,130,v,!1,null,null,null),I=d(130,40,y,!1,null,null,null),S=d(170,-50,I,!1,null,null,null),b=d(25,-90,g,!1,o.MapVertexStatus.Friendly,r.MapVertexType.Deity,"Mount Hui-ch'i"),_=d(140,10,w,!1,null,null,null),k=d(40,45,_,!1,null,null,null),D=d(150,-95,w,!0,o.MapVertexStatus.Friendly,r.MapVertexType.Town,"Alvarium"),P=d(140,-140,D,!0,null,null,null),E=d(50,-15,D,!0,null,null,null),A=d(70,-120,_,!1,null,null,null),C=d(150,-45,A,!0,null,null,null),T=d(200,60,S,!0,null,null,null),M=d(160,115,S,!0,null,null,null),N=d(240,105,I,!0,null,null,null),R=d(140,100,N,!0,null,null,null),x=d(128,65,N,!0,o.MapVertexStatus.Neutral,r.MapVertexType.Capital,"Sarausa"),$=d(216,30,N,!0,null,null,null),L=d(150,30,M,!0,null,null,null),H=d(120,75,L,!0,o.MapVertexStatus.Friendly,r.MapVertexType.City,"Aetna"),O=d(60,30,H,!0,null,null,null),G=d(120,-25,E,!0,null,null,null),B=d(100,-110,E,!0,null,null,null),V=d(150,-150,B,!0,o.MapVertexStatus.Combat,r.MapVertexType.Town,"Nix"),F=d(150,-130,V,!0,null,null,null),U=d(180,-75,V,!0,null,null,null),W=d(250,-75,B,!0,null,null,null),z=d(40,55,W,!0,null,null,null),j=d(40,-15,W,!0,null,null,null),K=d(40,-15,z,!0,null,null,null),Y=d(120,-30,B,!0,o.MapVertexStatus.Friendly,r.MapVertexType.Capital,"Sanctabella"),J=d(100,-15,Y,!0,null,null,null),q=d(140,30,x,!0,null,null,null),X=d(140,85,x,!0,null,null,null),Z=d(140,-155,R,!0,null,null,null),Q=d(250,115,Z,!0,null,null,null),ee=d(150,95,X,!0,null,null,null),te=d(150,85,q,!0,null,null,null),ae=d(70,60,te,!0,null,null,null),ne=d(135,130,ee,!0,o.MapVertexStatus.Black,r.MapVertexType.Death,"The 2nd Nightmare"),ie=d(150,115,O,!0,null,null,null),se=d(100,120,h,!0,null,null,null),oe=d(140,135,O,!0,null,null,null),re=d(130,105,x,!0,null,null,null),le=d(55,-160,se,!0,null,null,null),de=d(75,-40,w,!0,null,null,null),ce=d(125,-80,J,!0,null,null,null),he=d(80,-100,ce,!0,null,null,null),pe=d(120,140,D,!0,null,null,null),me=d(60,90,ie,!0,null,null,null),ue=d(70,120,M,!0,o.MapVertexStatus.Neutral,r.MapVertexType.ResearchHub,"??? Labs"),ge=d(240,-40,U,!0,null,null,null),fe=d(80,-60,U,!0,null,null,null),ve=d(180,85,Q,!0,null,null,null),we=d(125,-120,F,!0,null,null,null),ye=d(50,-90,j,!0,null,null,null);function Ie(e,t,a=1){new n.MapEdge(l,e,t).worldLengthMultiplier=a}ve.z=Math.sqrt(36e4-ve.x*ve.x),Q.z=Math.sqrt(36e4-Q.x*Q.x),Z.z=Math.sqrt(36e4-Z.x*Z.x),g.z=Math.sqrt(36e4-g.x*g.x),b.z=Math.sqrt(36e4-b.x*b.x),C.z=Math.sqrt(36e4-C.x*C.x),F.z=Math.sqrt(36e4-F.x*F.x),we.z=Math.sqrt(36e4-we.x*we.x),Ie(c,h,.8),Ie(c,v,.9),Ie(c,m),Ie(c,u,.6),Ie(c,g,.01),Ie(c,w),Ie(c,_,1.2),Ie(h,p,.4),Ie(h,v),Ie(h,se),Ie(p,pe,.3),Ie(m,f),Ie(u,f),Ie(u,_),Ie(g,S,.1),Ie(g,b,.1),Ie(f,S),Ie(v,S),Ie(w,D),Ie(w,_),Ie(w,de),Ie(y,I),Ie(y,se),Ie(y,le),Ie(I,S,.1),Ie(I,N),Ie(I,M),Ie(I,Z,.1),Ie(S,T),Ie(S,M),Ie(b,C,.1),Ie(_,k),Ie(_,E),Ie(_,A),Ie(D,P),Ie(D,pe),Ie(P,V),Ie(E,G),Ie(E,B),Ie(C,Y,.1),Ie(T,O),Ie(M,L),Ie(M,$),Ie(M,ue),Ie(N,R),Ie(N,x),Ie(N,$),Ie(R,X),Ie(R,re),Ie(x,q),Ie(x,X),Ie($,L),Ie(L,H),Ie(L,oe),Ie(H,O),Ie(O,ie),Ie(G,Y),Ie(G,J),Ie(B,V),Ie(B,W),Ie(B,Y),Ie(V,U),Ie(V,W),Ie(F,Y,.1),Ie(F,we,.1),Ie(U,ge),Ie(U,fe),Ie(W,z),Ie(W,j),Ie(z,K),Ie(z,Y),Ie(j,K),Ie(j,ye),Ie(K,J),Ie(Y,J),Ie(J,ce),Ie(q,ee),Ie(q,te),Ie(X,ee),Ie(X,re),Ie(Z,Q,.1),Ie(Q,ve,.1),Ie(ee,re),Ie(te,ae),Ie(te,ne),Ie(te,ie),Ie(te,oe),Ie(ee,ne),Ie(ae,ne),Ie(ae,me),Ie(ce,he),t.devotionMap=l},2224:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skillMap=void 0;const n=a(1055),i=a(8763),s=a(8235),o=a(8425),r=a(3319),l=new s.UpgradeGraph("sk");function d(e,t,a,n,i,s=null,r=null,d=0){const c=new o.UpgradeVertex(l,i,s,r,d);return null==a?n?c.radial=[e,t]:c.cartesian=[e,t]:n?c.setRadiallyWrt(a,e,t):c.setLinearlyWrt(a,e,t),c}function c(e,t,a=null,n=0){new i.UpgradeEdge(l,e,t,a).zIndex=n}const h=160,p=250,m=350,u=500,g=150,f=240,v=150,w=160,y=d(0,0,null,!1,!0,r.UpgradeVertexType.Sync,n.Rarity.Artefact,1),I=d(80,-45,y,!0,!0,r.UpgradeVertexType.StatsWis,n.Rarity.Common),S=d(80,-90,y,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Black),b=d(80,-135,y,!0,!0,r.UpgradeVertexType.StatsInt,n.Rarity.Common),_=d(80,180,y,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Uncommon),k=d(h,0,y,!0,!0,r.UpgradeVertexType.StatsCon,n.Rarity.Common),D=d(h,-45,y,!0,!0,r.UpgradeVertexType.DeathSaves,n.Rarity.Black),P=d(h,-90,y,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Common),E=d(h,-135,y,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Uncommon),A=d(h,-180,y,!0,!0,r.UpgradeVertexType.StatsDex,n.Rarity.Common),C=d(p,-22.5,y,!0,!0,r.UpgradeVertexType.StatsStr,n.Rarity.Common),T=d(p,-90,y,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Uncommon),M=d(p,-112.5,y,!0,!0,r.UpgradeVertexType.StatsCha,n.Rarity.Common),N=d(m,0,y,!0,!0,r.UpgradeVertexType.SavesIntWisCha,n.Rarity.Uncommon),R=d(m,-22.5,y,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Common),x=d(m,-45,y,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Rare),$=d(m,-90,y,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Rare),L=d(m,-112.5,y,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Common),H=d(m,-135,y,!0,!0,r.UpgradeVertexType.DeathSaves,n.Rarity.Rare),O=d(m,-157.5,y,!0,!0,r.UpgradeVertexType.SeaMovement,n.Rarity.Rare),G=d(m,-180,y,!0,!0,r.UpgradeVertexType.Initiative,n.Rarity.Uncommon),B=d(u,0,y,!0,!0,r.UpgradeVertexType.SkillsAll,n.Rarity.Epic),V=d(u,-22.5,y,!0,!0,r.UpgradeVertexType.Initiative,n.Rarity.Rare),F=d(u,-90,y,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Epic),U=d(u,-112.5,y,!0,!0,r.UpgradeVertexType.SavesStrDexCon,n.Rarity.Uncommon),W=d(u,-135,y,!0,!0,r.UpgradeVertexType.DeathSaves,n.Rarity.Legendary),z=d(u,-157.5,y,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Epic),j=d(u,-180,y,!0,!0,r.UpgradeVertexType.StepMovement,n.Rarity.Epic),K=d(720,-22.5,y,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Black),Y=d(720,-157.5,y,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Black),J=d(720,-90,y,!0,!0,r.UpgradeVertexType.HP,n.Rarity.Legendary),q=d(0,-500,K,!1,!0,r.UpgradeVertexType.Sync,n.Rarity.Artefact),X=d(80,30,q,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Rare),Z=d(80,150,q,!0,!0,r.UpgradeVertexType.SeaMovement,n.Rarity.Rare),Q=d(g,90,q,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Uncommon),ee=d(g,30,q,!0,!0,r.UpgradeVertexType.SkillsBrilliance,n.Rarity.Uncommon),te=d(g,-30,q,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Legendary),ae=d(g,-90,q,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Uncommon),ne=d(g,-150,q,!0,!0,r.UpgradeVertexType.ProfBonus,n.Rarity.Legendary),ie=d(g,150,q,!0,!0,r.UpgradeVertexType.SkillsNinjutsu,n.Rarity.Uncommon),se=d(f,90,q,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Common),oe=d(f,60,q,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Epic),re=d(f,-30,q,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Uncommon),le=d(330,0,q,!0,!0,r.UpgradeVertexType.StatsChaStr,n.Rarity.Epic),de=d(330,120,q,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Uncommon),ce=d(330,150,q,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Uncommon),he=d(0,-400,Y,!1,!0,r.UpgradeVertexType.Sync,n.Rarity.Artefact),pe=d(80,90,he,!0,!1),me=d(80,0,he,!0,!0,r.UpgradeVertexType.Damage,n.Rarity.Rare),ue=d(80,-135,he,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Rare),ge=d(v,180,he,!0,!0,r.UpgradeVertexType.SkillsWildHeart,n.Rarity.Uncommon),fe=d(v,90,he,!0,!0,r.UpgradeVertexType.AC,n.Rarity.Uncommon),ve=d(v,0,he,!0,!0,r.UpgradeVertexType.SkillsIndoctrination,n.Rarity.Uncommon),we=d(v,-90,he,!0,!0,r.UpgradeVertexType.ProfBonus,n.Rarity.Legendary),ye=d(270,180,he,!0,!0,r.UpgradeVertexType.StatsWisCon,n.Rarity.Epic),Ie=d(270,-30,he,!0,!0,r.UpgradeVertexType.LandMovement,n.Rarity.Black),Se=d(320,-30,Ie,!0,!0,r.UpgradeVertexType.Sync,n.Rarity.Artefact),be=d(80,-150,Se,!0,!0,r.UpgradeVertexType.StatsStrDexCon,n.Rarity.Legendary),_e=d(80,30,Se,!0,!0,r.UpgradeVertexType.StatsIntWisCha,n.Rarity.Legendary),ke=d(w,-30,Se,!0,!0,r.UpgradeVertexType.Accuracy,n.Rarity.Epic),De=d(w,-90,Se,!0,!0,r.UpgradeVertexType.SavesAll,n.Rarity.Rare),Pe=d(w,-150,Se,!0,!0,r.UpgradeVertexType.Initiative,n.Rarity.Epic),Ee=d(w,150,Se,!0,!0,r.UpgradeVertexType.SeaMovement,n.Rarity.Rare),Ae=d(w,90,Se,!0,!0,r.UpgradeVertexType.StatsIntDex,n.Rarity.Epic),Ce=d(w,30,Se,!0,!0,r.UpgradeVertexType.SkillsProdigy,n.Rarity.Rare),Te=d(80,0,y,!0,!1),Me=d(p,-45,y,!0,!1),Ne=d(p,-135,y,!0,!1),Re=d(80,-90,q,!0,!1),xe=d(f,120,q,!0,!1),$e=d(f,0,q,!0,!1),Le=d(v,-30,he,!0,!1);c(y,S),c(Te,k),c(Te,I,y,-1),c(I,S,y,-1),c(S,b,y,-1),c(b,_,y,-1),c(D,P,y,-2),c(P,E,y,-2),c(S,P),c(_,A),c(D,Me),c(C,Me,y,-3),c(P,T),c(M,Ne,y,-3),c(Me,x),c(Ne,E),c(N,R,y,-4),c(R,x,y,-4),c(T,$),c(M,L),c(Ne,H),c($,L,y,-5),c(H,O,y,-5),c(O,G,y,-5),c(A,G),c(N,B),c(R,V),c($,F),c(L,U),c(U,W,y,-6),c(O,z),c(z,j,y,-6),c(V,K),c(z,Y),c(F,J),c(K,se),c(q,X),c(q,Z),c(Z,X,q,-1),c(Re,Z,q,-1),c(X,ee),c(Re,ae),c(Z,ie),c(Q,se),c(Q,ee,q,-2),c(te,ae,q,-2),c(ne,ie,q,-2),c(xe,se,q,-3),c(se,oe,q,-3),c(oe,re,q,-3),c($e,le),c(xe,de),c(te,re),c(le,ce,q,-4),c(ce,de,q,-4),c(ie,ce),c(Y,fe),c(he,pe),c(he,me),c(he,ue),c(me,ue,he,-1),c(ue,pe,he,-1),c(ge,fe,he,-2),c(fe,ve,he,-2),c(fe,Le,he,-2),c(Le,we,he,-2),c(pe,fe),c(ge,ye),c(Le,Ie),c(Ie,ye,he,-3),c(Ie,Ee),c(Se,be),c(Se,_e),c(_e,be,Se,-1),c(ke,De,Se,-2),c(De,Pe,Se,-2),c(Pe,Ee,Se,-2),c(Ee,Ae,Se,-2),c(Ae,Ce,Se,-2),c(be,Pe),c(_e,Ce),t.skillMap=l},7187:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.activateCombatScenarios=void 0,t.activateCombatScenarios=function(){$("#combat").on("click",".combat_picker__item",(function(){$(".combat_picker__item").removeClass("combat_picker__item--selected"),$(this).addClass("combat_picker__item--selected"),$(".combat_scenario").hide(),$(`.combat_scenario[data-combat-id="${$(this).data("pickerId")}"]`).show()}))}},2036:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupHoth=void 0;const n=a(7978),i=a(2228),s=a(4492),o=a(640);t.setupHoth=function(){$(".mob_space").each((function(){const e=i.NpcId[$(this).data("npcId")],t=s.Character.get(e);$(this).empty();const a=`<div class="mob_space__header">Target: ${t.name}</div>`;$(`${a}`).appendTo($(this));const o=$("<div class='spinners'></div>");let r=" active";const l=[];for(let e=t.stats.get(n.DStat.Str).stat;e>0;e--)l.push(`<div class="spinner__slots__slot${r}" data-stat-id="STR" data-stat-val="${e}">${e}</div>`),r="";$(`<div class="spinners">\n                <div class="spinner">\n                    <div class="spinner__title">STR</div>\n                    <div class="spinner__slots">\n                    ${l.join("")}\n                    </div>\n                </div>\n            </div>`).appendTo(o);const d=[];r=" active";for(let e=t.stats.get(n.DStat.Dex).stat;e>0;e--)d.push(`<div class="spinner__slots__slot${r}" data-stat-id="DEX" data-stat-val="${e}">${e}</div>`),r="";$(`<div class="spinners">\n                <div class="spinner">\n                    <div class="spinner__title">DEX</div>\n                    <div class="spinner__slots">\n                    ${d.join("")}\n                    </div>\n                </div>\n            </div>`).appendTo(o);const c=[];r=" active";for(let e=t.stats.get(n.DStat.Con).stat;e>0;e--)c.push(`<div class="spinner__slots__slot${r}" data-stat-id="CON" data-stat-val="${e}">${e}</div>`),r="";$(`<div class="spinners">\n                <div class="spinner">\n                    <div class="spinner__title">CON</div>\n                    <div class="spinner__slots">\n                    ${c.join("")}\n                    </div>\n                </div>\n            </div>`).appendTo(o);const h=[];r=" active";for(let e=t.stats.get(n.DStat.Int).stat;e>0;e--)h.push(`<div class="spinner__slots__slot${r}" data-stat-id="INT" data-stat-val="${e}">${e}</div>`),r="";$(`<div class="spinners">\n                <div class="spinner">\n                    <div class="spinner__title">INT</div>\n                    <div class="spinner__slots">\n                    ${h.join("")}\n                    </div>\n                </div>\n            </div>`).appendTo(o);const p=[];r=" active";for(let e=t.stats.get(n.DStat.Wis).stat;e>0;e--)p.push(`<div class="spinner__slots__slot${r}" data-stat-id="WIS" data-stat-val="${e}">${e}</div>`),r="";$(`<div class="spinners">\n                <div class="spinner">\n                    <div class="spinner__title">WIS</div>\n                    <div class="spinner__slots">\n                    ${p.join("")}\n                    </div>\n                </div>\n            </div>`).appendTo(o);const m=[];r=" active";for(let e=t.stats.get(n.DStat.Cha).stat;e>0;e--)m.push(`<div class="spinner__slots__slot${r}" data-stat-id="CHA" data-stat-val="${e}">${e}</div>`),r="";$(`<div class="spinners">\n                <div class="spinner">\n                    <div class="spinner__title">CHA</div>\n                    <div class="spinner__slots">\n                    ${m.join("")}\n                    </div>\n                </div>\n            </div>`).appendTo(o),o.appendTo($(this))}));const e=new Map([["STR",30],["DEX",24],["CON",29],["INT",21],["WIS",18],["CHA",28]]);$("#combat").on("click",".spinner__slots__slot",(function(){const t=$(this).data("statId"),a=$(this).data("statVal");e.set(t,a),$(`.spinner__slots__slot[data-stat-id=${t}]`).removeClass("active"),$(this).addClass("active"),(0,o.setupEphremis)(e)}))}},8129:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0,t.Action=class{constructor(e,t){this._activation=e,this._content=t}measureImpact(e){throw new Error("Not implemented.")}get activation(){return this._activation}bindStats(e){}createContent(){return this._content}}},9275:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ActionContext=void 0;const n=a(7978),i=a(2870);t.ActionContext=class{constructor(e){this.stats=e}get pb(){return this.stats.pb.mod()}mod(e){return this.stats.stats.get(e).mod}hit(e,{prof:t=n.ProficiencyLevel.Prof,mod:a=0}){return(0,i.wrapRoll)(this.stats.stats.get(e).mod+this.stats.pb.mod(t)+a)}dc(e,{prof:t=n.ProficiencyLevel.Prof,mod:a=0}){return`DC ${this.stats.stats.get(e).mod+this.stats.pb.mod(t)+a+8}`}}},2870:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.enableRolling=t.wrapActivation=t.wrapCreatureSize=t.wrapSense=t.wrapSpeed=t.wrapSkill=t.wrapCondition=t.wrapDamageType=t.wrapRoll=t.registerRollable=void 0;const n=a(2891),i=a(3269),s=a(7978),o=new Map,r=new Map;let l=0;function d(e){if(r.has(e))return r.get(e);const t=l++;return o.set(t,e),r.set(e,t),t}t.registerRollable=d,t.wrapRoll=function(e){let t,a=null;if(e instanceof n.Dice)a=new Map([[e,1]]);else if(Array.isArray(e))if(Array.isArray(e[0])){a=new Map;for(const[t,n]of e)a.set(n,(a.has(n)?a.get(n):0)+t)}else{let t=e;a=new Map([[t[1],t[0]]])}else e instanceof Map&&(a=e);const s=[];if(a){a=new Map([...a.entries()].sort(((e,t)=>t[0].sides-e[0].sides)));for(const[e,t]of a.entries()){if(0==t)continue;const a=t>0?0==s.length?"":"+":"-",n=e.sides>1?`d${e.sides}`:"";s.push(`${a}${Math.abs(Math.round(t))}${n}`)}t=d(new i.DamageRollable(a))}else{if("number"!=typeof e)throw new Error(`Unrecognized type of ${e} (${typeof e}) to wrap roll over`);s.push((e>=0?"+":"")+e),t=d(i.NatRollable.generate(e))}return` <span class="rollable" data-rollable-uid="${t}">${s.join("")}</span> `},t.wrapDamageType=function(e){return e>s.DamageType._NonStandard?`<span class="damage_type__nonstd">${s.DamageType[e]}</span>`:`<span class="damage_type">${s.DamageType[e]}</span>`},t.wrapCondition=function(e){return e>s.Condition._NonStandard?`<span class="condition__nonstd">${s.Condition[e]}</span>`:`<span class="condition">${s.Condition[e]}</span>`},t.wrapSkill=function(e){return e>s.Skill._NonStandard?`<span class="skill__nonstd">${s.Skill[e]}</span>`:`<span class="skill">${s.Skill[e]}</span>`},t.wrapSpeed=function(e){return e>s.Speed._NonStandard?`<span class="speed__nonstd">${s.Speed[e]}</span>`:`<span class="speed">${s.Speed[e]}</span>`},t.wrapSense=function(e){return e>s.Sense._NonStandard?`<span class="sense__nonstd">${s.Sense[e]}</span>`:`<span class="sense">${s.Sense[e]}</span>`},t.wrapCreatureSize=function(e){return e>s.CreatureSize._NonStandard?`<span class="creatureSize__nonstd">${s.CreatureSize[e]}</span>`:`<span class="creatureSize">${s.CreatureSize[e]}</span>`},t.wrapActivation=function(e,t=!1){const a=t?"s":"";return e>s.Activation._NonStandard?`<span class="activation__nonstd">${s.Activation[e]}${a}</span>`:`<span class="activation">${s.Activation[e]}${a}</span>`},t.enableRolling=function(){const e=$("#toast-container");$("#beastiary").on("click",".rollable",(function(t){const a=$(this).data("rollableUid"),s=o.get(a);let r=n.RollVariant.Normal;s instanceof i.NatRollable?t.shiftKey?r=t.altKey?n.RollVariant.SuperAdvantage:n.RollVariant.Advantage:t.ctrlKey&&(r=t.altKey?n.RollVariant.SuperDisadvantage:n.RollVariant.Disadvantage):s instanceof i.DamageRollable&&t.altKey&&(r=n.RollVariant.Critical),s.roll(r),console.log(s.result);const l=[];for(const[e,t]of s.parts.entries())if(e!=n.D1)for(const e of t)l.push(e);console.log(l);const d=$(`\n            <div class="toast">\n                <div class="roll_result">${s.result}</div>\n                <div class="roll_buildup">${l.join(", ")}</div>\n            </div>`);d.hide(),d.appendTo(e),d.fadeIn(400),setTimeout((()=>{d.fadeOut(400,(()=>{d.remove()}))}),3e3)}))}},4492:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Character=void 0;const n=a(7978),i=a(5477),s=a(6091),o=a(7673),r=a(3738),l=a(9785),d=a(1738),c=a(9815),h=a(1312);class p{constructor(e){this.id=e,p._Index.set(e,this),this._coreAspect=null,this._dStatsAspect=null,this._dSkillsAspect=null,this._cardAspect=null,this._opinionAspect=null,this._combatAspect=null,this._sheetAspect=null}static get(e){return p._Index.get(e)}getSkillMod(e,t){return this.dSkillsAspect.getSkillMod(e,t)}get upgradedSKills(){return this.dSkillsAspect.upgradedSKills}getCardIndex(){return this.cardAspect.getCardIndex()}generatePrimaryToken(){return this.cardAspect.generatePrimaryToken()}createLink(e){return this.cardAspect.createLink(e)}generateCard(e){return this.cardAspect.generateCard(e)}render(){return""}finalize(){let e;for(e of(console.log("A"),[this._coreAspect,this._dStatsAspect,this._dSkillsAspect,this._opinionAspect,this._cardAspect,this._combatAspect,this._sheetAspect]))null!=e&&e.finalize()}get ac(){return this._combatAspect.ac}get stats(){return this.dStatsAspect.stats}mod(e){return this.dStatsAspect.mod(e)}get pb(){return this.dStatsAspect.pb}get hpDice(){return this.combatAspect.hpDice}get hp(){return this.combatAspect.hp}get speeds(){return this.combatAspect.speeds}get senses(){return this.combatAspect.senses}get saves(){return this.combatAspect.saves}dc(e){return this._combatAspect.dc(e)}get passivePerception(){return this.combatAspect.passivePerception}get passiveStealth(){return this.combatAspect.passiveStealth}get damageRes(){return this.combatAspect.damageRes}get conditionImmunities(){return this.combatAspect.conditionImmunities}get actions(){return this.combatAspect.actions}get actionContentAPI(){return this.dStatsAspect.actionContentAPI}get isOpinionated(){return this.opinionAspect.isOpinionated}get passiveDeception(){return this.opinionAspect.passiveDeception}get name(){return this.coreAspect.name}get imgPath(){return this.coreAspect.imgPath}get core(){return null==this._coreAspect&&(this._coreAspect=new r.CoreAspect(this)),this._coreAspect}get dStats(){return null==this._dStatsAspect&&(this._dStatsAspect=new d.DStatsAspect(this)),this._dStatsAspect}get dSKills(){return null==this._dSkillsAspect&&(this._dSkillsAspect=new l.DSkillsAspect(this)),this._dSkillsAspect}get opinions(){return null==this._opinionAspect&&(this._opinionAspect=new c.OpinionAspect(this)),this._opinionAspect}get card(){return null==this._cardAspect&&(this._cardAspect=new s.CardAspect(this)),this._cardAspect}get combat(){return null==this._combatAspect&&(this._combatAspect=new o.CombatAspect(this)),this._combatAspect}get sheet(){return null==this._sheetAspect&&(this._sheetAspect=new h.SheetAspect(this)),this._sheetAspect}get STR(){return this.mod(n.DStat.Str)}get DEX(){return this.mod(n.DStat.Dex)}get CON(){return this.mod(n.DStat.Con)}get INT(){return this.mod(n.DStat.Int)}get WIS(){return this.mod(n.DStat.Wis)}get CHA(){return this.mod(n.DStat.Cha)}get SemiProf(){return this.pb.mod(n.ProficiencyLevel.Half)}get Prof(){return this.pb.mod(n.ProficiencyLevel.Prof)}get Expertise(){return this.pb.mod(n.ProficiencyLevel.Expert)}get cardAspect(){if(null==this._cardAspect)throw new i.AspectNotSetupException("cardAspect");return this._cardAspect}get opinionAspect(){if(null==this._opinionAspect)throw new i.AspectNotSetupException("opinionAspect");return this._opinionAspect}get dSkillsAspect(){if(null==this._dSkillsAspect)throw new i.AspectNotSetupException("dSkillsAspect");return this._dSkillsAspect}get dStatsAspect(){if(null==this._dStatsAspect)throw new i.AspectNotSetupException("dStatsAspect");return this._dStatsAspect}get coreAspect(){if(null==this._coreAspect)throw new i.AspectNotSetupException("coreAspect");return this._coreAspect}get combatAspect(){if(null==this._combatAspect)throw new i.AspectNotSetupException("combatAspect");return this._combatAspect}get sheetAspect(){if(null==this._sheetAspect)throw new i.AspectNotSetupException("sheetAspect");return this._sheetAspect}}t.Character=p,p._Index=new Map},9692:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.AspectFactoryFlag=void 0,(a=t.AspectFactoryFlag||(t.AspectFactoryFlag={}))[a.NameSetup=0]="NameSetup",a[a.ImgPathSetup=1]="ImgPathSetup",a[a.StatsSetup=2]="StatsSetup",a[a.ProficiencySetup=3]="ProficiencySetup",a[a.SkillsDeclared=4]="SkillsDeclared",a[a.SkillsFinalized=5]="SkillsFinalized"},5477:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AspectNotSetupException=void 0;class a extends Error{}t.AspectNotSetupException=a},3206:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseAspect=void 0;const n=a(2228),i=a(9692),s=a(5477),o=a(2448);t.BaseAspect=class{constructor(e){this.character=e,this.flags=new Set}setupSentinel(e){if(this.flags.has(e))throw new o.DuplicateSetupException;this.flags.add(e)}buildSentinel(e,t){if(this.flags.has(t))throw new o.DuplicateSetupException;this.flags.add(e)}ensure(e,t=!0){if(!this.flags.has(e)){if(t)throw new s.AspectNotSetupException;console.warn(`Aspect Factory setup not completed wrt ${i.AspectFactoryFlag[e]} on character ${n.NpcId[this.character.id]}.`)}}finalize(){}get id(){return this.character.id}}},6091:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CardAspect=void 0;const n=a(447),i=a(2228),s=a(3206);class o extends s.BaseAspect{constructor(e){super(e),this.characterCore=e,this.tags=[],this._story="",this.images=new Map,this.images.set(o.defaultPrimaryImageName,this.characterCore.imgPath)}getCardIndex(){return`[character|${this.id}]`}generateCard(e){let t;if(e||!(this.images.size>1)&&this.images.has(o.defaultPrimaryImageName))t=`<img src="./assets/images/${this.images.get(o.defaultPrimaryImageName)}" \n                               class="token" \n                               alt="[NULL]">`;else{const e=[],a=[];let n=!0;for(const[t,i]of this.images.entries())e.push(`<img src="./assets/images/${i}" \n                          alt="[NULL]" \n                          class="token"\n                          data-token="${t}" \n                          style=${n?'""':'"display: none;"'}>`),a.push(`<span class="token_selector tag ${n?"tag--selected":""}" \n                           data-token="${t}">${t}</span>`),n=!1;t=`<div class='tokens'>${e.join("")}</div>\n                          <div>${a.join("")}</div>`}const a=this.tags.map((e=>`<span class="tag">${e}</span>`)).join("");return`<div class="character_card"\n                     data-index-key="${this.getCardIndex()}"\n                     >\n                    <div class="token_space">${t}</div>\n                    <div class="content">\n                        <h5  class="name">${this.characterCore.name}</h5>\n                        <div class="tags">${a}</div>\n                        <div class="details">${this._story}</div>\n                        <div class="summary">${this._summary}</div>\n                    </div>\n                </div>`}set summary(e){this._summary=e}set story(e){this._story=e}set primaryImageTitle(e){this.images.set(e,this.images.get(o.defaultPrimaryImageName)),this.images.delete(o.defaultPrimaryImageName)}addAlternateImage(e,t){this.images.has(e)&&console.warn(`Image override for ${e}`),this.images.set(e,t)}addCardTag(e){this.tags.push(e)}createLink(e){return`<span class="card_link" \n                      data-index-key="${this.getCardIndex()}">\n                    ${e||this.characterCore.name}\n                </span>`}generatePrimaryToken(){return`<img src="./assets/images/${this.characterCore.imgPath}" \n                     class="token" \n                     alt="[NULL]" \n                     data-index-key="${this.getCardIndex()}">`}finalize(){super.finalize(),console.log("Registering card for",i.NpcId[this.id]),$("#tokens .token_space[data-campaign='2'][data-arc='1']").append($(this.generatePrimaryToken())),n.Card.register(this)}}t.CardAspect=o,o.defaultPrimaryImageName="default"},7673:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CombatAspect=void 0;const n=a(190),i=a(2891),s=a(7978),o=a(2228),r=a(3206);class l extends r.BaseAspect{constructor(e){super(e),this.statsAspect=e,this.skillsAspect=e,this.baseACSources=[],this.acBonuses=[],this.classes=new Map,this._hpDice=new Map,this._bonusHP=0,this._speeds=new Map,this._senses=new Map,this._res=new Map,this._saves=new Map,this._conditionImmunities=new Set,this._actions=[],this.bioHpDice=[]}addBioHpDice(e,t){this.bioHpDice.push([e,t])}dc(e){return 8+this.statsAspect.mod(e)+this.statsAspect.pb.mod()}setMagicalArmor(e){this.baseACSources.push(e+this.statsAspect.mod(s.DStat.Dex))}setLightArmor(e){this.baseACSources.push(e+this.statsAspect.mod(s.DStat.Dex))}setMediumArmor(e){this.baseACSources.push(e+Math.min(2,this.statsAspect.mod(s.DStat.Dex)))}setHeavyArmor(e){this.baseACSources.push(e)}addAcBonus(e){this.acBonuses.push(e)}set bladeSinger(e){this.classes.has(s.AdventurerClass.Wizard)||console.warn("BladeSinger on non wizard:",o.NpcId[this.id]),this.baseACSources.push(this.statsAspect.mod(s.DStat.Dex)+this.statsAspect.mod(s.DStat.Int)+10)}addClassLevels(e,t){e==s.AdventurerClass.Monk?this.baseACSources.push(this.statsAspect.mod(s.DStat.Dex)+this.statsAspect.mod(s.DStat.Wis)+10):e==s.AdventurerClass.Barbarian&&this.baseACSources.push(this.statsAspect.mod(s.DStat.Dex)+this.statsAspect.mod(s.DStat.Con)+10),this.classes.set(e,(this.classes.has(e)?this.classes.get(e):0)+t)}get bonusHP(){return this._bonusHP}set bonusHP(e){this._bonusHP=e}computeHP(){this._hpDice.clear();const e=this.statsAspect.mod(s.DStat.Con);for(const[t,a]of this.classes.entries()){if(a<1)throw new Error("AAAAAAARRRRRRRRRRGH");0==this._hpDice.size?((0,n.updateMap)(this._hpDice,i.D1,s.ClassHitDice.get(t).sides+e),(0,n.updateMap)(this._hpDice,s.ClassHitDice.get(t),a-1)):(0,n.updateMap)(this._hpDice,s.ClassHitDice.get(t),a)}for(const[e,t]of this.bioHpDice)(0,n.updateMap)(this._hpDice,t,e);let t=0;for(const[e,a]of this._hpDice.entries())1!=e.sides&&(t+=a);(0,n.updateMap)(this._hpDice,i.D1,t*e),this._hp=0;for(const[e,t]of this._hpDice.entries())this._hp+=t*e.E;this._hp=Math.round(this._hp)}setSave(e,t=s.ProficiencyLevel.Prof,a=0){this._saves.set(e,[t,a])}setSpeed(e,t){this._speeds.set(e,t)}setSense(e,t){this._senses.set(e,t)}setRes(e,t){this._res.set(e,t)}addConditionImmunity(e){this._conditionImmunities.add(e)}addAction(e){this._actions.push(e)}get ac(){let e=10+this.statsAspect.mod(s.DStat.Dex);for(const t of this.baseACSources){if(t<e)return;e=t}let t=e;for(const e of this.acBonuses)t+=e;return t}get stats(){return this.statsAspect.stats}get pb(){return this.statsAspect.pb}get hpDice(){return this._hpDice}get hp(){return this._hp}get speeds(){return this._speeds}get senses(){return this._senses}get saves(){return this._saves}get passivePerception(){return this.skillsAspect.getSkillMod(s.Skill.Perception)+10}get passiveStealth(){return this.skillsAspect.getSkillMod(s.Skill.Stealth)+10}get damageRes(){return this._res}get conditionImmunities(){return this._conditionImmunities}get actions(){return this._actions}}t.CombatAspect=l},3738:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreAspect=void 0;const n=a(9692),i=a(3206);class s extends i.BaseAspect{constructor(e){super(e)}set name(e){this.setupSentinel(n.AspectFactoryFlag.NameSetup),this._name=e}get name(){return this.ensure(n.AspectFactoryFlag.NameSetup),this._name}set imgPath(e){this.setupSentinel(n.AspectFactoryFlag.ImgPathSetup),this._imgPath=e}get imgPath(){return this.ensure(n.AspectFactoryFlag.ImgPathSetup),this._imgPath}}t.CoreAspect=s},9785:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DSkillsAspect=void 0;const n=a(7978),i=a(9692),s=a(3206);class o extends s.BaseAspect{constructor(e){super(e),this.c=e,this.dStats=e,this.skills=new Map}setSkillProficiency(e,t=n.ProficiencyLevel.Prof,a=0){this.buildSentinel(i.AspectFactoryFlag.SkillsDeclared,i.AspectFactoryFlag.SkillsFinalized),this.skills.set(e,[t,a])}upgradeSkillProficiency(e,t=n.ProficiencyLevel.Prof,a=0){if(this.buildSentinel(i.AspectFactoryFlag.SkillsDeclared,i.AspectFactoryFlag.SkillsFinalized),this.skills.has(e)){const[n,i]=this.skills.get(e);if(t<n||a<i)throw new Error("This isn't a skill upgrade.")}this.setSkillProficiency(e,t,a)}getSkillMod(e,t){let a,s;if(this.ensure(i.AspectFactoryFlag.SkillsFinalized,!1),this.skills.has(e)?[a,s]=this.skills.get(e):(a=n.ProficiencyLevel.None,s=0),t&&(a=t),this.skills.has(n.Skill._ALL)){const[e,t]=this.skills.get(n.Skill._ALL);a<e&&(a=e),s<t&&(s=t)}return this.dStats.mod(n.StatForSkill.get(e))+this.dStats.pb.mod(a)+s}finalizeSkills(){this.setupSentinel(i.AspectFactoryFlag.SkillsFinalized)}get upgradedSKills(){const e=new Map;if(this.skills.has(n.Skill._ALL)){const[t,a]=this.skills.get(n.Skill._ALL);for(const i of[n.Skill.Acrobatics,n.Skill.AnimalHandling,n.Skill.Arcana,n.Skill.Athletics,n.Skill.Deception,n.Skill.History,n.Skill.Insight,n.Skill.Intimidation,n.Skill.Investigation,n.Skill.Medicine,n.Skill.Nature,n.Skill.Perception,n.Skill.Performance,n.Skill.Persuasion,n.Skill.Religion,n.Skill.SlightOfHand,n.Skill.Stealth,n.Skill.Survival])e.set(i,this.dStats.mod(n.StatForSkill.get(i))+this.dStats.pb.mod(t)+a)}for(const[t,[a,i]]of this.skills.entries())e.set(t,this.dStats.mod(n.StatForSkill.get(t))+this.dStats.pb.mod(a)+i);return e}}t.DSkillsAspect=o},1738:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DStatsAspect=void 0;const n=a(7978),i=a(9275),s=a(9692),o=a(3206);class r extends o.BaseAspect{constructor(e){super(e),this._stats=new Map,this._pb=null}initializeStats(e,t,a,i,o,r){this.setupSentinel(s.AspectFactoryFlag.StatsSetup),this._stats.set(n.DStat.Str,new n.StatValue(e)),this._stats.set(n.DStat.Dex,new n.StatValue(t)),this._stats.set(n.DStat.Con,new n.StatValue(a)),this._stats.set(n.DStat.Int,new n.StatValue(i)),this._stats.set(n.DStat.Wis,new n.StatValue(o)),this._stats.set(n.DStat.Cha,new n.StatValue(r))}get stats(){return this._stats}get pb(){return this.ensure(s.AspectFactoryFlag.ProficiencySetup),this._pb}set pb(e){this.setupSentinel(s.AspectFactoryFlag.ProficiencySetup),this._pb=e}get actionContentAPI(){return new i.ActionContext(this)}mod(e){return this._stats.get(e).mod}}t.DStatsAspect=r},2448:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DuplicateSetupException=void 0;class a extends Error{}t.DuplicateSetupException=a},9815:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OpinionAspect=void 0;const n=a(7978),i=a(3206);class s extends i.BaseAspect{constructor(e){super(e),this.dSkills=e}get isOpinionated(){return this._isOpinionated}set isOpinionated(e){this._isOpinionated=e}get passiveDeception(){return 10+this.dSkills.getSkillMod(n.Skill.Deception)}}t.OpinionAspect=s},1312:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SheetAspect=void 0;const n=a(7978),i=a(5506),s=a(2228),o=a(2870),r=a(4492),l=a(3206);class d extends l.BaseAspect{constructor(e){super(e),this.combatAspect=e,this.coreAspect=e,this.skillAspect=e,this.statsAspect=e,this._subtitle="",this._acDesc="",this._cr=null}render(){const e=[];for(const[t,a]of this.combatAspect.speeds.entries())e.push(`${n.Speed[t]} ${a} ft.`);const t=[];for(const[e,a]of this.combatAspect.senses.entries())t.push(`${n.Sense[e]} ${a} ft.`);const a=[];for(const e of[n.DStat.Str,n.DStat.Dex,n.DStat.Con,n.DStat.Int,n.DStat.Wis,n.DStat.Cha]){const t=this.combatAspect.stats.get(e);a.push(`<td>${t.stat} ${(0,o.wrapRoll)(t.mod)}</td>`)}const i=[];for(const[e,[t,a]]of this.combatAspect.saves.entries()){const s=this.statsAspect.mod(e)+this.combatAspect.pb.mod(t)+a;i.push(`${n.DStat[e]} ${(0,o.wrapRoll)(s)}`)}const s=[];for(const[e,t]of this.skillAspect.upgradedSKills.entries())s.push(`${(0,o.wrapSkill)(e)} ${(0,o.wrapRoll)(t)}`);const r=[],l=[],d=[];for(const[e,t]of this.combatAspect.damageRes.entries())if(t<0){const a=-100==t?"":`(${100-t}% damage)`;r.push(`${(0,o.wrapDamageType)(e)} ${a}`)}else if(0==t);else if(t<100){const a=50==t?"":`(${100-t}% damage)`;l.push(`${(0,o.wrapDamageType)(e)} ${a}`)}else{const a=100==t?"":`(Heals for ${t-100}% damage)`;d.push(`${(0,o.wrapDamageType)(e)} ${a}`)}const c=0==r.length?"":`<tr><td>Damage Vulnerabilities</td><td>${r.join(", ")}</td></tr>`,h=0==l.length?"":`<tr><td>Damage Resistances</td><td>${l.join(", ")}</td></tr>`,p=0==d.length?"":`<tr><td>Damage Immunities</td><td>${d.join(", ")}</td></tr>`,m=[];for(const e of this.combatAspect.conditionImmunities.values())m.push(n.Condition[e]);const u=0==m.length?"":`<tr><td>Condition Immunities</td><td>${m.join(", ")}</td></tr>`,g=new Map;for(const e of this.combatAspect.actions){const t=e.activation;g.has(t)||g.set(t,[]),e.bindStats(this.statsAspect),g.get(t).push(e.createContent())}const f=[];for(const[e,t]of g.entries()){e!=n.Activation.Special&&f.push(`<h4 class="sheet_section_header">${(0,o.wrapActivation)(e,!0)}</h4>`);for(const e of t)f.push(`<div class="sheet_content">${e}</div>`)}return`\n        <div class="stat_sheet" id="stat_sheet_${this.category}_${this.id}">\n            <div class="sheet_header">\n                <div class="header_zone">\n                <h3 class="sheet_title">${this.coreAspect.name}</h3>\n                <div class="sheet_subtitle">${(0,o.wrapCreatureSize)(this._size)} ${this._subtitle}</div>\n                </div>\n                <div class="header_zone">\n                    <table class="ignore_common_style">\n                        <tr><td>Armor Class</td><td>${this.combatAspect.ac} ${this._acDesc}</td></tr>\n                        <tr><td>Hit Points</td><td>${this.combatAspect.hp} ${(0,o.wrapRoll)(this.combatAspect.hpDice)}</td></tr>\n                        <tr><td>Speed</td><td>${e.join(", ")}</td></tr>\n                    </table>\n                </div>\n                <div class="header_zone">\n                    <table class="stats_table ignore_common_style">\n                        <tr><th>STR</th><th>DEX</th><th>CON</th><th>INT</th><th>WIS</th><th>CHA</th></tr>\n                        <tr>${a.join("")}</tr>\n                    </table>\n                </div>\n                <div class="header_zone">\n                    <table class="ignore_common_style">\n                        <tr><td>Senses</td><td>${t.join(" ")}</td></tr>\n                        <tr><td>Saving Throws</td><td>${i.join(" ")}</td></tr>\n                        <tr><td>Skills</td><td>${s.join(" ")}</td></tr>\n                        <tr><td>Challenge Rating</td><td>${this._cr.cr}</td></tr>\n                        <tr><td>Proficiency Bonus</td><td>${this.combatAspect.pb.mod()}</td></tr>\n                        ${c}${h}${p}${u}\n                    </table>\n                </div>\n            </div>\n            ${f.join("")}\n        </div>`}set subtitle(e){this._subtitle=e}set acDesc(e){this._acDesc=e}set cr(e){this._cr=e}set size(e){this._size=e}finalize(){super.finalize(),console.log("Finalizing sheet",r.Character.get(s.NpcId.Ephremis).CON),(0,i.setupStatSheet)(this.category,`${this.category}_${this.id}`,this.coreAspect.name,this.coreAspect.imgPath,(()=>this),!0)}}t.SheetAspect=d},4190:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCharacters=void 0;const n=a(7395);t.setupCharacters=function(){(0,n.setupC2A1)()}},7395:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupC2A1=void 0;const n=a(2228),i=a(4492),s=a(348),o=a(975),r=a(7817),l=a(8412),d=a(1672),c=a(4986),h=a(2481),p=a(8453),m=a(3728),u=a(2218),g=a(8231),f=a(9267),v=a(7573),w=a(5563),y=a(5157);t.setupC2A1=function(){(0,s.setupAthlon)(),(0,o.setupCecilia)(),(0,r.setupCoroto)(),(0,l.setupDawn)(),(0,d.setupDusk)(),(0,c.setupElysium)(),(0,h.setupErica)(),(0,p.setupEzell)(),(0,m.setupHina)(),(0,u.setupIona)(),(0,g.setupJaye)(),(0,f.setupKastor)(),(0,v.setupRoberta)(),(0,w.setupVerna)(),(0,y.setupYuki)(),$((function(){let e;for(e of[n.NpcId.Athlon,n.NpcId.Cecelia,n.NpcId.Coroto,n.NpcId.Dawn,n.NpcId.Dusk,n.NpcId.Elysium,n.NpcId.Erica,n.NpcId.Ezell,n.NpcId.Hina,n.NpcId.Iona,n.NpcId.Jaye,n.NpcId.Kastor,n.NpcId.Roberta,n.NpcId.Verna,n.NpcId.Yuki])i.Character.get(e).finalize()}))}},348:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupAthlon=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupAthlon=function(){const e=new s.Character(i.NpcId.Athlon);e.core.name="Athlon",e.core.imgPath="character_tokens/C2/Arc1/Athlon.png",e.dStats.initializeStats(10,20,18,8,16,10),e.dStats.pb=n.Prof.get(4),e.opinions.isOpinionated=!0}},975:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCecilia=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupCecilia=function(){const e=new s.Character(i.NpcId.Cecelia);e.core.name="Cecilia",e.core.imgPath="character_tokens/C2/Arc1/Cecilia.png",e.dStats.initializeStats(6,16,8,10,14,18),e.dStats.pb=n.Prof.get(3),e.dSKills.setSkillProficiency(n.Skill.Insight),e.opinions.isOpinionated=!0}},7817:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCoroto=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupCoroto=function(){const e=new s.Character(i.NpcId.Coroto);e.core.name="Coroto",e.core.imgPath="character_tokens/C2/Arc1/Coroto.png",e.dStats.initializeStats(14,12,14,13,12,17),e.dStats.pb=n.Prof.get(3),e.dSKills.setSkillProficiency(n.Skill.Intimidation),e.dSKills.setSkillProficiency(n.Skill.Nature),e.dSKills.setSkillProficiency(n.Skill.Performance),e.dSKills.setSkillProficiency(n.Skill.Stealth),e.dSKills.setSkillProficiency(n.Skill.Deception,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Persuasion,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0}},8412:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupDawn=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupDawn=function(){const e=new s.Character(i.NpcId.Dawn);e.core.name="Dawn",e.core.imgPath="character_tokens/C2/Arc1/Dawn.png",e.dStats.initializeStats(8,8,16,11,17,18),e.dStats.pb=n.Prof.get(4),e.dSKills.setSkillProficiency(n.Skill.AnimalHandling),e.dSKills.setSkillProficiency(n.Skill.Deception),e.dSKills.setSkillProficiency(n.Skill.History),e.dSKills.setSkillProficiency(n.Skill.Insight),e.dSKills.setSkillProficiency(n.Skill.Medicine),e.dSKills.setSkillProficiency(n.Skill.Survival,n.ProficiencyLevel.Prof,5),e.dSKills.setSkillProficiency(n.Skill.Persuasion,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Performance,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.SlightOfHand,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill._ALL,n.ProficiencyLevel.Half),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.addCardTag("F32 (405)"),e.card.addCardTag("From | Materia<span class='verbose'>(Naiyumi)</span> / Devotion"),e.card.addCardTag("Race | Human"),e.card.addCardTag("Campaign 2 <span class='verbose'>Arc 1</span>"),e.card.summary='\n    The gentle and reserved pawn shop owner and the de facto caretaker of the small mountainous village of Po\'shan. \n    Appears to hide quite a bit of pain underneath a sad smile. Was born in the hinterlands of Naiyumi around \n    1200 AR. Kept witnessing the residents of her village constantly get slaughtered again and again, and lose \n    quite a bit of the memories of their times spent together again and again.<br/>\n    <div class="effect_tag">Incomplete</div>'}},1672:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupDusk=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupDusk=function(){const e=new s.Character(i.NpcId.Dusk);e.core.name="Dusk",e.core.imgPath="character_tokens/C2/Arc1/Dusk.png",e.dStats.initializeStats(28,18,26,21,24,30),e.dStats.pb=n.Prof.get(8),e.dSKills.setSkillProficiency(n.Skill.Persuasion,n.ProficiencyLevel.None,-5),e.dSKills.setSkillProficiency(n.Skill.Deception,n.ProficiencyLevel.Half),e.dSKills.setSkillProficiency(n.Skill.Perception,n.ProficiencyLevel.Half),e.dSKills.setSkillProficiency(n.Skill.Stealth,n.ProficiencyLevel.Half),e.dSKills.setSkillProficiency(n.Skill.History,n.ProficiencyLevel.Prof),e.dSKills.setSkillProficiency(n.Skill.Insight,n.ProficiencyLevel.Prof),e.dSKills.setSkillProficiency(n.Skill.Medicine,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Performance,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.SlightOfHand,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.addCardTag("F"),e.card.addCardTag("From | Devotion"),e.card.addCardTag("Race | Titan <span class='verbose'>&times; Jade Dragon</span>"),e.card.addCardTag("<span>Primordial | Outsider <span class='verbose'>(11<sup>th</sup> Fragment of Sui)</span></span>"),e.card.addCardTag("CR | 26"),e.card.addCardTag("Campaign 2 <span class='verbose'>Arc 1</span>"),e.card.summary="???"}},4986:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupElysium=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupElysium=function(){const e=new s.Character(i.NpcId.Elysium);e.core.name="Elysium",e.core.imgPath="character_tokens/C2/Arc1/Elysium.png",e.dStats.initializeStats(8,18,14,15,18,10),e.dStats.pb=n.Prof.get(5),e.dSKills.setSkillProficiency(n.Skill.Insight),e.dSKills.setSkillProficiency(n.Skill.Investigation),e.dSKills.setSkillProficiency(n.Skill.Medicine),e.dSKills.setSkillProficiency(n.Skill.Stealth,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Perception,n.ProficiencyLevel.Expert,5),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0}},2481:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupErica=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupErica=function(){const e=new s.Character(i.NpcId.Erica);e.core.name="Erica",e.core.imgPath="character_tokens/C2/Arc1/Erica.png",e.dStats.initializeStats(8,8,14,12,14,20),e.dStats.pb=n.Prof.get(3),e.dSKills.setSkillProficiency(n.Skill.Perception),e.dSKills.setSkillProficiency(n.Skill.Insight,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Performance,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill._ALL,n.ProficiencyLevel.Half),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0}},8453:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupEzell=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupEzell=function(){const e=new s.Character(i.NpcId.Ezell);e.core.name="Ezell",e.core.imgPath="character_tokens/C2/Arc1/Ezell.png",e.dStats.initializeStats(8,20,14,10,13,16),e.dStats.pb=n.Prof.get(4),e.opinions.isOpinionated=!0}},3728:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupHina=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupHina=function(){const e=new s.Character(i.NpcId.Hina);e.core.name="Hina",e.core.imgPath="character_tokens/C2/Arc1/Hina.png",e.dStats.initializeStats(13,21,24,17,8,20),e.dStats.pb=n.Prof.get(6),e.dSKills.setSkillProficiency(n.Skill.Deception),e.dSKills.setSkillProficiency(n.Skill.Intimidation),e.dSKills.setSkillProficiency(n.Skill.Investigation),e.dSKills.setSkillProficiency(n.Skill.Medicine),e.dSKills.setSkillProficiency(n.Skill.Nature),e.dSKills.setSkillProficiency(n.Skill.Acrobatics,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.History,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Perception,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Stealth,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Survival,n.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.addCardTag("F14"),e.card.addCardTag("Campaign 2 <span class='verbose'>Arc 1</span>"),e.card.summary="???"}},2218:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupIona=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupIona=function(){const e=new s.Character(i.NpcId.Iona);e.core.name="Iona",e.core.imgPath="character_tokens/C2/Arc1/Iona.png",e.dStats.initializeStats(8,10,16,17,11,12),e.dStats.pb=n.Prof.get(2),e.dSKills.setSkillProficiency(n.Skill.Arcana),e.dSKills.setSkillProficiency(n.Skill.History),e.dSKills.setSkillProficiency(n.Skill.Investigation),e.dSKills.setSkillProficiency(n.Skill.Nature),e.dSKills.setSkillProficiency(n.Skill.Perception),e.dSKills.setSkillProficiency(n.Skill.Religion),e.dSKills.setSkillProficiency(n.Skill.Stealth),e.dSKills.setSkillProficiency(n.Skill.Survival),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0}},8231:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupJaye=void 0;const n=a(2891),i=a(7978),s=a(2228),o=a(8129),r=a(2870),l=a(4492);t.setupJaye=function(){const e=new l.Character(s.NpcId.Jaye);e.core.name="Jaye",e.core.imgPath="character_tokens/C2/Arc1/Jaye.png",e.dStats.initializeStats(16,18,16,8,12,8),e.dStats.pb=i.Prof.get(4),e.dSKills.setSkillProficiency(i.Skill.Acrobatics),e.dSKills.setSkillProficiency(i.Skill.Athletics),e.dSKills.setSkillProficiency(i.Skill.Nature),e.dSKills.setSkillProficiency(i.Skill.Intimidation),e.dSKills.setSkillProficiency(i.Skill.Stealth,i.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(i.Skill.SlightOfHand,i.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(i.Skill.Survival,i.ProficiencyLevel.Expert),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0,e.card.addCardTag("M26"),e.card.addCardTag("Race | Ursine <span class='verbose'>(Polar)</span>"),e.card.addCardTag("CR | 5"),e.card.addCardTag("Campaign 2 <span class='verbose'>Arc 1</span>"),e.card.summary="???",e.combat.addClassLevels(i.AdventurerClass.Rogue,5),e.combat.bonusHP=5,e.combat.computeHP(),e.combat.setSave(i.DStat.Int),e.combat.setSave(i.DStat.Dex),e.combat.setSpeed(i.Speed.Walking,30),e.combat.setSense(i.Sense.Darkvision,60),e.combat.setRes(i.DamageType.Cold,50),e.combat.addAction(new o.Action(i.Activation.Special,"\n        <p><strong><em>Psionic Knife.</em></strong> Though he never learnt how, Jaye seems to have formed a \n        cognitive bond with his favorite cooking knife. Weapon attacks with it deal additional psychic damage\n        and the knife can cut through non-sentient matter rather easily if Jaye wills so. Also, he can throw the\n        knife point first and mentally command it to return to his hand (also point first if possible). The return\n        of the knife obeys the conservation of momentum and seems to carry great inertia (much more than its \n        momentum). It would take a DC 27 Str check or 400 kgs wt. equivalent of force to keep the knife and Jaye\n        separate </p>")),e.combat.addAction(new o.Action(i.Activation.Special,`\n        <p><strong><em>Expert Hands.</em></strong> Jaye is extremely skilled in handling his favorite cooking knife.\n        He performs attacks with it with expertise and can use it to parry minor blows. Also, if his offhand is \n        free, he can transfer the knife between his main hand and his offhand and make an extra attack as a bonus \n        action. If his primary attack that turn was a feint, the secondary attack is at advantage and has a \n        ${(0,r.wrapRoll)(n.D8)} superiority dice added to the to-hit roll.</p>`)),e.combat.addAction(new o.Action(i.Activation.Special,`\n        <p><strong><em>Predatory Hyperfocus.</em></strong> Everytime he deals damage, Jaye must make a DC \n        ${e.dc(i.DStat.Con)} Wis save. On failure, Jaye's beastial instincts of an apex predator kick in, and he \n        enters a vampiric hyperfocused state. While in that state, each of Jaye's attacks heals himself or a \n        creature of his choice within 5ft by half the damage dealt. Also, anyone hit by his attacks must make a DC\n        ${e.dc(i.DStat.Con)} Cha save or be ${(0,r.wrapCondition)(i.Condition.Silenced)} until the end of their next turn.\n        The downside of this is that in this state, at the start of his turn one creature within 5ft ft of himself\n        takes ${(0,r.wrapRoll)([10,n.D1])} ${(0,r.wrapDamageType)(i.DamageType.Psychic)} damage. If no creature is within that \n        range, Jaye himself takes that damage.</p>`)),e.combat.addAction(new o.Action(i.Activation.Special,`\n        <p><strong><em>Sneak Attack.</em></strong> Once per turn, Jaye can boost a finesse/ranged weapon attack by \n        ${(0,r.wrapRoll)([3,n.D6])} as per regular sneak attack rules.</p>`)),e.combat.addAction(new o.Action(i.Activation.Action,`\n        <p><strong><em>Cooking Knife.</em></strong> Melee Weapon Attack: ${(0,r.wrapRoll)(e.DEX+e.Expertise)}, \n        reach 5 ft. (or a 60ft Ranged throw), one target. Hit: ${(0,r.wrapRoll)([[1,n.D6],[e.DEX,n.D1]])} \n        ${(0,r.wrapDamageType)(i.DamageType.Slashing)} (slash) or ${(0,r.wrapDamageType)(i.DamageType.Piercing)} damage (stab) \n        plus ${(0,r.wrapRoll)(n.D6)} ${(0,r.wrapDamageType)(i.DamageType.Psychic)} damage. Jaye can choose to feint instead of\n        attempting to hit with this attack.</p>`)),e.combat.addAction(new o.Action(i.Activation.BonusAction,`\n            <p><strong><em>Cooking Knife.</em> (Offhand)</strong> Melee Weapon Attack: ${(0,r.wrapRoll)(e.DEX+e.Expertise)}, \n            reach 5 ft. (or a 60ft Ranged throw), one target. Hit: ${(0,r.wrapRoll)([[1,n.D4],[e.DEX,n.D1]])} \n            ${(0,r.wrapDamageType)(i.DamageType.Slashing)} (slash) or ${(0,r.wrapDamageType)(i.DamageType.Piercing)} damage (stab) \n            plus ${(0,r.wrapRoll)(n.D4)} ${(0,r.wrapDamageType)(i.DamageType.Psychic)} damage.</p>`)),e.combat.addAction(new o.Action(i.Activation.BonusAction,"\n            <p><strong><em>Cunning Action.</em></strong> Can use a bonus action to take the Dash, Disengage, or Hide\n            action.</p>")),e.combat.addAction(new o.Action(i.Activation.Reaction,"\n            <p><strong><em>Parry.</em></strong> If he carries a knife, Jaye can add a +2 to his AC against an attack \n            that would hit him and cause it to miss. The AC increase is a +3 instead if the knife is his favorite \n            cooking knife</p>")),e.combat.addAction(new o.Action(i.Activation.Reaction,"\n            <p><strong><em>Command Return.</em></strong> At will, Jaye can command his favorite cooking knife to return \n            to his hands if it is within 240 ft of him. It deals the damage equivalent of a main-hand stab to all \n            creatures in its path and can pull objects along with it. If possible, sneak attack may only be applied \n            to first creature to be hit.</p>")),e.sheet.cr=new i.CRValue(5),e.sheet.size=i.CreatureSize.Medium,e.sheet.subtitle=" Humanoid (Ursine | Polar), Neutral Good",e.sheet.acDesc="(Natural Dex)",e.sheet.category="human"}},9267:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupKastor=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupKastor=function(){const e=new s.Character(i.NpcId.Kastor);e.core.name="Kastor",e.core.imgPath="character_tokens/C2/Arc1/Kastor.png",e.dStats.initializeStats(16,14,14,8,11,14),e.dStats.pb=n.Prof.get(3),e.opinions.isOpinionated=!0}},7573:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupRoberta=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupRoberta=function(){const e=new s.Character(i.NpcId.Roberta);e.core.name="Roberta",e.core.imgPath="character_tokens/C2/Arc1/Roberta.png",e.dStats.initializeStats(10,13,13,19,10,16),e.dStats.pb=n.Prof.get(4),e.dSKills.setSkillProficiency(n.Skill.Performance),e.dSKills.setSkillProficiency(n.Skill.Investigation),e.dSKills.setSkillProficiency(n.Skill.Nature),e.dSKills.setSkillProficiency(n.Skill.SlightOfHand,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill.Medicine,n.ProficiencyLevel.Expert),e.dSKills.setSkillProficiency(n.Skill._ALL,n.ProficiencyLevel.Half),e.opinions.isOpinionated=!0}},5563:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupVerna=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupVerna=function(){const e=new s.Character(i.NpcId.Verna);e.core.name="Verna",e.core.imgPath="character_tokens/C2/Arc1/Verna.png",e.dStats.initializeStats(18,10,16,8,10,14),e.dStats.pb=n.Prof.get(4),e.dSKills.setSkillProficiency(n.Skill.Athletics),e.opinions.isOpinionated=!0}},5157:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupYuki=void 0;const n=a(7978),i=a(2228),s=a(4492);t.setupYuki=function(){const e=new s.Character(i.NpcId.Yuki);e.core.name="Yuki",e.core.imgPath="character_tokens/C2/Arc1/Yuki.png",e.dStats.initializeStats(11,12,14,8,12,20),e.dStats.pb=n.Prof.get(4),e.dSKills.setSkillProficiency(n.Skill.Stealth),e.dSKills.setSkillProficiency(n.Skill.Deception),e.dSKills.setSkillProficiency(n.Skill.Intimidation),e.dSKills.setSkillProficiency(n.Skill.Insight),e.dSKills.setSkillProficiency(n.Skill.Perception),e.dSKills.finalizeSkills(),e.opinions.isOpinionated=!0}},3956:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMobs=void 0;const n=a(640);t.setupMobs=function(){(0,n.setupEphremis)()}},640:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupEphremis=void 0;const n=a(2891),i=a(7978),s=a(2228),o=a(8129),r=a(2870),l=a(4492);t.setupEphremis=function(e){const t=new l.Character(s.NpcId.Ephremis);t.core.name="Ephremis",t.core.imgPath="mob_tokens/seaborn/Ephremis.png",e?t.dStats.initializeStats(e.get("STR"),e.get("DEX"),e.get("CON"),e.get("INT"),e.get("WIS"),e.get("CHA")):t.dStats.initializeStats(30,24,29,21,18,28),t.dStats.pb=i.Prof.get(8),t.dSKills.setSkillProficiency(i.Skill.Stealth,i.ProficiencyLevel.Prof),t.dSKills.setSkillProficiency(i.Skill.Athletics,i.ProficiencyLevel.Prof),t.dSKills.setSkillProficiency(i.Skill.Perception,i.ProficiencyLevel.Prof),t.dSKills.setSkillProficiency(i.Skill.Performance,i.ProficiencyLevel.Prof),t.dSKills.finalizeSkills(),t.opinions.isOpinionated=!1,t.combat.addBioHpDice(n.D10.countHavingE(480,i.StatValue.mod(29)),n.D10),t.combat.addClassLevels(i.AdventurerClass.Barbarian,1),t.combat.computeHP(),t.combat.setSave(i.DStat.Str,e&&30!=e.get("STR")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Dex,e&&24!=e.get("DEX")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Con,e&&29!=e.get("CON")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Int,e&&21!=e.get("INT")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Wis,e&&18!=e.get("WIS")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSave(i.DStat.Cha,e&&28!=e.get("CHA")?i.ProficiencyLevel.None:i.ProficiencyLevel.Prof),t.combat.setSpeed(i.Speed.Walking,30),t.combat.setSpeed(i.Speed.Swimming,80),t.combat.setRes(i.DamageType.Hellfire,-100),t.combat.setRes(i.DamageType.Lightning,-100),t.combat.setRes(i.DamageType.Necrotic,50),t.combat.setRes(i.DamageType.Psychic,50),t.combat.setRes(i.DamageType.Radiant,50),t.combat.setRes(i.DamageType.Thunder,50),t.combat.setRes(i.DamageType.Slashing,50),t.combat.setRes(i.DamageType.Piercing,50),t.combat.setRes(i.DamageType.Bludgeoning,50),t.combat.setRes(i.DamageType.Acid,100),t.combat.setRes(i.DamageType.Cold,100),t.combat.setRes(i.DamageType.Fire,100),t.combat.setRes(i.DamageType.Physical,100),t.combat.addConditionImmunity(i.Condition.Charmed),t.combat.addConditionImmunity(i.Condition.Grappled),t.combat.addConditionImmunity(i.Condition.Paralyzed),t.combat.addConditionImmunity(i.Condition.Restrained),t.combat.addConditionImmunity(i.Condition.Stunned),t.combat.setSense(i.Sense.BlindSight,120),t.combat.addAction(new o.Action(i.Activation.Special,"<p><em><strong>Amphibious.</strong></em>Ephremis can breathe air and \n         water.</p>")),t.combat.addAction(new o.Action(i.Activation.Special,"<p><em><strong>Nethersea Sight.&nbsp;</strong></em>Ephremis has 600ft \n         tremorsense on any spot occupied by the nethersea brand.</p>")),t.combat.addAction(new o.Action(i.Activation.Special,"<p><em><strong>Legendary Resistance (3/Day).</strong></em> If Ephremis \n         fails a saving throw, it can choose to succeed instead.</p>")),t.combat.addAction(new o.Action(i.Activation.Special,"<p><em><strong>Spell-Resistant Carapace.</strong></em> Ephremis has \n         advantage on saving throws against spells, and any creature that makes\n         a spell attack against Ephremis has disadvantage on the attack roll.\n         </p>")),t.combat.addAction(new o.Action(i.Activation.Special,`<p><strong>Call of the firstborn.</strong> Four times, for every four \n         turns it lives, Ephremis gets a new trait, assuming it has dealt at\n         least 40 damage in those 4 turns. If it survives the 17th turn and is \n         in its final form, it summons the Tsunami of Primordial Life, dying and\n         absorbing all life within a 100mile radius. The four traits are -</p>\n        <ol>\n            <li>\n                <strong>Assimilation.</strong> Ephremis now can cast \n                <strong>hunger of we many</strong> as an action.\n            </li>\n            <li>\n                <strong>Survival.</strong> Ephremis now regenerates \n                ${5*t.CON} HP while connected to the sea or \n                the nethersea brand at initiative count 20 every round. They can\n                now use the <strong>Nethersea Growth</strong> legendary action.\n            </li>\n            <li>\n                <strong>Migration.</strong>Ephremis' movement speed increases by \n                50%. They gain a flying speed equal to their walking speed. They\n                can now cast <strong>Nethersea Step</strong> as a bonus action \n                or a legendary action with 1 cost.\n            </li>\n            <li>\n                <strong>Reproduction.</strong>Ephremis creates ${(0,r.wrapRoll)(n.D4)} copies of \n                itself from the primordial soup. These teleport far away at the \n                start of the next round. At the end of that round, if Ephremis is \n                still alive, it's game over.\n            </li>\n        </ol>`)),t.combat.addAction(new o.Action(i.Activation.Action,`<p><em><strong>Claw. (2 attacks)</strong> Melee Weapon Attack:</em> \n         ${(0,r.wrapRoll)(t.STR+t.Prof)} to hit, reach 10 ft., one \n         target. <em>Hit:</em> ${(0,r.wrapRoll)([[3,n.D8],[t.STR,n.D1]])} \n         ${(0,r.wrapDamageType)(i.DamageType.Slashing)} damage (magical), and if the target is a\n         creature, it must make a DC ${t.dc(i.DStat.Str)} STR save. On \n         failure, it is pushed 5ft away, if it fails by 10 or more it is also \n         knocked ${(0,r.wrapCondition)(i.Condition.Prone)}.</p>`)),t.combat.addAction(new o.Action(i.Activation.Action,`<p><em><strong>Hunger of we many. (Recharge 5/${(0,r.wrapRoll)(n.D6)})</strong>\n         </em><strong>[Requires the Assimilation Trait]</strong> Ephremis \n         launches ${t.CON} Corrosive Vacuoles which lock on to a target \n         within 30 ft of itself. At initiative count 20, each corrosive vacuole \n         ${(0,r.wrapRoll)(n.D12)} ${(0,r.wrapDamageType)(i.DamageType.Necrotic)} damage. <br />\n         If the target is surrounded by 4 or more vacuoles and stands on the \n         nethersea brand and is below 50 HP, then 4 vacuoles merge together to \n         form a single large one which swallows the target and merges into the \n         brand.<br />\n         While swallowed, the creature takes ${(0,r.wrapRoll)([12,n.D6])} \n         ${(0,r.wrapDamageType)(i.DamageType.Corrosion)} damage at the start of each of \n         Ephremis' turns. If it deals 40 damage to the vacuoles, it appears on a\n         random location upon the brand.</p>`)),t.combat.addAction(new o.Action(i.Activation.BonusAction,`<p><em><strong>Whispers of we many. </strong>Ranged Spell Attack:</em>\n         ${(0,r.wrapRoll)(t.CHA+t.Prof)} to hit, reach 20 ft., one \n         creature. <em>Hit:</em> ${(0,r.wrapRoll)([[3,n.D6],[t.CHA,n.D1]])}\n         ${(0,r.wrapDamageType)(i.DamageType.Neural)} damage.</p>`)),t.combat.addAction(new o.Action(i.Activation.BonusAction,`<p><strong><em>Nethersea Step. </em>\n         [Requires the Migration Trait] </strong>Ephremis deals \n         ${(0,r.wrapRoll)([[1,n.D8],[t.CON,n.D1]])}\n         ${(0,r.wrapDamageType)(i.DamageType.Corrosion)} and teleports to an unoccupied \n         spot within ${15*t.INT}ft of itself which it can see or where \n         the Nethersea brand has spread.</p>`)),t.combat.addAction(new o.Action(i.Activation.LegendaryAction,"<p>Ephremis can take 3 legendary actions, choosing from the options \n         below. Only one legendary action option can be used at a time and only \n         at the end of another creature's turn. Ephremis regains spent legendary\n         actions at the start of its turn.</p>")),t.combat.addAction(new o.Action(i.Activation.LegendaryAction,"<p><em><strong>Slash.</strong></em> Ephremis makes one slash attack.</p>")),t.combat.addAction(new o.Action(i.Activation.LegendaryAction,"<p><em><strong>Move.</strong></em> Ephremis moves up to half its speed. \n         After the Migration trait is unlocked it can move its full speed or use\n         Nethersea step.</p>")),t.combat.addAction(new o.Action(i.Activation.LegendaryAction,`<p><strong><em>Nethersea Growth (Costs 2 Actions).</em> \n         [Requires the Survival Trait]</strong> Each creature within 10 feet of\n         Ephremis must make a DC ${t.dc(i.DStat.Cha)} Dexterity saving \n         throw, taking ${(0,r.wrapRoll)([3,n.D8])} slashing damage on a failed save, or\n         half as much damage on a successful one. Until the start of its next \n         turn, Ephremis gains a +2 bonus to AC. The room enters the blemished \n         stage, if it isn't already blemished, infected, corrupted or \n         sunken.</p>`)),t.sheet.cr=new i.CRValue(25),t.sheet.size=i.CreatureSize.Large,t.sheet.subtitle=" Seaborn, Neutral Evil",t.sheet.acDesc=" (Con/Dex)",t.sheet.category="seaborn",console.log("FE",t.CON),t.finalize()}},7768:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.testDamageTree=t.DamageTree=void 0;const n=a(7978),i=a(5512),s=a(9949),o=a(225),r=a(2813);class l{constructor(e){this.root=e}applyBuff(e){this.root.applyBuff(e)}resetBuffs(){this.root.resetBuffs()}computeDPR(e=15,t=new Map){return this.root.computeDPR(e,t)}}t.DamageTree=l,t.testDamageTree=function(){const e=new l(new s.DamageTreeNode(r.DamageTreeNodeType.And,[new s.DamageTreeNode(r.DamageTreeNodeType.Or,[new s.DamageTreeNode(r.DamageTreeNodeType.And,[new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Slashing,{damagePerAttack:10.5,attacksPerRound:2,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.WeaponAttack,o.DamageTreeNodeTag.MeleeAttack,o.DamageTreeNodeTag.OnAction]),"Longsword"),new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Radiant,{damagePerAttack:9,attacksPerRound:.25,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.WeaponAttack,o.DamageTreeNodeTag.SpellAttack]),"Divine Smite")]),new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Radiant,{damagePerAttack:10,attacksPerRound:1,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.RangedAttack,o.DamageTreeNodeTag.SpellAttack,o.DamageTreeNodeTag.OnAction]),"Cantrip [Range:120]")]),new s.DamageTreeNode(r.DamageTreeNodeType.Or,[new s.DamageTreeNode(r.DamageTreeNodeType.And,[new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Slashing,{damagePerAttack:10.5,attacksPerRound:1,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.WeaponAttack,o.DamageTreeNodeTag.MeleeAttack,o.DamageTreeNodeTag.OnBonusAction]),"Longsword"),new s.DamageTreeNode(r.DamageTreeNodeType.Leaf,[],new Map([[n.DamageType.Radiant,{damagePerAttack:9,attacksPerRound:.125,accuracyRating:9}]]),new Set([o.DamageTreeNodeTag.WeaponAttack,o.DamageTreeNodeTag.SpellAttack]),"Divine Smite")])])]));let t=e.computeDPR(15);console.assert(23.625==t.get(n.DamageType.Slashing),`Expected slashing damage: 0, Actual slashing damage ${t.get(n.DamageType.Slashing)}`),console.assert(2.53125==t.get(n.DamageType.Radiant),`Expected radiant damage: 0,Actual radiant damage: ${t.get(n.DamageType.Radiant)}`),t=e.computeDPR(15,new Map([[n.DamageType.Slashing,.75],[n.DamageType.Radiant,0]])),console.assert(1.96875==t.get(n.DamageType.Slashing),`Expected slashing damage: 0, Actual slashing damage ${t.get(n.DamageType.Slashing)}`),console.assert(8.34375==t.get(n.DamageType.Radiant),`Expected radiant damage: 0,Actual radiant damage: ${t.get(n.DamageType.Radiant)}`),e.applyBuff(new i.DamageTreeLeafNodeBuff((e=>e.tags.has(o.DamageTreeNodeTag.WeaponAttack)&&e.tags.has(o.DamageTreeNodeTag.OnAction)),(e=>{const t=new Map;for(const[a,n]of e.entries())t.set(a,{accuracyRating:n.accuracyRating,attacksPerRound:n.attacksPerRound+1,damagePerAttack:n.damagePerAttack});return t}))),t=e.computeDPR(15,new Map([[n.DamageType.Slashing,.75],[n.DamageType.Radiant,0]])),console.assert(7.875==t.get(n.DamageType.Slashing),`Expected slashing damage: 0, Actual slashing damage ${t.get(n.DamageType.Slashing)}`),console.assert(2.53125==t.get(n.DamageType.Radiant),`Expected radiant damage: 0,Actual radiant damage: ${t.get(n.DamageType.Radiant)}`),e.resetBuffs(),console.log("Damage Computation Tests performed.")}},5512:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DamageTreeLeafNodeBuff=void 0,t.DamageTreeLeafNodeBuff=class{constructor(e,t){this.shouldApply=e,this.apply=t}}},9949:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DamageTreeNode=void 0;const n=a(2813);t.DamageTreeNode=class{constructor(e,t,a=null,i=null,s=""){if(this._nodeType=e,this._children=t,this._selfDamage=a,this._tags=i,this.comment=s,this._nodeType==n.DamageTreeNodeType.Leaf){if(this._children.length>0)throw new Error("Can't have children on a leaf node.")}else if(null!=this._selfDamage||null!=this._tags||this.comment.length>0)throw new Error("Only leaf nodes can have these,");this._buffs=new Set}computeDPR(e,t){if(this._nodeType==n.DamageTreeNodeType.Leaf){const a=new Map;let n=this._selfDamage;for(const e of this._buffs)e.shouldApply(this)&&(n=e.apply(n));for(const[i,s]of n.entries())a.set(i,s.damagePerAttack*s.attacksPerRound*Math.min(.95,Math.max(.05,(21+s.accuracyRating-e)/20))),t.has(i)&&a.set(i,a.get(i)*(1-t.get(i)));return a}if(this._nodeType==n.DamageTreeNodeType.Or){let a=new Map,n=0;for(const i of this._children){const s=i.computeDPR(e,t);let o=0;for(const e of s.values())o+=e;o>n&&(n=o,a=s)}return a}if(this._nodeType==n.DamageTreeNodeType.And){const a=new Map;for(const n of this._children){const i=n.computeDPR(e,t);for(const[e,t]of i.entries()){const n=a.has(e)?a.get(e):0;a.set(e,n+t)}}return a}throw new Error("Unrecognized node type.")}applyBuff(e){if(this._nodeType==n.DamageTreeNodeType.Leaf)this._buffs.add(e);else for(const t of this._children)t.applyBuff(e)}removeBuff(e){if(this._nodeType==n.DamageTreeNodeType.Leaf)this._buffs.delete(e);else for(const t of this._children)t.removeBuff(e)}resetBuffs(){this._buffs.clear()}get tags(){return this._tags}get children(){return this._children}get nodeType(){return this._nodeType}get selfDamage(){return this._selfDamage}}},225:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.DamageTreeNodeTag=void 0,(a=t.DamageTreeNodeTag||(t.DamageTreeNodeTag={}))[a.WeaponAttack=0]="WeaponAttack",a[a.SpellAttack=1]="SpellAttack",a[a.MeleeAttack=2]="MeleeAttack",a[a.RangedAttack=3]="RangedAttack",a[a.OnAction=4]="OnAction",a[a.OnBonusAction=5]="OnBonusAction"},2813:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.DamageTreeNodeType=void 0,(a=t.DamageTreeNodeType||(t.DamageTreeNodeType={}))[a.Leaf=0]="Leaf",a[a.And=1]="And",a[a.Or=2]="Or"},2119:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupHistory=void 0;const a=new Map([["Shardic",{start:"~10<sup>9</sup> BR (T=0)",epoch:"Genesis",height:42}],["Divergence",{start:"~10<sup>9</sup> BR (T=10<sup>-16</sup>s)",epoch:"Genesis",height:40}],["Primordial",{start:"~10<sup>9</sup> BR (T=0.1s)",epoch:"Genesis",height:64}],["Inflationary",{start:"~10<sup>9</sup> BR (T=1s)",epoch:"Genesis",height:40}],["Archean",{start:"~4.1 &times; 10<sup>8</sup> BR",epoch:"Genesis",height:40}],["Mythic",{start:"~2.8 &times; 10<sup>7</sup> BR",epoch:"Legendary",height:144}],["Heroic",{start:"~1.6 &times; 10<sup>5</sup> BR",epoch:"Legendary",height:120}],["Silent",{start:"~20,000 BR",epoch:"Darkness",height:72}],["Archaic",{start:"~1,800 BR",epoch:"Darkness",height:64}],["Classical",{start:"0 AR",epoch:"Recreance",height:72}],["Medieval",{start:"1070 AR",epoch:"Recreance",height:100}],["Renaissance",{start:"1600 AR (now)",epoch:"Recreance",height:40}]]),n=new Map;let i=0;for(const[e,{height:t}]of Array.from(a).reverse())n.set(e,i+t),i=n.get(e);const s=new Map([["TheoGenesis",{text:"Shards Appear - Spacetime & Investiture form.",era:"Shardic",rel_t:0,lane:0}],["Genesis",{text:"Invariants form - Matter/Energy/Momentum/Charge...",era:"Shardic",rel_t:.5,lane:1}],["Divergence",{text:"Planes separate",era:"Divergence",rel_t:0,lane:0}],["OuterPrimordialsInvade",{text:"Outer Primordials Invade",era:"Primordial",rel_t:0,lane:0}],["ShardicPrimordialCreation",{text:"Shardic Primordials are born",era:"Primordial",rel_t:.25,lane:1}],["OuterPrimordialsDefeated",{text:"Outer Primordials are Defeated",era:"Primordial",rel_t:.8,lane:0}],["Expansion",{text:"Planes take shape, The Universe expands",era:"Inflationary",rel_t:.1,lane:1}],["AstralFormation",{text:"Astral Bodies Form",era:"Inflationary",rel_t:.8,lane:0}],["Life",{text:"First Physical Lifeforms emerge",era:"Archean",rel_t:0,lane:1}],["SpiritualLife",{text:"First Non-Physical Lifeforms emerge",era:"Archean",rel_t:.9,lane:0}],["ComplexLife",{text:"Complex/Mortal Lifeforms emerge",era:"Mythic",rel_t:.1,lane:1}],["PrimordialLife",{text:"Shardic Primordials Gain Physical Forms",era:"Mythic",rel_t:.2,lane:0}],["SentientLife",{text:"Sentient Life Forms",era:"Mythic",rel_t:.45,lane:0}],["MythicLife",{text:"Creatures of Myth and Legend Roam the multiverse",era:"Mythic",rel_t:.5,lane:1}],["IntelligentLife",{text:"Intelligent Species emerge",era:"Mythic",rel_t:.67,lane:0}],["SocialLife",{text:"Societies and Cultures begin to take shape",era:"Mythic",rel_t:.85,lane:1}],["SocialLife",{text:"Humans race appears",era:"Mythic",rel_t:.9,lane:0}],["Heroes",{text:"Powerful Nations form - Heroes walk the land",era:"Heroic",rel_t:.2,lane:0}],["War",{text:"Shardic Wars Ensue",era:"Heroic",rel_t:.33,lane:1}],["Kelsier",{text:"The 'Survivor' Dies",era:"Heroic",rel_t:.5,lane:0}],["Re-invasion",{text:"Outsiders begin to seep within",era:"Heroic",rel_t:.8,lane:1}],["Silence",{text:"History falls silent - No records of this time remain",era:"Silent",rel_t:0,lane:0}],["Isolation",{text:"Outer Planes self isolate",era:"Silent",rel_t:.4,lane:1}],["Archaic",{text:"Civilizations restart from scratch post-desolation",era:"Archaic",rel_t:0,lane:0}],["Classical",{text:"Some Cities/Civilizations begin to match those of old",era:"Classical",rel_t:0,lane:0}],["Rome",{text:"Veteres becomes a global empire on Terra Prima",era:"Classical",rel_t:.1,lane:1}],["Annatar",{text:"1539 AR: The Primordial Nightmares gain a foothold",era:"Medieval",rel_t:.75,lane:1}],["Leras",{text:"1540 AR: The Hour of Darkness",era:"Medieval",rel_t:.8,lane:0}]]);t.setupHistory=function(){const e=$("#history_zones"),t=[$("#history_left_tags"),$("#history_right_tags")];for(const[t,{height:n,start:i,epoch:s}]of a.entries())$(`<div class='history_zone' style='height: ${n}px;'>\n            <div class="zone_start">${i}</div>\n            <div class="zone_name">${t}<span class="zone_epoch"> | ${s}</span></div>\n          </div>`).appendTo(e);for(const[e,i]of s.entries()){const e=0+n.get("Shardic")-n.get(i.era)+a.get(i.era).height*i.rel_t;$(`<div class="history_event" style="top: ${e}px;">${i.text}</div>`).appendTo(t[i.lane])}}},2891:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RollVariant=t.D100=t.D20=t.D12=t.D10=t.D8=t.D6=t.D4=t.D1=t.Dice=void 0;class a{constructor(e){this.sides=e,this.E=(e+1)/2}countHavingE(e,t=0){return Math.sign(e)*Math.ceil(Math.abs(e)/(this.E+t))}roll(e=Math.random){return Math.floor(e()*this.sides)+1}}var n;t.Dice=a,t.D1=new a(1),t.D4=new a(4),t.D6=new a(6),t.D8=new a(8),t.D10=new a(10),t.D12=new a(12),t.D20=new a(20),t.D100=new a(100),(n=t.RollVariant||(t.RollVariant={}))[n.Normal=0]="Normal",n[n.Advantage=1]="Advantage",n[n.Disadvantage=2]="Disadvantage",n[n.SuperAdvantage=3]="SuperAdvantage",n[n.SuperDisadvantage=4]="SuperDisadvantage",n[n.Critical=5]="Critical"},3269:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.DamageRollable=t.NatRollable=t.Rollable=t.RollArgumentError=void 0;const n=a(2891);class i extends Error{constructor(e){super(e)}}t.RollArgumentError=i;class s{constructor(e,t=Math.random){this.rng=t,this.rolls=new Map,this.dice=new Map([...e.entries()].sort(((e,t)=>t[0].sides-e[0].sides)))}roll(e){this.rolls.clear();for(const[e,t]of this.dice.entries())if(0!=t)if(e!=n.D1){this.rolls.set(e,[]);for(let a=0;a<Math.abs(Math.round(t));a++){const a=e.roll(this.rng)*Math.sign(t);this.rolls.get(e).push(a)}}else this.rolls.set(n.D1,[Math.round(t)])}get parts(){return this.rolls}get result(){let e=0;for(const[t,a]of this.rolls)for(const t of a)e+=t;return e}}t.Rollable=s;class o extends s{constructor(e,t=Math.random){super(new Map([[n.D20,3],[n.D1,Math.round(e)]]),t),this.modifier=e,this._parts=new Map,this._mode=n.RollVariant.Normal}static generate(e,t=Math.random){if(t!=Math.random)return new o(e,t);if(this.NAT_ROLLABLE_CACHE.has(e))return console.log("cache hit"),this.NAT_ROLLABLE_CACHE.get(e);const a=new o(e,t);return this.NAT_ROLLABLE_CACHE.set(e,a),a}roll(e=n.RollVariant.Normal){if(e==n.RollVariant.Critical)throw new i("");this._mode=e,super.roll()}get parts(){return 0==this._parts.size?super.parts:this._parts}get result(){const e=super.parts.get(n.D20),t=this.modifier;if(this._parts.clear(),this._mode==n.RollVariant.Normal)return this._parts.set(n.D20,[e[0]]),e[0]+t;if(this._mode==n.RollVariant.Advantage)return this._parts.set(n.D20,[e[0],e[1]]),Math.max(e[0],e[1])+t;if(this._mode==n.RollVariant.Disadvantage)return this._parts.set(n.D20,[e[0],e[1]]),Math.min(e[0],e[1])+t;if(this._mode==n.RollVariant.SuperAdvantage)return this._parts.set(n.D20,e),Math.max(...e)+t;if(this._mode==n.RollVariant.SuperDisadvantage)return this._parts.set(n.D20,e),Math.min(...e)+t;throw new i(`Roll variant ${n.RollVariant[this._mode]} not supported`)}}t.NatRollable=o,o.NAT_ROLLABLE_CACHE=new Map;class r extends s{constructor(e,t=Math.random){const a=new Map,i=new Map;for(const[t,s]of e.entries())t==n.D1?i.set(t,Math.round(s)):i.set(t,2*Math.round(s)),a.set(t,Math.round(s));super(i,t),this._parts=new Map,this.baseDice=a}roll(e=n.RollVariant.Normal){this._mode=e,super.roll()}get parts(){return 0==this._parts.size?super.parts:this._parts}get result(){if(this._parts.clear(),this._mode==n.RollVariant.Normal){let e=0;for(const[t,a]of super.parts)if(t==n.D1)e+=Math.round(a[0]);else{const n=[];for(let t=0;t<a.length/2;t++)e+=a[t],n.push(a[t]);this._parts.set(t,n)}return e}if(this._mode==n.RollVariant.Critical)return super.result;throw new i(`Roll variant ${n.RollVariant[this._mode]} not supported`)}}t.DamageRollable=r,t.test=function(){let e=1;function t(){const t=1e4*Math.sin(e++);return t-Math.floor(t)}const a=new s(new Map([[n.D20,1],[n.D1,5]]),t);a.roll(),console.assert(20==a.result,`Expected: 20, Rolled: ${a.result}`),a.roll(),console.assert(25==a.result,`Expected: 25, Rolled: ${a.result}`);const l=new s(new Map([[n.D100,-1],[n.D12,4],[n.D8,3],[n.D1,-10]]),t);l.roll(),console.assert(27==l.result),l.roll(),console.assert(16==l.result);const d=new s(new Map([[n.D8,4]]));for(let e=0;e<100;e++)d.roll(),console.assert(d.result>=4&&d.result<=32);const c=o.generate(4,t);c.roll(n.RollVariant.SuperAdvantage),console.assert(20==c.result);try{c.roll(n.RollVariant.Critical),console.error("Roll argument error not thrown.")}catch(e){console.assert(e instanceof i,"Roll argument error not thrown.")}const h=new r(new Map([[n.D6,2]]),t);h.roll(n.RollVariant.Critical),console.assert(13==h.result);const p=new r(new Map([[n.D4,4],[n.D1,-10]]),t);p.roll(),console.assert(1==p.result),console.log("Rollable tests performed.")}},1055:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.Rarity=void 0,(a=t.Rarity||(t.Rarity={}))[a.Black=0]="Black",a[a.Common=1]="Common",a[a.Uncommon=2]="Uncommon",a[a.Rare=3]="Rare",a[a.Epic=4]="Epic",a[a.Legendary=5]="Legendary",a[a.Artefact=6]="Artefact"},7978:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CRValue=t.Prof=t.StatValue=t.E=t.Activation=t.ClassHitDice=t.Condition=t.DamageType=t.AdventurerClass=t.Speed=t.StatForSkill=t.Skill=t.SizeToDice=t.CreatureSize=t.Sense=t.ProficiencyLevel=t.DStat=void 0;const n=a(2891);var i,s,o,r,l,d,c,h,p,m;!function(e){e[e.Str=0]="Str",e[e.Dex=1]="Dex",e[e.Con=2]="Con",e[e.Int=3]="Int",e[e.Wis=4]="Wis",e[e.Cha=5]="Cha"}(i=t.DStat||(t.DStat={})),function(e){e[e.None=0]="None",e[e.Half=1]="Half",e[e.Prof=2]="Prof",e[e.Expert=3]="Expert"}(s=t.ProficiencyLevel||(t.ProficiencyLevel={})),(m=t.Sense||(t.Sense={}))[m.Darkvision=0]="Darkvision",m[m.BlindSight=1]="BlindSight",m[m.TremorSense=2]="TremorSense",m[m.TrueSight=3]="TrueSight",m[m.DevilSight=4]="DevilSight",m[m._NonStandard=5]="_NonStandard",m[m.SteelSight=6]="SteelSight",function(e){e[e.Tiny=0]="Tiny",e[e.Small=1]="Small",e[e.Medium=2]="Medium",e[e.Large=3]="Large",e[e.Huge=4]="Huge",e[e.Gargantuan=5]="Gargantuan",e[e._NonStandard=6]="_NonStandard",e[e.Cosmic=7]="Cosmic"}(o=t.CreatureSize||(t.CreatureSize={})),t.SizeToDice=new Map([[o.Tiny,n.D4],[o.Small,n.D6],[o.Medium,n.D8],[o.Large,n.D10],[o.Huge,n.D12],[o.Gargantuan,n.D20],[o.Cosmic,n.D100]]),function(e){e[e.Acrobatics=0]="Acrobatics",e[e.AnimalHandling=1]="AnimalHandling",e[e.Arcana=2]="Arcana",e[e.Athletics=3]="Athletics",e[e.Deception=4]="Deception",e[e.History=5]="History",e[e.Insight=6]="Insight",e[e.Intimidation=7]="Intimidation",e[e.Investigation=8]="Investigation",e[e.Medicine=9]="Medicine",e[e.Nature=10]="Nature",e[e.Perception=11]="Perception",e[e.Performance=12]="Performance",e[e.Persuasion=13]="Persuasion",e[e.Religion=14]="Religion",e[e.SlightOfHand=15]="SlightOfHand",e[e.Stealth=16]="Stealth",e[e.Survival=17]="Survival",e[e._ALL=18]="_ALL",e[e._NonStandard=19]="_NonStandard",e[e.Honor=20]="Honor",e[e.Sanity=21]="Sanity"}(r=t.Skill||(t.Skill={})),t.StatForSkill=new Map([[r.Acrobatics,i.Dex],[r.AnimalHandling,i.Wis],[r.Arcana,i.Int],[r.Athletics,i.Str],[r.Deception,i.Cha],[r.History,i.Int],[r.Insight,i.Wis],[r.Intimidation,i.Cha],[r.Investigation,i.Int],[r.Medicine,i.Wis],[r.Nature,i.Int],[r.Perception,i.Wis],[r.Performance,i.Cha],[r.Persuasion,i.Cha],[r.Religion,i.Int],[r.SlightOfHand,i.Dex],[r.Stealth,i.Dex],[r.Survival,i.Wis]]),(p=t.Speed||(t.Speed={}))[p.Walking=0]="Walking",p[p.Swimming=1]="Swimming",p[p.Flying=2]="Flying",p[p.Climbing=3]="Climbing",p[p.Burrowing=4]="Burrowing",p[p._NonStandard=5]="_NonStandard",function(e){e[e.Artificer=0]="Artificer",e[e.Barbarian=1]="Barbarian",e[e.Bard=2]="Bard",e[e.Cleric=3]="Cleric",e[e.Druid=4]="Druid",e[e.Fighter=5]="Fighter",e[e.Monk=6]="Monk",e[e.Paladin=7]="Paladin",e[e.Ranger=8]="Ranger",e[e.Rogue=9]="Rogue",e[e.Sorcerer=10]="Sorcerer",e[e.Warlock=11]="Warlock",e[e.Wizard=12]="Wizard"}(l=t.AdventurerClass||(t.AdventurerClass={})),(h=t.DamageType||(t.DamageType={}))[h.Acid=0]="Acid",h[h.Bludgeoning=1]="Bludgeoning",h[h.Cold=2]="Cold",h[h.Fire=3]="Fire",h[h.Force=4]="Force",h[h.Lightning=5]="Lightning",h[h.Necrotic=6]="Necrotic",h[h.Piercing=7]="Piercing",h[h.Poison=8]="Poison",h[h.Psychic=9]="Psychic",h[h.Radiant=10]="Radiant",h[h.Slashing=11]="Slashing",h[h.Thunder=12]="Thunder",h[h.Physical=13]="Physical",h[h._NonStandard=14]="_NonStandard",h[h.Biochemical=15]="Biochemical",h[h.Corrosion=16]="Corrosion",h[h.Neural=17]="Neural",h[h.Hellfire=18]="Hellfire",(c=t.Condition||(t.Condition={}))[c.Blinded=0]="Blinded",c[c.Charmed=1]="Charmed",c[c.Deafened=2]="Deafened",c[c.Frightened=3]="Frightened",c[c.Grappled=4]="Grappled",c[c.Incapacitated=5]="Incapacitated",c[c.Invisible=6]="Invisible",c[c.Paralyzed=7]="Paralyzed",c[c.Petrified=8]="Petrified",c[c.Poisoned=9]="Poisoned",c[c.Prone=10]="Prone",c[c.Restrained=11]="Restrained",c[c.Stunned=12]="Stunned",c[c.Unconscious=13]="Unconscious",c[c.Exhaustion=14]="Exhaustion",c[c._NonStandard=15]="_NonStandard",c[c.Fragile=16]="Fragile",c[c.Silenced=17]="Silenced",t.ClassHitDice=new Map([[l.Artificer,n.D8],[l.Barbarian,n.D12],[l.Bard,n.D8],[l.Cleric,n.D8],[l.Druid,n.D8],[l.Fighter,n.D10],[l.Monk,n.D8],[l.Paladin,n.D10],[l.Ranger,n.D10],[l.Rogue,n.D8],[l.Sorcerer,n.D6],[l.Warlock,n.D8],[l.Wizard,n.D6]]),(d=t.Activation||(t.Activation={}))[d.Action=0]="Action",d[d.BonusAction=1]="BonusAction",d[d.Reaction=2]="Reaction",d[d.Special=3]="Special",d[d.LegendaryAction=4]="LegendaryAction",d[d.MythicAction=5]="MythicAction",d[d.LairAction=6]="LairAction",d[d._NonStandard=7]="_NonStandard",t.E=function e(t){if(t instanceof Map){let a=0;for(const[n,i]of t.entries())a+=i*e(n);return a}return(t.sides+1)/2};class u{constructor(e){this.val=Math.round(Math.min(30,Math.max(0,e)))}adjustStat(e){this.val=Math.round(Math.min(30,Math.max(0,this.val+e)))}get stat(){return this.val}get mod(){return u.mod(this.val)}static mod(e){return Math.floor(e/2)-5}}t.StatValue=u;class g{constructor(e){this.val=e}static get(e){if(this.instances.has(e))return this.instances.get(e);if(e<2||e>10)throw new Error("reasonable prof bonus levels crossed");if(!Number.isInteger(e))throw new Error("Can only have integral proficiencies");const t=new g(e);return this.instances.set(e,t),t}mod(e=s.Prof){if(e==s.None)return 0;if(e==s.Half)return Math.floor(this.val/2);if(e==s.Prof)return this.val;if(e==s.Expert)return 2*this.val;throw new Error("Prof level unknown")}}t.Prof=g,g.instances=new Map,t.CRValue=class{constructor(e,t=null){this.profOverride=t,this.val=Math.round(Math.min(30,Math.max(0,e)))}get cr(){return this.val}get prof(){return null!=this.profOverride?this.profOverride:g.get(Math.ceil(Math.max(1,this.val)/4)+1)}compareToStats(){throw new Error("Not implemented.")}}},9474:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BuffedInternalAttack=t.AttackContracts=t.InternalAttack=void 0;const n=a(2870),i=a(2891),s=a(7978);class o extends class{constructor(e){var t,a,n;this.subTitle="";const i=null!==(t=e.subtitle)&&void 0!==t?t:"";this.title=e.title,this.activation=e.activation,this.subTitle=i,this.hitBonus=null!==(a=e.hitBonus)&&void 0!==a?a:0,this.dcBonus=null!==(n=e.dcBonus)&&void 0!==n?n:0,this.mainStat=e.mainStat,this.contentGenerator=e.contentGenerator,this.resolvedDamages=null,this.expectedDamage=null,this.assignedDamages=null}getToHitRollableStr({name:e,stat:t,prof:a=s.ProficiencyLevel.Prof}){null==t&&(t=this.mainStat);const n=this.getMod(t)+this.sheet.pb.mod(a)+this.hitBonus;return this.doGetToHitRollableStr(n)}getDamageRollableStr(e){if(null==this.resolvedDamages)throw new Error("Damage string queried before damages were resolved.");return this.doGetDamageRollableStr(e)}getMod(e){return null==e&&(e=this.mainStat),this.sheet.stats.get(e).mod}getDc({stat:e,prof:t=s.ProficiencyLevel.Prof}={}){return null==e&&(e=this.mainStat),console.log(s.ProficiencyLevel[t]),console.log(8,this.getMod(e),this.sheet.pb.mod(t),this.dcBonus),8+this.getMod(e)+this.sheet.pb.mod(t)+this.dcBonus}bindDamages(e){var t,a,n;return this.expectedDamage=e.expectedDamage,this.damageTypes=null!==(t=e.damageTypes)&&void 0!==t?t:new Map,this.unassignedDamageRatios=null!==(a=e.unassignedDamageRatios)&&void 0!==a?a:new Map,this.assignedDamages=null!==(n=e.assignedDamages)&&void 0!==n?n:()=>new Map,this}bindStats(e){this.sheet=e}createContent(){this.resolveDamages();let e=this.contentGenerator(this);return"<p>"!=e.substring(0,3)&&(e=`<p>${e}</p>`),`<p><strong><em>${this.title}</em>. ${this.subTitle} </strong>`+e.substring(3)}get isDamaging(){return null!=this.expectedDamage||null!=this.assignedDamages}resolveDamages(){var e;if(!this.isDamaging)return;let t=0;const a=this.assignedDamages(this);if(null!=this.expectedDamage){for(const e of a.values())t+=(0,s.E)(e);const n=this.expectedDamage-t;if(n<=0)throw new Error("Assigned damage exceeds expected.");let i=0;for(const[,e]of this.unassignedDamageRatios.entries())for(const[,t]of e.entries())i+=t;for(const[t,o]of this.unassignedDamageRatios.entries())for(const[r,l]of o.entries()){let o;a.has(t)?o=a.get(t):(o=new Map,a.set(t,o));const d=Math.round(n*l/i/(0,s.E)(r));o.set(r,(null!==(e=o.get(r))&&void 0!==e?e:0)+d)}}this.resolvedDamages=a}}{doGetDamageRollableStr(e){const t=s.DamageType[this.damageTypes.get(e)],a=t?`${t} damage`:"";return`${(0,n.wrapRoll)(this.resolvedDamages.get(e))} \n                ${a}`}doGetToHitRollableStr(e){return(0,n.wrapRoll)(e)}}t.InternalAttack=o;class r{constructor(e,t){this.shouldApply=e,this.modify=t}}t.AttackContracts=new Map([["StimulusEnvy1",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.3*a)}))],["StimulusEnvy2",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.6*a)}))],["StimulusFree1",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.2*a)}))],["StimulusFree2",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.7*a)}))],["StimulusFree3",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,2.5*a)}))],["Stimulus1",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.25*a)}))],["Stimulus2",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.5*a)}))],["StimulusArrogance3",new r((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=i.D1&&e.set(t,1.5*a)}))]]),t.BuffedInternalAttack=class extends o{constructor(e){super(e),this.contracts=new Set}activateContract(e){this.contracts.add(e)}getContracts(){return this.contracts}deactivateContract(e){this.contracts.delete(e)}getDamageTypes(){return this.damageTypes}setDamageTypes(e){this.damageTypes=e}setContentGenerator(e){this.contentGenerator=e}createContent(){this.resolveDamages();for(const e of this.contracts)e.shouldApply(this)&&e.modify(this);let e=this.contentGenerator(this);return"<p>"!=e.substring(0,3)&&(e=`<p>${e}</p>`),`<p><strong><em>${this.title}</em>. ${this.subTitle} </strong>`+e.substring(3)}get currentlyResolvedDamages(){return this.resolvedDamages}get identificationInfo(){return new Map([["Creature",this.sheet.monster_id],["Attack",this.title]])}}},7982:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Contracts=t.renderContracts=t.GENERATED_IDS=void 0;const n=a(2891),i=a(7978),s=a(9474),o=a(4180),r=new Map([[0,"D"],[2,"C"],[5,"B"],[8,"A"],[12,"S"],[15,"SS"],[18,"SSS"],[24,"F"]]);t.GENERATED_IDS=new Set,t.renderContracts=function(){function e(e){setTimeout((()=>{e.stopPropagation();const a=$(".stat_sheet:visible"),n=$(".risk_effects");n.empty();let i=0;for(const[e,t]of o.contractIndex.entries())(0,o.isContractSelected)(e)&&(i+=t.risk,$(`<div class='risk_effect'>\n                       <img class="risk_icon" src="assets/images/risk/CC_Level_${t.risk}.webp" alt=""> \n                       <span>${t.desc}</span>\n                   </div>`).appendTo(n));$("#risk_value").text(i);let s="F";for(const[e,t]of r.entries()){if(!(i>=e))break;s=t}if($("#grade").html(s),0==a.length)return $(".stat_sheet").remove(),void t.GENERATED_IDS.clear();const l=a.attr("id").substring(11);$(".stat_sheet").remove(),t.GENERATED_IDS.clear(),$("#sheet_zone").append(o.ID_TO_SHEET_GENERATOR.get(l)().render())}),10)}$("#contracts").on("click",".contract_group",e),$("#contracts").on("click",".contract",e);for(const e of t.Contracts.values()){const t=[];for(const a of e.values())o.contractIndex.set(a.id,a),t.push(a.render());$(`<div class="contract_group selectable_radio_container">${t.join("")}</div>`).appendTo("#contracts")}},t.Contracts=new Map([["freedom",new Map([[1,new o.SheetContract(1,"free1","Unbreakable Freedom I","CC-FreeBuffA1.webp","Freedom has +20% HP/Attack Dice and +1 AC.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.2*a);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusFree1"));e.ac++}))],[2,new o.SheetContract(2,"free2","Unbreakable Freedom II","CC-FreeBuffA2.webp","Freedom has +30% HP Dice and +3 AC. And <em>Break the Chains</em> has shockwave radius, HP and probablity increased. She no longer takes damage on the chains breaking.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.3*a);e.ac+=3,e.attacks.set("breakTheChains",new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`At the end of her turn, Freedom has a 45% (55% in her second \n            form) chance to call forth her memories of captivity. If she does \n            succeed, chains with 100HP (150HP in her second form) appear around \n            her and stop her from moving or attacking. If the chains are not \n            destroyed until the start of her next-to-next round, she will free\n            herself and release a burst of ${e.getDamageRollableStr("free")}\n            (necrotic in her second form) to all creatures within 90 ft of her. \n            If the chains are broken, she and any creatures in 5ft are stunned\n            till the start of their turns.`,mainStat:void 0,title:"Break the Chains"}).bindDamages({expectedDamage:150,damageTypes:new Map([["free",i.DamageType.Radiant]]),unassignedDamageRatios:new Map([["free",new Map([[n.D12,1]])]])}))}))],[3,new o.SheetContract(3,"free3","Unbreakable Freedom III","CC-FreeBuffA3.webp","Freedom has +50% HP Dice and +5 AC. And <em>Break the Chains</em> has shockwave radius, HP and probablity significantly increased. Freedom now retores HP on the chains breaking.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.5*a);e.ac+=5,e.attacks.set("breakTheChains",new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`At the end of her turn, Freedom has a 65% (75% in her second \n            form) chance to call forth her memories of captivity. If she does \n            succeed, chains with 150HP (225HP in her second form) appear around \n            her and stop her from moving or attacking. If the chains are not \n            destroyed until the start of her next-to-next round, she will free\n            herself and release a burst of ${e.getDamageRollableStr("free")}\n            (necrotic in her second form) to all creatures within 120 ft of her. \n            If the chains are destroyed, she gains 25 HP instead. Also, she and \n            any other creatures within 30ft range are stunned till the start of \n            their turns.`,mainStat:void 0,title:"Break the Chains"}).bindDamages({expectedDamage:150,damageTypes:new Map([["free",i.DamageType.Radiant]]),unassignedDamageRatios:new Map([["free",new Map([[n.D12,1]])]])}))}))],[4,new o.SheetContract(2,"free4","Dazzling Freedom II","CC-FreeBuffB2.webp","Freedom has +90% HP Dice, +70% Damage Dice and resistance to fire and radiant damage. <em>Ink Swirl</em>'s cooldown is reduced.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.9*a);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusFree2"));e.res.add(i.DamageType.Fire),e.res.add(i.DamageType.Radiant),e.attacks.set("inkSwirl",new s.BuffedInternalAttack({activation:i.Activation.Action,contentGenerator:e=>`(This action can only be taken once in every two rounds\n            at the start of Freedom's turn, and before she moves) Freedom\n            targets the closest friendly unit within 60ft of her. If there are\n            two friendly units equidistant, she \n            chooses the one with lower HP. That unit and any other non-inklings \n            in 5 ft of it are <u>restrained</u> in an ink swirl and take\n            <u>continuous ${e.getDamageRollableStr("inkSwirl")}</u> for\n            two rounds. At the start of their turns, they can make a DC \n            ${e.getDc({stat:i.DStat.Cha,prof:i.ProficiencyLevel.Expert})}\n            atheletics check to escape the ink. The DC reduces by one after each\n            instance of damage. Allies can attempt to draw them out by making \n            the same check, but on failure, the ink envelops them too.`,mainStat:i.DStat.Cha,title:"Ink Swirl"}).bindDamages({assignedDamages:e=>new Map([["inkSwirl",new Map([[n.D1,e.getMod(i.DStat.Cha)]])]]),damageTypes:new Map([["inkSwirl",i.DamageType.Corrosion]]),expectedDamage:25,unassignedDamageRatios:new Map([["inkSwirl",new Map([[n.D4,1]])]])}))}))],[5,new o.SheetContract(3,"free5","Dazzling Freedom III","CC-FreeBuffB3.webp","Freedom has +200% HP Dice, +150% Atk Dice and resistance to fire and radiant damage. <em>Ink Swirl</em>'s cooldown is greatly reduced, and it needn't be cast at the start of the turn.",(e=>"inkling_free"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,3*a);e.res.add(i.DamageType.Fire),e.res.add(i.DamageType.Radiant);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusFree3"));e.attacks.set("inkSwirl",new s.BuffedInternalAttack({activation:i.Activation.Action,contentGenerator:e=>` Freedom targets the closest friendly unit\n            within 60ft of her. If there are two friendly units equidistant, she \n            chooses the one with lower HP. That unit and any other non-inklings \n            in 5 ft of it are <u>restrained</u> in an ink swirl and take\n            <u>continuous ${e.getDamageRollableStr("inkSwirl")}</u> for\n            two rounds. At the start of their turns, they can make a DC \n            ${e.getDc({stat:i.DStat.Cha,prof:i.ProficiencyLevel.Expert})}\n            atheletics check to escape the ink. The DC reduces by one after each\n            instance of damage. Allies can attempt to draw them out by making \n            the same check, but on failure, the ink envelops them too.`,mainStat:i.DStat.Cha,title:"Ink Swirl"}).bindDamages({assignedDamages:e=>new Map([["inkSwirl",new Map([[n.D1,e.getMod(i.DStat.Cha)]])]]),damageTypes:new Map([["inkSwirl",i.DamageType.Corrosion]]),expectedDamage:25,unassignedDamageRatios:new Map([["inkSwirl",new Map([[n.D4,1]])]])}))}))]])],["invested",new Map([[1,new o.SheetContract(1,"inv1","Invested I","CC-EnemyHPBuff1.webp","Enemies have their HP Dice increased by 30%",(e=>!0),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.3*a)}))],[2,new o.SheetContract(2,"inv2","Invested II","CC-EnemyHPBuff2.webp","Enemies have their HP Dice increased by 60%",(e=>!0),(e=>{for(const[t,a]of e.hpDice.entries())t!=n.D1&&e.hpDice.set(t,1.6*a)}))],[3,new o.SheetContract(3,"inv3","Invested III","CC-EnemyHPBuff3.webp","Enemies have their HP Dice increased by 110%",(e=>!0),(e=>{for(const[t,a]of e.hpDice.entries())t!=n.D1&&e.hpDice.set(t,2.1*a)}))]])],["def",new Map([[1,new o.SheetContract(1,"def1","Shield of Ink","CC-EnemyDEFBuff1.webp","All enemies gain +2 AC.",(e=>!0),(e=>{e.ac+=2}))]])],["envy",new Map([[1,new o.SheetContract(1,"env1","Deep Envy I","CC-EnvyBuffA1.png","Envies have +20% HP and gain semi-proficiency in Con Saving throws.",(e=>"inkling_envy"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.2*a);e.saves.set(i.DStat.Con,[i.ProficiencyLevel.Half,0])}))],[2,new o.SheetContract(2,"env2","Deep Envy II","CC-EnvyBuffA2.png","Envies have +70% HP, +30% ATK and gain proficiency in Con Saving throws.",(e=>"inkling_envy"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.7*a);e.saves.set(i.DStat.Con,[i.ProficiencyLevel.Prof,0]);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusEnvy1"))}))],[3,new o.SheetContract(3,"env3","Deep Envy III","CC-EnvyBuffA3.png","Envies have +120% HP, +60% ATK and gain expertise in Con Saving throws.",(e=>"inkling_envy"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,2.2*a);e.saves.set(i.DStat.Con,[i.ProficiencyLevel.Expert,0]);for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("StimulusEnvy2"))}))],[4,new o.SheetContract(2,"env4","Entrenched Envy II","CC-EnvyBuffB2.png","Envies have advantage in Con Saving throws. Also they now charge their attacks in half a round and may begin charging anytime.",(e=>"inkling_envy"==e.monster_id),(e=>{e.attacks.set("charging",new s.BuffedInternalAttack({activation:i.Activation.LegendaryAction,contentGenerator:e=>"The Inkling begins concentrating for a big shot, they'll be done in half a round (*refer to continuous damage initiative cutoffs).",mainStat:null,title:"Charging"})),e.attacks.set("bonusShot",new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 60 feet of itself. The target must succeed \n                    on a DC ${e.getDc()} Constitution saving throw. On failure, they take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}.</p>`,mainStat:i.DStat.Con,title:"Casual Spit"}).bindDamages({expectedDamage:30,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.DStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.DStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,3]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}))}))],[5,new o.SheetContract(3,"env5","Entrenched Envy III","CC-EnvyBuffB3.png","Envies have super-advantage in Con Saving throws. Also they now charge their attacks in quarter of a round and may begin charging anytime.",(e=>"inkling_envy"==e.monster_id),(e=>{e.attacks.set("charging",new s.BuffedInternalAttack({activation:i.Activation.LegendaryAction,contentGenerator:e=>"The Inkling begins concentrating for a big shot, they'll be done in a fourth of a round (*refer to continuous damage initiative cutoffs).",mainStat:null,title:"Charging"})),e.attacks.set("bonusShot",new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 60 feet of itself. The target must succeed \n                    on a DC ${e.getDc()} Constitution saving throw. On failure, they take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}.</p>`,mainStat:i.DStat.Con,title:"Casual Spit"}).bindDamages({expectedDamage:30,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.DStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.DStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,3]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}))}))]])],["stimuli",new Map([[1,new o.SheetContract(1,"sti1","Stimulus I","CC-EnemyATKBuff1.webp","Enemies have their ATK increased by 25%",(e=>!0),(e=>{for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("Stimulus1"))}))],[2,new o.SheetContract(2,"sti2","Stimulus II","CC-EnemyATKBuff1.webp","Enemies have their ATK increased by 50%",(e=>!0),(e=>{for(const[t,a]of e.attacks.entries())a.isDamaging&&a.activateContract(s.AttackContracts.get("Stimulus1"))}))]])],["fast_mouths",new Map([[1,new o.SheetContract(1,"faj1","Fast Jaws I","CC-EnemyASPDBuff1.webp","Impatience, insecurity and Freedom have one more attack per action.",(e=>["inkling_insecurity","inkling_impatience","inkling_free"].includes(e.monster_id)),(e=>{const t="inkling_insecurity"==e.monster_id?"two":"three";e.attacks.set("multiattack",new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>`<p>The inkling makes ${t} bite attacks per turn.</p>`,mainStat:void 0,title:"Multiattack"}))}))],[2,new o.SheetContract(2,"faj2","Fast Jaws II","CC-EnemyASPDBuff2.webp","Impatience, insecurity and Freedom have two more bite attacks per action.",(e=>["inkling_insecurity","inkling_impatience","inkling_free"].includes(e.monster_id)),(e=>{const t="inkling_insecurity"==e.monster_id?"three":"four";e.attacks.set("multiattack",new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>`<p>The inkling makes ${t} bite attacks per turn.</p>`,mainStat:void 0,title:"Multiattack"}))}))]])],["covertAction",new Map([[1,new o.SheetContract(1,"cva1","Covert Action I","CC-SmallerSquad1.webp","One Friendly gains a +10 to stealth rolls but has fragile inflicted throughout the operation (Total HP capped at 1).",(e=>!0),(e=>{}))],[2,new o.SheetContract(3,"cva2","Covert Action II","CC-SmallerSquad2.webp","Two friendlies gain a +10 to stealth rolls but have fragile inflicted throughout the operation (Total HP capped at 1).",(e=>!0),(e=>{}))]])],["clock",new Map([[1,new o.SheetContract(1,"flt1","Fleeting Time I","CC-OperatorASPDDebuff1.webp","Time Limit reduced by 25% to 12 rounds.",(e=>!0),(e=>{}))],[2,new o.SheetContract(2,"flt2","Fleeting Time II","CC-OperatorASPDDebuff2.webp","Time Limit reduced by 50% to 8 rounds.",(e=>!0),(e=>{}))]])],["mov",new Map([[1,new o.SheetContract(1,"mov1","Mobility I","CC-EnemySpeedBuff.webp","All enemies gain +50% movement speeds.",(e=>!0),(e=>{for(const[t,a]of e.speeds.entries())e.speeds.set(t,5*Math.floor(.3*a))}))]])],["arr",new Map([[1,new o.SheetContract(1,"arr1","Flickering Lights I","CC-ArroganceBuffA1.webp","Arrogance gain +70% HP and halves come back to life with full HP if the other half is not killed until the start of their next-to-next turn. They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,1.7*a)}))],[2,new o.SheetContract(2,"arr2","Flickering Lights II","CC-ArroganceBuffA2.webp","Arrogance gain +220% HP and halves come back to life with full HP if the other half is not killed until the start of their next-to-next turn. They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,3.2*a)}))],[3,new o.SheetContract(3,"arr3","Flickering Lights III","CC-ArroganceBuffA3.webp","Arrogance gain +300% HP and halves come back to life with full HP if the other half is not killed until the start of their next-to-next turn. They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,4*a)}))],[4,new o.SheetContract(2,"arr4","Ephemeral Lights II","CC-ArroganceBuffB2.webp","Arrogance gain +110% HP, increased movement speed (5ft) and a wider blast radius (+50%). They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,2.1*a);for(const[t,a]of e.speeds.entries())e.speeds.set(t,a+5);e.attacks.set("boomText",new s.BuffedInternalAttack({contentGenerator:e=>`<p>Upon death explodes to deal ${e.getDamageRollableStr("Boom")} to targets within 5 ft. \n                    On coming into contact with its opposite explodes to deal ${e.getDamageRollableStr("BigBoom")} \n                    instead to targets within 30ft and half damage to targets within 60ft.</p>`,activation:i.Activation.Special,mainStat:i.DStat.Dex,title:"Boom"}).bindDamages({assignedDamages:e=>new Map([]),unassignedDamageRatios:new Map([["Boom",new Map([[n.D20,1]])],["BigBoom",new Map([[n.D20,12]])]]),damageTypes:new Map([["Boom",i.DamageType.Force],["BigBoom",i.DamageType.Force]]),expectedDamage:270}))}))],[5,new o.SheetContract(3,"arr5","Ephemeral Lights III","CC-ArroganceBuffB3.webp","Arrogance gain +110% HP, increased movement speed (10ft) and a wider blast radius (+100%) with increased damage. They will now chase after friendlies.",(e=>"inkling_arrogance"==e.monster_id),(e=>{const t=e.hpDice;for(const[e,a]of t.entries())e!=n.D1&&t.set(e,2.1*a);for(const[t,a]of e.speeds.entries())e.speeds.set(t,a+10);let a=e.attacks.get("boomText").getContracts();e.attacks.set("boomText",new s.BuffedInternalAttack({contentGenerator:e=>`<p>Upon death explodes to deal ${e.getDamageRollableStr("Boom")} to targets within 5 ft. \n                    On coming into contact with its opposite explodes to deal ${e.getDamageRollableStr("BigBoom")} \n                    instead to targets within 40ft and half damage to targets within 80ft.</p>`,activation:i.Activation.Special,mainStat:i.DStat.Dex,title:"Boom"}).bindDamages({assignedDamages:e=>new Map([]),unassignedDamageRatios:new Map([["Boom",new Map([[n.D20,1]])],["BigBoom",new Map([[n.D20,12]])]]),damageTypes:new Map([["Boom",i.DamageType.Force],["BigBoom",i.DamageType.Force]]),expectedDamage:270}));for(const[t,n]of e.attacks.entries())if(n.isDamaging){n.activateContract(s.AttackContracts.get("StimulusArrogance3"));for(const e of a)n.activateContract(e)}}))]])],["ero",new Map([[1,new o.SheetContract(1,"ero1","Erosion I","CC-HPDebuff1.webp","Friendlies have HP reduced by 20.",(e=>!0),(e=>{}))]])]])},7819:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createFreedom=t.createInklingTank=t.createInklingDynamite=t.createInklingWannabeBoss=t.createInklingAberrant=t.createInklingDog=t.createInkling=void 0;const n=a(2891),i=a(7978),s=a(9474),o=a(4180);t.createInkling=function(){const e=new s.BuffedInternalAttack({title:"Ink Spray",activation:i.Activation.Special,mainStat:i.DStat.Con,contentGenerator:e=>`<p>Upon death, the inkling sprays viscous ink at all creatures within 15 feet of itself. The targets\n            must succeed on a DC ${e.getDc()} Constitution saving throw or be blinded until the end of their next turn.</p>`}),t=new s.BuffedInternalAttack({title:"Bite",activation:i.Activation.Action,mainStat:i.DStat.Str,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 5 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("Blot")} and ${e.getDamageRollableStr("BlotNeural")}.</p>`}).bindDamages({expectedDamage:32,assignedDamages:e=>new Map([["Bite",new Map([[n.D4,1],[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,1]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Neural]])});return new o.BuffedStatSheet({monster_id:"inkling_insecurity",title:"Inkling (Insecurity)",size:i.CreatureSize.Medium,subtitle:" Inkling(Ooze), Typically Chaotic Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(13)],[i.DStat.Dex,new i.StatValue(13)],[i.DStat.Con,new i.StatValue(14)],[i.DStat.Int,new i.StatValue(16)],[i.DStat.Wis,new i.StatValue(15)],[i.DStat.Cha,new i.StatValue(13)]]),ac:13,acDesc:"(Natural Armor)",biologicalHp:40,attacks:new Map([["inkSpray",e],["bite",t]]),crValue:new i.CRValue(2),saveProficiencies:new Map([[i.DStat.Con,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.Skill.Stealth,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Walking,30]]),vulnerabilities:new Set([i.DamageType.Cold,i.DamageType.Lightning,i.DamageType.Bludgeoning]),resistances:new Set([i.DamageType.Acid,i.DamageType.Fire,i.DamageType.Piercing,i.DamageType.Thunder]),immunities:new Set([i.DamageType.Poison,i.DamageType.Psychic]),conditionImmunities:new Set([i.Condition.Blinded,i.Condition.Deafened,i.Condition.Exhaustion])})},t.createInklingDog=function(){const e=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"<p>The inkling attacks twice on an attack action.</p>",mainStat:void 0,title:"Multiattack"}),t=new s.BuffedInternalAttack({title:"Bite",activation:i.Activation.Action,mainStat:i.DStat.Dex,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 5 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("BiteVenom")}</p>`}).bindDamages({expectedDamage:10,assignedDamages:e=>new Map([["Bite",new Map([[n.D6,1],[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["BiteVenom",new Map([[n.D4,1]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["BiteVenom",i.DamageType.Poison]])});return new o.BuffedStatSheet({monster_id:"inkling_impatience",title:"Inkling (Impatience)",size:i.CreatureSize.Small,subtitle:" Inkling(Fiend), Typically Chaotic Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(11)],[i.DStat.Dex,new i.StatValue(17)],[i.DStat.Con,new i.StatValue(11)],[i.DStat.Int,new i.StatValue(6)],[i.DStat.Wis,new i.StatValue(13)],[i.DStat.Cha,new i.StatValue(7)]]),ac:13,acDesc:"(Natural Armor)",biologicalHp:32,attacks:new Map([["bite",t],["multiattack",e]]),crValue:new i.CRValue(1),saveProficiencies:new Map([[i.DStat.Dex,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.Skill.Athletics,[i.ProficiencyLevel.Prof,0]],[i.Skill.Acrobatics,[i.ProficiencyLevel.Prof,0]]]),speeds:new Map([[i.Speed.Walking,50]]),vulnerabilities:new Set([i.DamageType.Fire,i.DamageType.Lightning]),resistances:new Set([i.DamageType.Cold,i.DamageType.Poison,i.DamageType.Psychic])})},t.createInklingAberrant=function(){const e=new s.BuffedInternalAttack({contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 60 feet of itself. The target must succeed \n                    on a DC ${e.getDc()} Constitution saving throw. On failure, they take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}.</p>`,activation:i.Activation.Action,mainStat:i.DStat.Con,title:"Ink Spit"}).bindDamages({expectedDamage:50,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.DStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.DStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,3]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}),t=new s.BuffedInternalAttack({contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 90 feet of itself. The target must succeed \n                    on a DC ${e.getDc({prof:i.ProficiencyLevel.Expert})} Constitution saving throw. On failure, they\n                     take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}. \n                    This damage is neural damage and can cause the target to be Stunned.</p>`,activation:i.Activation.Action,mainStat:i.DStat.Int,title:"Charged Spit"}).bindDamages({expectedDamage:100,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.DStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.DStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,1]])],["BlotNeural",new Map([[n.D8,3]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}),a=new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>"The Inkling begins concentrating for a big shot.",mainStat:void 0,title:"Charging"});return new o.BuffedStatSheet({monster_id:"inkling_envy",title:"Inkling (Envy)",size:i.CreatureSize.Medium,subtitle:" Inkling(Aberration), Typically Chaotic Evil",stats:new Map([[i.DStat.Str,new i.StatValue(13)],[i.DStat.Dex,new i.StatValue(11)],[i.DStat.Con,new i.StatValue(16)],[i.DStat.Int,new i.StatValue(19)],[i.DStat.Wis,new i.StatValue(13)],[i.DStat.Cha,new i.StatValue(15)]]),ac:11,acDesc:"(Natural Armor)",biologicalHp:100,attacks:new Map([["inkSpit",e],["charging",a],["charged",t]]),crValue:new i.CRValue(5),saveProficiencies:new Map([[i.DStat.Int,[i.ProficiencyLevel.Prof,0]],[i.DStat.Wis,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.Skill.Perception,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Flying,20]]),vulnerabilities:new Set([i.DamageType.Lightning,i.DamageType.Thunder]),immunities:new Set([i.DamageType.Poison,i.DamageType.Psychic]),conditionImmunities:new Set([i.Condition.Prone,i.Condition.Blinded])})},t.createInklingWannabeBoss=function(){const e=new s.BuffedInternalAttack({contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Slam",prof:i.ProficiencyLevel.None})}, reach 15 ft., one target. \n                    Hit: ${e.getDamageRollableStr("Slam")} plus ${e.getDamageRollableStr("SlamVibe")}. The primary\n                    target must succeed a DC ${e.getDc()} Str save or fall prone. Those within 5ft of the primary \n                    target take half the bludgeoning damage and must make a DC ${e.getDc()} Con save or take the \n                    thunder damage too. On a fail of 10 or more, they are deafened until a long rest.<br/>\n                    <em>The behemoth inkling slams a mighty fist into the ground, crushing the poor victim who wasn't \n                    able to run away in time and sending thunderous shockwaves shaking those around.</em></p>`,activation:i.Activation.Action,mainStat:i.DStat.Str,title:"Slam"}).bindDamages({assignedDamages:e=>new Map([["Slam",new Map([[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["Slam",new Map([[n.D8,3]])],["SlamVibe",new Map([[n.D8,1]])]]),damageTypes:new Map([["Slam",i.DamageType.Bludgeoning],["SlamVibe",i.DamageType.Thunder]]),expectedDamage:110}),t=new s.BuffedInternalAttack({contentGenerator:e=>"<p>Can jump up to 60 ft as a bonus action - can grapple a target within 5 ft of landing or takeoff\n                       as part of the same action.</p>",activation:i.Activation.BonusAction,mainStat:i.DStat.Str,title:"Jump"}),a=new s.BuffedInternalAttack({contentGenerator:e=>"<p>Can slam once as an opportunity attack whenever an enemy comes within range.</p>",activation:i.Activation.Reaction,mainStat:i.DStat.Str,title:"Prepared"});return new o.BuffedStatSheet({monster_id:"inkling_fury",title:"Inkling (Fury)",size:i.CreatureSize.Huge,subtitle:" Inkling(Beast), Typically Chaotic Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(24)],[i.DStat.Dex,new i.StatValue(13)],[i.DStat.Con,new i.StatValue(24)],[i.DStat.Int,new i.StatValue(7)],[i.DStat.Wis,new i.StatValue(8)],[i.DStat.Cha,new i.StatValue(13)]]),ac:18,acDesc:"(Natural Armor)",biologicalHp:160,attacks:new Map([["slamText",e],["jumpText",t],["reactText",a]]),crValue:new i.CRValue(9),saveProficiencies:new Map([[i.DStat.Dex,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.Skill.Athletics,[i.ProficiencyLevel.Expert,0]],[i.Skill.Acrobatics,[i.ProficiencyLevel.Prof,0]]]),speeds:new Map([[i.Speed.Walking,50]]),vulnerabilities:new Set([i.DamageType.Lightning]),resistances:new Set([i.DamageType.Cold,i.DamageType.Poison,i.DamageType.Psychic])})},t.createInklingDynamite=function(){const e=new s.BuffedInternalAttack({contentGenerator:e=>`<p>Upon death explodes to deal ${e.getDamageRollableStr("Boom")} to targets within 5 ft. \n                    On coming into contact with its opposite explodes to deal ${e.getDamageRollableStr("BigBoom")} \n                    instead to targets within 20ft and half damage to targets within 40ft.</p>`,activation:i.Activation.Special,mainStat:i.DStat.Dex,title:"Boom"}).bindDamages({assignedDamages:e=>new Map([]),unassignedDamageRatios:new Map([["Boom",new Map([[n.D20,1]])],["BigBoom",new Map([[n.D20,12]])]]),damageTypes:new Map([["Boom",i.DamageType.Force],["BigBoom",i.DamageType.Force]]),expectedDamage:270}),t=new s.BuffedInternalAttack({contentGenerator:e=>"<p> Doesn't die till both opposites explode, instead just enters a diffused state with halved\n                    movement speed. If the opposites come into contact and at least one is diffused, damage dealt\n                    is half the rolled damage.</p>",activation:i.Activation.Special,mainStat:i.DStat.Dex,title:"Half Lives"});return new o.BuffedStatSheet({monster_id:"inkling_arrogance",title:"Inkling (Arrogance)",size:i.CreatureSize.Tiny,subtitle:" Inkling(Aberration), Typically Neutral Evil",stats:new Map([[i.DStat.Str,new i.StatValue(1)],[i.DStat.Dex,new i.StatValue(28)],[i.DStat.Con,new i.StatValue(10)],[i.DStat.Int,new i.StatValue(13)],[i.DStat.Wis,new i.StatValue(14)],[i.DStat.Cha,new i.StatValue(11)]]),ac:19,acDesc:"(Natural Armor)",biologicalHp:19,attacks:new Map([["boomText",e],["halfLifeText",t]]),crValue:new i.CRValue(5),saveProficiencies:new Map([[i.DStat.Int,[i.ProficiencyLevel.Prof,0]],[i.DStat.Wis,[i.ProficiencyLevel.Prof,0]],[i.DStat.Cha,[i.ProficiencyLevel.Expert,0]]]),skillProficiencies:new Map([[i.Skill.Perception,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Flying,20]]),vulnerabilities:new Set([i.DamageType.Cold]),immunities:new Set([i.DamageType.Fire,i.DamageType.Poison,i.DamageType.Psychic,i.DamageType.Lightning,i.DamageType.Thunder]),conditionImmunities:new Set([i.Condition.Prone,i.Condition.Blinded,i.Condition.Frightened,i.Condition.Charmed,i.Condition.Grappled,i.Condition.Exhaustion])})},t.createInklingTank=function(){const e=new s.BuffedInternalAttack({contentGenerator:e=>"<p>Once a creature enters within 60 ft of them or starts their turn in that area and can see them\n                    they must make a DC 24 Cha saving throw. On failure, they can only attack this creature until it \n                    dies. If it goes out of range, they must dash or do whatever they can to approach it as long as they\n                    are within 120ft of it. Any AoE spell must be so placed such that this creature takes the maximum \n                    amount of damage possible. They can repeat this save at the start of their turns to break out of \n                    the taunt effect, but the DC increases by 1 with each failure.</p>",activation:i.Activation.Special,mainStat:i.DStat.Con,title:"Taunt"});return new o.BuffedStatSheet({monster_id:"inkling_sloth",title:"Inkling (Sloth)",size:i.CreatureSize.Small,subtitle:" Inkling(Construct), Typically Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(28)],[i.DStat.Dex,new i.StatValue(1)],[i.DStat.Con,new i.StatValue(28)],[i.DStat.Int,new i.StatValue(2)],[i.DStat.Wis,new i.StatValue(13)],[i.DStat.Cha,new i.StatValue(16)]]),ac:22,acDesc:"(Natural Armor)",biologicalHp:120,attacks:new Map([["tauntText",e]]),crValue:new i.CRValue(7,i.Prof.get(4)),saveProficiencies:new Map([[i.DStat.Str,[i.ProficiencyLevel.Expert,0]],[i.DStat.Con,[i.ProficiencyLevel.Expert,0]],[i.DStat.Int,[i.ProficiencyLevel.Expert,0]],[i.DStat.Wis,[i.ProficiencyLevel.Expert,0]],[i.DStat.Cha,[i.ProficiencyLevel.Expert,0]]]),skillProficiencies:new Map([[i.Skill.Athletics,[i.ProficiencyLevel.Expert,0]],[i.Skill.Perception,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Walking,10]]),vulnerabilities:new Set([i.DamageType.Force,i.DamageType.Thunder]),resistances:new Set([i.DamageType.Cold,i.DamageType.Necrotic,i.DamageType.Radiant,i.DamageType.Bludgeoning,i.DamageType.Piercing,i.DamageType.Slashing]),immunities:new Set([i.DamageType.Acid,i.DamageType.Fire,i.DamageType.Lightning,i.DamageType.Poison,i.DamageType.Psychic,i.DamageType.Bludgeoning,i.DamageType.Piercing,i.DamageType.Slashing]),conditionImmunities:new Set([i.Condition.Exhaustion,i.Condition.Poisoned,i.Condition.Prone])})},t.createFreedom=function(){const e=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"Freedom can breathe in air and water.",mainStat:void 0,title:"Amphibious"}),t=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"If Freedom fails a saving throw, she can choose to succeed instead.",mainStat:void 0,title:"Legendary Resistance",subtitle:"(1 / day)"}),a=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"Starts under the blessing of light. When she reaches zero HP for the first time revives herself over the course of 1+ round during which she is invulnerable and cannot attack. At initiative count zero after reviving, she gets a free turn. At the end of that turn looses invulnerability. She falls under the blessing of darkness in her second form.",mainStat:void 0,title:"Duality of Life"}),r=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"The movement speed of Freedom cannot be reduced in any way.",mainStat:void 0,title:"Freely Flowing Ink"}),l=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"<p>The inkling attacks twice on an attack action.</p>",mainStat:void 0,title:"Multiattack"}),d=new s.BuffedInternalAttack({activation:i.Activation.Action,contentGenerator:e=>`(This action can only be taken once in every three rounds\n            at the start of Freedom's turn, and before she moves) Freedom\n            targets the closest friendly unit within 60ft of her. If there are\n            two friendly units equidistant, she \n            chooses the one with lower HP. That unit and any other non-inklings \n            in 5 ft of it are <u>restrained</u> in an ink swirl and take\n            <u>continuous ${e.getDamageRollableStr("inkSwirl")}</u> for\n            two rounds. At the start of their turns, they can make a DC \n            ${e.getDc({stat:i.DStat.Cha,prof:i.ProficiencyLevel.Expert})}\n            atheletics check to escape the ink. The DC reduces by one after each\n            instance of damage. Allies can attempt to draw them out by making \n            the same check, but on failure, the ink envelops them too.`,mainStat:i.DStat.Cha,title:"Ink Swirl"}).bindDamages({assignedDamages:e=>new Map([["inkSwirl",new Map([[n.D1,e.getMod(i.DStat.Cha)]])]]),damageTypes:new Map([["inkSwirl",i.DamageType.Corrosion]]),expectedDamage:25,unassignedDamageRatios:new Map([["inkSwirl",new Map([[n.D4,1]])]])}),c=new s.BuffedInternalAttack({activation:i.Activation.Special,contentGenerator:e=>"Freedom has two legendary actions.",mainStat:void 0,title:"Legendary Actions"}),h=new s.BuffedInternalAttack({title:"Bite",activation:i.Activation.LegendaryAction,mainStat:i.DStat.Str,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 30 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("BiteVenom")}</p>`,subtitle:"(Cost 1)"}).bindDamages({expectedDamage:null,assignedDamages:e=>new Map([["Bite",new Map([[n.D10,2],[n.D1,e.getMod()]])],["BiteVenom",new Map([[n.D6,3]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["BiteVenom",i.DamageType.Biochemical]])}),p=new s.BuffedInternalAttack({title:"Bite",activation:i.Activation.Action,mainStat:i.DStat.Str,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 30 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("BiteVenom")}. A target hit \n            by this attack is grappled in her jaw till the end of her turn.</p>`}).bindDamages({expectedDamage:null,assignedDamages:e=>new Map([["Bite",new Map([[n.D10,2],[n.D1,e.getMod()]])],["BiteVenom",new Map([[n.D6,3]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["BiteVenom",i.DamageType.Biochemical]])}),m=new s.BuffedInternalAttack({activation:i.Activation.BonusAction,contentGenerator:e=>`At the end of her turn, Freedom has a 25% (35% in her second \n            form) chance to call forth her memories of captivity. If she does \n            succeed, chains with 75HP (105HP in her second form) appear around \n            her and stop her from moving or attacking. If the chains are not \n            destroyed until the start of her next-to-next round, she will free\n            herself and release a burst of ${e.getDamageRollableStr("free")}\n            (necrotic in her second form) to all creatures within 60 ft of her.\n            If the chains are destroyed, she looses 50 HP instead and is stunned \n            until the start of her turn.`,mainStat:void 0,title:"Break the Chains"}).bindDamages({expectedDamage:150,damageTypes:new Map([["free",i.DamageType.Radiant]]),unassignedDamageRatios:new Map([["free",new Map([[n.D12,1]])]])});return new o.BuffedStatSheet({monster_id:"inkling_free",title:"Freedom",subtitle:"dragon, typically Chaotic Neutral",stats:new Map([[i.DStat.Str,new i.StatValue(27)],[i.DStat.Dex,new i.StatValue(15)],[i.DStat.Con,new i.StatValue(25)],[i.DStat.Int,new i.StatValue(20)],[i.DStat.Wis,new i.StatValue(15)],[i.DStat.Cha,new i.StatValue(24)]]),ac:21,acDesc:"Natural Armor",attacks:new Map([["amphibious",e],["legendRes",t],["dualLife",a],["freeInk",r],["multiattack",l],["inkSwirl",d],["legendAct",c],["bite",h],["biteA",p],["breakTheChains",m]]),size:i.CreatureSize.Huge,biologicalHp:300,conditionImmunities:new Set([i.Condition.Charmed,i.Condition.Grappled,i.Condition.Frightened,i.Condition.Poisoned,i.Condition.Deafened,i.Condition.Restrained,i.Condition.Stunned]),crValue:new i.CRValue(15,i.Prof.get(6)),immunities:new Set([i.DamageType.Psychic,i.DamageType.Poison]),resistances:new Set([i.DamageType.Acid,i.DamageType.Slashing,i.DamageType.Piercing,i.DamageType.Bludgeoning,i.DamageType.Thunder]),isTough:!0,saveProficiencies:new Map([[i.DStat.Dex,[i.ProficiencyLevel.Prof,0]],[i.DStat.Con,[i.ProficiencyLevel.Prof,0]],[i.DStat.Wis,[i.ProficiencyLevel.Prof,0]],[i.DStat.Cha,[i.ProficiencyLevel.Prof,0]]]),skillProficiencies:new Map([[i.Skill.Performance,[i.ProficiencyLevel.Expert,0]],[i.Skill.Insight,[i.ProficiencyLevel.Prof,0]],[i.Skill.Perception,[i.ProficiencyLevel.Expert,0]]]),speeds:new Map([[i.Speed.Walking,40],[i.Speed.Swimming,40],[i.Speed.Flying,80]])})}},5506:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMonsters=t.setupStatSheet=void 0;const n=a(7982),i=a(7819),s=a(4180);function o(e,t,a,i,o,r=!1){const l=s.ID_TO_SHEET_GENERATOR.has(t);if(s.ID_TO_SHEET_GENERATOR.set(t,o),!l){const n=r?`<img class="icon_img" src="assets/images/${i}" alt="[NULL]">`:`<img class="icon_img" src="assets/images/mob_tokens/${e}/${i}" alt="[NULL]">`;$("#beastiary .selectable_radio_container").append(`\n            <div class="selectable radio creature" \n                 data-creature-id="${t}"\n                 data-mob-group="${e}"\n                 style="display: none;">\n                ${n}\n                <div class="title selected_only">${a}</div>\n            </div>`)}console.log("PAS",`#stat_sheet_${t}`);const d=$(`#stat_sheet_${t}`);if(d.length>1)throw new Error(`Duplicate sheet with id stat_sheet_${t}.`);0!=d.length?d.is(":hidden")?(n.GENERATED_IDS.delete(t),d.remove(),console.log("PAS3")):(console.log("CHANGING ACTIVE SHEET"),d.remove(),$("#sheet_zone").append(o().render())):console.log("PAS2")}t.setupStatSheet=o,t.setupMonsters=function(){o("inkling","inkling_insecurity","Inkling: Insecurity","insecurity.png",i.createInkling),o("inkling","inkling_impatience","Inkling: Impatience","impatience.png",i.createInklingDog),o("inkling","inkling_envy","Inkling: Envy","envy.png",i.createInklingAberrant),o("inkling","inkling_fury","Inkling: Fury","fury.png",i.createInklingWannabeBoss),o("inkling","inkling_sloth","Inkling: Sloth","sloth.png",i.createInklingTank),o("inkling","inkling_arrogance","Inkling: Arrogance","arrogance.png",i.createInklingDynamite),o("inkling","inkling_free","Freedom","free.png",i.createFreedom);const e=$("#beastiary");e.on("click",".mob_group_icon",(function(){const t=$(this).data("mobGroupId");e.find(".creature").hide(),e.find(`.creature[data-mob-group=${t}]`).show(),console.log("mobgroup clicked")})),e.on("click",".creature:not(.disabled)",(function(){setTimeout((()=>{const e=$("#beastiary .creature.selected").data("creatureId");$(".stat_sheet").hide(),s.ID_TO_SHEET_GENERATOR.has(e)&&(n.GENERATED_IDS.has(e)?$(`#stat_sheet_${e}`).show():($("#sheet_zone").append(s.ID_TO_SHEET_GENERATOR.get(e)().render()),n.GENERATED_IDS.add(e)))}),10)}))}},4180:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.BuffedStatSheet=t.SheetContract=t.StatSheet=t.isContractSelected=t.contractIndex=t.ID_TO_SHEET_GENERATOR=void 0;const n=a(2870),i=a(2891),s=a(7978);class o{constructor(e,t,a,n=new Map,i=!1){this.stats=e,this.size=t,this.biologicalHp=a,this.adventurerLevels=n,this.isTough=i}get conHpPerDice(){return this.stats.get(s.DStat.Con).mod+(this.isTough?2:0)}getAdventurerHp(){let e=0;for(const[t,a]of this.adventurerLevels.entries())e+=((0,s.E)(s.ClassHitDice.get(t))+this.conHpPerDice)*a;return e}get hpDiceCount(){const e=this.biologicalHp+this.getAdventurerHp(),t=(0,s.E)(this.size)+this.conHpPerDice;return Math.round(e/t)}}function r(e){return $(`#contracts .contract[data-contract-uid=${e}]`).hasClass("selected")}t.ID_TO_SHEET_GENERATOR=new Map,t.contractIndex=new Map,t.isContractSelected=r;class l{constructor({monster_id:e,title:t,subtitle:a,crValue:n,stats:r,size:l,biologicalHp:d,ac:c,speeds:h,attacks:p,saveProficiencies:m=new Map,skillProficiencies:u=new Map,acDesc:g=null,adventurerLevels:f=new Map,vulnerabilities:v=new Set,resistances:w=new Set,immunities:y=new Set,conditionImmunities:I=new Set,isTough:S=!1}){this.monster_id=e,this.title=t,this.subtitle=a,this.crValue=n,this.speeds=h,this.stats=r,this._ac=c,this.saveProficiencies=m,this.skillProficiencies=u,this.acDesc=g,this.size=l,this.vulnerabilities=v,this.resistances=w,this.immunities=y,this.conditionImmunities=I,this._attacks=p;const b=new o(r,s.SizeToDice.get(l),d,f,S);this._hpDice=new Map([[s.SizeToDice.get(this.size),b.hpDiceCount],[i.D1,b.hpDiceCount*b.conHpPerDice]])}get actionContentAPI(){throw new Error("Method not implemented.")}render(){const e=[];for(const[t,a]of this.speeds.entries())e.push(`${s.Speed[t]} ${a} ft.`);const t=[];for(const e of[s.DStat.Str,s.DStat.Dex,s.DStat.Con,s.DStat.Int,s.DStat.Wis,s.DStat.Cha]){const a=this.stats.get(e);t.push(`<td>${a.stat} ${(0,n.wrapRoll)(a.mod)}</td>`)}const a=[];for(const[e,t]of this.computeSaves().entries())a.push(`${s.DStat[e]} ${(0,n.wrapRoll)(t)}`);const i=[];for(const[e,t]of this.computeSkills().entries())i.push(`${s.Skill[e]} ${(0,n.wrapRoll)(t)}`);const o=[];for(const e of[s.Activation.Special,s.Activation.Action,s.Activation.BonusAction,s.Activation.Reaction,s.Activation.LegendaryAction,s.Activation.MythicAction]){const t=this.getAttacksWithActivation(e);if(0!=t.length){e!=s.Activation.Special&&o.push(`<h4 class="sheet_section_header">${s.Activation[e]}s</h4>`);for(const e of t)o.push(`<div class="sheet_content">${e}</div>`)}}const r=[];for(const e of this.vulnerabilities.values())r.push(s.DamageType[e]);const l=0==r.length?"":`<tr><td>Damage Vulnerabilities</td><td>${r.join(", ")}</td></tr>`,d=[];for(const e of this.resistances.values())d.push(s.DamageType[e]);const c=0==d.length?"":`<tr><td>Damage Resistances</td><td>${d.join(", ")}</td></tr>`,h=[];for(const e of this.immunities.values())h.push(s.DamageType[e]);const p=0==h.length?"":`<tr><td>Damage Immunities</td><td>${h.join(", ")}</td></tr>`,m=[];for(const e of this.conditionImmunities.values())m.push(s.Condition[e]);const u=0==m.length?"":`<tr><td>Condition Immunities</td><td>${m.join(", ")}</td></tr>`;return`\n        <div class="stat_sheet" id="stat_sheet_${this.monster_id}">\n            <div class="sheet_header">\n                <div class="header_zone">\n                    <h3 class="sheet_title">${this.title}</h3>\n                    <div class="sheet_subtitle">${s.CreatureSize[this.size]} ${this.subtitle}</div>\n                </div>\n                <div class="header_zone">\n                    <table class="ignore_common_style">\n                        <tr><td>Armor Class</td><td>${this._ac} ${this.acDesc}</td></tr>\n                        <tr><td>Hit Points</td><td>${Math.round((0,s.E)(this.hpDice))} \n                            ${(0,n.wrapRoll)(this.hpDice)}</td></tr>\n                        <tr><td>Speed</td><td>${e.join(", ")}</td></tr>\n                    </table>\n                </div>\n                <div class="header_zone">\n                    <table class="stats_table ignore_common_style">\n                        <tr><th>STR</th><th>DEX</th><th>CON</th><th>INT</th><th>WIS</th><th>CHA</th></tr>\n                        <tr>${t.join("")}</tr>\n                    </table>\n                </div>\n                <div class="header_zone">\n                    <table class="ignore_common_style">\n                        <tr><td>Saving Throws</td><td>${a.join(" ")}</td></tr>\n                        <tr><td>Skills</td><td>${i.join(" ")}</td></tr>\n                        <tr><td>Challenge Rating</td><td>${this.crValue.cr}</td></tr>\n                        <tr><td>Proficiency Bonus</td><td>${this.pb.mod()}</td></tr>\n                        ${l}${c}${p}${u}\n                    </table>\n                </div>\n            </div>\n            ${o.join("")}\n        </div>`}get pb(){return this.crValue.prof}get attacks(){return this._attacks}getAttacksWithActivation(e){const t=[];for(const a of this._attacks.values())a.activation==e&&(a.bindStats(this),t.push(a.createContent()));return t}computeSaves(){const e=new Map;for(const[t,[a,n]]of this.saveProficiencies.entries())e.set(t,(e.has(t)?e.get(t):this.stats.get(t).mod)+this.pb.mod(a)+n);return e}computeSkills(){const e=new Map;for(const[t,[a,n]]of this.skillProficiencies.entries()){const i=s.StatForSkill.get(t);e.set(t,(e.has(t)?e.get(t):this.stats.get(i).mod)+this.pb.mod(a)+n)}return e}get hpDice(){return this._hpDice}mod(e){return 0}}t.StatSheet=l,t.SheetContract=class{constructor(e,t,a,n,i,s,o){this.risk=e,this.id=t,this.displayName=a,this.imgPath=n,this.desc=i,this.shouldApply=s,this.modify=o}render(){return`<div class="contract selectable radio risk${this.risk}" data-contract-uid="${this.id}">\n                    <img class="contract_icon" src="assets/images/risk/${this.imgPath}" alt="[null]">\n                    <div class="contract_box"><div class="contract_title">${this.displayName}</div></div>\n                </div>`}},t.BuffedStatSheet=class extends l{constructor(e){super(e)}get hpDice(){return super.hpDice}get attacks(){return super.attacks}render(){for(const[e,a]of t.contractIndex.entries())r(e)&&a.shouldApply(this)&&a.modify(this);return super.render()}get ac(){return this._ac}set ac(e){this._ac=e}get res(){return this.resistances}get saves(){return this.saveProficiencies}},t.test=function(){}},2228:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.NpcId=void 0,(a=t.NpcId||(t.NpcId={}))[a.Lucian=0]="Lucian",a[a.Ebenezar=1]="Ebenezar",a[a.Caelynn=2]="Caelynn",a[a.Lesley=3]="Lesley",a[a.Irene=4]="Irene",a[a.Ling=5]="Ling",a[a.DaveRuhl=6]="DaveRuhl",a[a.Ulrich=7]="Ulrich",a[a.Lia=8]="Lia",a[a.Conley=9]="Conley",a[a.Vahareth=10]="Vahareth",a[a.GOrder=11]="GOrder",a[a.LogosPlaywright=12]="LogosPlaywright",a[a.Mostima=13]="Mostima",a[a.Shimaken=14]="Shimaken",a[a.Shimarin=15]="Shimarin",a[a.Verrader=16]="Verrader",a[a.Fiest=17]="Fiest",a[a.Mouthpiece=18]="Mouthpiece",a[a.Sanguinarch=19]="Sanguinarch",a[a.DecroaSal=20]="DecroaSal",a[a.Baphomet=21]="Baphomet",a[a.Kjerra=22]="Kjerra",a[a.GDef=23]="GDef",a[a.TraitorOthello=24]="TraitorOthello",a[a.Mandy=25]="Mandy",a[a.Gen=26]="Gen",a[a.Mumu=27]="Mumu",a[a.Shamare=28]="Shamare",a[a.Amaia=29]="Amaia",a[a.Lemuen=30]="Lemuen",a[a.Lemuel=31]="Lemuel",a[a.Eugrud=32]="Eugrud",a[a.Andoain=33]="Andoain",a[a.Dusk=34]="Dusk",a[a.Dawn=35]="Dawn",a[a.Andri=36]="Andri",a[a.Athlon=37]="Athlon",a[a.Bjorn=38]="Bjorn",a[a.Cecelia=39]="Cecelia",a[a.Coroto=40]="Coroto",a[a.Elysium=41]="Elysium",a[a.Erica=42]="Erica",a[a.Genefe=43]="Genefe",a[a.Hav=44]="Hav",a[a.Hina=45]="Hina",a[a.Ingrid=46]="Ingrid",a[a.Iona=47]="Iona",a[a.Jaye=48]="Jaye",a[a.Jordi=49]="Jordi",a[a.Kastor=50]="Kastor",a[a.Petra=51]="Petra",a[a.Roberta=52]="Roberta",a[a.Sasha=53]="Sasha",a[a.Sybilla=54]="Sybilla",a[a.Tomasa=55]="Tomasa",a[a.Verna=56]="Verna",a[a.Vitacia=57]="Vitacia",a[a.Yuki=58]="Yuki",a[a.Ezell=59]="Ezell",a[a.__MOBS__=60]="__MOBS__",a[a.Ephremis=61]="Ephremis"},5568:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupUI=void 0;const a="selected";t.setupUI=function(){var e;(e=$(".gen2_ui")).find(".selectable_radio_container .selectable.radio .selected_only").hide(),e.on("click",".selectable_radio_container",(function(){$(this).children(".selectable.radio").removeClass(a),$(this).children(".selectable.radio").find(".selected_only").hide()})),e.on("click",".selectable.radio:not(.disabled)",(function(e){e.stopPropagation();const t=$(this);if(t.hasClass("selected"))return t.removeClass(a),void t.find(".selected_only").hide();t.siblings(".selectable.radio").removeClass(a),t.siblings(".selectable.radio").find(".selected_only").hide(),t.addClass(a),setTimeout((()=>t.find(".selected_only").fadeIn(100)),200)}))}}},t={};function a(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,a),s.exports}(()=>{const e=a(3497),t=a(8143),n=a(190),i=a(447),s=a(498),o=a(7264),r=a(2224),l=a(6453),d=a(9086),c=a(8235),h=a(7187),p=a(2036),m=a(2870),u=a(4190),g=a(3956),f=a(7768),v=a(2119),w=a(3269),y=a(7982),I=a(5506),S=a(4180),b=a(5568);$((()=>{(0,w.test)(),(0,e.test)(),(0,S.test)(),(0,f.testDamageTree)(),(0,I.setupMonsters)(),(0,u.setupCharacters)(),(0,g.setupMobs)(),(0,n.setupNav)(),(0,i.setupCards)(),(0,s.setupCharacterCards)(),(0,v.setupHistory)(),(0,o.setupCountries)(),(0,t.setupNpcOpinions)(),(0,b.setupUI)(),(0,m.enableRolling)(),(0,y.renderContracts)(),(0,h.activateCombatScenarios)(),(0,p.setupHoth)(),(0,l.setupMapGraph)($("#map_graph_area"),d.devotionMap),(0,c.setupUpgradeGraph)($("#skill_graph_area"),r.skillMap)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,