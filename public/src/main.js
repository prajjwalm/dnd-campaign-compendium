(()=>{"use strict";var e={993:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.T_NOW=t.T_START=t.GameTimestamp=void 0;const n=a(190);class i{constructor(e=0,t=0,a=0,n=0,i=0,s=0){this.year=e,this.day=t,this.hour=a,this.minute=n,this.second=i,this.ms=s}static fromDays(e){return new i(0,e)}get totalMillis(){return this.ms+1e3*(this.second+60*(this.minute+60*(this.hour+24*(this.day+100*this.year))))}get totalDays(){return this.day+100*this.year}toString(){const e=this.year+Math.floor(this.day/100),t=this.day%100+Math.floor(this.hour/24),a=this.hour%24+Math.floor(this.minute/60),i=this.minute%60+Math.floor(this.second/60),s=String(a).padStart(2,"0"),r=String(i).padStart(2,"0");return`<p>${t}<sup>${(0,n.getNumberSuffix)(t)}</sup> of Year ${e}, ${s}:${r}</p>`}}t.GameTimestamp=i,i.DAY=864e5,t.T_START=new i(0,5,8,0),t.T_NOW=new i(0,6,12,15)},556:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupNpcOpinions=t.test=t.renderNpcOpinionTable=void 0;const n=a(190),i=a(873),s=a(302),r=a(993);var o;!function(e){e[e.Affection=0]="Affection",e[e.Gratitude=1]="Gratitude",e[e.Trust=2]="Trust",e[e.Respect=3]="Respect"}(o||(o={}));const l=new Map([[o.Affection,"Hatred"],[o.Gratitude,"Envy"],[o.Trust,"Paranoia"],[o.Respect,"Contempt"]]);class h{constructor(e,t,a,n=10,i=null){this.timestamp=e,this.displayText=t,this.effects=a,this.insightGate=n,this.renderReverse=i}get eventDesc(){if(this.insightGate>s.PARTY_INSIGHT)return`<div class='event_li'>\n                    <div class="timestamp">${this.timestamp.toString()}</div>\n                    <div class="display_text">???</div>\n                  </div>`;const e=[];for(const[t,a]of this.effects.entries()){if(0==a)continue;const n=d.getZoneForRating(a);let i,s;null==this.renderReverse||1!=this.renderReverse.get(t)?(i=-1==n?"-":"+".repeat(Math.abs(n)),s=n<-1?l.get(t):o[t]):(i=-1==n?"+":"-".repeat(Math.abs(n)),s=n>=-1?l.get(t):o[t]);const r=n<0?l.get(t):o[t];e.push(`<div class="effect_tag" data-emo="${r}">${s}${i}</div>`)}return`<div class='event_li'>\n                    <div class="timestamp">${this.timestamp.toString()}</div>\n                    <div class="display_text">${this.displayText}</div>\n                    <div class="effect_tags">${e.join("")}</div>\n                  </div>`}}class d{constructor(e,t){this.emotion=t,this.npcOpinion=e,this._timestamp=new r.GameTimestamp,this._value=0,this._bufferValue=0}incrementTimeTo(e){if(e.totalMillis<this.timestamp.totalMillis)throw new Error("Cannot go backwards in time.");const t=Math.sign(this._value),a=e.totalDays-this._timestamp.totalDays,n=d.getCutoffValueForRating(d.ZONE_CUTOFF_RATINGS[Math.abs(this.getZone())]);this._value-=t*this.getDailyDecay()*a,t*this._value<=n&&(this._value=n*t),this.bufferValue+=t*a,this._timestamp=e}addEvent(e,t){this.incrementTimeTo(t);const a=Math.sign(e);for(;a*e>0;){const t=Math.abs(this.getZone()),n=this.getRating();let i=e-Math.sign(this._value)*d.ZONE_BUFFER_MODIFIERS[t];i*a<0&&(i=0);const s=this.bufferValue;this.bufferValue+=i;let r,o=(e-=this.bufferValue-s)-Math.sign(this._value)*d.ZONE_VALUE_MODIFIERS[t];if(o*a<0&&(o=0),Math.sign(e)==Math.sign(this._value)&&Math.abs(this._value)>d.VALUE_AT_RATINGS[d.MAX_RATING])r=1e6;else{const t=Math.abs(this.getRating()),a=Math.abs(this._value);r=Math.sign(e)==Math.sign(this._value)?d.VALUE_AT_RATINGS[t+1]-a:a==d.VALUE_AT_RATINGS[t]?0==this._value?d.VALUE_AT_RATINGS[1]:a-d.VALUE_AT_RATINGS[t-1]:a-d.VALUE_AT_RATINGS[t]}const l=Math.sign(o)*Math.min(r,Math.abs(o));if(e-=l,this._value+=l,this.getRating()!=n&&(this._bufferValue=this.getBufferSize()),0==l)break}}getRating(){const e=2*d.C-1,t=Math.abs(this._value);return Math.sign(this._value)*Math.min(10,Math.floor((Math.sqrt(e*e+8*t)-e)/2))}testReset(){this._bufferValue=0,this._value=0,this._timestamp=new r.GameTimestamp}getBufferSize(){const e=this.getRating();return 0==e?0:e+Math.sign(e)*d.C}static getZoneForRating(e){return Math.sign(e)*Math.floor((Math.abs(e)+2)/3)}getZone(){return d.getZoneForRating(this.getRating())}static getCutoffValueForRating(e){const t=Math.abs(e);return Math.sign(e)*(t*(d.C+(t-1)/2))}getDailyDecay(){return d.ZONE_DECAY_RATES[Math.abs(this.getZone())]}get timestamp(){return this._timestamp}get value(){return this._value}get bufferValue(){return this._bufferValue}set bufferValue(e){this._bufferValue=e;const t=this.getBufferSize();Math.sign(t)*e<0&&(this._bufferValue=0),Math.abs(this._bufferValue)>Math.abs(t)&&(this._bufferValue=t)}}d.C=3,d.MAX_RATING=10,d.VALUE_AT_RATINGS=[...Array(11).keys()].map((e=>d.getCutoffValueForRating(e))),d.ZONE_CUTOFF_RATINGS=[0,1,4,7],d.ZONE_VALUE_MODIFIERS=[0,0,1,3],d.ZONE_BUFFER_MODIFIERS=[0,0,0,0],d.ZONE_DECAY_RATES=[1,.5,.25,.125];class c extends class{constructor(){this.attitudeHandlers=new Map;for(const e of(0,n.getEnumIterator)(o))this.attitudeHandlers.set(e,new d(this,e))}addEvent(e){for(const[t,a]of e.effects.entries())this.attitudeHandlers.get(t).addEvent(a,e.timestamp)}setSnapshotTime(e){for(const t of(0,n.getEnumIterator)(o))this.attitudeHandlers.get(t).incrementTimeTo(e)}getEmotion(e){return this.attitudeHandlers.get(e).getRating()}}{constructor(e,t){super(),this.npc=e,this.pc=t,this._$tableCell=null}generateSummaryTableCellContents(){const e=d.getZoneForRating(this.getEmotion(o.Trust)),t=e>=0?`<div class="trust_border value_${e}"></div>`:`<div class="paranoia_border value_${-e}"></div>`,a=d.getZoneForRating(this.getEmotion(o.Gratitude)),n=a>=0?`<div class="gratitude_border value_${a}"></div>`:`<div class="envy_border value_${-a}"></div>`,i=d.getZoneForRating(this.getEmotion(o.Respect)),s=i>=0?`<div class="respect_border value_${i}"></div>`:`<div class="contempt_border value_${-i}"></div>`;this._$tableCell=$(`<div class="cell"><div class="npc_opinion" data-npc-id="${this.npc}" data-pc-id="${this.pc}">${this.affectionRating}</div>\n                                 ${t}${n}${s}\n                                 <div class="backdrop"></div></div>`)}get $tableCell(){return null==this._$tableCell&&this.generateSummaryTableCellContents(),this._$tableCell}get affectionRating(){let e=0;for(const t of(0,n.getEnumIterator)(o))e+=this.getEmotion(t);return e}}const u=new Map,m=new Map;function p(e){const t=$("<div class='opinion_summary_table'></div>"),a=$("<div class='row header'><div class='cell'></div></div>");for(const e of(0,n.getEnumIterator)(s.PcIndex)){const t=`./assets/images/character_tokens/C2/pcs/${s.PcTokenNames.get(e)}.png`;$(`<div class="cell character_token"><img src="${t}" alt="[Img not found]"></div>`).appendTo(a)}a.appendTo(t);const o=$("<div class='table_body'></div>");for(const[e,t]of i.Character.IndexById){if(!t.isVillageNpc)continue;const a=$("<div class='row'></div>");$(`<div class='cell character_token'><img src="${t.imgPath}" alt="[Img not found]"></div>`).appendTo(a);for(const t of(0,n.getEnumIterator)(s.PcIndex)){const n=new c(e,t);for(const a of u.get(e).get(t))n.addEvent(a);n.setSnapshotTime(r.T_NOW),n.$tableCell.appendTo(a),m.get(e).set(t,n)}a.appendTo(o)}o.appendTo(t),t.appendTo(e)}let g,f,w;function I(e,t){if(0==t)return"";const a=t>0?o[e]:l.get(e);return`<div class="effect_tag" data-emo="${a}">${a}: ${Math.abs(t)}</div>`}function y(){const e=$(this).data("npcId"),t=$(this).data("pcId");f.empty(),w.empty();const a=[];for(const n of u.get(e).get(t))a.push(n.eventDesc);for(const a of(0,n.getEnumIterator)(o))w.append(I(a,m.get(e).get(t).getEmotion(a)));f.html(a.join("")),g.show()}t.renderNpcOpinionTable=p,t.test=function(){},t.setupNpcOpinions=function(){for(const[e,t]of i.Character.IndexById){if(!t.isVillageNpc)continue;const a=new Map;for(const e of(0,n.getEnumIterator)(s.PcIndex))a.set(e,[]);u.set(e,a),m.set(e,new Map)}for(const[e,t]of i.Character.IndexById)if(t.isVillageNpc)for(const t of(0,n.getEnumIterator)(s.PcIndex))u.get(e).get(t).push(new h(r.T_START,"Base Charisma.",new Map([[o.Respect,s.PcCharismaMods.get(t)]])));!function(){u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,9,0),"Polite, and says funny stuff like asking if we want to sacrifice them...",new Map([[o.Respect,2]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,9,0),"Seems to have a rather exotic pet.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,9,0),"Polite.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,9,0),"Polite.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,9,0),"Polite.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,5,9,0),"Polite.",new Map([[o.Respect,1]])));for(const e of(0,n.getEnumIterator)(s.PcIndex))u.get(i.NpcIndex.ID_TOMASA).get(e).push(new h(new r.GameTimestamp(0,5,9,0),"Liked the food.",new Map([[o.Gratitude,1]])));u.get(i.NpcIndex.ID_TOMASA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,9,30),"Fun to hang out with, also petted Julius.",new Map([[o.Respect,2]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,10,0),"Not entirely without a sense of humor.",new Map([[o.Respect,1],[o.Trust,1]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,10,0),"Cooler than I expected aasimar/paladins to be.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,10,30),"A friend of my brother. Seems to be as noble and kind as I'd expect.",new Map([[o.Respect,4],[o.Trust,4]]))),u.get(i.NpcIndex.ID_SASHA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,10,45),"Why's this fucker taking an interest in me?",new Map([[o.Gratitude,2]])))}(),function(){u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,11,0),"Bearer of an awful truth about Mostima/Andoain.",new Map([[o.Affection,-1],[o.Trust,1],[o.Gratitude,1]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,11,15),"Seemed concerned about my state.",new Map([[o.Gratitude,1]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,11,30),"Seemed interested in helping out Andoain and myself.",new Map([[o.Gratitude,2],[o.Respect,1],[o.Trust,1]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,12,0),"Took an interest in my health and offered words of comfort.",new Map([[o.Gratitude,3]]))),u.get(i.NpcIndex.ID_SASHA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,11,15),"Continues to take an interest. Yet how long before he decides I'm not worth it and leaves/hates me too...",new Map([[o.Gratitude,1],[o.Trust,-2]]),18,new Map([[o.Trust,!0]]))),u.get(i.NpcIndex.ID_GENEFE).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,11,45),"Prying into how I look after these kids, like I were guilty of something.",new Map([[o.Respect,-1],[o.Trust,-1]]),17)),u.get(i.NpcIndex.ID_SASHA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,11,45),"Thinks I'm mentally unstable.",new Map([[o.Respect,-1],[o.Trust,-1]]))),u.get(i.NpcIndex.ID_SASHA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,11,45),"Offered to break me out and pissed off that hag.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_GENEFE).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,11,45),"I don't think he was joking about letting the brat out.",new Map([[o.Trust,-1]]))),u.get(i.NpcIndex.ID_GENEFE).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,12,0),"Acknowledges how hard I work for these kids.",new Map([[o.Trust,1],[o.Respect,2],[o.Gratitude,2]]))),u.get(i.NpcIndex.ID_SASHA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,12,0),"Praising that hag.",new Map([[o.Respect,-1]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,12,30),"Agreed to a sudden, whimsical and imposing request because he gave his word.",new Map([[o.Trust,4],[o.Respect,4]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,12,30),"Let me experience flight.",new Map([[o.Gratitude,3]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,12,30),"Flaunted his flight, compared his state to mine and made me puke.",new Map([[o.Gratitude,-1],[o.Respect,-1]]),10,new Map([[o.Gratitude,!0]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,12,30),"Didn't mind me puking over him, and consoled me with an anecdote.",new Map([[o.Gratitude,2],[o.Respect,1],[o.Trust,1]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,12,30),"Hehe, puked in his first flight despite being healthy.",new Map([[o.Gratitude,1],[o.Respect,-2]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,13,0),"Seems interested in gaming/tech/innovation and kept his humour on seeing his own avatar. Probably can teach this neanderthal a few things...",new Map([[o.Respect,2]])));for(const e of(0,n.getEnumIterator)(s.PcIndex))u.get(i.NpcIndex.ID_ERICA).get(e).push(new h(new r.GameTimestamp(0,5,13,30),"Seem like a well-mannered bunch. Asked for permission to enter our garden instead of jumping over the bush.",new Map([[o.Respect,2]])))}(),function(){u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,13,30),"Didn't seem to hold respect for my position.",new Map([[o.Respect,-2]]))),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,14,0),"Acknowledged my honor for the fatherland.",new Map([[o.Respect,1],[o.Gratitude,2]]))),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,14,0),"Comes from a weak country and a feminine race.",new Map([[o.Respect,-2],[o.Trust,-1]]))),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,14,0),"Appears to have respect for our fatherland.",new Map([[o.Gratitude,1]]))),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,14,0),"Comes from a powerful country and a noble race.",new Map([[o.Respect,2],[o.Trust,1]]))),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,14,0),"Was worried about our safety.",new Map([[o.Gratitude,1],[o.Trust,2]]))),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,14,0),"Promised with honor to defend us should the need arise.",new Map([[o.Gratitude,2],[o.Respect,2]])));for(const e of[s.PcIndex.ID_HELIOS,s.PcIndex.ID_CYRION])u.get(i.NpcIndex.ID_COROTO).get(e).push(new h(new r.GameTimestamp(0,5,14,30),"Was gallivanting with my wife.",new Map([[o.Respect,-1],[o.Trust,-1],[o.Gratitude,-1]]),22));u.get(i.NpcIndex.ID_ERICA).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,5,14,25),"Was interested in my youth with Coroto and our past together.",new Map([[o.Gratitude,1]]))),u.get(i.NpcIndex.ID_ERICA).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,5,14,25),"Reminded me of happier times in my father's estate and Ivangrad.",new Map([[o.Gratitude,2]]))),u.get(i.NpcIndex.ID_ERICA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,14,25),"Reminded me of happier times in my father's estate and Ivangrad.",new Map([[o.Gratitude,2]])));for(const e of[s.PcIndex.ID_PANZER,s.PcIndex.ID_HELIOS,s.PcIndex.ID_CYRION])u.get(i.NpcIndex.ID_ERICA).get(e).push(new h(new r.GameTimestamp(0,5,14,25),"Were polite to me when when, in my failing memory, I couldn't help them much",new Map([[o.Gratitude,1],[o.Respect,1]])));for(const e of(0,n.getEnumIterator)(s.PcIndex))u.get(i.NpcIndex.ID_ERICA).get(e).push(new h(new r.GameTimestamp(0,5,14,30),"Their coming here will cause me much trouble.",new Map([[o.Trust,-3]]),20)),u.get(i.NpcIndex.ID_COROTO).get(e).push(new h(new r.GameTimestamp(0,5,14,30),"Their coming here will cause me much trouble.",new Map([[o.Trust,-3]]),22));for(const e of[s.PcIndex.ID_PANZER,s.PcIndex.ID_HELIOS,s.PcIndex.ID_CYRION])u.get(i.NpcIndex.ID_JORDI).get(e).push(new h(new r.GameTimestamp(0,5,15,30),"As a first impression, they seem to be kind and humble people.",new Map([[o.Respect,1],[o.Trust,1]])));u.get(i.NpcIndex.ID_JORDI).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,15,30),"Gazed at the sea wistfully.",new Map([[o.Respect,2],[o.Trust,1]])));for(const e of[s.PcIndex.ID_HELIOS,s.PcIndex.ID_CYRION])u.get(i.NpcIndex.ID_JORDI).get(e).push(new h(new r.GameTimestamp(0,5,15,45),"Was concerned about the disaster that struck our land and my harsh experience in it.",new Map([[o.Gratitude,2],[o.Trust,1]]))),u.get(i.NpcIndex.ID_JORDI).get(e).push(new h(new r.GameTimestamp(0,5,15,45),"Was curious about the spearhead stone and of my uncle's travels.",new Map([[o.Gratitude,2],[o.Trust,1]])));u.get(i.NpcIndex.ID_JORDI).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,16,0),"Noted the value of fishing in enriching the local diet.",new Map([[o.Respect,1]])));for(const e of(0,n.getEnumIterator)(s.PcIndex))u.get(i.NpcIndex.ID_PETRA).get(e).push(new h(new r.GameTimestamp(0,5,16,30),"I'm sure they're all good youths and am happy to have them with us.",new Map([[o.Respect,3],[o.Trust,3],[o.Gratitude,3]])));for(const e of[s.PcIndex.ID_PANZER,s.PcIndex.ID_HELIOS,s.PcIndex.ID_CYRION])u.get(i.NpcIndex.ID_PETRA).get(e).push(new h(new r.GameTimestamp(0,5,16,30),"I'm glad they partook in the meal we made and gave us company.",new Map([[o.Gratitude,3]])));u.get(i.NpcIndex.ID_PETRA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,16,45),"I'm surprised and happy that they are willing to hear out the story of an old nobody like myself.",new Map([[o.Gratitude,4],[o.Respect,3],[o.Trust,2]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,16,30),"Starry-dude's not too fond of gaming, it seems.",new Map)),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,5,16,30),"Huh, that stupid bot actually challenged my skills.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,5,16,30),"Huh, that stupid bot admittedly got a decent run, for a first timer.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,16,45),"Heh, his holiness would also go down the path of the gaming addict...",new Map([[o.Respect,1],[o.Trust,1]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,16,45),"Wait, the investiture changed... that intent... hmm...",new Map([[o.Trust,-3],[o.Respect,2]]),17,new Map([[o.Trust,!0]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,16,45),"He actually beat the boss, guy's got a bright future. (even if...)",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,5,16,45),"The bot acknowledged my skills, maybe I could try my hand at his modules...",new Map([[o.Gratitude,1],[o.Trust,1]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,16,45),"Starry-dude speaks fondly to gran.",new Map([[o.Respect,2],[o.Trust,1],[o.Gratitude,3]])));for(const e of[s.PcIndex.ID_HELIOS,s.PcIndex.ID_PANZER])u.get(i.NpcIndex.ID_PETRA).get(e).push(new h(new r.GameTimestamp(0,5,16,45),"They're having fun with Hina.",new Map([[o.Gratitude,1]])))}(),function(){for(const e of[s.PcIndex.ID_HELIOS,s.PcIndex.ID_AURELIA])u.get(i.NpcIndex.ID_DAWN).get(e).push(new h(new r.GameTimestamp(0,5,17,30),"It seems they're wreaking havoc on the paintbrushes.",new Map([[o.Affection,1]])));for(const e of[i.NpcIndex.ID_DAWN,i.NpcIndex.ID_TOMASA])u.get(e).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,17,30),"Oh, poor guy, apologizing for his friends. They must've got him into trouble so many times...",new Map([[o.Respect,1]])));u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,17,35),"Got assaulted by my innocent canvas. So cute.",new Map([[o.Affection,2]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,17,35),"Has a good imagination and a poetic painting in mind.",new Map([[o.Respect,2]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,17,35),"Ms. Dusk Herself chose to give him a chance. And requested that he paint for Her.",new Map([[o.Respect,5],[o.Trust,2]]),22)),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,17,40),"It seems clear his hands are not of a painter's and lack the smooth motions. Yet his spirit longs to express itself. Was that why he was chosen?",new Map([[o.Trust,1]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,17,40),"Helped stabilize his friend's hand by guiding it with the powers of nature.",new Map([[o.Respect,2],[o.Gratitude,1]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,17,45),"The painting turned out so... inspired. <em>Honor holding back the Wrath of Devotion.</em> Beautiful. And... it seems She agrees.",new Map([[o.Respect,7],[o.Trust,4]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,17,50),"<span style='font-size: 10px;'>I'm not the person they seem to think me to be.</span> <span style='font-size: 9px;'>I cannot give an answer to their problems, or even some of their questions.I'm feeling a bit...  </span> <span style='font-size: 8px;'>overwhelmed... particularly when they ask me what I was before. </span> <span style='font-size: 7px;'> It isn't...</span> Thanks for letting me get back.",new Map([[o.Respect,1],[o.Gratitude,4]]),18));for(const e of[i.NpcIndex.ID_DAWN,i.NpcIndex.ID_TOMASA])for(const t of(0,n.getEnumIterator)(s.PcIndex))u.get(e).get(t).push(new h(new r.GameTimestamp(0,5,19,0),"They helped us out with cooking for the community dinner. They weren't quite particularly skilled, but that makes it good to see that they didn't consider good, honest labour like cooking beneath them.",new Map([[o.Respect,1],[o.Gratitude,1],[o.Trust,1]])));u.get(i.NpcIndex.ID_ERICA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,19,25),"Seemed to be interested in books and literature in all forms.",new Map([[o.Respect,1]]))),u.get(i.NpcIndex.ID_ERICA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,19,30),"Nudged me to write. Was being genuine when she mentioned she would love to read something I came up with.",new Map([[o.Gratitude,7],[o.Respect,3],[o.Trust,4]]))),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,19,30),"What's her game here? Why's this strange elf woman encouraging my wife so? Just another fan of literature? Or is there some ulterior motive I'm missing...",new Map([[o.Trust,-2],[o.Respect,1]]),18,new Map([[o.Trust,!0]]))),u.get(i.NpcIndex.ID_JORDI).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,19,30),"Seemed to be even more interested in my tales from the seas.",new Map([[o.Gratitude,1]]))),u.get(i.NpcIndex.ID_YUKI).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,19,30),"Why's he suddenly so interested in Hav? This druid's clearly not a seafarer. In fact, I won't be surprised to know he's never sailed before. Jordi's too naive for his own good, but this seems a touch too blatant. I'll have to keep an eye out...",new Map([[o.Trust,-3]]),15,new Map([[o.Trust,!0]]))),u.get(i.NpcIndex.ID_KASTOR).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,19,30),"Ugh.. the way he socializes with those two losers. It's nauseating... Just look at Jordi blabbering and that emo acting all cool like he doesn't care...",new Map([[o.Respect,-2]]))),u.get(i.NpcIndex.ID_PETRA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,19,30),"It's good to see how the kid can bring Jordi out of his shell again. He's been brooding a lot lately...",new Map([[o.Respect,2]]))),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,14,30),"From Sadhvastan huh. I'm not quite sure I like this. Things must be pretty bad if the Tsar had to pull out the associations with them. What really is happening? And that appearance... oh shit, Oh Shit. Oh SHIT!",new Map([[o.Trust,-8],[o.Respect,8]]),22)),u.get(i.NpcIndex.ID_INGRID).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,16,30),"Talking to him was really a comfort. Been so long since I could speak my heart out to someone.",new Map([[o.Gratitude,4],[o.Trust,1],[o.Respect,1]]))),u.get(i.NpcIndex.ID_JAYE).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,17,50),"Boss was a cool customer. But sly as an eel. Even now can't understand how I let my guard down to reveal so much...",new Map([[o.Respect,4],[o.Trust,-1]]),13,new Map([[o.Trust,!0]]))),u.get(i.NpcIndex.ID_VERNA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,18,30),"A person hanging between life and death, who immediately saw through me. But somehow I feel this is different, and <em>feel</em> that he means no harm. I revealed more than I should have, but I think I am glad I did.",new Map([[o.Trust,3],[o.Gratitude,2],[o.Respect,2]]))),(e=>{const t=[i.NpcIndex.ID_ELYSIUM,i.NpcIndex.ID_BJORN,i.NpcIndex.ID_HAV,i.NpcIndex.ID_SASHA,i.NpcIndex.ID_CECELIA],a=[i.NpcIndex.ID_ELYSIUM,i.NpcIndex.ID_BJORN,i.NpcIndex.ID_HAV,i.NpcIndex.ID_SASHA,i.NpcIndex.ID_CECELIA],n=[i.NpcIndex.ID_ELYSIUM,i.NpcIndex.ID_BJORN,i.NpcIndex.ID_HAV,i.NpcIndex.ID_SASHA,i.NpcIndex.ID_CECELIA],l=[i.NpcIndex.ID_ELYSIUM,i.NpcIndex.ID_BJORN,i.NpcIndex.ID_HAV,i.NpcIndex.ID_SASHA,i.NpcIndex.ID_CECELIA],d=[i.NpcIndex.ID_ELYSIUM,i.NpcIndex.ID_BJORN,i.NpcIndex.ID_HAV,i.NpcIndex.ID_SASHA,i.NpcIndex.ID_CECELIA];u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,19,45),"Kept his cutlery back slowly and primly before standing and drawing his weapon. Touché. Yep, dude's definitely a seasoned warrior...<br/>and a killer through-and-through.",new Map([[o.Trust,-2],[o.Respect,5]]),10,new Map([[o.Trust,!0]]))),t.push(i.NpcIndex.ID_HINA),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,19,45),"The others didn't seem to notice, but was a large part responsible for us not getting ambushed right outside the door. Doesn't seem addicted to violence.",new Map([[o.Gratitude,2],[o.Trust,1],[o.Respect,3]]))),a.push(i.NpcIndex.ID_HINA),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,5,19,45),"Charged right out huh? Not very smart, but gets the job done... Pity I didn't take the lectures on AI back in-",new Map([[o.Respect,2]]))),l.push(i.NpcIndex.ID_HINA),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,19,45),"Hmm... a spellcaster... they always find their throats to be the first to be slit. But fireballs are cool anyway.",new Map([[o.Respect,4]]))),n.push(i.NpcIndex.ID_HINA),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,19,45),"Stood by the villagers to protect them. I can respect that. Seen far too many blood-thirsty folk place greater value in death than in life.",new Map([[o.Respect,1],[o.Trust,1]]))),d.push(i.NpcIndex.ID_HINA),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,5,19,45),"Acted as a beacon of hope and helped keep the villagers calm when <em>they</em> came...",new Map([[o.Gratitude,3],[o.Trust,1]]))),t.push(i.NpcIndex.ID_DAWN),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,5,19,45),"Helped in organizing the villagers and keeping the inklings at bay as he led us to Mr. Elysium's.",new Map([[o.Gratitude,3],[o.Respect,1]]))),a.push(i.NpcIndex.ID_DAWN),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,5,19,45),"Fireball after fireball. Teleporting roof-to-roof in the shadows. All for these poor inklings. Hehe, aren't we dramatic?",new Map([[o.Respect,2]]))),n.push(i.NpcIndex.ID_DAWN),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,5,19,45),"Charging right in, huh?",new Map([[o.Respect,2]]))),l.push(i.NpcIndex.ID_DAWN),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,5,19,45),"Walked among our group to keep us safe.",new Map([[o.Gratitude,2]]))),d.push(i.NpcIndex.ID_DAWN)})()}(),u.get(i.NpcIndex.ID_ERICA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,6,6,0),"Huh that was quite a shove. But given how polite they were in asking if they could visit our garden yesterday, I can only assume something has happened...",new Map([]))),u.get(i.NpcIndex.ID_ERICA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,6,6,30),"The way Ms. Aurelia's owl was staring after me, hiding in the bush until I saw it, then flying off - I'm sure of it. Probably one of her spellcasting powers. I hope I'm mistaken, but... sigh, I doubt it. That's how those with power act, and I was a fool to expect otherwise. <span style='font-size: 9px'>Even after telling her to leave me alone as clearly as I could, won't take no for an answer. Let alone respect any measure of my privacy, I'm seen as an object and downright forbidden to keep my secrets to myself. Can't live with their own paranoia and would downright descend to <em>spying</em> to find out whatever tf they suspect me of hiding from their highnesses.</span><br/>Wait, the owl being there was probably a coincidence. I hope I'm overthinking stuff.",new Map([[o.Trust,-7],[o.Gratitude,-2],[o.Respect,-4]]),20)),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,7,30),"Channeled his investiture to heal me. God knows I needed that, phew... <em>What the hell just happened?</em>&nbsp; What was this sudden touch of death that almost snuffed all our souls out?",new Map([[o.Gratitude,3]]))),u.get(i.NpcIndex.ID_TOMASA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,6,7,30),"Healed me, probably saving me from the verge of death... but... what does it matter, now that... why... Taihe...",new Map([[o.Gratitude,2]]))),function(){u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,8,0),"Remained business-like in investigating last night even in the face of Taihe's death. But I suppose it's to be expected, they'd have seen death in their profession, but what happened last night was bizarre and deserving of explanation.",new Map));for(const e of(0,n.getEnumIterator)(s.PcIndex))u.get(i.NpcIndex.ID_DAWN).get(e).push(new h(new r.GameTimestamp(0,6,8,30),"So they were around the garden statue, huh. I did suspect they were somehow involved in Taihe's death, given the coincidence. But why would they do that? Must've been an accident, right?",new Map([[o.Affection,-2],[o.Trust,-3]]),12,new Map([[o.Affection,!0]])));u.get(i.NpcIndex.ID_TOMASA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,6,8,0),"Tried to examine Taihe's body and analyze what happened.",new Map)),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,6,8,0),"Volunteered for hard labour with his own hands.",new Map([[o.Respect,2],[o.Trust,1]]))),u.get(i.NpcIndex.ID_ROBERTA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,6,8,0),"Seems to have some passing knowledge of alchemy.",new Map([[o.Respect,1]])));for(const e of(0,n.getEnumIterator)(s.PcIndex))u.get(i.NpcIndex.ID_VITACIA).get(e).push(new h(new r.GameTimestamp(0,6,8,15),"Their arrival brought doom!! They killed him. THEY KILLED HIM! I know they did this. They made poor Taihe suffer so much. And now... I must... live the rest of... no, no... I can't. ",new Map([[o.Respect,-1],[o.Trust,-1],[o.Affection,-4]])));u.get(i.NpcIndex.ID_VITACIA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,6,8,15),"His face betrays his crime. The way he avoids my gaze. The weird way his powers work. And the way he seems to know what happened to Taihe's body. He must have done it! I know he did!",new Map([[o.Respect,-4],[o.Trust,-4],[o.Affection,-6]])));for(const e of(0,n.getEnumIterator)(s.PcIndex))u.get(i.NpcIndex.ID_VITACIA).get(e).push(new h(new r.GameTimestamp(0,6,8,18),"Oh Saints above! What was wrong with me? How did I just blame them with no reasons whatever? My pain absolutely doesn't excuse this unfairness! Yet... they don't seem to hate me for it.",new Map([[o.Respect,e==s.PcIndex.ID_CYRION?9:3],[o.Trust,e==s.PcIndex.ID_CYRION?9:3],[o.Affection,e==s.PcIndex.ID_CYRION?9:6]]),10,new Map([[o.Affection,!0],[o.Respect,!0],[o.Trust,!0]])));u.get(i.NpcIndex.ID_VITACIA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,6,8,30),"Even though I don't blame him for Taihe's death anymore, he seems to have begun to hate himself for it. Just great, you've done it now, you terrible, awful person. And even then he tries his best to console me.",new Map([[o.Respect,6],[o.Trust,5],[o.Affection,9]]),10,new Map([[o.Affection,!0]]))),u.get(i.NpcIndex.ID_ROBERTA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,6,8,30),"Offered 'Tacia a potion to numb the pain. Unusual to find one versed in those, versed enough to know it's not a magic cure, and to recommend judicious use. And Saints know we needed it now.",new Map([[o.Respect,4],[o.Trust,2],[o.Gratitude,3]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,6,8,30),"Fell under a powerful wave of guilt. But that clearly was his vulnerable mind. Its signature is that of a false guilt complex. Conscience strong with this guy. Fairly certain he's not the killer.",new Map([[o.Trust,4]]),30));for(const e of[s.PcIndex.ID_QUINN,s.PcIndex.ID_PANZER])u.get(i.NpcIndex.ID_HINA).get(e).push(new h(new r.GameTimestamp(0,6,8,30),"Expected levels of sub-conscious guilt when provoked. Not much in active consciousness. Nothing to remark here.",new Map([]),30));u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,6,8,30),"Heh, decently suppressed, and I was distracted by the starry guy overreacting... but it's clear. You're the killer, aren't you? That's some fresh guilt quashed in there. You're not absolute scum, but it's too less for - ahem - <em>culpable homicide not amounting to murder</em>...",new Map([[o.Trust,-3],[o.Respect,-2]]),30)),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,8,30),"Hmm, actually mitigated the guilt of his friend to some degree, and didn't feel any of his own. Not now, and very little in the past. Is it because he didn't focus on me enough, because he is a hero? Or is it because he is a psychopath?",new Map([[o.Trust,1],[o.Respect,2]]),30)),u.get(i.NpcIndex.ID_COROTO).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,6,9,0),"You were the harbinger of death after all. What did the boy do wrong? Has the Tsar sent you? Will he come after me next? Did I offend the Tsar in any way? Will I be killed for not knowing the boy's crimes?",new Map([[o.Trust,-4],[o.Respect,4]]),17)),u.get(i.NpcIndex.ID_YUKI).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,9,0),"A soul sheared. A paladin. A druid digging up the pasts of people here. Coincidences? I think not. Poor Taihe, you had no chance did you... I shudder at the last sight those eyes of your saw. The pure horror of inescapable death before they burnt. That bastard!slaughtering a kid like that...",new Map([[o.Affection,-6],[o.Respect,-4]]),20)),u.get(i.NpcIndex.ID_ERICA).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,6,9,30),"So it was spying after all... sigh. I'd hoped I was wrong. Apologizing after being caught still leaves a bad aftertaste, but at least it makes her a much better person than one who wouldn't. I'm not sure how far I can trust those words, but she did sound genuinely remorseful, and not as arrogant as I feared. Maybe I'll give it another try and see how it goes.",new Map([[o.Trust,3],[o.Respect,6]]),17,new Map([[o.Trust,!0]]))),u.get(i.NpcIndex.ID_SASHA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,6,9,30),"Guy did a check-in on my mental health, but I wasn't really the one who needed it... Ah well, I suppose I'll be learning the lute now. Something to look forward to ig.",new Map([[o.Gratitude,2]]))),u.get(i.NpcIndex.ID_GENEFE).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,9,30),"Hey! um... well.. yeah you may hold her wheelchair I suppose.",new Map([[o.Respect,-1]]))),u.get(i.NpcIndex.ID_GENEFE).get(s.PcIndex.ID_PANZER).push(new h(new r.GameTimestamp(0,6,9,30),"Seems concerned about the children's education. Seems to consider those 'video games' from hell magical.",new Map([[o.Respect,0],[o.Gratitude,-1]]),10,new Map([[o.Gratitude,!0]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,9,30),"Seems to know something is wrong here. Also gave off weird vibes like Hina once did.",new Map([[o.Respect,3]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,9,30),"Claims he would try to search for a way to save me. I wish I could believe that. Those probably aren't empty words, but I don't think he could succeed, or if there even is a way to. But... if someone's trying... dare I hope? ",new Map([[o.Gratitude,5]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,9,30),"No, no, no. Don't do that. Don't give me hope. Being alive and powerful like yourself, it's easy to believe everything is possible. But I am already a corpse. Please don't...",new Map([[o.Gratitude,-3],[o.Affection,-2]]),19,new Map([[o.Affection,!0]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,6,10,30),"Was concerned about Helios causing me hurt.",new Map([[o.Gratitude,3]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,6,10,30),"When that worry subsided, it became clear how much mutual trust and joviality lies in their friendship. Ahh... I wish I had someone like that.",new Map([[o.Respect,3],[o.Gratitude,-1]]),19,new Map([[o.Gratitude,!0]]))),u.get(i.NpcIndex.ID_CECELIA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,10,30),"It's clear how much mutual trust and joviality lies in their friendship. Ahh... I wish I had someone like that.",new Map([[o.Respect,3],[o.Gratitude,-1]]),19,new Map([[o.Gratitude,!0]]))),u.get(i.NpcIndex.ID_YUKI).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,6,11,30),"Was it my imagination or did he know more about my circumstances than met the eye? At least it led to the resolution of my suspicions and prevented... any unfortunate mishaps.",new Map([[o.Gratitude,2],[o.Trust,-1]]),10,new Map([[o.Trust,!0]]))),u.get(i.NpcIndex.ID_YUKI).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,11,30),"Wait an alias attestable by the brat's father himself? And now that I notice... his oath's clearly not that advanced yet. I was barking up the wrong tree. I don't know how that makes me feel. But I can't help seeing him as a misguided junior. Oh, you poor boy, if only you knew... there's no point. After all, <em>Honor is dead</em>.",new Map([[o.Affection,9],[o.Respect,4]]),20)),u.get(i.NpcIndex.ID_YUKI).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,11,30),"All that said, the way he glows. That radiance is blinding. Maybe... in another reality...",new Map([[o.Respect,5],[o.Gratitude,-4]]),20)),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,6,11,30),"Made a superficial attempt to console me, changing to her topics of interest real quick at the slightest word from me. But then she really didn't have a reason to care either.",new Map([[o.Trust,1]]))),u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_AURELIA).push(new h(new r.GameTimestamp(0,6,11,45),"Took the initiative to teach the kids! I... that's... Thank you! Thank you so much! With this, there may be some future for them yet.",new Map([[o.Respect,7],[o.Gratitude,7],[o.Trust,3]]))),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,6,11,30),"Oh you poor boy, here we go. You did nothing wrong.",new Map([[o.Trust,1]]),30));for(const e of(0,n.getEnumIterator)(s.PcIndex))u.get(i.NpcIndex.ID_DAWN).get(e).push(new h(new r.GameTimestamp(0,6,12,0),"Finally, after all these years... people I could open up to...",new Map([[o.Respect,e==s.PcIndex.ID_HELIOS?8:4],[o.Gratitude,e==s.PcIndex.ID_HELIOS?9:5],[o.Trust,e==s.PcIndex.ID_HELIOS?6:3]])));u.get(i.NpcIndex.ID_DAWN).get(s.PcIndex.ID_CYRION).push(new h(new r.GameTimestamp(0,6,12,0),"Feels sorry for my state. But if only he knew... just how little I deserve that.",new Map([[o.Gratitude,4],[o.Affection,2]])))}(),function(){u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,12,15),"Oh, an Honorspren-bound. Well he at least won't massacre us,  but... I'll probably need to keep a vigil for incoming bits of wisdom... sigh.",new Map([[o.Trust,12],[o.Respect,-1]]),10));for(const e of[s.PcIndex.ID_HELIOS,s.PcIndex.ID_QUINN])u.get(i.NpcIndex.ID_HINA).get(e).push(new h(new r.GameTimestamp(0,6,12,15),"Wait, is that honorspren bound to the both of them? And are two spren bound to Helios? What... sort of an orgy is happening here?",new Map([[o.Respect,1]]),10));u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_HELIOS).push(new h(new r.GameTimestamp(0,6,12,15),"???",new Map([[o.Trust,2],[o.Respect,4]]),30)),u.get(i.NpcIndex.ID_HINA).get(s.PcIndex.ID_QUINN).push(new h(new r.GameTimestamp(0,6,12,15),"???",new Map([[o.Trust,7],[o.Respect,2]]),30))}(),g=$("#individual_ast"),f=$("#individual_ast .events_list"),w=$("#individual_ast .opinion_tags");const e=$("#attitude_summary_table_area");p(e),e.on("click",".npc_opinion",y)}},190:(e,t)=>{function a(e){const t=new Map;return function(...a){if(t.has(a))return t.get(a);const n=e(a);return t.set(a,n),n}}Object.defineProperty(t,"__esModule",{value:!0}),t.getNumberSuffix=t.getEnumIterator=t.getEnumLength=t.memoize=t.setupNav=t.waitForFinalEvent=void 0,t.waitForFinalEvent=function(){const e={};return function(t,a,n){n||(n="Don't call this twice without a uniqueId"),e[n]&&clearTimeout(e[n]),e[n]=setTimeout(t,a)}}(),t.setupNav=function(){const e=$("#page_nav");$(".page_header").each((function(){$(`<div class="page_nav_link" data-nav-to="${$(this).data("navId")}">${$(this).text()}</div>`).appendTo(e)})),e.on("click",".page_nav_link",(function(){const e=$(this).data("navTo");$(`.page_header[data-nav-id='${e}']`)[0].scrollIntoView({behavior:"smooth"})}))},t.memoize=a,t.getEnumLength=a((function(e){return Object.keys(e).length/2})),t.getEnumIterator=a((function*(e){for(let t in e[0])isNaN(Number(t))||(yield Number(t))})),t.getNumberSuffix=function(e){if(e<0)throw new Error("Suffixes not supported for negative numbers");return e%10==1?11==e?"th":"st":e%10==2?12==e?"th":"nd":e%10==3?13==e?"th":"rd":"th"}},447:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCards=t.Card=void 0;const n=a(190);class i{constructor(){}static loadFromDOM(){this.$floatingCard=$("#floating_card"),this.$cardGraveyard=$("#card_graveyard"),this.snapWindowDimensions(),$(window).resize((()=>{(0,n.waitForFinalEvent)((()=>{this.snapWindowDimensions()}),500,"Indexible.loadFromDOM")}))}static verbose(e){return`<span class="verbose">${e}</span>`}static link(e,t){return`<span class="card_link" data-index-key="${e}">${t}</span>`}static snapWindowDimensions(){const e=$(window);this.viewportHeightInPx=e.height(),this.viewportWidthInPx=e.width()}static revealFloatingCard(){this.$floatingCard.show(),this.floatingCardWidth=this.$floatingCard.width(),this.floatingCardHeight=this.$floatingCard.height()}static hideFloatingCard(){this.$floatingCard.hide()}static moveFloatingCard(e,t){const a=e+this.floatingCardWidth+24<this.viewportWidthInPx,n=e>this.floatingCardWidth+24,i=t+this.floatingCardHeight+24<this.viewportHeightInPx,s=t>this.floatingCardHeight+24;a?i?this.$floatingCard.css({top:t+12,left:e+12}):s?this.$floatingCard.css({top:t-12-this.floatingCardHeight,left:e+12}):this.$floatingCard.hide():n?i?this.$floatingCard.css({top:t+12,left:e-12-this.floatingCardWidth}):s?this.$floatingCard.css({top:t-12-this.floatingCardHeight,left:e-12-this.floatingCardWidth}):this.$floatingCard.hide():this.$floatingCard.hide()}static getIndexible(e){return this.Index.get(e)}showCardFullSize(){this.$centralView.children().hide();const e=this.indexKey,t=this.$centralView.children(`[data-index-key='${e}']`);if(t.length>0)t.show();else{const e=this.generateCard(!1);this.$centralView.append(e),e.show()}}showCardFloating(){i.$floatingCard.children().hide();const e=this.indexKey,t=i.$floatingCard.children(`[data-index-key='${e}']`);if(t.length>0)t.show();else{const e=this.generateCard(!0);e.addClass("floating"),i.$floatingCard.append(e),e.show()}}registerSelf(){i.Index.set(this.indexKey,this)}}t.Card=i,i.Index=new Map,t.setupCards=function(){i.loadFromDOM();const e=$("#tokens");e.on("mouseenter",".token",(function(e){const t=$(this).data("indexKey"),a=i.getIndexible(t);i.revealFloatingCard(),a.showCardFloating(),i.moveFloatingCard(e.clientX,e.clientY)})),e.on("mouseleave",".token",(function(){i.hideFloatingCard()})),e.on("mousemove",".token",(function(e){i.moveFloatingCard(e.clientX,e.clientY)})),e.on("click",".token",(function(){i.hideFloatingCard();const e=$(this).data("indexKey");i.getIndexible(e).showCardFullSize()}));const t=$(".page");t.on("mouseenter",".card_link",(function(e){const t=$(this).data("indexKey"),a=i.getIndexible(t);console.log(t,a),a.showCardFloating(),i.revealFloatingCard(),i.moveFloatingCard(e.clientX,e.clientY)})),t.on("mouseleave",".card_link",(function(){i.hideFloatingCard()})),t.on("mousemove",".card_link",(function(e){i.moveFloatingCard(e.clientX,e.clientY)})),t.on("click",".card_link",(function(){i.hideFloatingCard();const e=$(this).data("indexKey");i.getIndexible(e).showCardFullSize()}))}},873:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupCharacterCards=t.Character=t.NpcIndex=void 0;const n=a(447);var i,s;!function(e){e[e.ID_LUCIAN=0]="ID_LUCIAN",e[e.ID_EBENEZAR=1]="ID_EBENEZAR",e[e.ID_CAELYNN=2]="ID_CAELYNN",e[e.ID_LESLEY=3]="ID_LESLEY",e[e.ID_IRENE=4]="ID_IRENE",e[e.ID_LING=5]="ID_LING",e[e.ID_DAVE_RUHL=6]="ID_DAVE_RUHL",e[e.ID_ULRICH=7]="ID_ULRICH",e[e.ID_LIA=8]="ID_LIA",e[e.ID_CONLEY=9]="ID_CONLEY",e[e.ID_VAHARETH=10]="ID_VAHARETH",e[e.ID_G_ORDER=11]="ID_G_ORDER",e[e.ID_LOGOS=12]="ID_LOGOS",e[e.ID_MOSTIMA=13]="ID_MOSTIMA",e[e.ID_SHIMA_KEN=14]="ID_SHIMA_KEN",e[e.ID_SHIMA_RIN=15]="ID_SHIMA_RIN",e[e.ID_VERRADER=16]="ID_VERRADER",e[e.ID_FIEST=17]="ID_FIEST",e[e.ID_MOUTHPIECE=18]="ID_MOUTHPIECE",e[e.ID_SANGUINE_ARCH=19]="ID_SANGUINE_ARCH",e[e.ID_DECROA_SAL=20]="ID_DECROA_SAL",e[e.ID_BAPHOMET=21]="ID_BAPHOMET",e[e.ID_KJERA=22]="ID_KJERA",e[e.ID_G_DEFENSE=23]="ID_G_DEFENSE",e[e.ID_TRAITOR_OTHELLO=24]="ID_TRAITOR_OTHELLO",e[e.ID_MANDY=25]="ID_MANDY",e[e.ID_GEN=26]="ID_GEN",e[e.ID_MUMU=27]="ID_MUMU",e[e.ID_SHAMARE=28]="ID_SHAMARE",e[e.ID_AMAIA=29]="ID_AMAIA",e[e.ID_LEMUEN=30]="ID_LEMUEN",e[e.ID_LEMUEL=31]="ID_LEMUEL",e[e.ID_EUGRUD=32]="ID_EUGRUD",e[e.ID_ANDOAIN=33]="ID_ANDOAIN",e[e.ID_DUSK=34]="ID_DUSK",e[e.ID_DAWN=35]="ID_DAWN",e[e.ID_ANDRI=36]="ID_ANDRI",e[e.ID_ATHLON=37]="ID_ATHLON",e[e.ID_BJORN=38]="ID_BJORN",e[e.ID_CECELIA=39]="ID_CECELIA",e[e.ID_COROTO=40]="ID_COROTO",e[e.ID_ELYSIUM=41]="ID_ELYSIUM",e[e.ID_ERICA=42]="ID_ERICA",e[e.ID_GENEFE=43]="ID_GENEFE",e[e.ID_HAV=44]="ID_HAV",e[e.ID_HINA=45]="ID_HINA",e[e.ID_INGRID=46]="ID_INGRID",e[e.ID_IONA=47]="ID_IONA",e[e.ID_JAYE=48]="ID_JAYE",e[e.ID_JORDI=49]="ID_JORDI",e[e.ID_KASTOR=50]="ID_KASTOR",e[e.ID_PETRA=51]="ID_PETRA",e[e.ID_ROBERTA=52]="ID_ROBERTA",e[e.ID_SASHA=53]="ID_SASHA",e[e.ID_SYBILLA=54]="ID_SYBILLA",e[e.ID_TOMASA=55]="ID_TOMASA",e[e.ID_VERNA=56]="ID_VERNA",e[e.ID_VITACIA=57]="ID_VITACIA",e[e.ID_YUKI=58]="ID_YUKI",e[e.ID_EZELL=59]="ID_EZELL"}(i=t.NpcIndex||(t.NpcIndex={})),function(e){e[e.Outdoorsman=0]="Outdoorsman",e[e.Homebody=1]="Homebody",e[e.Recluse=2]="Recluse",e[e.Introvert=3]="Introvert",e[e.Social=4]="Social",e[e.Extrovert=5]="Extrovert",e[e["Early Bird"]=6]="Early Bird",e[e["Night owl"]=7]="Night owl",e[e.Masochist=8]="Masochist",e[e.Bloodlust=9]="Bloodlust",e[e["Abhors Violence"]=10]="Abhors Violence",e[e.Gourmand=11]="Gourmand",e[e.Ascetic=12]="Ascetic",e[e.Paranoid=13]="Paranoid",e[e.Trusting=14]="Trusting",e[e.Naive=15]="Naive",e[e.Greedy=16]="Greedy",e[e.Jealous=17]="Jealous",e[e.Psychopath=18]="Psychopath",e[e["Guilt-ridden"]=19]="Guilt-ridden",e[e.Kind=20]="Kind",e[e.Misandrist=21]="Misandrist",e[e.Misogynist=22]="Misogynist",e[e.Abrasive=23]="Abrasive",e[e.Asexual=24]="Asexual",e[e.Homosexual=25]="Homosexual",e[e.Bisexual=26]="Bisexual",e[e.Addict=27]="Addict",e[e["Recovering Addict"]=28]="Recovering Addict",e[e.Teetotaler=29]="Teetotaler",e[e.Stern=30]="Stern",e[e.Judging=31]="Judging",e[e.Accepting=32]="Accepting",e[e.Industrious=33]="Industrious",e[e["Hard worker"]=34]="Hard worker",e[e.Lazy=35]="Lazy",e[e.Slothful=36]="Slothful",e[e.Sanguine=37]="Sanguine",e[e.Optimist=38]="Optimist",e[e.Pessimist=39]="Pessimist",e[e.Depressive=40]="Depressive",e[e.Arrogant=41]="Arrogant",e[e.Modest=42]="Modest",e[e.Confident=43]="Confident",e[e.Vain=44]="Vain",e[e.Confrontational=45]="Confrontational",e[e.Conciliatory=46]="Conciliatory",e[e.Insecure=47]="Insecure",e[e.Nervous=48]="Nervous",e[e.Volatile=49]="Volatile",e[e.Neurotic=50]="Neurotic",e[e.Quiet=51]="Quiet",e[e.Verbose=52]="Verbose",e[e.Distant=53]="Distant",e[e["Full of Life"]=54]="Full of Life",e[e.Introspective=55]="Introspective",e[e["Unwitting Hypocrite"]=56]="Unwitting Hypocrite",e[e.Hypocrite=57]="Hypocrite",e[e.Abusive=58]="Abusive",e[e["Suck-up"]=59]="Suck-up",e[e.Bibliophile=60]="Bibliophile"}(s||(s={}));class r extends n.Card{constructor(e){if(super(),null==r.$commonCentralView)throw new Error("Premature instantiation of class. The page isn't loaded yet.");this.name=e.name,this.id=e.id,this.campaign=e.campaign,this.arc=e.arc,this.imgPath=`./assets/images/character_tokens/C${e.campaign}/Arc${e.arc}/${e.tokenName}.png`,this.indexKey=r.getIndex(this.id),r.$tokenSpace.find(`.token_space[data-campaign='${this.campaign}'][data-arc='${this.arc}']`).append($(`\n            <img src=${this.imgPath} class="token" alt="[Img Not Found]" data-index-key="${this.indexKey}">\n        `)),e.tags.push(`Campaign ${this.campaign} ${n.Card.verbose(`Arc ${this.arc}`)}`),e.tags.push(`${e.gender}${e.age}`),this.tags=e.tags,this.summary=e.summary,this.description=e.description,this.altImagePaths=e.altImagePaths,this.personalityTags=e.personalityTags,this.$centralView=r.$commonCentralView,r.IndexById.set(this.id,this),this.registerSelf()}static getIndex(e){return`[character|${e}]`}static linkNpc(e,t){return n.Card.link(r.getIndex(e),t)}static loadStaticElements(){r.$commonCentralView=$("#character_idx .central_view"),r.$tokenSpace=$("#tokens"),r.$commonCentralView.on("click",".token_selector",(function(){const e=$(this).parent().siblings(".tokens");e.children().hide(),e.children(`[data-token='${$(this).data("token")}']`).show()}))}generateCard(e){let t,a;return t=!e&&this.altImagePaths?`<div class="tokens">\n                ${Array.from(this.altImagePaths,(([e,t],a)=>`<img src="./assets/images/character_tokens/C${this.campaign}/Arc${this.arc}/${t}.png"\n                          class="token" \n                          data-token="${t}"\n                          alt="[${e} Img not found]"\n                          ${0==a?"":'style="display: none;"'}>`)).join("")}\n                </div>\n                <div>\n                    ${Array.from(this.altImagePaths,(([e,t])=>`<span class="token_selector tag" data-token="${t}">${e}</span>`)).join("")}\n                </div>`:`<img src=${this.imgPath} class="token" alt="[Img Not Found]">`,a=this.personalityTags?`<div class="personality_tags">${Array.from(this.personalityTags,(([e,t])=>`<span class="tag leveled t${t}">${s[e]}</span>`)).join("")}</div>`:"",$(`\n        <div class="character_card" data-index-key="${this.indexKey}">\n            <div class="token_space">\n                ${t}\n                ${this.altImagePaths?"<div></div>":""}                        \n            </div>\n            <div class="content">\n                <h5 class="name">${this.name}</h5>\n                <div class="tags">${this.tags.map((e=>`<span class="tag">${e}</span>`)).join("")}</div>\n                <div class="details">${this.description}</div>\n                ${a}\n                <div class="summary">${this.summary}</div>\n            </div>\n        </div>`)}get isVillageNpc(){return 2==this.campaign&&1==this.arc&&this.id!=i.ID_ANDOAIN}}t.Character=r,r.IndexById=new Map,r.$commonCentralView=null,r.$tokenSpace=null;const o=new Map([["Lucian",`"This darkness is a refuge, a throne, and paradise. The spirits of the dead have never left, and I’ve cursed \n     the world from atop their bones... Seeing me as I am now, do you still want to hear my song? Do you still \n     dare... to stand before me?"<br/>\n     Calamity of The Troupe - an unfinished masterpiece of their leader. Was once raised as their rising star in \n     response to the threat that was ${r.linkNpc(i.ID_EBENEZAR,"the Lich")}. But turned against them only \n     as he slaughtered all the troupe's senior members in one night and escaped into Materia - sealing his \n     memories and powers. He returned to the outer planes by accident and sought out the troupe when he did. \n     Descended into insanity after killing ${r.linkNpc(i.ID_MOUTHPIECE,"The Mouthpiece")} and inheriting \n     his curse. Following which he stealthily assassinated ${r.linkNpc(i.ID_TRAITOR_OTHELLO,"The Traitor")}, who was \n     preoccupied in fighting 'Agents of the Fifth', thus freeing the Primordial nightmares.`],["Ebenezar",`A human kid born in the the classical era. Accidentally entered a perpendicularity inside a \n     subterranean lake into the Gardens. Lived there for a few centuries and trained fanatically as a mage under his\n     then-girlfriend ${r.linkNpc(i.ID_LESLEY,"Lesley")}'s tutelage and soon surpassed her. Became a Lich\n     and would often roam in shady alleys of Materia, appearing helpless - then feeding on the souls of any who \n     assaulted him. Stabilized the perpendicularity between the lake he once drowned in - making it his 'lair' - and \n     the Mistflame in the Gardens near Bunker#371. Went to the castle to 'fight death', but failed and died, his \n     last days and whereabouts remain unknown.`],["Caelynn",`Born in the last years of the heroic age, fled into The Gardens due to an accidental encounter with the Fifth\n      Nightmare. Being extremely gifted, she received guidance from various orders - often from Guardians themselves.\n      Was once close to ${r.linkNpc(i.ID_TRAITOR_OTHELLO,"The Traitor")}. Currently leads the people of the Garden\n      as the Guardian of Life. Now an Atium savant.`],["Lesley",`A rich higher vampire mage with powerful time control powers. Came to The Gardens after a failed attempt to\n      kill ${r.linkNpc(i.ID_CAELYNN,"Caelynn")}. Now her best friend  / advisor. Detests her\n       family and curbs her bloodlust. Was depressed until recently.`],["Irene",`An air genasi who was a junior member of the inquisition of the gardens. All her bunker-mates were killed in \n      an attack by The Troupe around 300 years ago, but the ${r.linkNpc(i.ID_KJERA,"Guardian of Magic")}\n      took pity on her and replaced them all with physically intractable and sentient illusions. Despite them being \n      near-perfect replicas, Irene eventually figured out their true nature, but being grateful for the concern, she \n      kept the pretense of believing in them. Even so, ${r.linkNpc(i.ID_LESLEY,"Lesley")} took a personal \n      interest in her and made sure to invite her every now and then to make sure she got to interact with real people.\n      During the Hour of Loss, she displayed unexpected skill (leading others to suspect she had specifically been \n      trained for such situations), resolve, and fanaticism in fighting a deep-ocean aberration but went missing in\n       the fight.`],["Ling",`One of the fragments of an outer primordial. Moved into the Gardens long ago along with \n     ${r.linkNpc(i.ID_KJERA,"Kjera")} and worked as a lighthouse keeper there so as to be best placed to\n      respond to the revival of her 'parent' or any other outsiders. Was chosen to be the Guardian of Diplomacy after\n      the inquisitors' betrayal. Agreed but went missing during the expedition inside the Castle of the Night \n      following Preservation's death and the Survivor's Ascension.`],["Dave",`A warforged automaton that was purchased by ${r.linkNpc(i.ID_CAELYNN,"Caelynn")}'s \n      batch-mates at a heavy price upon her graduation, to serve and protect her. His modules were heavily operated \n      upon by Lesley who practiced her coding skills on him. Failed to defend Caelynn at one point long ago, and \n      gave his life holding out against a deep-sea aberration to atone for it.`],["Ulrich","A human that lived in the last years of the Archaic era and had shown remarkable skill in making heavy armors \n      for those of his clerical order. Upon his death in war, Preservation gave him a second chance at sentient life\n      in the Gardens, as a reward for saving the lives of so many thanks to his meticulous work at their armors. \n      Since then he's been honing his skills and is now regarded as one of the finest smiths in the multiverse."],["Lia",`An elven archer who roamed freely the Feywild until by cruel circumstance she fell prey to the second \n      nightmare. Survived the encounter thanks to ${r.linkNpc(i.ID_CAELYNN,"Caelynn")}'s \n      intervention, who remained on the lookout for primordial incursions. Caelynn then offered her asylum with \n      herself promising to keep her safe from the primordial as far as possible, an offer she readily took. \n      Rescued ${r.linkNpc(i.ID_ULRICH,"Ulrich")} when he showed up a few centuries later and subsequently \n      married him on his insistence. While not the ideal marriage, the two manage fine nowadays.`],["Conley",`A fire genasi rebel who was given refuge by Preservation after he sacrificed his life to save the lives of \n      quite a few of his friends. Served as cook/housekeeper at Bunker#371 where he was everyone's favourite \n      junior. Used to respect ${r.linkNpc(i.ID_EBENEZAR,"Ben")} before he ditched them all.`],["Vahareth",`${r.linkNpc(i.ID_CAELYNN,"Caelynn")}'s predecessor as the Guardian of Life as well as a \n      father figure to her. Scouted her out in Materia, then got her to the gardens and personally trained her. \n      Known and feared throughout all the outer planes for his unbreakable will and eyes that could delve into the \n      deepest nature of a person's soul with just a glance. 'Retired' after Leras' death.`],["GOrder",`Known across all the realms simply as 'The Master' - the Guardian of Order was an expert at diplomacy, the \n      forceful arm-twisting kind, who always got his way. Unlike most others who took it easy in the garden, he spent\n      his whole life scheming and ruthlessly executing ever-more-complex Machiavellian schemes. So complex that even\n      his own loyalties were at times doubted, particularly when some links were found between him and\n      ${r.linkNpc(i.ID_TRAITOR_OTHELLO,"The Traitor")}. He was also a very strong warrior, rumoured to be a \n      radiant as well as have hemalurgic powers equivalent of Mistborn of old derived from an inordinate \n      number of spikes. A number equivalent to some of his seniormost counterparts within the castle itself, so many that \n      even Aluminium couldn't negate them in time. Committed suicide when Ruin attempted to assert his will via the\n      hemalurgic spikes instead of letting his knowledge fall into the enemies hands. A pity too, for he was \n      literally the personification of one of the ideals of the new Preservation, "There's always another secret."`],["Logos","The enigmatic 'scriptwriter' of the Troupe, who dictates every move they will make. From the 'Troupe Leader'\n      gained an uncanny ability to write reality to his whim, anything he writes <i>will exactly occur</i> as he wrote it. \n      However this works better for futures far off and with a lot of possibilities. Is functionally immortal\n      since he wrote his own ending in the far future. <br/>\n      Before he became the Playwright, he was also a greater demon lord. Banshees being male is extremely rare, and \n      all are very dangerous, and one among them becoming Lord was unheard of before him. Even back then he could \n      cast reality-bending magic simply by speaking (or chanting) aloud or writing his commands in the air."],["Mostima","A fallen angel who can move through planes without relying on perpendicularities. Has a tendency of talking to\n      someone one minute and disappearing the next. Suffers from an advanced case of Nightblood but doesn't seem to \n      suffer from psychosis or neurosis. Carries two staves that appear powerful and seem to be the manifestation of\n       an ancient, or rather timeless, soul."],["Shimaken",`An orphan in the Castle of the Night who was adopted and raised by ${r.linkNpc(i.ID_LEMUEN,"Lemuen")} along \n      with ${r.linkNpc(i.ID_SHIMA_RIN,"his sister")}. Wasn't the\n      best at fighting but maintained an unshakable, and contagious, aura of hope and optimism despite having seen \n      his fair share of atrocities and horrors. Organized a 'resistance' aimed at making leaving the castle possible.`],["Shimarin",`An orphan adopted and raised by ${r.linkNpc(i.ID_LEMUEN,"Lemuen")} who taught her sniping. Took it up as a job after \n      Lemuen got crippled. Worked in a team until ${r.linkNpc(i.ID_VERRADER,"Verrader")} sold them out, \n      then worked solo. Was there, past midnight, when Ruin almost got complete - she made it back with \n      ${r.linkNpc(i.ID_LOGOS,"The Playwright")}'s aid.`],["Verrader",`An influential fixer in Night Castle. Made it big thanks to his incredible charisma and deception skills. \n      Gained Nightblood in an accident - a result of his first betrayal - during his\n      early years spent on the field in a forge which submerged his whole team, except \n      ${r.linkNpc(i.ID_SHIMA_RIN,"Shimarin")}, in magma. Died at the hands of the Steel Inquisitors, \n      his soul burnt to power Rin's hemalurgy.`],["Fiest",`While he rarely stepped on to the field himself, ${r.linkNpc(i.ID_SHIMA_KEN,"Shimaken")} and the \n      others owed a lot to his technical genius. Since he rarely even left the confines of his lab, his life was\n      rather sheltered and happy. ${r.linkNpc(i.ID_LEMUEN,"Lemuen")}'s boyfriend before she died.`],["Mouthpiece",`Was somehow related to the Witch King of lore. The most loyal member of the troupe, he took it upon himself\n      to be the host/announcer of the Troupe's 'shows'. Responsible for their most grotesque creations which often \n      were looked down upon by ${r.linkNpc(i.ID_LOGOS,"The Playwright")} as being crude and tasteless. \n      Was killed by a group of adventurers and ${r.linkNpc(i.ID_LUCIAN,"Solitare")} but he had already \n      accomplished what his master needed...`],["SanguineArch","Little is known (so far) about the first, and primordial, vampire and the de facto Lord of the entire dimension\n      of the Shadowfell except that they are extremely dangerous to all but other higher vampires, most of whom regard \n      them with utmost respect. Fear, yes, but respect..."],["Decroa",`A higher vampire who had been captured by the Troupe Long ago and used both as a trap against unwanted \n      intruders and for their 'plays' and research. Prolonged torture and withdrawal symptoms had made her a little \n      unhinged, and <i>very</i> thristy. Was finally freed by a group of adventurers and thereafter protected by \n      ${r.linkNpc(i.ID_SANGUINE_ARCH,"The SanguineArch")} until she could escape the \n      castle. Revealed herself to be a childhood friend of ${r.linkNpc(i.ID_LESLEY,"Lesley")}'s.`],["Baphomet","The Demon Lord in command of the 'lowest level' of the Castle who often was summoned to other realms to fight\n      on the front lines, and so had inherited the traits of lesser demons - namely ferocity in battle without regard\n      to self-preservation, an irrational hatred of devils, and a slight dearth of brain cells. Regardless, the mere\n      mention of his name brought terror in the hearts of many - particularly in the lower levels of the castle..."],["Kjera","Very little is known (so far) about the Guardian of Magic. Except that she keeps her consciousness distributed\n      across various forms and bodies, not all humanoid, across several reams. And so she is pretty much immortal even\n      before her primordial origins are taken into account. Since each body has its own reservoir of mana, she \n      herself has near unlimited mana and can cast all non-proprietary spells, and most proprietary ones, known in \n      all the dimensions. She personally maintains the entire internal financial infrastructure of the Gardens."],["Othello",`Once the apprentice guardian of defense, he betrayed the people in Preservation to kill everyone in the bunker\n      with the help of the troupe and escaped into the castle. The only person, other than himself, who would've \n      known all the details was ${r.linkNpc(i.ID_G_ORDER,"The Guardian of Order")} before he passed away.\n      <br/>\n      By the time he was found again by a group of adventurers, he was imprisoned by the troupe next to a rather \n      large explosive, and had completely lost his mind - as he kept babbling some gibberish. As they were escaping\n      with him, however, the mists touched him causing him to fully become himself again. Unfortunately, this was but\n      for a moment since soon after he was assassinated by ${r.linkNpc(i.ID_LUCIAN,"Solitaire")}.`],["Mandy",`A criminal and gang/cult leader, she was well known and feared throughout the lower levels of the castle for \n      being a very advanced case of nightblood. It gave her powers to manipulate stone, something which also made \n      her near impossible to kill, while completely sapping her of human emotions like empathy, making her a \n      psychopathic killing machine. Seemed to be researching some clues regarding the plane of the earth a \n      ${r.linkNpc(i.ID_EBENEZAR,"particularly adept spellcaster")} had left behind but was thwarted by a \n      group of adventurers who handed her research to ${r.linkNpc(i.ID_VERRADER,"Verrader")}.`],["Gen",`Little is known (so far) of ${r.linkNpc(i.ID_MANDY,"Mandragora")}'s brother except that he was\n      a regular studious boy in Terra Prima until he was kidnapped by a \n      ${r.linkNpc(i.ID_MOSTIMA,"bored wandering spacetime-traveller")} and brought into the Castle of \n      Death to be used as a bargaining chip by a group of adventurers, since he was supposedly the only family, and \n      only weakness of his sister.`],["Muelsyse",`A well known research specialist from Innovation who specialized in nanomachines and fluid automation. Had \n      come to the castle of Ruin for reasons unknown and there happened to meet, and protect from imminent \n      destruction, ${r.linkNpc(i.ID_FIEST,"one of the fans of her research")} and also helped out his group of adventurer \n      friends. However, being in a rush they couldn't really get to know her better then.`],["Shamare",`A child who'd been forced into a harsher life someone of her age deserved, the death of her sister caused her\n      to inherit her nightblood and learn of her 'arts'. These 'arts' involved weaving the souls of people, and \n      others, into inanimate objects - twisting their identity and spiritual energy to perform certain tasks. The\n      first soul she weaved was that of her own sister's, who had been shot - as she was trying to go incognito - by \n      ${r.linkNpc(i.ID_SHIMA_RIN,"a sniper")} at the behest of her \n      ${r.linkNpc(i.ID_MOUTHPIECE,"last employer")} after she had completed a certain contract supposedly\n      involving a lock. Shamare finally gave up her quest for vengeance when she realized she was being manipulated \n      and at the behest of a very persuasive barbarian.`],["Lemuen",`${r.linkNpc(i.ID_MOSTIMA,"Mostima")}'s half-sister and ${r.linkNpc(i.ID_SHIMA_RIN,"Rin")}'s\n      teacher - she was reputed to be a sniper without compare. While her life had a great deal of ups and downs,\n      very few individuals would know her full life story - probably only Mostima. And yet, one adventurer did begin\n      to bond with a part of her left behind after she died, inheriting her skills and small pieces of her memories.`],["Eugrud",`An orc who served as bodyguard to ${r.linkNpc(i.ID_VERRADER,"Verrader")} and probably shared one \n      braincell with his co-bodyguard, the bugbear gunslinger Roth (and probably received the smaller half of that \n      braincell). While he liked to boast and think he'd seen everything the castle had to offer while working \n      under Verrader, only after his death - after failed attempts to assassinate ${r.linkNpc(i.ID_SHIMA_RIN,"Shimarin")}\n      and then ${r.linkNpc(i.ID_SHIMA_KEN,"Shimaken")} did he realize just how insignificant his life so far had been...`],["Andoain",`An aasimar with a halo and glowing wings like reflected glass who mysteriously appeared in Veteres in around \n      1580 AR. Seemed to be supernaturally gifted in the use of firearms and preferred them to swords. Known by all \n      to be an extremely generous and kind soul, but seemed to be haunted by demons of his own, and was always \n      begging God for forgiveness. Was randomly assaulted by a \n      ${r.linkNpc(i.ID_MOSTIMA,"mysterious half-blood fallen aasimar")} while peacefully exploring the\n      coast of Aegir.<br/>\n      <div class="effect_tag">Incomplete</div>`],["Dawn",'The gentle and reserved pawn shop owner and the de facto caretaker of the small mountainous village of Po\'shan. \n      Appears to hide quite a bit of pain underneath a sad smile. Was born in the hinterlands of Naiyumi around \n      1200 AR. Kept witnessing the residents of her village constantly get slaughtered again and again, and lose \n      quite a bit of the memeories of their times spent together again and again.<br/>\n      <div class="effect_tag">Incomplete</div>\n      '],["",""]]),l=`\n<h5>Early life</h5>\nCaelynn Nailo was born in ? during the years that marked the end of the Heroic Age, and the onset of the Silent Age. \nBorn in a university to a family of accomplished and well renowned scholars, young Caelynn had led a protected - \nalmost pampered - life. A life that, along with her natural gifts, had allowed her to dream, to reach for the stars,\nto set out near impossible goals and achieve them. Unfortunately, this self-confidence and ambition were dormant \nseeds of tragedy that finally bore fruit in the years that heralded the Silent Age.<br/>\nAnd so it was, that one day she found everyone she knew - her family, her friends, her professors - all massacred. \nAs she stared into the essence of The fifth, a horror she could not yet fully \ncomprehend, she <i>knew</i> it would be her next - and welcomed it, for even in her broken mind she knew she had\ncaused all their deaths. But the powers that be had decided it was not time for her to die yet.<br/>\nIn this case 'the powers' took the form of a single man who had escaped the slaughter and fought back the horror to\nprotect her. A man she knew as the HoD of botany, someone she'd never really felt bold enough to interact with. A \nman who, as she would learn soon, couldn't dream. Another thing she would learn soon was that he came from a \ndifferent universe - a garden - and went by the title of 'Guardian of Life' there...\n<h5>In the Garden</h5>\nWhen she entered the garden, she was a different person. Fate had broken her, but she had stood up again and filled \nthe cracks with something stronger. Gone was the childish optimism, the vanity. It was replaced by singular purpose -\nto ensure that none would suffer at the hands of those from without as she did. To ensure that she could, would \nprotect as she had been protected by ${r.linkNpc(i.ID_VAHARETH,"Vahareth")}. Before long, she was \nregarded as a prodigy there too - with the different orders of Watchers, Inquisitors and Scholars training her and \nvying for her to join them. Yet there was little surprise when she chose to join the Watchers - after all she was\nvirtually Vahareth's daughter - lived in his bunker, trained under him personally, and had the same cold steel gaze\nthat could unnerve the most confident of men.<br/>\nBeing so close to power and being the center of attention of so many orders meant that she met a fair share of \nimportant people from different orders. One among them was the apprentice of the Guardian of Defense, \n${r.linkNpc(i.ID_TRAITOR_OTHELLO,"Othello Titanborn")}. The gardens, because of their extremely low but <i>very</i>\nhighly skilled population, would typically send out squads of two people for most operations - and Caelynn and \nOthello were often together because of their complementary skills but aligning personalities. The two began courting\nand were a happy couple for quite a few decades. However, that was not to last, and the forces that had broken \nCaelynn before would soon break her again...\n<h5>The Betrayal and Bunker#371</h5>  \nOne day, Preveservation was ablaze with the news that everyone in Bunker#17 had died. When it reached her ears, she \nwas terrified, for that was where Othello lived. Upon reaching there, however, she recieved even worse news from the\nGuardians of Order and Life who were inspecting the site. He was not dead, he was the one who had killed them all, \nwith the assistance of a mysterious group of assassins from the Castle of Ruin known as 'The Troupe' and escaped there\nwith them following the slaughter. His motives were unknown, but the evidence was irrefutable. This evidence included\na prisoner, whom Caelynn, under the superivision and command of the Guardian of Order, tortured and 'practiced' \nhemalurgy upon.<br/>\nThe shock of betrayal, overwhelming sense of abandonment and trauma of hemalurgy sent Caelynn into a downward spiral.\nShe would do all future operations alone, with Machiavellian maneuvers executed with utter ruthlessness. And so she\nspent almost two millenia in the service of Preservation. Until during one of her last operations, she came face-to-face \nagainst a higher vampire in the streets of Ortus, a major capital of a planet in Materia. While they were antagonistic\nat first, in her eyes Caelynn saw the same look as herself - to be more precise, the same look following both the \ntimes life had broken her. This girl, she knew, had seen abandonment, loss and regret, and little else, as she too \nslid downwards in a spiral of her own demons. Despite herself, Caelynn did keep a close eye on her anyway, and so was there to see \nwhen finally the vampire resisted against the spiral, resisted against instincts Caelynn knew were more powerful, \nmore primal than she had ever faced.<br/>\nThat moment had moved her to a degree much more than she could anticipate. Buried regrets deep inside came out at \nlast, and so she, for the first time after Othello, reached out to someone. And so she returned to the Gardens with\n${r.linkNpc(i.ID_LESLEY,"Lesley")} in tow. The two soon grew very close, also starting to work together on\noperations. A few decades later, as her date of graduation from field service arrived, her collegues gifted her an\n${r.linkNpc(i.ID_DAVE_RUHL,"automaton")} to help defend her in close range. And so the three of them started \nBunker#371, and remained its sole members for one and a half millenia. Until finally Caelynn was there for someone\nthe way Vahareth had been for her - an elven girl, ${r.linkNpc(i.ID_LIA,"Lia Mistcloak")}, who\nwas 'taken' by the second. A few centuries after, Lia was to get married and\n${r.linkNpc(i.ID_ULRICH,"her husband")} too moved in. Again after a few centruries Lesley decided\nto 'adopt' ${r.linkNpc(i.ID_EBENEZAR,"a human boy")} whose soul seemed burdened in the same way that hers and \nCaelynn's once had. As Caelynn approved, it finally struck her that her lone wolf days were a thing of the long \npast - and once again she felt warmth in the company of others. It was when this happened that Vahareth finally \ndecided to name her his apprentice formally, meant to succeed him as guardian. Since then there were a few ups and \ndowns - like ${r.linkNpc(i.ID_CONLEY,"Conley")} joining and Ebenezar abandoning Lesley - an act of remarkable\nparallel with the way Othello once had her, but with each other for support, they weathered all that came.\n<h5>The hour of Loss</h5>\nA few days before the hour of loss, Caelynn got notified of a threat that required at least the attention of a \nGuardian apprentice. On arriving the scene, she found a group of adventurers, of whom \n${r.linkNpc(i.ID_LUCIAN,"all but one")} were peacefully slumbering around a mistflame. The one not \nslumbering seemed to be raving, and on his neck, she could see a Nightblood inhibitor. She knew what that meant -\nand the people who could venture outside the castle were typically very dangerous - the \nonly ones she'd heard of were members of the troupe, steel inquisitors or the demon lords. The mist clung to him, so \nhe wasn't hemalurgically enhanced. A demon lord wouldn't ever wear an inhibitor, so that left...<br/>\nShe was about to raise the alarm, when the inhibitor suddenly broke - and the person starting laughing in a \nparticularly insane way. He then summoned some... aberrations(?), gave them some directions, made some preperations \nfor the others, then... slit the throats of the aberrations until the mists tore apart from him, and then he slipped\nthrough the realms, giving her - who was wildshaped into a sparrow - a knowing grin as he faded. There would be \nlittle point in chasing him, and while she wanted to get a hold of the knife with which he could 'kill' even in here,\nsomething about his grin unnerved her, and she wanted to learn the motiviations of the others still asleep.<br/>\nWhich turned out to be a good idea, since their motivations were as noble as they come. As they willingly gave her \nthe dagger, she allowed them to stay as guests in the bunker. They certainly did make their presence felt out there. \nThey helped them in an odd variety of tasks, but what left her the most grateful for having them was that they\nhelped Lesley shed some of her demons. Yet something unnerved her, events were moving too fast for \nthis realm. Circumstances which would have come in years came in days, and they would absolutely not consider the \nidea of not going to the castle, despite all her warnings.<br/>\nSo when the hour of loss finally came, she found herself anticipating it. Preservation was getting weaker since eons,\nand of course <i>they</i> would take advantage of the imbalance between shardic powers. After helping her new guests\nmake it into the castle, she focused on rooting out the corruption that spread, yet this incursion was way more than\nhad ever been before. They did keep it at bay though, and while no more than half a dozen died in the Garden, the \nGardens themselves were completely ravaged. Vahareth too decided to 'retire' to seek out the cause of this, leaving \nher as the Guardian of Life. Soon after she took power, her guests established contact from within the castle, a \nfeat that required a great deal of magical power and skill. While she did wonder about it, as she did worry about \nthem, this was not the time. The intel they provided strongly suggested that the cause of the rift was somewhere \nwithin Ruin's domain. And so all the Guardians set out to deal with it.<br/>          \nUnfortunately, they were too late - by the time they had taken control, and crossed the midnight boundary to find \nthemselves face to face with ${r.linkNpc(i.ID_LOGOS,"The Playwright")} and \n${r.linkNpc(i.ID_SANGUINE_ARCH,"The SanguineArch")}, the primoridal nightmares were already free. \nThankfully, all of them being in one place meant that a greater disaster was prevented. Even with all his inquisitors,\nRuin could not take on the five of them together. That meant he couldn't get the Atium, couldn't complete himself and\nwas evenly matched against the new Preservation, 'The Survivor'. But leaving the Atium stash intact was too much of a\nrisk, so they offered the adventurers to burn it all if they would like to, an honour for helping protect the entire \nmultiverse from utter and imminent destruction. However, the adventures refused as they felt the Guardians were \nbetter suited for the power. They just wanted to have peace and quiet and leave the castle behind finally.<br/>\nHowever, that was not to be. For one of them had been marked by The second, and the\nPlaywright's powers had bound their souls in their skirmish. And so, she once again lost a group of good people, \npeople important to her, people who'd given her hope. There were already plans of war in motion. Of vengence, of\nsurvival. Until now, they had tried to play nice, it had resulted in the death of friends, in the death of God. \nNo more...`,h=`\n<h5>Early life</h5>\nAll higher vampires are aristocrats, served upon - should they require it - by their thralls and other creatures of \nthe shadowfell. However, even among them, the Aeternus family - one of the oldest - was highly feared and regarded,\nsince their blood granted them command over the flow of time itself. As such, as their youngest child, Lesley \ncommanded fear and respect before she was even old enough to know what the words meant. It would be long before she\nwould learn what respect meant, but unfortunately what fear was became clear to her very early in life.<br/>\nFor most higher vampires also share a particular trait - while their bodies are ageless, and can only ever grow \nstronger - old age is marked as their mind begins to slip. Not in terms of stupidity, loss of wisdom or weakness\nof will - no, a higher vampire could <i>never</i> be weak. It slips in terms of balance and stability. Elder vampires\nof aged minds are extremely paranoid and easy annoyed. They become desperate for solitude, and suffer in every word\nthey speak - as if every single word would bring them one step closer to insanity. They also turn into extreme \npsychopaths - it is said in the shadowfell that should any creature save another higher vampire even approach within\na mile of them, even unwittingly, they would instantly kill them for offending them with their existence. Ultimately,\nthis is what keeps the population in check, for only another higher vampire - or another titan - can truly kill a \nhigher vampire.<br/>\nUnfortunately, for child Lesley this meant she had to bear witness to mind-numbing amounts of domestic violence as\nshe grew into her teenage years (i.e., was a century old), to the point where one of the parents ripping out the \nhead of another would just draw a vacant dead glance from her, before she went back to reading her books. Her sole \ncomfort was in her elder brother, who taught her to use the powers of the bloodline - who stood by her - taking the\nbrunt of the shit - as her parents seperated, each cocooning up in their subdomains, never to be disturbed again. \nHowever, that strain was too much for him too, and on one - only one - occasion, he snapped violently at her. \nThat once was enough, she fled from the realm, never to look back again.\n<h5>Meeting Caelynn</h5>\nIn Materia, Lesley took shelter in the vast city of Ortus of Terra Prima. While the rest of the material plane was \nstill using bronze, and in some cases, stone tools. Veteres had already moved on to iron, cement and even niter. \nOrtus was quickly regaining the glories of times past, Lesley was certain they would learn steel-craft soon too. \nThat glorious, densely populated city was the perfect dream. Books that were a rarity in Shadowfell were present in \nthousands in the many libraries here. Poets and scholars blossomed in great numbers. Conversation with any stranger \nwas a pleasure. Lesley finally relaxed herself, took the persona of an author and set herself free...<br/>\n Sadly, with all the pent-up darkness within, setting herself free was the most dangerous thing she could do. Soon\nshe began to develop a taste for blood, something she'd never had before she came here, which before she knew it \nwas a crippling addiction. But unlike her ilk, she avoided violence, avoided killing, making thralls. It reminded her\nof her family, her kind way too much. The very thought disgusted her. For that matter, so did her addiction, but try as\nshe would, she couldn't let go - her darkness returned stronger than ever every time she tried to step away, and what\nwas a thing of pleasure soon became a necessity for being able to function.<br/>\nIt was at this time that she made friends with a rather nice guy, Nohadon, a person who would one day be regarded as one of \nthe greatest thinkers of the early classical era. To Lesley however, a person who would have been a God-sent company \nonce was now just an object of depraved anticipation. As she softly smiled and discussed ideas with him, she would \ninternally be picturing the oh-so-satisfying look of horror as she turned to feast upon him. However, there was just\none snag - a random noblewoman, who seemed too smart for her own good, seemed to have caught on to something and was\ntime and again thwarting Lesley's attempts to isolate the guy. Finally, Lesley had had enough, for the first time \nshe felt too pissed off to care about her heritage. She would get rid of this meddling arrogant bitch who had no idea\nwhat she was facing.<br/> \nUnfortunately, as she lay - a decapitated and bloody mess - tangled in a bunch of thorny vines, she found out \nthe situation was reverse, and it was her who had been utterly deluded. It was at this time that reality of what\nshe was trying to do finally dawned on her - she was turning into the same people as those she had detested the \nmost. And so, instead of fleeing and disappearing like the noblewoman advised, she went back to resume her life,\ndrawing an angry glare from her more than once. As time passed, she learnt to function, to curtail her bloodlust \nand just... function. Gradually, her time spent with Nohadon turned \nconsiderably more honest, pure and, strangely, fun. The noblewoman too, Lesley learnt her true name was \n${r.linkNpc(i.ID_CAELYNN,"Caelynn")}, began to warm up to her. Her nightmare was again turning \ninto a dream... until her brother came.<br/>\nEverything shattered, utterly broken and traumatized by what proceeded, that very night Lesley assaulted Nohadon and fed\non his lifeblood. As her suppressed addiction returned with a vengeance, she sucked out more and more - further than \nshe'd ever gone before - to the point where she could've killed him at any point. But thrilled, anxious, she wanted \nto pleasure herself more before she did that finale - she wanted to forget everything... but found she couldn't. From\nwhere she couldn't fathom, but the awful grace of God seemed to have fell on her. She couldn't lose herself, couldn't \npretend she enjoyed this - as she finally opened her eyes and faced what she was doing. Aghast, guilt seized her, \nchoked her. He wasn't dead yet - but there was nothing she could do to help him at this stage. Yet she tried, weeping\nand broken, she tried - but could only watch as the life left him...<br/>\nUntil a single word forced the life back into him, a single word from Caelynn, more pleasant than any she'd heard her \nwhole life. A word that carried mana considerably stronger than she could ever summon. That was when Caelynn told her \neverything - including about the place where even <i>her</i> family could never reach her again, a place where a group of \neight could well take on a higher vampire, a place where the leaders were evenly matched against \n${r.linkNpc(i.ID_SANGUINE_ARCH,"The SanguineArch")} themself...\n<h5>Ebenezar</h5>  \nLesley's time in Bunker#371 was satisfying, not entirely perfect - but as happy as a penance could be. Happier than \nshe felt she deserved anyway. And while the blacksmith and his wife pissed her off, subtly reminding her of her \nfamily, Caelynn was a pure pleasure. Plus even ${r.linkNpc(i.ID_IRENE,"an inquisitor")}, who had been \nso adamant that Lesley was a criminal, that there was something off about her - until Lesley had revealed\nher heritage, was becoming a great friend. And so she was sure she wasn't lacking in any way - until she met \n${r.linkNpc(i.ID_EBENEZAR,"Ben")}. A human \nboy who'd stumbled into a perpendicularity by accident (well he'd drowned in there), the teenager was solemn far beyond \nhis age. And his eyes seemed so <i>tired</i>, eyes that had seen way too much. Seeing a boy that dead inside reminded \nLesley of times long past, times before she'd tasted human blood, times when she still looked up to her brother... \nshe pleaded Caelynn to allow her to take him in. After her approval, as Ben came to live with them, Lesley found out\nthat there was one thing which still excited him, one thing that made his eyes shine like a child's again - magic.<br/>\nHe'd watch wide-eyed with wonder at every experiment Lesley did, ask about every potion she concocted, be amazed by\nevery spell she cast. Flattered by being the subject of such innocent, genuine praise, she offered to teach the kid \nher ways. He readily agreed, and Lesley watched with pride as this new purpose brought life back into him. His mood \nimproved considerably, he turned to cooking and painting as hobbies, became the best friend of everyone in the \nbunker, and before long was the glue that held them all together. A slight voice deep inside Lesley made her worry a\nbit on how <i>passionate</i> the boy was about learning, every day in a land where all were immortal, and so \npreferred to maintain a very healthy work-life balance (often bit a bit more emphasis on the latter), the kid would \neasily be studying for over 13 hours a day. What was her ward studying that hard for, Lesley couldn't help but wonder, \nbut helped him the best she could anyway.<br/>\nLess than two centuries later, her teaching and his studying turned into both of them researching together, as the\nboy's skills began to rival hers. She also became aware, partly from the teasing of others, that the boy seemed to be\ndeveloping feelings for her - feelings she felt she could, probably did reciprocate. Yet despite being over two \ncenturies old by experience, his body was still that of someone in their late teens. So, his request of being allowed\ntime to roam Materia, more specifically, his home planet terra - was met with approval by all. Caelynn did warn her \nhowever that something felt wrong in the kid's eyes as she had approved, so Lesley secretly spiked one of his drinks\nwith a pinch of her blood - it would let her know if he ever died.<br/>\nHe went out more than two dozen times over three centuries, and Lesley was sure her fears were unwarranted, when \nsuddenly her blood froze - Ben was dead! As she immediately prepared herself to project, the connection was \nre-established, and so she had no idea what happened. If she had trained her vampiric abilities better, instead of \nleaving them sealed and forgotten until the rare occasions that required them arose - she might've known he'd turned\nto Lichdom. But as it happened, she merely assumed there was some disruption and relaxed herself. Afterwards, he did\nreturn to the bunker, but continued to go out steadily back into the material plane. As his skills surpassed hers, \nhe also began to become distant, and would at times rebuke her for being too clinging - something very unfair, and \nsomething he'd never say before, but also something that struck a deep insecurity within her from her childhood days, \nand shook her to the core.<br/>\nWhile their relationship wasn't quite perfect, they still were happy - or at least so Lesley felt. So when she was \ndevastated when he declared he needed to go into the castle. Though he promised he'd return, she knew it was over \nbetween them. Maybe she should've stopped him, but old instincts took over that would not allow her to 'look' weak. \nSo instead she, perhaps a bit coldly, said she was ok - but insisted he take a very particular 'watch' with her. With \nhim gone, Lesley finally broke - and old habits returned. However, this time she was wise enough to not drink wantonly, \nbut only from someone who could overpower her if she lost control - someone who was also close to her. While the \nothers always kept encouraging her that he would return - he had learnt magic strong enough to open perpendicularities\n- her blood already had told her he was dead for good. So she drank. Hating herself, she continued to drink, and \ndrink, and drink (becoming the reason for Caelynn to appear even paler than her natural complexion).\n<h5>Forgiveness</h5>\nThe first break from her relapse into darkness was when people said a \n${r.linkNpc(i.ID_MOSTIMA,"mysterious girl with temporal control")} had shown up and wanted to be her ward.\nThough she was in no mood to, Caelynn forced her to take her as a student, something Lesley thanked her for later.\nBut the final reprieve came when, a few decades later, Caelynn brought home a group of guests - one of them an aasimar paladin,\nof an oath high enough to be a full knight radiant. From the first day, he could feel something was off in the \nbunker. He would find her, she knew, and while she could kill him, she found herself unwilling to. Her past had \nfinally caught up, judgement was here, and with her addiction resurfacing, she couldn't find it in herself to try to \nhinder it. She didn't want to die, though and tried hiding her true nature until hiding it was virtually equivalent \nto killing him. For he'd conjoined two powerful relics, one from the castle and another from the Guardian of magic, the \nlatter sealing the essence of the Primordials and being watched by Ruin himself. He was taken by surprise and \ncouldn't resist it. He would die before the split-second was over. No one else had noticed yet - and wouldn't before\nit was too late, but even the best of them didn't have the reflexes of a higher vampire - nor the strength.<br/>\nSo betraying her true nature, to the shock of many, she broke the conjunction and pulled him out to safety. It was \nnot a plea to spare her life because she'd saved his. No, this was no bargain, no trade deal. After preparing herself\nand wrapping on restraints to suppress her vampiric powers, she stood before him. With the secret out, she answered\nall his questions honestly, and closed her eyes, bracing for the end. Yet he wouldn't strike. While he made it clear\nhe didn't fully trust her, she had to be sure he <i>meant</i> it when he chose to spare her. So she asked him to \nbreak the restraints she had on - and stand before her in her unrestrained vampiric powers, which he did. Bless the\nman, he did! And so, knowing that they would be heading into the castle - she gave him her vampiric sigil - a token \nof trust beyond what most mortals could comprehend. It gave him powers like her own which would surface if, and only \nif, needed. It also lent the authority of her family to him, and gave him the power to truly kill her for good. Such\na need didn't arise, however. But the group did contact her to confirm Ben was gone (via a device he'd left \nbehind), but she knew that already. Still, when Caelynn told her all the Guardians were heading there, and were \nlikely to run into them, she was all too glad to be a part of that group, even if it meant running into the \nSanguineArch themself...`,d=`\n<h5>Early Life and Capture</h5>\nIt is hardly unusual for a child to lose their parents at a very young age in the Castle of the Night, and so when her\nparents went missing, eight-year-old Rin found a plenitude of odd jobs, not all very ethical, to support herself and \nher four-year-old brother ${r.linkNpc(i.ID_SHIMA_KEN,"Ken")}. Not all her employers were the most scrupulous,\nhowever - and on one occasion, now 14 yrs of age, she found herself in the service of a sadistic, hateful and dangerous\n(at least, so it seemed to her then) thug. For his amusement, he forced her to suffer from a round of 'Russian \nRoulette', and experience that deeply terrified and traumatized her. He then told her that he'd found the trail of a \nvery dangerous assassin that had sniped one of his right-hand men. She was to go and sabotage their rifle with an \nexplosive he gave.<br/>\nThis mission lead her to sneak into a remote alley which she learnt had been dubbed 'Saints Row'. Unfortunately, or\nperhaps fortunately, she was woefully under-prepared - while she was quite adept in stealth, she didn't know a very \nimportant fact, all 'Saints' were bonded to their firearms. The minute she touched the gun, her target knew. Alarms \nwent off everywhere, and she was surrounded in moments. As she was being apprehended, she couldn't help but notice \nhow all of them were aasimar who looked noble-to-a-fault and had halos and wings hovering around them that appeared\nlike light reflected on a crystalline surface. ${r.linkNpc(i.ID_MOSTIMA,"One of them")} however, also\nseemed to have the black horns and tails of a fiend. She seemed a lot less noble, and so to Rin a lot more unnerving,\nmore like a street thug she was used to instead of a divine being like the others.<br/>\nWhen her blindfolds were removed, she found herself in a cell. Sitting next to her, with her gun on her lap, was the\n${r.linkNpc(i.ID_LEMUEN,"famed sniper")} she'd heard so much off. Her kindly - almost jovial - demeanour\ncompletely shocked Rin. She seemed not a bit mad, merely amused and curious. The stark contrast between her target,\nsupposedly her enemy, and her employer cracked something deep inside of her. She completely broke down, after half a \ndecade of keeping it together while living through hell, she - in the midst of hyperventilation and sobbing - unloaded\nall that her soul had been burdened with at that point. Lemuen heard her whole tale soberly - Rin couldn't help but \nnotice how Lemuen's face hardened when she got to her latest employer. When she was done, with a very comforting hug, \nLemuen said she and a few others would leave this colony to diffuse the trail on her. She asked Rin to come along \nwith them for now. Lemuen herself would train Rin to make her strong enough to go back and retrieve her brother. Rin\ngratefully agreed, though she was sure she hadn't been offered a choice (which made her more happy than \nit should have).<br/>\nLemuen said the ones coming with her would be her half-sister and \n${r.linkNpc(i.ID_FIEST,"her boyfriend")} - a human guy they'd met here who \nused to work on making and maintaining their firearms and other equipment. Also, it turned out the 'half-sister' was\nnone other than the half-fiend Rin had noticed earlier. Her earlier assessment was spot on, she was way rougher than\nLemuen - at least superficially. Though with Lemuen, Mostima too completely let down her guard and was cheerful and\nrelaxed. The four of them moved into a very secure, and quite cozy, bunker-like place where the two sisters trained\nher with firearms - Lemuen with rifles and Mostima with handguns. Despite their light-hearted natures, Rin couldn't\nhelp but notice the two were <i>very</i> good with weapons and infiltration. These were not skills someone acquired\nwith experience on the street, but the result of a careful training regimen drilled into elite squads of the \nstrongest militaries.\n<h5>Becoming a Sniper</h5>\nA year later, while she was getting anxious to rescue her brother already - the lingering fear that she wasn't yet \nprepared to take on the monster that was her former employer continued to haunt her. Unfortunately, fate wouldn't \nleave her a choice. In their year together, she found out a lot about them - at least about stuff they were willing \nto share. The two had come from the material plane. Their father had turned away Mostima who'd sought him out, \ndenying that she was his child, and Lemuen had left him to live with her. The two of them had then begun to manifest\nthe powers of 'Saints', which had lead a certain organization to seek them out. The others they were living with were\npart of their old squad. Their squad had apparantly been charged with some mission in a place deep under the surface\nof their 'planet' known as the underdark. While there, the trails of some relic of the past had unwittingly led them\nright into a perpendicularity which had led them stright into the pits underneath the castle - where, ever so rarely,\nAtium could be found. Mostima had recognized this as the place where her mother had long ago been summoned from, and\nwhen the group had learnt they could return, they had established themselves here - awaiting any orders that may come \nsomeday.<br/>\nAnd so, after a year, Rin was deeply troubled when she saw their leader arrive at the doors of their bunker. No \norder had come, but he'd finally found a trail of the relics that had lead them in this castle in the first place. \nWhile the mention of the relics didn't really give the sisters a great deal of happiness - for they were the reason \nall of them were struggling within the Castle of Death himself instead of chilling in Terra Prima - they would not \ndisobey orders, even if it was uncertain if the chain of command still applied. Plus even they knew the supposed power\nof those relics, and the importance of recovering them. And so the three of them set out, leaving Rin alone in the bunker.<br/>\nA few days later, a familiar - though tired - knock on the door of their bunker was heard. Nervous with excitement, \nbut a bit apprehensive, Rin opened the door... and was shocked to find an abosolutely worn down Mostima, covered \nwith blood, halo and wings turned dark black, carrying an unconcious Lemuen inside. Fiest followed her with a haunted, \nhorrified look. Neither would explain any details, except that Lemuen would survive - though probably had lost the \nuse of her legs - and that Mostima would stay away from guns henceforth, and they would never see the other aasimars\nagain. And so the full reality sank into Rin, the only \nway to survive now was for Rin to take up Lemuen's job. She was not particularly skilled in anything else, save \nstealth and theivery, but that would never earn enough for the five of them, and none of the others could work. But \nbefore that, she needed to sort out her own demons, her own moral quandries. She had seen much, true, had been \nhardened by life, true, but living with the sisters had made her aware that she couldn't just close her mind and \nkill. If she went down this path, there was no looking back - and so she had to be absolutely certain that not an \niota of doubt or regret survived within her. She had to 'kill' her heart completely.<br/>\nSo after forcing Fiest to make some 'special preparations', she set off to rescue her brother. As she reached the \ndoors and corridors of her former employer, she noticed so many weaknesses in his defenses - stuff she'd never \nnoticed before. Security that seemed impregnable before seemed trivial now. One year of training had put her on a \nlevel far beyond this. In fact, she probably could've stormed in here even after two months of training. She realized that \nthe person she had feared as a 'monster' before was no more than a petty criminal. Of course the mission he'd sent \nher on was doomed to fail, a mission far beyond his means, a mission against true 'monsters'. A lucky break had put \nhim on their trail, and he was too low-level to even fathom how foolish pursuing that trail was. Well he'd know now,\nshe thought savagely as she finally walked into his room - the wretched man called out for help, but none would come. \nNone could come. She took out her revolver, made sure it was full, then took out one bullet as she headed to him, \nspinning the chamber.<br/>\nIn his defense, he found some backbone somewhere, and flat out declared - despite being terrified - he would not \nplay any games, she could just shoot him and get it over with. But she'd not come here to kill him, she'd come here \nto die. The others would manage somehow. But if she survived this night, a lot of people would die - some innocent, \nsome undeserving of death. If God didn't want that, now was the time to stop her. She put the muzzle to her own \nmouth and, as her former-boss looked on - stunned and aghast, she pulled the trigger.... and was still alive. \nDeep down, at that moment, she swore she could hear reality around her itself chuckle softly. Well, if \nthat's what God desired, who was she to deny Him. She would do what she did best, and would mourn every single time, \nbut then do it again. After the resolve sank in, she turned to her former boss, still crouched in a corner - eyes \nbetraying pure terror - as she emptied the other five bullets in his brain.<br/>\nWith that done, she went to find her brother, her iron mask cracking as she tried to imagine the look of horror\nthat would paint his face from living a year in this hell alone. But she was wrong. Her brother, while a bit wiser \nand hardened now, looked as pure and optimistic as the day she'd left him. That moment she realized her brother held\non to something she'd just killed in herself a few moments ago. Hope. Hope for a better future even while standing \nin utter darkness. And the courage to act for it, despite all odds. Standing there she could feel him shine so bright\nthat she actually squinted her eyes. And that's where she found her purpose, she would stalk the darkness and deal \nwith threats and obstacles there while her brother sought the light.\n<h5>Against the troupe</h5>\nThe years that followed did see life change for them all. Lemuen who'd been paralyzed below her waist was recovering \nunder the patient care of Fiest and continued to train Shimarin in the art of sniping. Shimarin chose to become part\nof a crew to persue bigger contracts, however that ended when \n${r.linkNpc(i.ID_VERRADER,"one member of the crew")} betrayed the others for personal gain,\nonly to find he himself had been deluded by their 'fixer' - what resulted, therefore, was all of them drowing in \nmagma, except Shimarin, who was covering them from a distance. Of the rest of the crew, only the traitor survived, \ngaining nightblood at exactly that point. This was something Shimarin learnt much later though, however she never \nagain would work in a crew. During this time Mostima had started to go missing for large amounts of time, and only \nto her sister would she confide the details of her 'journeys'. Shimarin couldn't help but notice that her mood had \nstablised and improved considerably, and she seemed to have gained expertise in time magic after her frequent \ntravels - though she didn't pry into more details. A few years later, Lemuen to passed away from her nightblood \nleading to great loss of morale in the bunker. Yet Mostima had done something before the death, and Rin \ncould feel something was off, the death 'felt' unlike the others she'd seen. A few years after her \ndeath, they were joined by a tiefling, who remained in hiding from the demons in the castle. The kindest person \nthey'd ever met, he had taken a liking to her, despite herself. As life looked a bit better, in the years to come, \nshe took many high profile contracts - and didn't ask questions. Some even came from almost mythic figures - like\nonce when the troupe ${r.linkNpc(i.ID_MOUTHPIECE,"Mouthpiece")} himself asked her to kill a certain Vulpine soul weaver. <br/>   \nIn all her missions\nshe always followed one unsaid rule - after killing the target, she could also kill any one person near them of her \nchoice. That prevented her from being a mere pawn, a mere tool - and drove away a lot of petty schemers from her who\nregarded her as too much of a wildcard while attracting clients who wanted people dead for personal reasons but\nweren't strong enough to challenge them. For around such people, it was unlikely she'd want to kill a passer-by. \nThese were the clients she favoured, for their targets were almost always people the world was better off without.\nUnfortunately, this tradition of hers backfired badly one day - she was told by the mouthpiece that a group of people might \nbe coming from the gardens, and may be accompanied by some members of the troupe. If a drow priestess was among them,\nshe was to die. She did die, yet Rin found another drow - probably still a teenager, with them. A member of the \ntroupe, having failed a mission - Rin didn't envy her and wasn't surprised when she asked her captors to kill her. \nOf course, they refused, but then they didn't know the castle, didn't know the troupe, the mouthpiece. Better by her \nbullet then at their hands, better in Preservation than in Ruin, she thought, as she fired again. And so, her last \nthoughts were of peace, of being re-assured by the hulking barbarian. She didn't even know when she died. Enviable, \nRin thought coldly, as she packed up and went back home. What she didn't know was that she had disrupted one of the \nmajor schemes of the troupe and triggered of a cycle of vendetta's and mutual destruction.<br/>\nThe next day, the demons had captured the tiefling - and planned to burn him in a pyre of hellfire for some made up\ncrimes. Given how stupid demons at this level were, Rin had no doubt they had been assisted, and little doubt as to \nby whom. Well, she was not stupid enough to go into an execution ground, but she wouldn't let him suffer in hellfire. \nStrangely enough, and almost as a mockery, she'd also got another assassination contract from the troupe - a junior\nhad delivered it this time - that she was to assassinate the executioner. But then something changed all the plans \n- the same group of adventurers (she'd helped them earlier that day), had taken it upon themselves to resuce the guy.\nShe was excited, and for once in a very long time dared to hope as she covered them as they escaped. Sadly, the \ncastle was not a place where hope can live, and with a deep horror, she realized that the party was cornered - and \nby none other than ${r.linkNpc(i.ID_BAPHOMET,"Baphomet")} himself. There was no way out of this, and so she did what she had planned before, and\nput a bullet into her friend. Something which, by the tears in his eyes, he knew was coming.<br/>\nAfter that, she decided to bite back at the troupe by taking out their most valuable piece, someone she knew they \nhad big plans for - ${r.linkNpc(i.ID_LUCIAN,"The Solitaire")}. Things didn't go as planned however,\nand instead she ended up in the fortress of the inquisitors, gaining an Atium spike and a Steel spike powered by \nVerrader's soul followed by heading right past midnight into a showdown that involved more myths and legends than \nshe could even dream of - all the Guardians with Preservation himself in the mists, eight senior inquisitors moved\nby Ruin himself (who was also moving her - despite her best efforts), \n${r.linkNpc(i.ID_LOGOS,"The Playwright")} and the Mouthpiece and lastly \n${r.linkNpc(i.ID_SANGUINE_ARCH,"The SanguineArch")} along with two other higher vampires. Finally, \nthere was one other - a single Honorspren who stood next to her, waiting, and had gone unnoticed by all...  \n`;t.setupCharacterCards=function(){var e,t,a,c,u,m,p,g,f,w,I,y,v,b,D,_,A,S,k,T,C,N,R,M,x,E,P,H,L,G,$,O,F,B,V,W,U,z,Y,K,j,q,Z,J,Q,X,ee,te,ae,ne,ie,se,re,oe,le,he,de,ce;r.loadStaticElements(),new r({id:i.ID_LUCIAN,name:"Lucian",tokenName:"lucian_norm",arc:1,campaign:1,age:210,gender:"M",tags:["From | Ruin","Allegiance | Ruin / ???","Race | Feline",`Class | ${n.Card.verbose("Echo Knight")} Fighter`,`Class | ${n.Card.verbose("Assassin")} Rogue`,`Class | ${n.Card.verbose("Hexblade")} Warlock`,"Nightblood | Ominous Melody",`Aberrant-Fused ${n.Card.verbose("(Tragodia)")}`,"<i>He who quiets</i>","CR | 19"],summary:null!==(e=o.get("Lucian"))&&void 0!==e?e:"???",description:"",altImagePaths:new Map([["Phantom","lucian_norm"],["Solitaire","lucian_mad"]])}),new r({id:i.ID_EBENEZAR,name:"Ebenezar",tokenName:"ebenezar",campaign:1,arc:1,age:750,gender:"M",tags:["From | Materia / Preservation / Ruin","Race | Human",`Class | ${n.Card.verbose("Divination")} Wizard`,"Lich","Deceased","Scholar","CR | 22"],summary:null!==(t=o.get("Ebenezar"))&&void 0!==t?t:"???",description:""}),new r({id:i.ID_CAELYNN,name:"Caelynn Nightbreeze",tokenName:"caelynn",arc:1,campaign:1,age:4560,gender:"F",tags:["From | Materia / Preservation","Allegiance | Preservation","Race | Half-Elf",`Class | Druid ${n.Card.verbose("(Circle of Dreams)")}`,"Guardian of Life","Watcher","Atium Savant","CR | 25"],summary:null!==(a=o.get("Caelynn"))&&void 0!==a?a:"???",description:l,personalityTags:new Map([[s.Industrious,4],[s.Confident,3],[s.Outdoorsman,3],[s.Kind,2],[s.Optimist,2],[s.Ascetic,2],[s.Stern,1],[s.Abrasive,1],[s.Bisexual,1]])}),new r({name:"Lesley Aeternus",id:i.ID_LESLEY,tokenName:"lesley",campaign:1,arc:1,age:2860,gender:"F",tags:["From | Shadowfell / Materia / Preservation","Allegiance | Preservation","Race | Higher Vampire","Time Command",`Class | ${n.Card.verbose("Chronurgy")} Wizard`,`Class | ${n.Card.verbose("Knowledge")} Cleric`,"Projector","CR | 18 / 24"],summary:null!==(c=o.get("Lesley"))&&void 0!==c?c:"???",description:h,personalityTags:new Map([[s["Recovering Addict"],5],[s.Bibliophile,3],[s.Recluse,3],[s.Lazy,2],[s.Depressive,1],[s["Guilt-ridden"],1],[s.Introvert,1]])}),new r({id:i.ID_IRENE,name:"Irene",tokenName:"irene",campaign:1,arc:1,age:1390,gender:"F",tags:["From | Air / Water / Preservation","Allegiance | Preservation","Race | Air Genasi",`Class | ${n.Card.verbose("Gunslinger")} Fighter`,`Class | ${n.Card.verbose("Storm")} Sorcerer`,`Class | ${n.Card.verbose("Tempest")} Cleric`,"Inquisitor","CR | 14"],summary:null!==(u=o.get("Irene"))&&void 0!==u?u:"???",description:""}),new r({id:i.ID_LING,name:"Ling",tokenName:"ling_garden",campaign:1,arc:1,age:"",gender:"F",tags:["From | ??? / Preservation",`Race | Titan ${n.Card.verbose("&times; Blue Dragon")}`,`Class | ${n.Card.verbose("Draconic")} Sorcerer`,`Primordial | Outsider ${n.Card.verbose("(Fragment of ???)")}`,"Guardian of Diplomacy","Lighthouse Keeper","CR | 19 / 27"],summary:null!==(m=o.get("Ling"))&&void 0!==m?m:"???",description:"",altImagePaths:new Map([["Lighthouse Keeper","ling_garden"],["Shrine Maiden","ling_sui"]])}),new r({name:"Dave Ruhl",id:i.ID_DAVE_RUHL,tokenName:"dave",campaign:1,arc:1,age:2500,gender:"M",tags:["From | Innovation / Preservation","Race | Warforged",`Class | ${n.Card.verbose("Samurai")} Fighter`,"Defender","Deceased","CR | 13"],summary:null!==(p=o.get("Dave"))&&void 0!==p?p:"???",description:""}),new r({name:"Ulrich Mistcloak",id:i.ID_ULRICH,tokenName:"ulrich",campaign:1,arc:1,age:1020,gender:"M",tags:["From | Materia / Preservation","Race | Human",`Class | ${n.Card.verbose("Forge")} Cleric`,"Scholar","CR | 7"],summary:null!==(g=o.get("Ulrich"))&&void 0!==g?g:"???",description:""}),new r({name:"Lia Mistcloak",id:i.ID_LIA,tokenName:"lia",campaign:1,arc:1,age:1280,gender:"F",tags:["From | Feywild / Preservation","Allegiance | Preservation","Race | Elf",`Class | ${n.Card.verbose("Samurai")} Fighter`,"Watcher","CR | 9"],summary:null!==(f=o.get("Lia"))&&void 0!==f?f:"???",description:""}),new r({id:i.ID_CONLEY,name:"Conley",tokenName:"conley",campaign:1,arc:1,age:210,gender:"M",tags:["From | Fire / Preservation","Race | Fire Genasi",`Class | ${n.Card.verbose("Eloquence")} Bard`,"Negotiator","CR | 7"],summary:null!==(w=o.get("Conley"))&&void 0!==w?w:"???",description:""}),new r({name:"Vahareth Tsav Anat",id:i.ID_VAHARETH,tokenName:"g_life",campaign:1,arc:1,age:"50K+",gender:"M",tags:["From | Materia / Preservation","Allegiance | Preservation","Race | Kalashtar","Class | Druid","Guardian of Life","Inspector","'Retired'","CR | 26"],summary:null!==(I=o.get("Vahareth"))&&void 0!==I?I:"???",description:""}),new r({name:"The Guardian of Order",id:i.ID_G_ORDER,tokenName:"g_order",campaign:1,arc:1,age:"50K+",gender:"M",tags:["From | Shadowfell / Preservation","Allegiance | Preservation","Race | Shadar-Kai",`Class | ${n.Card.verbose("Hexblade")} Warlock`,`Class | ${n.Card.verbose("Devotion")} Paladin`,"Guardian of Order","Inquisitor","Deceased","CR | 26"],summary:null!==(y=o.get("GOrder"))&&void 0!==y?y:"???",description:""}),new r({name:"The Playwright",id:i.ID_LOGOS,tokenName:"logos_normal",campaign:1,arc:2,age:"50K+",gender:"M",tags:["From | Ruin","Race | Banshee (Demon)","Greater Demon Lord","Domain | 01:40 to 01:56",`Aberrant-Fused ${n.Card.verbose("(Tragodia)")}`,"CR | 30"],summary:null!==(v=o.get("Logos"))&&void 0!==v?v:"???",description:"",altImagePaths:new Map([["Youthful Writer","logos_normal"],["Ancient Lord","logos_banshee"]])}),new r({id:i.ID_MOSTIMA,name:"Mostima",tokenName:"mostima",campaign:1,arc:2,age:152,gender:"F",tags:["Plane-hopper","From | Ruin","Race | Aasimar &times; Tiefling",`Class | ${n.Card.verbose("Clockwork Soul")} Sor-lock`,`Class | ${n.Card.verbose("Chronurgy")} Wizard`,"Nightblood | Shattered Time","'Fallen Saintess'","CR | 15 / 25"],summary:null!==(b=o.get("Mostima"))&&void 0!==b?b:"???",description:"",altImagePaths:new Map([["Messenger","mostima"],["Saintess","mostima_saint"]])}),new r({id:i.ID_SHIMA_KEN,name:"Ken Shima",tokenName:"shimaken",campaign:1,arc:2,age:72,gender:"M",tags:["Deceased","From | Ruin","Allegiance | Preservation","Race | Human",`Class | ${n.Card.verbose("Battlemaster")} Fighter`,`Class | ${n.Card.verbose("Bondsmith")} Paladin`,"Lerasium Savant","CR | ?"],summary:null!==(D=o.get("Shimaken"))&&void 0!==D?D:"???",description:""}),new r({id:i.ID_SHIMA_RIN,name:"Rin Shima",tokenName:"shimarin",campaign:1,arc:2,age:81,gender:"F",tags:["Deceased","From | Ruin","Allegiance | Ruin / Preservation","Race | Human",`Class | ${n.Card.verbose("Assassin")} Rogue`,`Class | ${n.Card.verbose("Gunslinger")} Fighter`,"CR | 13"],summary:null!==(_=o.get("Shimarin"))&&void 0!==_?_:"???",description:d,personalityTags:new Map([[s.Confident,3],[s.Bloodlust,3],[s.Pessimist,2],[s.Quiet,2],[s.Ascetic,2],[s.Stern,1],[s.Kind,1]])}),new r({id:i.ID_VERRADER,name:"Verrader",tokenName:"verrader",campaign:1,arc:2,age:31,gender:"M",tags:["Deceased","From | Ruin","Race | Human",`Class | ${n.Card.verbose("Eloquence")} Bard`,`Class | ${n.Card.verbose("Elemental Bloodline")} Sorcerer`,"Nightblood | Magma","Zinc Savant","Copper Savant","CR | 10"],summary:null!==(A=o.get("Verrader"))&&void 0!==A?A:"???",description:""}),new r({id:i.ID_FIEST,name:"Fiest",tokenName:"fiest",campaign:1,arc:2,age:80,gender:"M",tags:["Deceased","From | Ruin","Race | Human","Class | Artificer","CR | 9"],summary:null!==(S=o.get("Fiest"))&&void 0!==S?S:"???",description:""}),new r({id:i.ID_MOUTHPIECE,name:"Mouthpiece",tokenName:"ahrendts",campaign:1,arc:2,age:"",gender:"M",tags:["Deceased","From | Materia / Shadowfell / Ruin","Allegiance | Ruin &times; Outsiders",`Race | Titan ${n.Card.verbose("&times; Aberration")}`,`Primordial | Outsider ${n.Card.verbose("(Curse)")}`,"CR | 23"],summary:null!==(k=o.get("Mouthpiece"))&&void 0!==k?k:"???",description:""}),new r({id:i.ID_SANGUINE_ARCH,name:"The SanguineArch",tokenName:"sarch_m",campaign:1,arc:2,age:"",gender:"-",tags:["From | Shadowfell",`Race | Titan ${n.Card.verbose("&times; Vampire")}`,"Primordial | Shardic","The Original","Life Command","CR | 29"],summary:null!==(T=o.get("SanguineArch"))&&void 0!==T?T:"???",description:"",altImagePaths:new Map([["Male","sarch_m"],["Female","sarch_f"]])}),new r({id:i.ID_DECROA_SAL,name:"Decroa Sal",tokenName:"decroa",campaign:1,arc:2,age:"2620",gender:"F",tags:["From | Shadowfell","Race | Higher Vampire","Crystal Command","CR | 23"],summary:null!==(C=o.get("Decroa"))&&void 0!==C?C:"???",description:""}),new r({id:i.ID_BAPHOMET,name:"Baphomet",tokenName:"baphomet",campaign:1,arc:2,age:"20K+",gender:"M",tags:["From | Ruin","Race | Demon","Demon Lord","Domain | 20:00 to 21:00","CR | 23"],summary:null!==(N=o.get("Baphomet"))&&void 0!==N?N:"???",description:""}),new r({name:"Kjeragandr",id:i.ID_KJERA,tokenName:"g_mag_stone",campaign:1,arc:2,age:"",gender:"F",tags:["From | Stone / Preservation",`Race | Titan ${n.Card.verbose("&times; Serpentine")}`,`Class | Spellcaster ${n.Card.verbose("(All)")}`,"Primordial | Shardic","Guardian of Magic","Atium Savant","CR | 30"],summary:null!==(R=o.get("Kjera"))&&void 0!==R?R:"???",description:"",altImagePaths:new Map([["Lithic","g_mag_stone"],["Humanoid","g_mag_human"]])}),new r({id:i.ID_G_DEFENSE,name:"The Guardian of Defense",tokenName:"g_def",campaign:1,arc:2,age:"40K+",gender:"-",tags:["From | Innovation / Preservation","Allegiance | Preservation","Race | Warforged &times; Aasimar","Class | Fighter","Guardian of Defense","Atium Savant","'Saint'","CR | 27"],summary:null!==(M=o.get("GDef"))&&void 0!==M?M:"???",description:""}),new r({name:"Othello The Traitor",id:i.ID_TRAITOR_OTHELLO,tokenName:"othello",campaign:1,arc:2,age:"5020",gender:"M",tags:["From | Materia / Preservation / Ruin","Allegiance | Preservation (?)","Race | Human","Class | Fighter","Class | Barbarian","Class | Paladin","Apprentice Guardian of Defense","<i>Bearer of Agonies</i>","CR | 20"],summary:null!==(x=o.get("Othello"))&&void 0!==x?x:"???",description:""}),new r({id:i.ID_MANDY,name:"Mandragora",tokenName:"mandy",campaign:1,arc:2,age:"16",gender:"F",tags:["From | Materia / Ruin","Race | Ursine","Nightblood | Stoneward","CR | 16"],summary:null!==(E=o.get("Mandy"))&&void 0!==E?E:"???",description:""}),new r({id:i.ID_GEN,name:"Gen",tokenName:"gen",campaign:1,arc:2,age:"69",gender:"M",tags:["From | Materia / Ruin / Devotion","Race | Human",`Class | ${n.Card.verbose("Illusion")} Wizard`,"Class | Artificer","CR | 17"],summary:null!==(P=o.get("Gen"))&&void 0!==P?P:"???",description:"",altImagePaths:new Map([["child","gen"]])}),new r({id:i.ID_MUMU,name:"Muelsyse",tokenName:"muelsyse",campaign:1,arc:2,age:"343",gender:"F",tags:["From | Water / Innovation","Race | High-Elf","Class | Artificer","Director of ??? at ???","CR | 25"],summary:null!==(H=o.get("Muelsyse"))&&void 0!==H?H:"???",description:""}),new r({id:i.ID_SHAMARE,name:"Shamare",tokenName:"shamare",campaign:1,arc:2,age:"71",gender:"F",tags:["From | Ruin","Race | Vulpine","Warlock","Nightblood | Voodoo","Soul Weaver","CR | 12"],summary:null!==(L=o.get("Shamare"))&&void 0!==L?L:"???",description:""}),new r({id:i.ID_AMAIA,name:"Amaia",tokenName:"amaia",campaign:1,arc:2,age:"",gender:"-",tags:["Deceased (Merged)","From | Materia / Water","Race | Human","Aberrant-fused","Core of the Many","CR | ?"],summary:null!==(G=o.get("Amaia"))&&void 0!==G?G:"???",description:""}),new r({id:i.ID_LEMUEN,name:"Lemuen",tokenName:"lemuen",campaign:1,arc:2,age:"124",gender:"F",tags:["Deceased","From | Ruin","Race | Aasimar",`Class | ${n.Card.verbose("Gunslinger")} Fighter`,`Class | ${n.Card.verbose("Assassin")} Rogue`,"'Saintess'","Nightblood | Neural Link","CR | 14"],summary:null!==($=o.get("Lemuen"))&&void 0!==$?$:"???",description:""}),new r({name:"Eugrud the Vanquisher",id:i.ID_EUGRUD,tokenName:"eugrud",campaign:1,arc:2,age:"133",gender:"M",tags:["From | Ruin","Race | Orc",`Class | ${n.Card.verbose("Champion")} Fighter`,"Class | Barbarian","Pewter Savant","CR | 8"],summary:null!==(O=o.get("Eugrud"))&&void 0!==O?O:"???",description:""}),new r({name:"Andoain 'The Martyr'",id:i.ID_ANDOAIN,tokenName:"Andoain",campaign:2,arc:1,age:"221",gender:"M",tags:["From | ? / Materia","Race | Aasimar",`Class | ${n.Card.verbose("Gunslinger")} Fighter`,`Class | ${n.Card.verbose("Hexblade")} Warlock`,`Class | ${n.Card.verbose("War")} Cleric`,"'Saint'","CR | 21"],summary:null!==(F=o.get("Andoain"))&&void 0!==F?F:"???",description:""}),new r({id:i.ID_DAWN,name:"Dawn",tokenName:"Dawn",campaign:2,arc:1,age:"32 (405)",gender:"F",tags:["From | Materia / Devotion","Race | Human"],summary:null!==(B=o.get("Dawn"))&&void 0!==B?B:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_ANDRI,name:"Andri",tokenName:"Andri",campaign:2,arc:1,age:37,gender:"M",tags:[],summary:null!==(V=o.get("Andri"))&&void 0!==V?V:"???",description:""}),new r({id:i.ID_ATHLON,name:"Athlon",tokenName:"Athlon",campaign:2,arc:1,age:58,gender:"M",tags:[],summary:null!==(W=o.get("Athlon"))&&void 0!==W?W:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_BJORN,name:"Bjorn",tokenName:"Bjorn",campaign:2,arc:1,age:35,gender:"M",tags:[],summary:null!==(U=o.get("Bjorn"))&&void 0!==U?U:"???",description:""}),new r({id:i.ID_CECELIA,name:"Cecilia",tokenName:"Cecilia",campaign:2,arc:1,age:11,gender:"F",tags:[],summary:null!==(z=o.get("Cecilia"))&&void 0!==z?z:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_COROTO,name:"Coroto",tokenName:"Coroto",campaign:2,arc:1,age:54,gender:"M",tags:[],summary:null!==(Y=o.get("Coroto"))&&void 0!==Y?Y:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_ELYSIUM,name:"Elysium",tokenName:"Elysium",campaign:2,arc:1,age:33,gender:"M",tags:[],summary:null!==(K=o.get("Elysium"))&&void 0!==K?K:"???",description:""}),new r({id:i.ID_ERICA,name:"Erica",tokenName:"Erica",campaign:2,arc:1,age:50,gender:"F",tags:[],summary:null!==(j=o.get("Erica"))&&void 0!==j?j:"???",description:""}),new r({id:i.ID_GENEFE,name:"Genefe",tokenName:"Genefe",campaign:2,arc:1,age:28,gender:"F",tags:[],summary:null!==(q=o.get("Genefe"))&&void 0!==q?q:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_HAV,name:"Hav",tokenName:"Hav",campaign:2,arc:1,age:47,gender:"M",tags:[],summary:null!==(Z=o.get("Hav"))&&void 0!==Z?Z:"???",description:""}),new r({id:i.ID_HINA,name:"Hina",tokenName:"Hina",campaign:2,arc:1,age:14,gender:"F",tags:[],summary:null!==(J=o.get("Hina"))&&void 0!==J?J:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_INGRID,name:"Ingrid",tokenName:"Ingrid",campaign:2,arc:1,age:24,gender:"F",tags:[],summary:null!==(Q=o.get("Ingrid"))&&void 0!==Q?Q:"???",description:""}),new r({id:i.ID_IONA,name:"Iona",tokenName:"Iona",campaign:2,arc:1,age:13,gender:"F",tags:[],summary:null!==(X=o.get("Iona"))&&void 0!==X?X:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_JAYE,name:"Jaye",tokenName:"Jaye",campaign:2,arc:1,age:26,gender:"M",tags:[],summary:null!==(ee=o.get("Jaye"))&&void 0!==ee?ee:"???",description:""}),new r({id:i.ID_JORDI,name:"Jordi",tokenName:"Jordi",campaign:2,arc:1,age:23,gender:"M",tags:[],summary:null!==(te=o.get("Jordi"))&&void 0!==te?te:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_KASTOR,name:"Kastor",tokenName:"Kastor",campaign:2,arc:1,age:26,gender:"M",tags:[],summary:null!==(ae=o.get("Kastor"))&&void 0!==ae?ae:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_PETRA,name:"Petra",tokenName:"Petra",campaign:2,arc:1,age:84,gender:"F",tags:[],summary:null!==(ne=o.get("Petra"))&&void 0!==ne?ne:"???",description:""}),new r({id:i.ID_ROBERTA,name:"Roberta",tokenName:"Roberta",campaign:2,arc:1,age:25,gender:"F",tags:[],summary:null!==(ie=o.get("Roberta"))&&void 0!==ie?ie:"???",description:""}),new r({id:i.ID_SASHA,name:"Sasha",tokenName:"Sasha",campaign:2,arc:1,age:13,gender:"M",tags:[],summary:null!==(se=o.get("Sasha"))&&void 0!==se?se:"???",description:""}),new r({id:i.ID_SYBILLA,name:"Sybilla",tokenName:"Sybilla",campaign:2,arc:1,age:34,gender:"F",tags:[],summary:null!==(re=o.get("Sybilla"))&&void 0!==re?re:"???",description:""}),new r({id:i.ID_TOMASA,name:"Tomasa",tokenName:"Tomasa",campaign:2,arc:1,age:27,gender:"F",tags:[],summary:null!==(oe=o.get("Tomasa"))&&void 0!==oe?oe:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_VERNA,name:"Verna",tokenName:"Verna",campaign:2,arc:1,age:24,gender:"F",tags:[],summary:null!==(le=o.get("Verna"))&&void 0!==le?le:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_VITACIA,name:"Vitacia",tokenName:"Vitacia",campaign:2,arc:1,age:25,gender:"F",tags:[],summary:null!==(he=o.get("Vitacia"))&&void 0!==he?he:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_YUKI,name:"Yuki",tokenName:"Yuki",campaign:2,arc:1,age:27,gender:"M",tags:[],summary:null!==(de=o.get("Yuki"))&&void 0!==de?de:"???",description:"",personalityTags:new Map([])}),new r({id:i.ID_EZELL,name:"Ezell Pastore",tokenName:"Ezell",campaign:2,arc:1,age:22,gender:"M",tags:[],summary:null!==(ce=o.get("Ezell"))&&void 0!==ce?ce:"???",description:"",personalityTags:new Map([])})}},264:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.setupCountries=void 0,function(e){e[e["Ghost Town"]=0]="Ghost Town",e[e.Ruins=1]="Ruins",e[e.Undefended=2]="Undefended",e[e.Open=3]="Open",e[e.Walled=4]="Walled",e[e.Fortified=5]="Fortified",e[e.Impregnable=6]="Impregnable",e[e.Sprawling=7]="Sprawling",e[e.Organized=8]="Organized",e[e["Space Crunch"]=9]="Space Crunch",e[e.Cluttered=10]="Cluttered",e[e["Merchant Guilds"]=11]="Merchant Guilds",e[e["Central Market"]=12]="Central Market",e[e["Commercial Hub"]=13]="Commercial Hub",e[e["Trade Hotspot"]=14]="Trade Hotspot",e[e["Academic Focus"]=15]="Academic Focus",e[e["Research Centre"]=16]="Research Centre",e[e["Craftsman's Guilds"]=17]="Craftsman's Guilds",e[e["Industrial Zone"]=18]="Industrial Zone",e[e["Mining Ops"]=19]="Mining Ops",e[e["Mafia Control"]=20]="Mafia Control",e[e.Lawless=21]="Lawless",e[e["Efficient Police"]=22]="Efficient Police",e[e["Military Curfew"]=23]="Military Curfew",e[e.Unhygienic=24]="Unhygienic",e[e["Sewage System"]=25]="Sewage System",e[e["Fresh Water"]=26]="Fresh Water",e[e["Performing Artists"]=27]="Performing Artists",e[e["Cultural Hub"]=28]="Cultural Hub",e[e["Tourist Hotspot"]=29]="Tourist Hotspot",e[e.Slums=30]="Slums",e[e.Underground=31]="Underground",e[e.Underworld=32]="Underworld",e[e["Organized Crime"]=33]="Organized Crime",e[e.Harbor=34]="Harbor",e[e.Seaport=35]="Seaport",e[e.Greens=36]="Greens",e[e["Entertainment Infra"]=37]="Entertainment Infra",e[e["Medical Infra"]=38]="Medical Infra",e[e.Charming=39]="Charming",e[e.Breathtaking=40]="Breathtaking",e[e["Mage Presence"]=41]="Mage Presence",e[e["Holy Sites"]=42]="Holy Sites"}(a||(a={}));class n{constructor(e){if(this.$myName=null,this.$myDesc=null,null===n.$countryNames)throw new Error("Static elements not loaded");if(this.planet=e.planet,this.name=e.name,this.fullName=e.fullName,this.capital=e.capital,this.leader=e.leader,this.government=e.government,this.population=e.population,this.primaryCulture=e.primaryCulture,this.area=e.area,this.capitalPopulation=e.capitalPopulation,this.capitalTemperature=e.capitalTemperature,this.capitalElevation=e.capitalElevation,this.races=e.races,this.exoticRaces=e.exoticRaces,this.exclusiveRaces=e.exclusiveRaces,this.description=e.description,this.tags=e.tags,this.capitalTags=e.capitalTags,this.capitalSummary=e.capitalSummary,this.leaderDescription=e.leaderDescription,this.index=`${this.planet}|${this.name}`,n.countriesIndex.has(this.index))throw new Error("Duplicate country");n.countriesIndex.set(this.index,this),this.$myName=$(`<div class='country_name' data-index-key='${this.index}'>${this.name}</div>`),this.$myName.appendTo(n.$countryNames),this.$myDesc=this.generateDOM(),this.$myDesc.hide().appendTo(n.$countryDesc)}static loadStaticElements(){this.$countryNames=$(".country_names"),this.$countryDesc=$(".country_desc"),this.$countryNames.on("click",".country_name:not(.active)",(function(){const e=$(this).data("indexKey");n.countriesIndex.get(e).showCountry()}))}showCountry(){n.$countryDesc.children().hide(),n.$countryNames.children().removeClass("active"),this.$myName.addClass("active"),this.$myDesc.show()}generateDOM(){return $(`\n        <div class="country">\n            <div class="country_data country_card">\n                 <h5>Country</h5>\n                 <table>\n                    <tbody>\n                        <tr><td>Planet</td><td>${this.planet}</td></tr>\n                        <tr><td>Name</td><td>${this.fullName}</td></tr>\n                        <tr><td>Area</td><td>${this.area}K km<sup>2</sup></td></tr>\n                        <tr><td>Population</td><td>${this.population}</td></tr>\n                        <tr><td>Government</td><td>${this.government}</td></tr>\n                        <tr><td>Culture</td><td>${this.primaryCulture}</td></tr>\n                    </tbody>\n                </table>\n                <div class="tags">${this.tags.map((e=>`<span class="tag">${e}</span>`)).join("")}</div>\n            </div>\n            <div class="capital_data country_card">\n                <h5>Capital</h5>\n                <table>\n                    <tbody>\n                        <tr><td>Name</td><td>${this.capital}</td></tr>\n                        <tr><td>Population</td><td>${this.capitalPopulation}</td></tr>\n                        <tr><td>Elevation</td><td>${this.capitalElevation}</td></tr>\n                        <tr><td>Temperature</td><td>${this.capitalTemperature}</td></tr>\n                    </tbody>\n                </table>\n                <div class="tags">${Array.from(this.capitalTags,(([e,t])=>`<span class="tag leveled t${t}">${a[e]}</span>`)).join("")}\n                </div>\n            </div>\n            <div class="leader_data country_card">\n                <h5>Leader</h5>\n                <table>\n                    <tbody>\n                        <tr><td>Name</td><td>${this.leader?this.leader:"None"} \n                    </tbody>\n                </table>\n                <div class="card_info">${this.leaderDescription}</div>\n            </div>\n            <div class="desc">\n                ${this.description}\n                <h5>About the Capital</h5>\n                <div class="capital_info">${this.capitalSummary}</div>\n                <h5>Racial Spread</h5>\n                <div class="racial_info">\n                    <div>Mainly inhabited by ${this.races.size>0?Array.from(this.races,(([e,t])=>`${e} (${Math.round(100*t)/100}%)`)).join(", "):"?"}.</div>\n                    ${Array.isArray(this.exoticRaces)&&this.exoticRaces.length?`<div>${this.exoticRaces.join(", ")} can notably be found here.</div>`:""}\n                    ${Array.isArray(this.exclusiveRaces)&&this.exclusiveRaces.length?`<div>${this.exclusiveRaces.join(", ")} only come from here.</div>`:""}\n                </div>\n            </div>\n        </div>`)}}n.countriesIndex=new Map,n.$countryNames=null,n.$countryDesc=null,t.setupCountries=function(){n.loadStaticElements(),new n({planet:"Terra Prima",name:"Veteres",fullName:"Regnum Veteres",capital:"Ortus",area:106,population:"2.6M",government:"Emperor / Senate",primaryCulture:"Roma",leader:"Rex Augustus IV",tags:[],races:new Map([["Humans",60.8],["Half-Elves",30.5],["Elves",8.7]]),exoticRaces:["Aasimars","Eladrin","Vampires"],exclusiveRaces:[],capitalPopulation:"218K",capitalElevation:"4.2m",capitalTemperature:"8&#8451;",capitalTags:new Map([[a.Organized,6],[a["Sewage System"],6],[a["Tourist Hotspot"],5],[a["Entertainment Infra"],5],[a["Trade Hotspot"],4],[a.Seaport,4],[a["Fresh Water"],4],[a.Sprawling,3],[a["Efficient Police"],3],[a.Charming,3],[a["Academic Focus"],3],[a["Craftsman's Guilds"],2],[a.Walled,2],[a.Greens,2],[a["Medical Infra"],1],[a.Slums,1]]),capitalSummary:"\n                The city where modern civilization is began following the darkness. A city that has seen all. Earliest remaining \n                written records of all sentient races and cultures can be traced here. For a long time, this was the \n                capital of an empire that sprawled the world, and even now remains the single most important city of all.\n                What secrets do its archives hold?",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Rycerz",fullName:"Holy Empire of Rycerz",capital:"Kiragg",area:114,population:"6.9M",government:"Feudal Empire",primaryCulture:"Pegaz",leader:"Sir Enciodas Silverash",tags:[],races:new Map([["Humans",56],["Shifters[Equines]",25],["Half-Orcs",10],["DragonBorn",3],["Dwarves",3],["Half-Elves",2],["Elves",1]]),exoticRaces:["Orcs","Earth Genasi"],exclusiveRaces:["Centaurs"],capitalPopulation:"307K",capitalElevation:"5480m",capitalTemperature:"-24&#8451;",capitalTags:new Map([[a.Impregnable,6],[a.Breathtaking,6],[a["Holy Sites"],5],[a["Mining Ops"],4],[a.Organized,3],[a["Fresh Water"],3],[a["Sewage System"],3],[a["Industrial Zone"],3],[a["Mage Presence"],3],[a["Space Crunch"],2],[a["Tourist Hotspot"],2],[a["Research Centre"],2],[a["Organized Crime"],2],[a["Efficient Police"],1],[a["Medical Infra"],1],[a.Underground,1]]),capitalSummary:"\n                Rumoured to have been made by a Goddess, this city, 'purchased' by Rycerz in the times past, is a vast \n                cave system within one of the worlds topmost peaks. Other than rather low atmospheric pressure, the\n                caves, beyond all reason, are perfect for life. Hot springs provide fresh water and maintain temperature\n                while certain bluish crystals provide light strangely like that of the sun.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Ursus",fullName:"Eternal Tsardom of Ursus",capital:"Ivangrad",area:241,population:"3.1M",government:"Tsardom",primaryCulture:"Rus",leader:"Tsar Ivanovich Kashchey",tags:[],races:new Map([["Humans",60],["Shifters[Ursine]",36],["Dwarves",2],["Tieflings",1],["DragonBorn",1]]),exoticRaces:["Goliaths","Demons","Minotaurs","Hobgoblins","Yuan-ti"],exclusiveRaces:["Bugbears"],capitalPopulation:"121K",capitalElevation:"202m",capitalTemperature:"-3&#8451;",capitalTags:new Map([[a["Military Curfew"],6],[a["Organized Crime"],4],[a.Underworld,4],[a["Fresh Water"],3],[a["Academic Focus"],3],[a["Mage Presence"],3],[a["Cultural Hub"],3],[a.Fortified,2],[a.Organized,2],[a["Sewage System"],1],[a.Greens,1],[a.Slums,1]]),capitalSummary:"\n                A dangerous city at the centre of a dangerous country. At its very centre sits a dynasty that predates \n                the very empire, rumoured to be the soul of Ursus itself. Military forces crush dissenters and criminals \n                alike with an iron hand. Right underneath their gazes crime lords operating throughout Terra flourish. \n                And yet, this tyranny is home to many a genius incomparable...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Farando",fullName:"Farando Shogunate",capital:"Setsujoku",area:68,population:"2.9M",government:"Shogunate",primaryCulture:"Minami",leader:"Meijin Souya",tags:[],races:new Map([["Humans",79],["Halflings",8],["Half-Elves",7],["Dwarves",4],["Elves",2]]),exoticRaces:["Tritons","Air genasi","Githyanki","Kenku","Tabaxi","Sea Elves","Oni"],exclusiveRaces:[],capitalPopulation:"284K",capitalElevation:"9.7m",capitalTemperature:"0&#8451;",capitalTags:new Map([[a.Fortified,5],[a["Mage Presence"],4],[a["Industrial Zone"],4],[a["Commercial Hub"],3],[a["Cultural Hub"],3],[a["Academic Focus"],3],[a["Efficient Police"],2],[a.Organized,2],[a.Charming,2],[a["Medical Infra"],2],[a["Holy Sites"],2],[a.Greens,2],[a["Mafia Control"],1],[a["Sewage System"],1],[a["Fresh Water"],1]]),capitalSummary:"\n                A city that would not die, there was a time when this one city was all that the now-mighty empire had. \n                With the land burning, barbarians at the gates, the first Meijin took command. His will became the city's\n                will - a will of survival, of vengeance. Countless generations have passed since then and the capital has\n                thrived in more ways than one, but even now the people here view the arrival of the mists with reverence...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Sadhvastan",fullName:"Sadhvarajya",capital:"Nagasyaranya",area:62,population:"3.2M",government:"Raj",primaryCulture:"Vedic",leader:"Raja Devavrata",tags:[],races:new Map([["Humans",55],["Shifters[Serpentine]",21],["Shifters[Feline]",15],["Yuan-ti",6],["Aarakocra",2],["Elves",1]]),exoticRaces:["Aasimars","Goblins","Harengon","Githyanki","Kenku","Tortles"],exclusiveRaces:["Loxodon","Githzerai","Leonin"],capitalPopulation:"165K",capitalElevation:"56m",capitalTemperature:"9&#8451;",capitalTags:new Map([[a.Breathtaking,5],[a["Holy Sites"],5],[a.Greens,4],[a["Mage Presence"],4],[a["Craftsman's Guilds"],3],[a["Central Market"],2],[a["Cultural Hub"],2],[a.Slums,2],[a.Open,2],[a["Academic Focus"],2],[a["Medical Infra"],1],[a.Cluttered,1],[a["Fresh Water"],1]]),capitalSummary:"\n                 A city that embodies the free, untamed spirit of the forest. In a world that rapidly changes, this \n                 remains the only mega-city where not a single piece of concrete or steel has gone into the infrastructure.\n                 Buried deep within inaccessible woods, every single building is made from trees, several still alive. \n                 Rumours are that a titanic serpent unseen to man guards and provides shelter to it till this date.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Stahlern",fullName:"Stahlern Imperium",capital:"Julsburg",area:93,population:"4.1M",government:"Reich",primaryCulture:"Hexenfurst",leader:"Kaiser Alexander Siegfried Von Lohengramm",tags:[],races:new Map([["Humans",85],["Dwarves",5],["Half-Elves",7],["Elves",2],["Gnomes",1]]),exoticRaces:["Deep Gnomes","Duergar","Drow","Earth Genasi"],exclusiveRaces:["Warforged"],capitalPopulation:"120K",capitalElevation:"28m",capitalTemperature:"3&#8451;",capitalTags:new Map([[a["Industrial Zone"],6],[a["Mining Ops"],6],[a.Seaport,5],[a["Trade Hotspot"],4],[a["Efficient Police"],4],[a["Academic Focus"],4],[a.Organized,3],[a["Sewage System"],3],[a["Medical Infra"],3],[a.Walled,2]]),capitalSummary:"\n                A heart of steel that pumps a lifeblood of coal and iron throughout the Imperium and outside and the\n                one of the only two places where a ton of copper is cheaper than a ton of apples. Massive factories \n                extract resources at an unbelievable rate, with highly organized industries consuming them to produce\n                components and machines with supernatural efficiency. An uber-efficient police denies any possibility\n                of crime in this steampunk city with their uncanny amount of intel.\n            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Naiyumi",fullName:"Most Serene Republic of Naiyumi",capital:"Gugong",area:117,population:"6.0M",government:"'Republic'",primaryCulture:"Yan",leader:"Captain Yang Wenli",tags:[],races:new Map([["Humans",67],["Halflings",13],["Gnomes",12],["HalfElves",5],["DragonBorn",2],["Elves",1]]),exoticRaces:["Satyr","Owlin","Lizardfolk","Tabaxi","Shifters","Changelings"],exclusiveRaces:[],capitalPopulation:"74K",capitalElevation:"4.2m",capitalTemperature:"22&#8451;",capitalTags:new Map([[a["Military Curfew"],5],[a.Breathtaking,5],[a["Tourist Hotspot"],4],[a.Fortified,3],[a["Academic Focus"],2],[a["Holy Sites"],2],[a.Greens,2],[a["Space Crunch"],1],[a.Cluttered,1]]),capitalSummary:"\n                Rumoured to be the most serene place on Terra and easily the one with the highest per-capita assets, \n                only the most influential or the most loyal of Naiyumi are allowed into this forbidden city. Historically,\n                leaders across generations have cocooned themselves in this secure paradise to shut themselves off to the \n                disturbing realities of the world outside. Word is, that under the current regime, this won't remain \n                capital for long.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Celatum",fullName:"United Provinces of Celatum",capital:"Emberston",area:109,population:"3.2M",government:"Kingdom / Serfdom",primaryCulture:"Neo-Anglo",leader:"Queen Argela",tags:[],races:new Map([["Humans",65],["DragonBorn",15],["Halflings",13],["Half-Orcs",4],["Gnomes",3]]),exoticRaces:["Changelings","Firbolgs","Harengons","Satyrs","Orcs","Vampires"],exclusiveRaces:[],capitalPopulation:"142K",capitalElevation:"40m",capitalTemperature:"0&#8451;",capitalTags:new Map([[a["Medical Infra"],6],[a["Holy Sites"],4],[a.Charming,4],[a["Academic Focus"],4],[a["Craftsman's Guilds"],3],[a["Central Market"],3],[a.Organized,2],[a["Cultural Hub"],2],[a["Entertainment Infra"],2],[a.Open,2],[a.Lawless,1]]),capitalSummary:"\n                A newly founded city by Queen Argela herself. This city has grown to mirror her philosophy and become the\n                greatest center of medical research on Terra. Healers and doctors from here are valued worldwide, for \n                this atmosphere of freedom and comfort along with the best standards of hygiene and beauty cultivates \n                the very best of them. However, for all its happiness, such unrestrained freedom does attract the \n                unscrupulous...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Aegir",fullName:"Duchy of Aegir",capital:"Eldfjalla (pron. Uld-Fia-Tla)",area:67,population:"2.4M",government:"Aristocracy / Matriarchy",primaryCulture:"Skaldic",leader:"Jarl Gladiia",tags:[],races:new Map([["Humans",72],["Half-Elves",14],["Sea-Elves",8],["Shifters[Aquatic]",6]]),exoticRaces:["Triton","Water Genasi","Yuan-ti"],exclusiveRaces:["Seaborn"],capitalPopulation:"17K",capitalElevation:"2071m",capitalTemperature:"-2&#8451;",capitalTags:new Map([[a.Breathtaking,5],[a["Research Centre"],5],[a["Holy Sites"],3],[a.Lawless,2],[a.Undefended,1]]),capitalSummary:"\n                Built upon the warm, fertile and mineral rich lands of an old volcano, this beautiful little city is an \n                oasis in the frigid wastelands around it. Yet life in the middle of nowhere is not for everyone, and so \n                few choose to live here. Fewer still are encouraged to, for those that live here come to be aware of certain\n                secrets best left untold - and know that the scholars that propel the research here do not all come from Terra...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Calentaur",fullName:"Serene Valleys of Calentaur",capital:"Annwyn",area:57,population:"2.1M",government:"Council",primaryCulture:"Foehn",leader:"Lady Shiadhal",tags:[],races:new Map([["Elves",66],["Half-Elves",14],["Humans",10],["Halflings",6],["Gnomes",4]]),exoticRaces:["Eladrin","Satyr","Owlin","Goblins"],exclusiveRaces:["Fairies"],capitalPopulation:"59K",capitalElevation:"271m",capitalTemperature:"8&#8451;",capitalTags:new Map([[a.Breathtaking,6],[a.Impregnable,6],[a.Greens,5],[a["Mafia Control"],5],[a["Military Curfew"],4],[a["Mage Presence"],3],[a.Organized,3],[a.Sprawling,2],[a["Craftsman's Guilds"],2],[a["Cultural Hub"],2],[a["Fresh Water"],2]]),capitalSummary:"\n                A city that bridges between the material plane and the feywild, and yet belongs to neither. The only way \n                to access it is via a perpendicularity of uncertain location. The few non-elves who have been there have\n                been forever enraptured. Depictions describe it as a supernatural city of eternal youth, beauty, health \n                and abundance, of sophisticated marble architecture with lush green vines and vivid flowers. Yet some \n                who've come back do not feel particularly inclined to return there...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Vinland",fullName:"Free Territory of Vinland",capital:"Frihet",area:57,population:"2.1M",government:"Free Territory",primaryCulture:"Rus / Pegaz / Neo-Anglo",leader:"",tags:[],races:new Map([["Humans",70],["Halflings",21],["Gnomes",9]]),exoticRaces:["Firbolgs","Trolls","Goblins","Kobolds"],exclusiveRaces:[],capitalPopulation:"16K",capitalElevation:"56m",capitalTemperature:"4&#8451;",capitalTags:new Map([[a["Central Market"],3],[a["Craftsman's Guilds"],3],[a["Entertainment Infra"],3],[a["Fresh Water"],2],[a.Greens,2],[a.Charming,2],[a.Undefended,1]]),capitalSummary:"\n                Possibly the most unassuming capital of Terra Prima, the city of liberty is open to all, yet doesn't \n                make any bow underneath its grandeur. The lack of authority means no real power is gathered in the \n                capital, and so economy, and life, here is slow and relaxed. Yet the few who do live here wouldn't leave\n                behind the family like atmosphere plus the ease of availability of a capital for anything else in the \n                world.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Altava",fullName:"Wild Hinterlands of Altava",capital:"Sal Venito",area:103,population:"0.3M",government:"Anarchy",primaryCulture:"Liberi / Skaldic / Roma",leader:"",tags:[],races:new Map([["Humans",90],["DragonBorn",5],["Tieflings",4],["Air Genasi",1]]),exoticRaces:["Goblins","Hobgoblins","Tortle"],exclusiveRaces:["Vedalken"],capitalPopulation:"4K",capitalElevation:"56m",capitalTemperature:"4&#8451;",capitalTags:new Map([[a.Ruins,6],[a.Harbor,3],[a.Organized,3],[a["Mafia Control"],3],[a.Underworld,3],[a.Lawless,2],[a["Sewage System"],2],[a["Fresh Water"],1]]),capitalSummary:"\n                Not more than a century ago a city to rival Ortus, all that remains of this arrogant capital are ruins and\n                shattered dreams. They dared to take on those that must not be spoken of, and all that remained from that\n                was mere fodder for scavengers - criminals, pirates and rival states alike. Now that the corpse has been\n                picked to the bone, a few refugees and hinterland tribesmen still find shelter and comfort in the ruins,\n                still grand and intimating even in decay...\n            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Nidavellir",fullName:"Depths of Nidavellir",capital:"Idavoll",area:61,population:"2.9M",government:"Kingdom",primaryCulture:"Durinn",leader:"Queen Dagfid",tags:[],races:new Map([["Dwarves",64],["Drow",20],["Tieflings",8],["Deep Gnomes",6],["Humans",2]]),exoticRaces:["Duergar","Fire Genasi","Kenku","Orcs"],exclusiveRaces:[],capitalPopulation:"90K",capitalElevation:"-1222m",capitalTemperature:"43&#8451;",capitalTags:new Map([[a.Underground,6],[a["Mining Ops"],6],[a.Impregnable,5],[a["Space Crunch"],5],[a.Cluttered,3],[a["Industrial Zone"],3],[a["Organized Crime"],3],[a.Underworld,2],[a.Lawless,2],[a.Slums,2]]),capitalSummary:"\n                The entrance to the underdark, visitors to the city of Idavoll are greeted by its hot and acrid air, \n                followed by the angry red glare of eternally burning smelters. With its paranoid inhabitants, toiling \n                endlessly and operating ruthlessly in a city that has never seen sunlight, Idavoll is the least \n                accessible settlement on Terra - but it is accessible. Much more than can be said for anything in the \n                passages that descend beneath it... passages rumoured to be the home of great and terrible demon lords, \n                passages rumoured to be the only way into Terra Incognita.",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Gaulle",fullName:"United Clans of Gaulle",capital:"Lutetia",area:52,population:"4.0M",government:"Free Tribes",primaryCulture:"Hexenfurst",leader:"Chief Vercingetorix",tags:[],races:new Map([["Humans",88],["Shifters",12]]),exoticRaces:["Aarakocra","Owlin","Tabaxi","Changeling","Kalashtar","Fire Genasi"],exclusiveRaces:["Werewolves"],capitalPopulation:"217K",capitalElevation:"18m",capitalTemperature:"12&#8451;",capitalTags:new Map([[a["Trade Hotspot"],5],[a["Space Crunch"],5],[a["Tourist Hotspot"],5],[a["Entertainment Infra"],4],[a["Academic Focus"],4],[a.Fortified,4],[a.Harbor,3],[a.Lawless,3],[a["Fresh Water"],2]]),capitalSummary:"\n                A large and bustling city of a large and bustling country, it mirrors the serious congestion and \n                overpopulation evident in the rest of the country. For those from outside, reaching from their tavern to \n                their destination can easily take hours - yet those who know their way about know this to be one of the\n                most resourceful places on Terra. There are rumours that a mass renovation is in the works...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Reindal",fullName:"Snowy realms of Reindal",capital:"Witstad",area:39,population:"0.7M",government:"Federation",primaryCulture:"Roma",leader:"Sir Lucius Artorius Castus",tags:[],races:new Map([["Humans",90],["DragonBorn",5],["Half-Elves",2],["Gnomes",1],["Halflings",1],["Elves",1]]),exoticRaces:["Aasimar","Eladrin","Goblin","Kalashtar","Changelings"],exclusiveRaces:[],capitalPopulation:"67K",capitalElevation:"918m",capitalTemperature:"-8&#8451;",capitalTags:new Map([[a.Breathtaking,6],[a["Mage Presence"],5],[a["Academic Focus"],3],[a.Greens,3],[a["Holy Sites"],2],[a["Merchant Guilds"],1],[a.Undefended,1]]),capitalSummary:"\n                Much like the lands to which it belongs, this town, enchanting in its beautiful, pure and perennial snow,\n                is a safe haven from all the conflicts in terra. Originally inhabited by refugees tired of war or slaves\n                escaping to freedom, few people now wish to come here, but those who do come find comfort and peace like\n                no where else. Despite being soft spoken and kind to a fault, the people here would work harder than all \n                others to secure the said comfort. And to secure the said peace...            ",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"KingsFall",fullName:"Cursed Plains of KingsFall",capital:"Necropolis",area:40,population:"0.2M",government:"Anarchy",primaryCulture:"Hexenfurst",leader:"",tags:[],races:new Map([["Humans",89],["Tieflings",11]]),exoticRaces:["Shadar-Kai","Kalashtar","Vampires","Hexbloods","Reborn"],exclusiveRaces:[],capitalPopulation:"0 ?",capitalElevation:"352m",capitalTemperature:"7&#8451;",capitalTags:new Map([[a["Ghost Town"],1]]),capitalSummary:"\n                Once long ago, these buildings used to be a flourishing city. However, like the rest of the plains - whosoever\n                held it found themselves on the loosing side of a particularly brutal war. These empty streets have\n                changed hands dozens of times - each time involving mass brutality, plunder and slaughter. Now, none \n                dare venture here and only terrible ghosts haunt this mass grave of a capital. Some madmen have reported\n                seeing the Witch King of ancient lore glide the streets even today, dancing a terrible dance along with \n                several human-puppets who they said comprise his troupe...",description:"",leaderDescription:""}),new n({planet:"Terra Prima",name:"Terra Incognita",fullName:"Terra Incognita",capital:"?",area:75,population:"?",government:"?",primaryCulture:"?",leader:"?",tags:[],races:new Map,exoticRaces:[],exclusiveRaces:[],capitalPopulation:"?",capitalElevation:"?",capitalTemperature:"?",capitalTags:new Map,capitalSummary:"???",description:"",leaderDescription:""})}},302:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.PARTY_INSIGHT=t.PcCharismaMods=t.PcTokenNames=t.PcIndex=void 0,function(e){e[e.ID_AURELIA=0]="ID_AURELIA",e[e.ID_CYRION=1]="ID_CYRION",e[e.ID_HELIOS=2]="ID_HELIOS",e[e.ID_PANZER=3]="ID_PANZER",e[e.ID_QUINN=4]="ID_QUINN"}(a=t.PcIndex||(t.PcIndex={})),t.PcTokenNames=new Map([[a.ID_AURELIA,"Aurelia"],[a.ID_CYRION,"Cyrion"],[a.ID_HELIOS,"Helios"],[a.ID_PANZER,"Panzer"],[a.ID_QUINN,"Quinn"]]),t.PcCharismaMods=new Map([[a.ID_AURELIA,-1],[a.ID_CYRION,-1],[a.ID_HELIOS,5],[a.ID_PANZER,3],[a.ID_QUINN,5]]),t.PARTY_INSIGHT=19},119:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupHistory=void 0;const a=new Map([["Shardic",{start:"~10<sup>9</sup> BR (T=0)",epoch:"Genesis",height:42}],["Divergence",{start:"~10<sup>9</sup> BR (T=10<sup>-16</sup>s)",epoch:"Genesis",height:40}],["Primordial",{start:"~10<sup>9</sup> BR (T=0.1s)",epoch:"Genesis",height:64}],["Inflationary",{start:"~10<sup>9</sup> BR (T=1s)",epoch:"Genesis",height:40}],["Archean",{start:"~4.1 &times; 10<sup>8</sup> BR",epoch:"Genesis",height:40}],["Mythic",{start:"~2.8 &times; 10<sup>7</sup> BR",epoch:"Legendary",height:144}],["Heroic",{start:"~1.6 &times; 10<sup>5</sup> BR",epoch:"Legendary",height:120}],["Silent",{start:"~20,000 BR",epoch:"Darkness",height:72}],["Archaic",{start:"~1,800 BR",epoch:"Darkness",height:64}],["Classical",{start:"0 AR",epoch:"Recreance",height:72}],["Medieval",{start:"1070 AR",epoch:"Recreance",height:100}],["Renaissance",{start:"1600 AR (now)",epoch:"Recreance",height:40}]]),n=new Map;let i=0;for(const[e,{height:t}]of Array.from(a).reverse())n.set(e,i+t),i=n.get(e);const s=new Map([["TheoGenesis",{text:"Shards Appear - Spacetime & Investiture form.",era:"Shardic",rel_t:0,lane:0}],["Genesis",{text:"Invariants form - Matter/Energy/Momentum/Charge...",era:"Shardic",rel_t:.5,lane:1}],["Divergence",{text:"Planes separate",era:"Divergence",rel_t:0,lane:0}],["OuterPrimordialsInvade",{text:"Outer Primordials Invade",era:"Primordial",rel_t:0,lane:0}],["ShardicPrimordialCreation",{text:"Shardic Primordials are born",era:"Primordial",rel_t:.25,lane:1}],["OuterPrimordialsDefeated",{text:"Outer Primordials are Defeated",era:"Primordial",rel_t:.8,lane:0}],["Expansion",{text:"Planes take shape, The Universe expands",era:"Inflationary",rel_t:.1,lane:1}],["AstralFormation",{text:"Astral Bodies Form",era:"Inflationary",rel_t:.8,lane:0}],["Life",{text:"First Physical Lifeforms emerge",era:"Archean",rel_t:0,lane:1}],["SpiritualLife",{text:"First Non-Physical Lifeforms emerge",era:"Archean",rel_t:.9,lane:0}],["ComplexLife",{text:"Complex/Mortal Lifeforms emerge",era:"Mythic",rel_t:.1,lane:1}],["PrimordialLife",{text:"Shardic Primordials Gain Physical Forms",era:"Mythic",rel_t:.2,lane:0}],["SentientLife",{text:"Sentient Life Forms",era:"Mythic",rel_t:.45,lane:0}],["MythicLife",{text:"Creatures of Myth and Legend Roam the multiverse",era:"Mythic",rel_t:.5,lane:1}],["IntelligentLife",{text:"Intelligent Species emerge",era:"Mythic",rel_t:.67,lane:0}],["SocialLife",{text:"Societies and Cultures begin to take shape",era:"Mythic",rel_t:.85,lane:1}],["SocialLife",{text:"Humans race appears",era:"Mythic",rel_t:.9,lane:0}],["Heroes",{text:"Powerful Nations form - Heroes walk the land",era:"Heroic",rel_t:.2,lane:0}],["War",{text:"Shardic Wars Ensue",era:"Heroic",rel_t:.33,lane:1}],["Kelsier",{text:"The 'Survivor' Dies",era:"Heroic",rel_t:.5,lane:0}],["Re-invasion",{text:"Outsiders begin to seep within",era:"Heroic",rel_t:.8,lane:1}],["Silence",{text:"History falls silent - No records of this time remain",era:"Silent",rel_t:0,lane:0}],["Isolation",{text:"Outer Planes self isolate",era:"Silent",rel_t:.4,lane:1}],["Archaic",{text:"Civilizations restart from scratch post-desolation",era:"Archaic",rel_t:0,lane:0}],["Classical",{text:"Some Cities/Civilizations begin to match those of old",era:"Classical",rel_t:0,lane:0}],["Rome",{text:"Veteres becomes a global empire on Terra Prima",era:"Classical",rel_t:.1,lane:1}],["Annatar",{text:"1539 AR: The Primordial Nightmares gain a foothold",era:"Medieval",rel_t:.75,lane:1}],["Leras",{text:"1540 AR: The Hour of Darkness",era:"Medieval",rel_t:.8,lane:0}]]);t.setupHistory=function(){const e=$("#history_zones"),t=[$("#history_left_tags"),$("#history_right_tags")];for(const[t,{height:n,start:i,epoch:s}]of a.entries())$(`<div class='history_zone' style='height: ${n}px;'>\n            <div class="zone_start">${i}</div>\n            <div class="zone_name">${t}<span class="zone_epoch"> | ${s}</span></div>\n          </div>`).appendTo(e);for(const[e,i]of s.entries()){const e=0+n.get("Shardic")-n.get(i.era)+a.get(i.era).height*i.rel_t;$(`<div class="history_event" style="top: ${e}px;">${i.text}</div>`).appendTo(t[i.lane])}}},891:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RollVariant=t.D100=t.D20=t.D12=t.D10=t.D8=t.D6=t.D4=t.D1=t.Dice=void 0;class a{constructor(e){this.sides=e}}var n;t.Dice=a,t.D1=new a(1),t.D4=new a(4),t.D6=new a(6),t.D8=new a(8),t.D10=new a(10),t.D12=new a(12),t.D20=new a(20),t.D100=new a(100),(n=t.RollVariant||(t.RollVariant={}))[n.Normal=0]="Normal",n[n.Advantage=1]="Advantage",n[n.Disadvantage=2]="Disadvantage",n[n.SuperAdvantage=3]="SuperAdvantage",n[n.SuperDisadvantage=4]="SuperDisadvantage",n[n.Critical=5]="Critical"},269:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.enableRolling=t.Rollable=t.NatRollable=t.PrimitiveRollable=t.RollArgumentError=void 0;const n=a(891);class i extends Error{constructor(e){super(e)}}t.RollArgumentError=i;class s{constructor(e,t=Math.random){this.rng=t,this.rolls=new Map,this.dice=new Map([...e.entries()].sort(((e,t)=>t[0].sides-e[0].sides))),this._debug=!1,this.uid=s.registerRollable(this)}static getRollableForUid(e){return this.ALL_ROLLABLES.get(e)}static registerRollable(e){const t=this.lastUsedUid++;return this.ALL_ROLLABLES.set(t,e),t}static generateRollString(e,t=!0){let a="";t&&(e=new Map([...e.entries()].sort(((e,t)=>t[0].sides-e[0].sides))));for(const[t,n]of e.entries()){if(0==n)continue;const e=n>0?0==a.length?"":"+":"-",i=t.sides>1?`d${t.sides}`:"";a+=`${e}${Math.abs(Math.round(n))}${i}`}return a}getRollString(e){return s.generateRollString(this.dice)}roll(){this.rolls.clear();for(const[e,t]of this.dice.entries())if(0!=t)if(e!=n.D1){this.rolls.set(e,[]);for(let a=0;a<Math.abs(Math.round(t));a++){const a=this.rollDie(e)*Math.sign(t);this._debug&&console.log(e,a),this.rolls.get(e).push(a)}}else this.rolls.set(n.D1,[t])}rollDie(e){return Math.floor(this.rng()*e.sides)+1}get result(){let e=0;for(const[t,a]of this.rolls)for(const t of a)e+=t;return e}set debug(e){this._debug=e}get parts(){return this.rolls}}t.PrimitiveRollable=s,s.lastUsedUid=0,s.ALL_ROLLABLES=new Map;class r extends s{constructor(e,t=Math.random){super(new Map([[n.D20,3],[n.D1,e]]),t),this.modifier=e,this._parts=new Map,this._mode=n.RollVariant.Normal}static generate(e,t=Math.random){if(t!=Math.random)return new r(e,t);if(this.NAT_ROLLABLE_CACHE.has(e))return console.log("cache hit"),this.NAT_ROLLABLE_CACHE.get(e);const a=new r(e,t);return this.NAT_ROLLABLE_CACHE.set(e,a),a}getRollString(e){let t=(this.modifier>=0?"+":"")+this.modifier;return e?`<span class="rollable to_hit" data-rollable-uid="${this.uid}">${t}</span>`:t}roll(e=n.RollVariant.Normal){if(e==n.RollVariant.Critical)throw new i("");this._mode=e,super.roll()}get result(){const e=this.rolls.get(n.D20),t=this.modifier;if(this._parts.clear(),this._mode==n.RollVariant.Normal)return this._parts.set(n.D20,[e[0]]),e[0]+t;if(this._mode==n.RollVariant.Advantage)return this._parts.set(n.D20,[e[0],e[1]]),Math.max(e[0],e[1])+t;if(this._mode==n.RollVariant.Disadvantage)return this._parts.set(n.D20,[e[0],e[1]]),Math.min(e[0],e[1])+t;if(this._mode==n.RollVariant.SuperAdvantage)return this._parts.set(n.D20,e),Math.max(...e)+t;if(this._mode==n.RollVariant.SuperDisadvantage)return this._parts.set(n.D20,e),Math.min(...e)+t;throw new i(`Roll variant ${n.RollVariant[this._mode]} not supported`)}get parts(){return 0==this._parts.size?super.parts:this._parts}}t.NatRollable=r,r.NAT_ROLLABLE_CACHE=new Map;class o extends s{constructor(e,t=Math.random){const a=new Map;let i=0;for(const[t,s]of e.entries())t!=n.D1?(e.set(t,2*s),a.set(t,s)):i=s;super(e,t),this._parts=new Map,this.baseDice=a,this.modifier=i}getRollString(e){let t=`${s.generateRollString(this.baseDice)}${this.modifier>0?`+${this.modifier}`:this.modifier<0?this.modifier.toString():""}`;return e?`<span class="rollable" data-rollable-uid="${this.uid}">${t}</span>`:t}roll(e=n.RollVariant.Normal){this._mode=e,super.roll()}get result(){if(this._parts.clear(),this._mode==n.RollVariant.Normal){let e=0;for(const[t,a]of this.rolls)if(t==n.D1)e+=a[0];else{const n=[];for(let t=0;t<a.length/2;t++)e+=a[t],n.push(a[t]);this._parts.set(t,n)}return e}if(this._mode==n.RollVariant.Critical)return super.result;throw new i(`Roll variant ${n.RollVariant[this._mode]} not supported`)}get parts(){return 0==this._parts.size?super.parts:this._parts}}t.Rollable=o,t.enableRolling=function(){const e=$("#toast-container");$("#beastiary").on("click",".rollable",(function(t){const a=$(this).data("rollableUid"),i=s.getRollableForUid(a);let l=n.RollVariant.Normal;i instanceof r?t.shiftKey?l=t.altKey?n.RollVariant.SuperAdvantage:n.RollVariant.Advantage:t.ctrlKey&&(l=t.altKey?n.RollVariant.SuperDisadvantage:n.RollVariant.Disadvantage):i instanceof o&&t.altKey&&(l=n.RollVariant.Critical),i.roll(l),console.log(i.result);const h=[];for(const[e,t]of i.parts.entries())if(e!=n.D1)for(const e of t)h.push(e);console.log(h);const d=$(`\n            <div class="toast">\n                <div class="roll_result">${i.result}</div>\n                <div class="roll_buildup">${h.join(", ")}</div>\n            </div>`);d.hide(),d.appendTo(e),d.fadeIn(400),setTimeout((()=>{d.fadeOut(400,(()=>{d.remove()}))}),3e3)}))},t.test=function(){let e=1;function t(){const t=1e4*Math.sin(e++);return t-Math.floor(t)}const a=new s(new Map([[n.D20,1],[n.D1,5]]),t);console.assert("1d20+5"==a.getRollString(!1)),a.roll(),console.assert(20==a.result,`Expected: 20, Rolled: ${a.result}`),a.roll(),console.assert(25==a.result,`Expected: 25, Rolled: ${a.result}`);const l=new s(new Map([[n.D100,-1],[n.D12,4],[n.D8,3],[n.D1,-10]]),t);console.assert("-1d100+4d12+3d8-10"==l.getRollString(!1)),l.roll(),console.assert(27==l.result),l.roll(),console.assert(16==l.result);const h=new s(new Map([[n.D8,4]]));console.assert("4d8"==h.getRollString(!1));for(let e=0;e<100;e++)h.roll(),console.assert(h.result>=4&&h.result<=32);const d=r.generate(4,t);console.assert("+4"==d.getRollString(!1)),d.roll(n.RollVariant.SuperAdvantage),console.assert(20==d.result),console.assert("+4"==d.getRollString(!1));try{d.roll(n.RollVariant.Critical),console.error("Roll argument error not thrown.")}catch(e){console.assert(e instanceof i,"Roll argument error not thrown.")}d.debug=!1;const c=new o(new Map([[n.D6,2]]),t);console.assert("2d6"==c.getRollString(!1)),c.roll(n.RollVariant.Critical),console.assert(13==c.result),console.assert("2d6"==c.getRollString(!1)),c.debug=!1;const u=new o(new Map([[n.D4,4],[n.D1,-10]]),t);console.assert("4d4-10"==u.getRollString(!1)),u.roll(),console.assert(1==u.result),u.debug=!1,console.log("Rollable tests performed.")}},978:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CRValue=t.Prof=t.StatValue=t.E=t.getModifier=t.Activation=t.AdventurerHitDice=t.Conditions=t.DamageType=t.AdventurerClasses=t.Speed=t.SkillForStat=t.Skill=t.SizeToDice=t.CreatureSize=t.Senses=t.ProficiencyLevel=t.CoreStat=void 0;const n=a(891);var i,s,r,o,l,h,d,c,u,m;!function(e){e[e.Str=0]="Str",e[e.Dex=1]="Dex",e[e.Con=2]="Con",e[e.Int=3]="Int",e[e.Wis=4]="Wis",e[e.Cha=5]="Cha"}(i=t.CoreStat||(t.CoreStat={})),function(e){e[e.None=0]="None",e[e.Half=1]="Half",e[e.Prof=2]="Prof",e[e.Expert=3]="Expert"}(s=t.ProficiencyLevel||(t.ProficiencyLevel={})),(m=t.Senses||(t.Senses={}))[m.DarkVision=0]="DarkVision",m[m.BlindSight=1]="BlindSight",m[m.TremorSense=2]="TremorSense",m[m.TrueSight=3]="TrueSight",function(e){e[e.Tiny=0]="Tiny",e[e.Small=1]="Small",e[e.Medium=2]="Medium",e[e.Large=3]="Large",e[e.Huge=4]="Huge",e[e.Gargantuan=5]="Gargantuan",e[e.Cosmic=6]="Cosmic"}(r=t.CreatureSize||(t.CreatureSize={})),t.SizeToDice=new Map([[r.Tiny,n.D4],[r.Small,n.D6],[r.Medium,n.D8],[r.Large,n.D10],[r.Huge,n.D12],[r.Gargantuan,n.D20],[r.Cosmic,n.D100]]),function(e){e[e.Acrobatics=0]="Acrobatics",e[e.AnimalHandling=1]="AnimalHandling",e[e.Arcana=2]="Arcana",e[e.Athletics=3]="Athletics",e[e.Deception=4]="Deception",e[e.History=5]="History",e[e.Insight=6]="Insight",e[e.Intimidation=7]="Intimidation",e[e.Investigation=8]="Investigation",e[e.Medicine=9]="Medicine",e[e.Nature=10]="Nature",e[e.Perception=11]="Perception",e[e.Performance=12]="Performance",e[e.Persuasion=13]="Persuasion",e[e.Religion=14]="Religion",e[e.SlightOfHand=15]="SlightOfHand",e[e.Stealth=16]="Stealth",e[e.Survival=17]="Survival"}(o=t.Skill||(t.Skill={})),t.SkillForStat=new Map([[o.Acrobatics,i.Dex],[o.AnimalHandling,i.Wis],[o.Arcana,i.Int],[o.Athletics,i.Str],[o.Deception,i.Cha],[o.History,i.Int],[o.Insight,i.Wis],[o.Intimidation,i.Cha],[o.Investigation,i.Int],[o.Medicine,i.Wis],[o.Nature,i.Int],[o.Perception,i.Wis],[o.Performance,i.Cha],[o.Persuasion,i.Cha],[o.Religion,i.Int],[o.SlightOfHand,i.Dex],[o.Stealth,i.Dex],[o.Survival,i.Wis]]),(u=t.Speed||(t.Speed={}))[u.Walking=0]="Walking",u[u.Swimming=1]="Swimming",u[u.Flying=2]="Flying",u[u.Climbing=3]="Climbing",u[u.Burrowing=4]="Burrowing",function(e){e[e.Artificer=0]="Artificer",e[e.Barbarian=1]="Barbarian",e[e.Bard=2]="Bard",e[e.Cleric=3]="Cleric",e[e.Druid=4]="Druid",e[e.Fighter=5]="Fighter",e[e.Monk=6]="Monk",e[e.Paladin=7]="Paladin",e[e.Ranger=8]="Ranger",e[e.Rogue=9]="Rogue",e[e.Sorcerer=10]="Sorcerer",e[e.Warlock=11]="Warlock",e[e.Wizard=12]="Wizard"}(l=t.AdventurerClasses||(t.AdventurerClasses={})),(c=t.DamageType||(t.DamageType={}))[c.Acid=0]="Acid",c[c.Bludgeoning=1]="Bludgeoning",c[c.Cold=2]="Cold",c[c.Fire=3]="Fire",c[c.Force=4]="Force",c[c.Lightning=5]="Lightning",c[c.Necrotic=6]="Necrotic",c[c.Piercing=7]="Piercing",c[c.Poison=8]="Poison",c[c.Psychic=9]="Psychic",c[c.Radiant=10]="Radiant",c[c.Slashing=11]="Slashing",c[c.Thunder=12]="Thunder",(d=t.Conditions||(t.Conditions={}))[d.Blinded=0]="Blinded",d[d.Charmed=1]="Charmed",d[d.Deafened=2]="Deafened",d[d.Frightened=3]="Frightened",d[d.Grappled=4]="Grappled",d[d.Incapacitated=5]="Incapacitated",d[d.Invisible=6]="Invisible",d[d.Paralyzed=7]="Paralyzed",d[d.Petrified=8]="Petrified",d[d.Poisoned=9]="Poisoned",d[d.Prone=10]="Prone",d[d.Restrained=11]="Restrained",d[d.Stunned=12]="Stunned",d[d.Unconscious=13]="Unconscious",d[d.Exhaustion=14]="Exhaustion",t.AdventurerHitDice=new Map([[l.Artificer,n.D8],[l.Barbarian,n.D12],[l.Bard,n.D8],[l.Cleric,n.D8],[l.Druid,n.D8],[l.Fighter,n.D10],[l.Monk,n.D8],[l.Paladin,n.D10],[l.Ranger,n.D10],[l.Rogue,n.D8],[l.Sorcerer,n.D6],[l.Warlock,n.D8],[l.Wizard,n.D6]]),(h=t.Activation||(t.Activation={}))[h.Action=0]="Action",h[h.BonusAction=1]="BonusAction",h[h.Reaction=2]="Reaction",h[h.Special=3]="Special",h[h.LegendaryAction=4]="LegendaryAction",h[h.MythicAction=5]="MythicAction",t.getModifier=function(e){return Math.floor((e-10)/2)},t.E=function e(t){if(t instanceof n.Dice)return(t.sides+1)/2;if(t instanceof Map){let a=0;for(const[n,i]of t.entries())a+=i*e(n);return a}},t.StatValue=class{constructor(e){this.val=Math.round(Math.min(30,Math.max(0,e)))}adjustStat(e){this.val=Math.round(Math.min(30,Math.max(0,this.val+e)))}get stat(){return this.val}get mod(){return Math.floor(this.val/2)-5}};class p{constructor(e){this.val=e}static get(e){if(this.instances.has(e))return this.instances.get(e);if(e<2||e>10)throw new Error("reasonable prof bonus levels crossed");if(!Number.isInteger(e))throw new Error("Can only have integral proficiencies");const t=new p(e);return this.instances.set(e,t),t}mod(e=s.Prof){if(e==s.None)return 0;if(e==s.Half)return Math.floor(this.val/2);if(e==s.Prof)return this.val;if(e==s.Expert)return 2*this.val;throw new Error("Prof level unknown")}}t.Prof=p,p.instances=new Map,t.CRValue=class{constructor(e,t=0){this.profAdjustment=t,this.val=Math.round(Math.min(30,Math.max(0,e)))}get cr(){return this.val}get prof(){return p.get(Math.ceil(Math.max(1,this.val)/4)+1+this.profAdjustment)}compareToStats(){throw new Error("Not implemented.")}}},474:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BuffedInternalAttack=t.Contracts=t.InternalAttack=void 0;const n=a(891),i=a(269),s=a(978);class r extends class{constructor(e){var t,a,n;this.subTitle="";const i=null!==(t=e.subtitle)&&void 0!==t?t:"";this.title=e.title,this.activation=e.activation,this.subTitle=i,this.hitBonus=null!==(a=e.hitBonus)&&void 0!==a?a:0,this.dcBonus=null!==(n=e.dcBonus)&&void 0!==n?n:0,this.mainStat=e.mainStat,this.contentGenerator=e.contentGenerator,this.resolvedDamages=null}getToHitRollableStr({name:e,stat:t,prof:a=s.ProficiencyLevel.Prof}){null==t&&(t=this.mainStat);const n=this.getMod(t)+this.sheet.pb.mod(a)+this.hitBonus;return this.doGetToHitRollableStr(n)}getDamageRollableStr(e){if(null==this.resolvedDamages)throw new Error("Damage string queried before damages were resolved.");return this.doGetDamageRollableStr(e)}getMod(e){return null==e&&(e=this.mainStat),this.sheet.stats.get(e).mod}getDc({stat:e,P:t=s.ProficiencyLevel.Prof}={}){return null==e&&(e=this.mainStat),8+this.getMod(e)+this.sheet.pb.mod(t)+this.dcBonus}bindDamages(e){var t,a,n;return this.expectedDamage=e.expectedDamage,this.damageTypes=null!==(t=e.damageTypes)&&void 0!==t?t:new Map,this.unassignedDamageRatios=null!==(a=e.unassignedDamageRatios)&&void 0!==a?a:new Map,this.assignedDamages=null!==(n=e.assignedDamages)&&void 0!==n?n:()=>new Map,this}bindSheet(e){return this.sheet=e,this}createContent(){this.resolveDamages();const e=this.contentGenerator(this);if("<p>"!=e.substring(0,3))throw new Error("Content should start with <p> tag.");return`<p><strong><em>${this.title}</em>. ${this.subTitle}</strong>`+e.substring(3)}resolveDamages(){var e;let t=0;const a=this.assignedDamages(this);for(const e of a.values())t+=(0,s.E)(e);const n=this.expectedDamage-t;if(n<=0)throw new Error("Assigned damage exceeds expected.");let i=0;for(const[,e]of this.unassignedDamageRatios.entries())for(const[,t]of e.entries())i+=t;for(const[t,r]of this.unassignedDamageRatios.entries())for(const[o,l]of r.entries()){let r;a.has(t)?r=a.get(t):(r=new Map,a.set(t,r));const h=Math.round(n*l/i/(0,s.E)(o));r.set(o,(null!==(e=r.get(o))&&void 0!==e?e:0)+h)}this.resolvedDamages=a}}{doGetDamageRollableStr(e){return`${new i.Rollable(this.resolvedDamages.get(e)).getRollString(!0)} \n                ${s.DamageType[this.damageTypes.get(e)]} damage`}doGetToHitRollableStr(e){return i.NatRollable.generate(e).getRollString(!0)}}t.InternalAttack=r;class o{constructor(e,t){this.shouldApply=e,this.modify=t}}t.Contracts=new Map([["Stimulus I",new o((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=n.D1&&e.set(t,1.25*a)}))],["Stimulus II",new o((e=>!0),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=n.D1&&e.set(t,1.5*a)}))],["Overflowing Emotions",new o((e=>"Inkling (Envy)"==e.identificationInfo.get("Creature")&&"Charged Spit"==e.identificationInfo.get("Attack")),(e=>{const t=e.currentlyResolvedDamages;for(const e of t.values())for(const[t,a]of e.entries())t!=n.D1&&e.set(t,1.5*a)}))]]),t.BuffedInternalAttack=class extends r{constructor(e){super(e),this.contracts=new Set}activateContract(e){this.contracts.add(e)}deactivateContract(e){this.contracts.delete(e)}getDamageTypes(){return this.damageTypes}setDamageTypes(e){this.damageTypes=e}setContentGenerator(e){this.contentGenerator=e}createContent(){this.resolveDamages();for(const e of this.contracts)e.shouldApply(this)&&e.modify(this);const e=this.contentGenerator(this);if("<p>"!=e.substring(0,3))throw new Error("Content should start with <p> tag.");return`<p><strong><em>${this.title}</em>. ${this.subTitle}</strong>`+e.substring(3)}doGetDamageRollableStr(e){return`${new i.Rollable(this.resolvedDamages.get(e)).getRollString(!0)} \n                ${s.DamageType[this.damageTypes.get(e)]} damage`}get currentlyResolvedDamages(){return this.resolvedDamages}get identificationInfo(){return new Map([["Creature",this.sheet.title],["Attack",this.title]])}}},506:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupMonsters=void 0;const n=a(891),i=a(978),s=a(474),r=a(180);function o(){const e=new s.InternalAttack({title:"Ink Spray",activation:i.Activation.Special,mainStat:i.CoreStat.Con,contentGenerator:e=>`<p>Upon death, the inkling sprays viscous ink at all creatures within 15 feet of itself. The targets\n            must succeed on a DC ${e.getDc()} Constitution saving throw or be blinded until the end of their next turn.</p>`}),t=new s.InternalAttack({title:"Bite",activation:i.Activation.Action,mainStat:i.CoreStat.Str,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 5 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("Blot")} and ${e.getDamageRollableStr("BlotNeural")}.</p>`}).bindDamages({expectedDamage:32,assignedDamages:e=>new Map([["Bite",new Map([[n.D4,1],[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,1]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])});return new r.StatSheet({title:"Inkling (Insecurity)",size:i.CreatureSize.Medium,subtitle:" Inkling(Ooze), Typically Chaotic Neutral",stats:new Map([[i.CoreStat.Str,new i.StatValue(13)],[i.CoreStat.Dex,new i.StatValue(13)],[i.CoreStat.Con,new i.StatValue(14)],[i.CoreStat.Int,new i.StatValue(16)],[i.CoreStat.Wis,new i.StatValue(15)],[i.CoreStat.Cha,new i.StatValue(13)]]),ac:13,acDesc:"(Natural Armor)",biologicalHp:40,attacks:[e,t],crValue:new i.CRValue(2),saveProficiencies:new Map([[i.CoreStat.Con,i.ProficiencyLevel.Prof]]),skillProficiencies:new Map([[i.Skill.Stealth,i.ProficiencyLevel.Expert]]),speeds:new Map([[i.Speed.Walking,30]]),vulnerabilities:new Set([i.DamageType.Cold,i.DamageType.Lightning,i.DamageType.Bludgeoning]),resistances:new Set([i.DamageType.Acid,i.DamageType.Fire,i.DamageType.Piercing,i.DamageType.Thunder]),immunities:new Set([i.DamageType.Poison,i.DamageType.Psychic]),conditionImmunities:new Set([i.Conditions.Blinded,i.Conditions.Deafened,i.Conditions.Exhaustion])})}function l(){const e=new s.InternalAttack({title:"Bite",activation:i.Activation.Action,mainStat:i.CoreStat.Dex,contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Bite"})}, reach 5 ft., one target. \n            Hit: ${e.getDamageRollableStr("Bite")} plus ${e.getDamageRollableStr("BiteVenom")}</p>`}).bindDamages({expectedDamage:10,assignedDamages:e=>new Map([["Bite",new Map([[n.D6,1],[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["BiteVenom",new Map([[n.D4,1]])]]),damageTypes:new Map([["Bite",i.DamageType.Piercing],["BiteVenom",i.DamageType.Poison]])});return new r.StatSheet({title:"Inkling (Impatience)",size:i.CreatureSize.Small,subtitle:" Inkling(Fiend), Typically Chaotic Neutral",stats:new Map([[i.CoreStat.Str,new i.StatValue(11)],[i.CoreStat.Dex,new i.StatValue(17)],[i.CoreStat.Con,new i.StatValue(11)],[i.CoreStat.Int,new i.StatValue(6)],[i.CoreStat.Wis,new i.StatValue(13)],[i.CoreStat.Cha,new i.StatValue(7)]]),ac:13,acDesc:"(Natural Armor)",biologicalHp:32,attacks:[e],crValue:new i.CRValue(1),saveProficiencies:new Map([[i.CoreStat.Dex,i.ProficiencyLevel.Prof]]),skillProficiencies:new Map([[i.Skill.Athletics,i.ProficiencyLevel.Prof],[i.Skill.Acrobatics,i.ProficiencyLevel.Prof]]),speeds:new Map([[i.Speed.Walking,50]]),vulnerabilities:new Set([i.DamageType.Fire,i.DamageType.Lightning]),resistances:new Set([i.DamageType.Cold,i.DamageType.Poison,i.DamageType.Psychic])})}function h(){const e=new s.BuffedInternalAttack({contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 60 feet of itself. The target must succeed \n                    on a DC ${e.getDc()} Constitution saving throw. On failure, they take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}.</p>`,activation:i.Activation.Action,mainStat:i.CoreStat.Con,title:"Ink Spit"}).bindDamages({expectedDamage:50,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.CoreStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.CoreStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,3]])],["BlotNeural",new Map([[n.D8,1]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])}),t=new s.BuffedInternalAttack({contentGenerator:e=>`<p>The inkling spits viscous ink at one creature within 90 feet of itself. The target must succeed \n                    on a DC ${e.getDc()} Constitution saving throw. On failure, they take ${e.getDamageRollableStr("Blot")}\n                    and are Blinded until the end of their next turn. On success, they take half\n                    the poison damage and are not blinded. Regardless of the roll, they take ${e.getDamageRollableStr("BlotNeural")}. \n                    This damage is neural damage and can cause the target to be Stunned.</p>`,activation:i.Activation.Action,mainStat:i.CoreStat.Int,title:"Charged Spit"}).bindDamages({expectedDamage:100,assignedDamages:e=>new Map([["Blot",new Map([[n.D1,e.getMod(i.CoreStat.Con)]])],["BlotNeural",new Map([[n.D1,e.getMod(i.CoreStat.Int)]])]]),unassignedDamageRatios:new Map([["Blot",new Map([[n.D8,1]])],["BlotNeural",new Map([[n.D8,3]])]]),damageTypes:new Map([["Blot",i.DamageType.Poison],["BlotNeural",i.DamageType.Psychic]])});return e.activateContract(s.Contracts.get("Overflowing Emotions")),t.activateContract(s.Contracts.get("Overflowing Emotions")),e.activateContract(s.Contracts.get("Stimulus II")),t.activateContract(s.Contracts.get("Stimulus II")),new r.StatSheet({title:"Inkling (Envy)",size:i.CreatureSize.Medium,subtitle:" Inkling(Aberration), Typically Chaotic Evil",stats:new Map([[i.CoreStat.Str,new i.StatValue(13)],[i.CoreStat.Dex,new i.StatValue(11)],[i.CoreStat.Con,new i.StatValue(16)],[i.CoreStat.Int,new i.StatValue(19)],[i.CoreStat.Wis,new i.StatValue(13)],[i.CoreStat.Cha,new i.StatValue(15)]]),ac:11,acDesc:"(Natural Armor)",biologicalHp:100,attacks:[e,t],crValue:new i.CRValue(5),saveProficiencies:new Map([[i.CoreStat.Int,i.ProficiencyLevel.Prof],[i.CoreStat.Wis,i.ProficiencyLevel.Prof]]),skillProficiencies:new Map([[i.Skill.Perception,i.ProficiencyLevel.Expert]]),speeds:new Map([[i.Speed.Flying,20]]),vulnerabilities:new Set([i.DamageType.Lightning,i.DamageType.Thunder]),immunities:new Set([i.DamageType.Poison,i.DamageType.Psychic]),conditionImmunities:new Set([i.Conditions.Prone,i.Conditions.Blinded])})}function d(){const e=new s.InternalAttack({contentGenerator:e=>`<p>Melee Weapon Attack: ${e.getToHitRollableStr({name:"Slam",prof:i.ProficiencyLevel.None})}, reach 15 ft., one target. \n                    Hit: ${e.getDamageRollableStr("Slam")} plus ${e.getDamageRollableStr("SlamVibe")}. The primary\n                    target must succeed a DC ${e.getDc()} Str save or fall prone. Those within 5ft of the primary \n                    target take half the bludgeoning damage and must make a DC ${e.getDc()} Con save or take the \n                    thunder damage too. On a fail of 10 or more, they are deafened until a long rest.<br/>\n                    <em>The behemoth inkling slams a mighty fist into the ground, crushing the poor victim who wasn't \n                    able to run away in time and sending thunderous shockwaves shaking those around.</em></p>`,activation:i.Activation.Action,mainStat:i.CoreStat.Str,title:"Slam"}).bindDamages({assignedDamages:e=>new Map([["Slam",new Map([[n.D1,e.getMod()]])]]),unassignedDamageRatios:new Map([["Slam",new Map([[n.D8,3]])],["SlamVibe",new Map([[n.D8,1]])]]),damageTypes:new Map([["Slam",i.DamageType.Bludgeoning],["SlamVibe",i.DamageType.Thunder]]),expectedDamage:110}),t=new s.InternalAttack({contentGenerator:e=>"<p>Can jump up to 60 ft as a bonus action - can grapple a target within 5 ft of landing or takeoff\n                       as part of the same action.</p>",activation:i.Activation.BonusAction,mainStat:i.CoreStat.Str,title:"Jump"}),a=new s.InternalAttack({contentGenerator:e=>"<p>Can slam once as an opportunity attack whenever an enemy comes within range.</p>",activation:i.Activation.Reaction,mainStat:i.CoreStat.Str,title:"Jump"});return new r.StatSheet({title:"Inkling (Fury)",size:i.CreatureSize.Huge,subtitle:" Inkling(Beast), Typically Chaotic Neutral",stats:new Map([[i.CoreStat.Str,new i.StatValue(24)],[i.CoreStat.Dex,new i.StatValue(13)],[i.CoreStat.Con,new i.StatValue(24)],[i.CoreStat.Int,new i.StatValue(7)],[i.CoreStat.Wis,new i.StatValue(8)],[i.CoreStat.Cha,new i.StatValue(13)]]),ac:18,acDesc:"(Natural Armor)",biologicalHp:160,attacks:[e,t,a],crValue:new i.CRValue(9),saveProficiencies:new Map([[i.CoreStat.Dex,i.ProficiencyLevel.Prof]]),skillProficiencies:new Map([[i.Skill.Athletics,i.ProficiencyLevel.Expert],[i.Skill.Acrobatics,i.ProficiencyLevel.Prof]]),speeds:new Map([[i.Speed.Walking,50]]),vulnerabilities:new Set([i.DamageType.Lightning]),resistances:new Set([i.DamageType.Cold,i.DamageType.Poison,i.DamageType.Psychic])})}function c(){const e=new s.InternalAttack({contentGenerator:e=>`<p>Upon death explodes to deal ${e.getDamageRollableStr("Boom")} to targets within 5 ft. \n                    On coming into contact with its opposite explodes to deal ${e.getDamageRollableStr("BigBoom")} \n                    instead to targets within 20ft and half damage to targets within 40ft.</p>`,activation:i.Activation.Special,mainStat:i.CoreStat.Dex,title:"Boom"}).bindDamages({assignedDamages:e=>new Map([]),unassignedDamageRatios:new Map([["Boom",new Map([[n.D20,1]])],["BigBoom",new Map([[n.D20,12]])]]),damageTypes:new Map([["Boom",i.DamageType.Force],["BigBoom",i.DamageType.Force]]),expectedDamage:270}),t=new s.InternalAttack({contentGenerator:e=>"<p> Doesn't die till both opposites explode, instead just enters a diffused state with halved\n                    movement speed. If the opposites come into contact and at least one is diffused, damage dealt\n                    is half the rolled damage.</p>",activation:i.Activation.Special,mainStat:i.CoreStat.Dex,title:"Half Lives"});return new r.StatSheet({title:"Inkling (Arrogance)",size:i.CreatureSize.Tiny,subtitle:" Inkling(Aberration), Typically Neutral Evil",stats:new Map([[i.CoreStat.Str,new i.StatValue(1)],[i.CoreStat.Dex,new i.StatValue(28)],[i.CoreStat.Con,new i.StatValue(10)],[i.CoreStat.Int,new i.StatValue(13)],[i.CoreStat.Wis,new i.StatValue(14)],[i.CoreStat.Cha,new i.StatValue(11)]]),ac:19,acDesc:"(Natural Armor)",biologicalHp:19,attacks:[e,t],crValue:new i.CRValue(5),saveProficiencies:new Map([[i.CoreStat.Int,i.ProficiencyLevel.Prof],[i.CoreStat.Wis,i.ProficiencyLevel.Prof],[i.CoreStat.Cha,i.ProficiencyLevel.Expert]]),skillProficiencies:new Map([[i.Skill.Perception,i.ProficiencyLevel.Expert]]),speeds:new Map([[i.Speed.Flying,20]]),vulnerabilities:new Set([i.DamageType.Cold]),immunities:new Set([i.DamageType.Fire,i.DamageType.Poison,i.DamageType.Psychic,i.DamageType.Lightning,i.DamageType.Thunder]),conditionImmunities:new Set([i.Conditions.Prone,i.Conditions.Blinded,i.Conditions.Frightened,i.Conditions.Charmed,i.Conditions.Grappled,i.Conditions.Exhaustion])})}function u(){const e=new s.InternalAttack({contentGenerator:e=>"<p>Once a creature enters within 60 ft of them or starts their turn in that area and can see them\n                    they must make a DC 24 Cha saving throw. On failure, they can only attack this creature until it \n                    dies. If it goes out of range, they must dash or do whatever they can to approach it as long as they\n                    are within 120ft of it. Any AoE spell must be so placed such that this creature takes the maximum \n                    amount of damage possible. They can repeat this save at the start of their turns to break out of \n                    the taunt effect, but the DC increases by 1 with each failure.</p>",activation:i.Activation.Special,mainStat:i.CoreStat.Con,title:"Taunt"});return new r.StatSheet({title:"Inkling (Sloth)",size:i.CreatureSize.Small,subtitle:" Inkling(Construct), Typically Neutral",stats:new Map([[i.CoreStat.Str,new i.StatValue(28)],[i.CoreStat.Dex,new i.StatValue(1)],[i.CoreStat.Con,new i.StatValue(28)],[i.CoreStat.Int,new i.StatValue(2)],[i.CoreStat.Wis,new i.StatValue(13)],[i.CoreStat.Cha,new i.StatValue(16)]]),ac:22,acDesc:"(Natural Armor)",biologicalHp:120,attacks:[e],crValue:new i.CRValue(7,1),saveProficiencies:new Map([[i.CoreStat.Str,i.ProficiencyLevel.Expert],[i.CoreStat.Con,i.ProficiencyLevel.Expert],[i.CoreStat.Int,i.ProficiencyLevel.Expert],[i.CoreStat.Wis,i.ProficiencyLevel.Expert],[i.CoreStat.Cha,i.ProficiencyLevel.Expert]]),skillProficiencies:new Map([[i.Skill.Athletics,i.ProficiencyLevel.Expert],[i.Skill.Perception,i.ProficiencyLevel.Expert]]),speeds:new Map([[i.Speed.Walking,50]]),vulnerabilities:new Set([i.DamageType.Force,i.DamageType.Thunder]),resistances:new Set([i.DamageType.Cold,i.DamageType.Necrotic,i.DamageType.Radiant,i.DamageType.Bludgeoning,i.DamageType.Piercing,i.DamageType.Slashing]),immunities:new Set([i.DamageType.Acid,i.DamageType.Fire,i.DamageType.Lightning,i.DamageType.Poison,i.DamageType.Psychic,i.DamageType.Bludgeoning,i.DamageType.Piercing,i.DamageType.Slashing]),conditionImmunities:new Set([i.Conditions.Exhaustion,i.Conditions.Poisoned,i.Conditions.Prone])})}t.setupMonsters=function(){const e=new Map([["inkling_insecurity",o],["inkling_impatience",l],["inkling_envy",h],["inkling_fury",d],["inkling_sloth",u],["inkling_arrogance",c]]),t=new Set;$("#beastiary").on("click",".creature:not(.disabled)",(function(){const a=$(this).data("creatureId");if($(".stat_sheet").hide(),!e.has(a))return;if(t.has(a))return void $(`#stat_sheet_${a}`).show();const n=e.get(a)();$("#sheet_zone").append((0,r.renderStatSheet)(a,n)),t.add(a)}))}},180:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.test=t.renderStatSheet=t.StatSheet=void 0;const n=a(891),i=a(269),s=a(978);class r{constructor(e,t,a,n=new Map,i=!1){this.stats=e,this.size=t,this.biologicalHp=a,this.adventurerLevels=n,this.isTough=i}get conHpPerDice(){return this.stats.get(s.CoreStat.Con).mod+(this.isTough?2:0)}getAdventurerHp(){let e=0;for(const[t,a]of this.adventurerLevels.entries())e+=((0,s.E)(s.AdventurerHitDice.get(t))+this.conHpPerDice)*a;return e}get hpDiceCount(){const e=this.biologicalHp+this.getAdventurerHp(),t=(0,s.E)(this.size)+this.conHpPerDice;return Math.round(e/t)}}t.StatSheet=class{constructor({title:e,subtitle:t,crValue:a,stats:n,size:i,biologicalHp:o,ac:l,speeds:h,attacks:d,saveProficiencies:c=new Map,skillProficiencies:u=new Map,saveBonuses:m=new Map,skillBonuses:p=new Map,acDesc:g=null,adventurerLevels:f=new Map,vulnerabilities:w=new Set,resistances:I=new Set,immunities:y=new Set,conditionImmunities:v=new Set,isTough:b=!1}){this.title=e,this.subtitle=t,this.crValue=a,this.speeds=h,this._stats=n,this._ac=l,this._saveProficiencies=c,this._saveBonuses=m,this._skillProficiencies=u,this._skillBonuses=p,this._acDesc=g,this._size=i,this._vulnerabilities=w,this._resistances=I,this._immunities=y,this._conditionImmunities=v,this.attacks=d;for(const e of this.attacks)e.bindSheet(this);this.hpBlock=new r(n,s.SizeToDice.get(i),o,f,b)}getAttacksWithActivation(e){const t=[];for(const a of this.attacks)a.activation==e&&t.push(a.createContent());return t}get pb(){return this.crValue.prof}get cr(){return this.crValue.cr}get stats(){return this._stats}get ac(){return this._ac}get acDesc(){return this._acDesc}get size(){return s.CreatureSize[this._size]}get hpDice(){return new Map([[s.SizeToDice.get(this._size),this.hpBlock.hpDiceCount],[n.D1,this.hpBlock.hpDiceCount*this.hpBlock.conHpPerDice]])}get saves(){const e=new Map;for(const[t,a]of this._saveBonuses.entries())e.set(t,(e.has(t)?e.get(t):this._stats.get(t).mod)+a);for(const[t,a]of this._saveProficiencies.entries())e.set(t,(e.has(t)?e.get(t):this._stats.get(t).mod)+this.pb.mod(a));return e}get skills(){const e=new Map;for(const[t,a]of this._skillBonuses.entries()){const n=s.SkillForStat.get(t);e.set(t,(e.has(t)?e.get(t):this._stats.get(n).mod)+a)}for(const[t,a]of this._skillProficiencies.entries()){const n=s.SkillForStat.get(t);e.set(t,(e.has(t)?e.get(t):this._stats.get(n).mod)+this.pb.mod(a))}return e}get conditionImmunities(){return this._conditionImmunities}get immunities(){return this._immunities}get resistances(){return this._resistances}get vulnerabilities(){return this._vulnerabilities}},t.renderStatSheet=function(e,t){const a=[];for(const[e,n]of t.speeds.entries())a.push(`${s.Speed[e]} ${n} ft.`);const n=[];for(const e of[s.CoreStat.Str,s.CoreStat.Dex,s.CoreStat.Con,s.CoreStat.Int,s.CoreStat.Wis,s.CoreStat.Cha]){const a=t.stats.get(e);n.push(`<td>${a.stat} ${i.NatRollable.generate(a.mod).getRollString(!0)}</td>`)}const r=[];for(const[e,a]of t.saves.entries())r.push(`${s.CoreStat[e]} ${i.NatRollable.generate(a).getRollString(!0)}`);const o=[];for(const[e,a]of t.skills.entries())o.push(`${s.Skill[e]} ${i.NatRollable.generate(a).getRollString(!0)}`);const l=[];for(const e of[s.Activation.Special,s.Activation.Action,s.Activation.BonusAction,s.Activation.Reaction,s.Activation.LegendaryAction,s.Activation.MythicAction]){const a=t.getAttacksWithActivation(e);if(0!=a.length){e!=s.Activation.Special&&l.push(`<h4 class="sheet_section_header">${s.Activation[e]}s</h4>`);for(const e of a)l.push(`<div class="sheet_content">${e}</div>`)}}const h=[];for(const e of t.vulnerabilities.values())h.push(s.DamageType[e]);const d=0==h.length?"":`<tr><td>Damage Vulnerabilities</td><td>${h.join(", ")}</td></tr>`,c=[];for(const e of t.resistances.values())c.push(s.DamageType[e]);const u=0==c.length?"":`<tr><td>Damage Resistances</td><td>${c.join(", ")}</td></tr>`,m=[];for(const e of t.immunities.values())m.push(s.DamageType[e]);const p=0==m.length?"":`<tr><td>Damage Immunities</td><td>${m.join(", ")}</td></tr>`,g=[];for(const e of t.conditionImmunities.values())g.push(s.Conditions[e]);const f=0==g.length?"":`<tr><td>Condition Immunities</td><td>${g.join(", ")}</td></tr>`;return`\n    <div class="stat_sheet" id="stat_sheet_${e}">\n        <div class="sheet_header">\n            <div class="header_zone">\n                <h3 class="sheet_title">${t.title}</h3>\n                <div class="sheet_subtitle">${t.size} ${t.subtitle}</div>\n            </div>\n            <div class="header_zone">\n                <table class="ignore_common_style">\n                    <tr><td>Armor Class</td><td>${t.ac} ${t.acDesc}</td></tr>\n                    <tr><td>Hit Points</td><td>${Math.round((0,s.E)(t.hpDice))} \n                        ${new i.Rollable(t.hpDice).getRollString(!0)}</td></tr>\n                    <tr><td>Speed</td><td>${a.join(", ")}</td></tr>\n                </table>\n            </div>\n            <div class="header_zone">\n                <table class="stats_table ignore_common_style">\n                    <tr><th>STR</th><th>DEX</th><th>CON</th><th>INT</th><th>WIS</th><th>CHA</th></tr>\n                    <tr>${n.join("")}</tr>\n                </table>\n            </div>\n            <div class="header_zone">\n                <table class="ignore_common_style">\n                    <tr><td>Saving Throws</td><td>${r.join(" ")}</td></tr>\n                    <tr><td>Proficiency Bonus</td><td>${o.join(" ")}</td></tr>\n                    <tr><td>Challenge Rating</td><td>${t.cr}</td></tr>\n                    <tr><td>Proficiency Bonus</td><td>${t.pb.mod()}</td></tr>\n                    ${d}${u}${p}${f}\n                </table>\n            </div>\n        </div>\n        ${l.join("")}\n    </div>`},t.test=function(){}},568:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setupUI=void 0;const a="selected";t.setupUI=function(){var e;(e=$("#beastiary")).find(".selectable_radio_container .selectable.radio .selected_only").hide(),e.on("click",".selectable_radio_container",(function(){$(this).children(".selectable.radio").removeClass(a),$(this).children(".selectable.radio").find(".selected_only").hide()})),e.on("click",".selectable.radio:not(.disabled)",(function(e){e.stopPropagation();const t=$(this);t.hasClass("selected")||(t.siblings(".selectable.radio").removeClass(a),t.siblings(".selectable.radio").find(".selected_only").hide(),t.addClass(a),setTimeout((()=>t.find(".selected_only").fadeIn(100)),200))}))}}},t={};function a(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,a),s.exports}(()=>{const e=a(190),t=a(447),n=a(873),i=a(264),s=a(119),r=a(506),o=a(568),l=a(269),h=a(556),d=a(180);$((()=>{(0,l.test)(),(0,h.test)(),(0,d.test)(),(0,e.setupNav)(),(0,t.setupCards)(),(0,n.setupCharacterCards)(),(0,s.setupHistory)(),(0,i.setupCountries)(),(0,h.setupNpcOpinions)(),(0,r.setupMonsters)(),(0,o.setupUI)(),(0,l.enableRolling)()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,